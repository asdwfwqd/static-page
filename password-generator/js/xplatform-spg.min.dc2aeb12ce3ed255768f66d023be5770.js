"use strict";
(function() {
  var $global, $module;
  if (Error.stackTraceLimit = 1 / 0, "undefined" != typeof window ? $global = window : "undefined" != typeof self ? $global = self : "undefined" != typeof global ? ($global = global).require = require : $global = this, void 0 === $global || void 0 === $global.Array) throw new Error("no global object found");
  "undefined" != typeof module && ($module = module);
  var $throwRuntimeError, $packages = {},
    $idCounter = 0,
    $keys = function(e) {
      return e ? Object.keys(e) : []
    },
    $flushConsole = function() {},
    $throwNilPointerError = function() {
      $throwRuntimeError("invalid memory address or nil pointer dereference")
    },
    $call = function(e, n, r) {
      return e.apply(n, r)
    },
    $makeFunc = function(e) {
      return function() {
        return $externalize(e(this, new($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))), $emptyInterface)
      }
    },
    $unused = function(e) {},
    $mapArray = function(e, n) {
      for (var r = new e.constructor(e.length), t = 0; t < e.length; t++) r[t] = n(e[t]);
      return r
    },
    $methodVal = function(e, n) {
      var r = e.$methodVals || {};
      e.$methodVals = r;
      var t = r[n];
      if (void 0 !== t) return t;
      var i = e[n];
      return t = function() {
        $stackDepthOffset--;
        try {
          return i.apply(e, arguments)
        } finally {
          $stackDepthOffset++
        }
      }, r[n] = t, t
    },
    $methodExpr = function(e, n) {
      var r = e.prototype[n];
      return void 0 === r.$expr && (r.$expr = function() {
        $stackDepthOffset--;
        try {
          return e.wrapped && (arguments[0] = new e(arguments[0])), Function.call.apply(r, arguments)
        } finally {
          $stackDepthOffset++
        }
      }), r.$expr
    },
    $ifaceMethodExprs = {},
    $ifaceMethodExpr = function(e) {
      var n = $ifaceMethodExprs["$" + e];
      return void 0 === n && (n = $ifaceMethodExprs["$" + e] = function() {
        $stackDepthOffset--;
        try {
          return Function.call.apply(arguments[0][e], arguments)
        } finally {
          $stackDepthOffset++
        }
      }), n
    },
    $subslice = function(e, n, r, t) {
      if (void 0 === r && (r = e.$length), void 0 === t && (t = e.$capacity), (n < 0 || r < n || t < r || r > e.$capacity || t > e.$capacity) && $throwRuntimeError("slice bounds out of range"), e === e.constructor.nil) return e;
      var i = new e.constructor(e.$array);
      return i.$offset = e.$offset + n, i.$length = r - n, i.$capacity = t - n, i
    },
    $substring = function(e, n, r) {
      return (n < 0 || r < n || r > e.length) && $throwRuntimeError("slice bounds out of range"), e.substring(n, r)
    },
    $sliceToArray = function(e) {
      return e.$array.constructor !== Array ? e.$array.subarray(e.$offset, e.$offset + e.$length) : e.$array.slice(e.$offset, e.$offset + e.$length)
    },
    $decodeRune = function(e, n) {
      var r = e.charCodeAt(n);
      if (r < 128) return [r, 1];
      if (r != r || r < 192) return [65533, 1];
      var t = e.charCodeAt(n + 1);
      if (t != t || t < 128 || 192 <= t) return [65533, 1];
      if (r < 224) return (a = (31 & r) << 6 | 63 & t) <= 127 ? [65533, 1] : [a, 2];
      var i = e.charCodeAt(n + 2);
      if (i != i || i < 128 || 192 <= i) return [65533, 1];
      if (r < 240) return (a = (15 & r) << 12 | (63 & t) << 6 | 63 & i) <= 2047 ? [65533, 1] : 55296 <= a && a <= 57343 ? [65533, 1] : [a, 3];
      var a, o = e.charCodeAt(n + 3);
      return o != o || o < 128 || 192 <= o ? [65533, 1] : r < 248 ? (a = (7 & r) << 18 | (63 & t) << 12 | (63 & i) << 6 | 63 & o) <= 65535 || 1114111 < a ? [65533, 1] : [a, 4] : [65533, 1]
    },
    $encodeRune = function(e) {
      return (e < 0 || e > 1114111 || 55296 <= e && e <= 57343) && (e = 65533), e <= 127 ? String.fromCharCode(e) : e <= 2047 ? String.fromCharCode(192 | e >> 6, 128 | 63 & e) : e <= 65535 ? String.fromCharCode(224 | e >> 12, 128 | e >> 6 & 63, 128 | 63 & e) : String.fromCharCode(240 | e >> 18, 128 | e >> 12 & 63, 128 | e >> 6 & 63, 128 | 63 & e)
    },
    $stringToBytes = function(e) {
      for (var n = new Uint8Array(e.length), r = 0; r < e.length; r++) n[r] = e.charCodeAt(r);
      return n
    },
    $bytesToString = function(e) {
      if (0 === e.$length) return "";
      for (var n = "", r = 0; r < e.$length; r += 1e4) n += String.fromCharCode.apply(void 0, e.$array.subarray(e.$offset + r, e.$offset + Math.min(e.$length, r + 1e4)));
      return n
    },
    $stringToRunes = function(e) {
      for (var n, r = new Int32Array(e.length), t = 0, i = 0; i < e.length; i += n[1], t++) n = $decodeRune(e, i), r[t] = n[0];
      return r.subarray(0, t)
    },
    $runesToString = function(e) {
      if (0 === e.$length) return "";
      for (var n = "", r = 0; r < e.$length; r++) n += $encodeRune(e.$array[e.$offset + r]);
      return n
    },
    $copyString = function(e, n) {
      for (var r = Math.min(n.length, e.$length), t = 0; t < r; t++) e.$array[e.$offset + t] = n.charCodeAt(t);
      return r
    },
    $copySlice = function(e, n) {
      var r = Math.min(n.$length, e.$length);
      return $copyArray(e.$array, n.$array, e.$offset, n.$offset, r, e.constructor.elem), r
    },
    $copyArray = function(e, n, r, t, i, a) {
      if (0 !== i && (e !== n || r !== t))
        if (n.subarray) e.set(n.subarray(t, t + i), r);
        else {
          switch (a.kind) {
            case $kindArray:
            case $kindStruct:
              if (e === n && r > t) {
                for (var o = i - 1; o >= 0; o--) a.copy(e[r + o], n[t + o]);
                return
              }
              for (o = 0; o < i; o++) a.copy(e[r + o], n[t + o]);
              return
          }
          if (e === n && r > t)
            for (o = i - 1; o >= 0; o--) e[r + o] = n[t + o];
          else
            for (o = 0; o < i; o++) e[r + o] = n[t + o]
        }
    },
    $clone = function(e, n) {
      var r = n.zero();
      return n.copy(r, e), r
    },
    $pointerOfStructConversion = function(e, n) {
      void 0 === e.$proxies && (e.$proxies = {}, e.$proxies[e.constructor.string] = e);
      var r = e.$proxies[n.string];
      if (void 0 === r) {
        for (var t = {}, i = 0; i < n.elem.fields.length; i++) ! function(n) {
          t[n] = {
            get: function() {
              return e[n]
            },
            set: function(r) {
              e[n] = r
            }
          }
        }(n.elem.fields[i].prop);
        (r = Object.create(n.prototype, t)).$val = r, e.$proxies[n.string] = r, r.$proxies = e.$proxies
      }
      return r
    },
    $append = function(e) {
      return $internalAppend(e, arguments, 1, arguments.length - 1)
    },
    $appendSlice = function(e, n) {
      if (n.constructor === String) {
        var r = $stringToBytes(n);
        return $internalAppend(e, r, 0, r.length)
      }
      return $internalAppend(e, n.$array, n.$offset, n.$length)
    },
    $internalAppend = function(e, n, r, t) {
      if (0 === t) return e;
      var i = e.$array,
        a = e.$offset,
        o = e.$length + t,
        $ = e.$capacity;
      if (o > $)
        if (a = 0, $ = Math.max(o, e.$capacity < 1024 ? 2 * e.$capacity : Math.floor(5 * e.$capacity / 4)), e.$array.constructor === Array) {
          (i = e.$array.slice(e.$offset, e.$offset + e.$length)).length = $;
          for (var c = e.constructor.elem.zero, u = e.$length; u < $; u++) i[u] = c()
        } else(i = new e.$array.constructor($)).set(e.$array.subarray(e.$offset, e.$offset + e.$length));
      $copyArray(i, n, a + e.$length, r, t, e.constructor.elem);
      var l = new e.constructor(i);
      return l.$offset = a, l.$length = o, l.$capacity = $, l
    },
    $equal = function(e, n, r) {
      if (r === $jsObjectPtr) return e === n;
      switch (r.kind) {
        case $kindComplex64:
        case $kindComplex128:
          return e.$real === n.$real && e.$imag === n.$imag;
        case $kindInt64:
        case $kindUint64:
          return e.$high === n.$high && e.$low === n.$low;
        case $kindArray:
          if (e.length !== n.length) return !1;
          for (var t = 0; t < e.length; t++)
            if (!$equal(e[t], n[t], r.elem)) return !1;
          return !0;
        case $kindStruct:
          for (t = 0; t < r.fields.length; t++) {
            var i = r.fields[t];
            if (!$equal(e[i.prop], n[i.prop], i.typ)) return !1
          }
          return !0;
        case $kindInterface:
          return $interfaceIsEqual(e, n);
        default:
          return e === n
      }
    },
    $interfaceIsEqual = function(e, n) {
      return e === $ifaceNil || n === $ifaceNil ? e === n : e.constructor === n.constructor && (e.constructor === $jsObjectPtr ? e.object === n.object : (e.constructor.comparable || $throwRuntimeError("comparing uncomparable type " + e.constructor.string), $equal(e.$val, n.$val, e.constructor)))
    },
    $min = Math.min,
    $mod = function(e, n) {
      return e % n
    },
    $parseInt = parseInt,
    $parseFloat = function(e) {
      return void 0 !== e && null !== e && e.constructor === Number ? e : parseFloat(e)
    },
    $froundBuf = new Float32Array(1),
    $fround = Math.fround || function(e) {
      return $froundBuf[0] = e, $froundBuf[0]
    },
    $imul = Math.imul || function(e, n) {
      var r = 65535 & e,
        t = 65535 & n;
      return r * t + ((e >>> 16 & 65535) * t + r * (n >>> 16 & 65535) << 16 >>> 0) >> 0
    },
    $floatKey = function(e) {
      return e != e ? "NaN$" + ++$idCounter : String(e)
    },
    $flatten64 = function(e) {
      return 4294967296 * e.$high + e.$low
    },
    $shiftLeft64 = function(e, n) {
      return 0 === n ? e : n < 32 ? new e.constructor(e.$high << n | e.$low >>> 32 - n, e.$low << n >>> 0) : n < 64 ? new e.constructor(e.$low << n - 32, 0) : new e.constructor(0, 0)
    },
    $shiftRightInt64 = function(e, n) {
      return 0 === n ? e : n < 32 ? new e.constructor(e.$high >> n, (e.$low >>> n | e.$high << 32 - n) >>> 0) : n < 64 ? new e.constructor(e.$high >> 31, e.$high >> n - 32 >>> 0) : e.$high < 0 ? new e.constructor(-1, 4294967295) : new e.constructor(0, 0)
    },
    $shiftRightUint64 = function(e, n) {
      return 0 === n ? e : n < 32 ? new e.constructor(e.$high >>> n, (e.$low >>> n | e.$high << 32 - n) >>> 0) : n < 64 ? new e.constructor(0, e.$high >>> n - 32) : new e.constructor(0, 0)
    },
    $mul64 = function(e, n) {
      var r = 0,
        t = 0;
      0 != (1 & n.$low) && (r = e.$high, t = e.$low);
      for (var i = 1; i < 32; i++) 0 != (n.$low & 1 << i) && (r += e.$high << i | e.$low >>> 32 - i, t += e.$low << i >>> 0);
      for (i = 0; i < 32; i++) 0 != (n.$high & 1 << i) && (r += e.$low << i);
      return new e.constructor(r, t)
    },
    $div64 = function(e, n, r) {
      0 === n.$high && 0 === n.$low && $throwRuntimeError("integer divide by zero");
      var t = 1,
        i = 1,
        a = e.$high,
        o = e.$low;
      a < 0 && (t = -1, i = -1, a = -a, 0 !== o && (a--, o = 4294967296 - o));
      var $ = n.$high,
        c = n.$low;
      n.$high < 0 && (t *= -1, $ = -$, 0 !== c && ($--, c = 4294967296 - c));
      for (var u = 0, l = 0, s = 0; $ < 2147483648 && (a > $ || a === $ && o > c);) $ = ($ << 1 | c >>> 31) >>> 0, c = c << 1 >>> 0, s++;
      for (var f = 0; f <= s; f++) u = u << 1 | l >>> 31, l = l << 1 >>> 0, (a > $ || a === $ && o >= c) && (a -= $, (o -= c) < 0 && (a--, o += 4294967296), 4294967296 === ++l && (u++, l = 0)), c = (c >>> 1 | $ << 31) >>> 0, $ >>>= 1;
      return r ? new e.constructor(a * i, o * i) : new e.constructor(u * t, l * t)
    },
    $divComplex = function(e, n) {
      var r = e.$real === 1 / 0 || e.$real === -1 / 0 || e.$imag === 1 / 0 || e.$imag === -1 / 0,
        t = n.$real === 1 / 0 || n.$real === -1 / 0 || n.$imag === 1 / 0 || n.$imag === -1 / 0,
        i = !r && (e.$real != e.$real || e.$imag != e.$imag),
        a = !t && (n.$real != n.$real || n.$imag != n.$imag);
      if (i || a) return new e.constructor(NaN, NaN);
      if (r && !t) return new e.constructor(1 / 0, 1 / 0);
      if (!r && t) return new e.constructor(0, 0);
      if (0 === n.$real && 0 === n.$imag) return 0 === e.$real && 0 === e.$imag ? new e.constructor(NaN, NaN) : new e.constructor(1 / 0, 1 / 0);
      if (Math.abs(n.$real) <= Math.abs(n.$imag)) {
        var o = n.$real / n.$imag,
          $ = n.$real * o + n.$imag;
        return new e.constructor((e.$real * o + e.$imag) / $, (e.$imag * o - e.$real) / $)
      }
      o = n.$imag / n.$real, $ = n.$imag * o + n.$real;
      return new e.constructor((e.$imag * o + e.$real) / $, (e.$imag - e.$real * o) / $)
    },
    $kindBool = 1,
    $kindInt = 2,
    $kindInt8 = 3,
    $kindInt16 = 4,
    $kindInt32 = 5,
    $kindInt64 = 6,
    $kindUint = 7,
    $kindUint8 = 8,
    $kindUint16 = 9,
    $kindUint32 = 10,
    $kindUint64 = 11,
    $kindUintptr = 12,
    $kindFloat32 = 13,
    $kindFloat64 = 14,
    $kindComplex64 = 15,
    $kindComplex128 = 16,
    $kindArray = 17,
    $kindChan = 18,
    $kindFunc = 19,
    $kindInterface = 20,
    $kindMap = 21,
    $kindPtr = 22,
    $kindSlice = 23,
    $kindString = 24,
    $kindStruct = 25,
    $kindUnsafePointer = 26,
    $methodSynthesizers = [],
    $addMethodSynthesizer = function(e) {
      null !== $methodSynthesizers ? $methodSynthesizers.push(e) : e()
    },
    $synthesizeMethods = function() {
      $methodSynthesizers.forEach(function(e) {
        e()
      }), $methodSynthesizers = null
    },
    $ifaceKeyFor = function(e) {
      if (e === $ifaceNil) return "nil";
      var n = e.constructor;
      return n.string + "$" + n.keyFor(e.$val)
    },
    $identity = function(e) {
      return e
    },
    $typeIDCounter = 0,
    $idKey = function(e) {
      return void 0 === e.$id && ($idCounter++, e.$id = $idCounter), String(e.$id)
    },
    $newType = function(e, n, r, t, i, a, o) {
      var $;
      switch (n) {
        case $kindBool:
        case $kindInt:
        case $kindInt8:
        case $kindInt16:
        case $kindInt32:
        case $kindUint:
        case $kindUint8:
        case $kindUint16:
        case $kindUint32:
        case $kindUintptr:
        case $kindUnsafePointer:
          ($ = function(e) {
            this.$val = e
          }).wrapped = !0, $.keyFor = $identity;
          break;
        case $kindString:
          ($ = function(e) {
            this.$val = e
          }).wrapped = !0, $.keyFor = function(e) {
            return "$" + e
          };
          break;
        case $kindFloat32:
        case $kindFloat64:
          ($ = function(e) {
            this.$val = e
          }).wrapped = !0, $.keyFor = function(e) {
            return $floatKey(e)
          };
          break;
        case $kindInt64:
          ($ = function(e, n) {
            this.$high = e + Math.floor(Math.ceil(n) / 4294967296) >> 0, this.$low = n >>> 0, this.$val = this
          }).keyFor = function(e) {
            return e.$high + "$" + e.$low
          };
          break;
        case $kindUint64:
          ($ = function(e, n) {
            this.$high = e + Math.floor(Math.ceil(n) / 4294967296) >>> 0, this.$low = n >>> 0, this.$val = this
          }).keyFor = function(e) {
            return e.$high + "$" + e.$low
          };
          break;
        case $kindComplex64:
          ($ = function(e, n) {
            this.$real = $fround(e), this.$imag = $fround(n), this.$val = this
          }).keyFor = function(e) {
            return e.$real + "$" + e.$imag
          };
          break;
        case $kindComplex128:
          ($ = function(e, n) {
            this.$real = e, this.$imag = n, this.$val = this
          }).keyFor = function(e) {
            return e.$real + "$" + e.$imag
          };
          break;
        case $kindArray:
          ($ = function(e) {
            this.$val = e
          }).wrapped = !0, $.ptr = $newType(4, $kindPtr, "*" + r, !1, "", !1, function(e) {
            this.$get = function() {
              return e
            }, this.$set = function(e) {
              $.copy(this, e)
            }, this.$val = e
          }), $.init = function(e, n) {
            $.elem = e, $.len = n, $.comparable = e.comparable, $.keyFor = function(n) {
              return Array.prototype.join.call($mapArray(n, function(n) {
                return String(e.keyFor(n)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$")
              }), "$")
            }, $.copy = function(n, r) {
              $copyArray(n, r, 0, 0, r.length, e)
            }, $.ptr.init($), Object.defineProperty($.ptr.nil, "nilCheck", {
              get: $throwNilPointerError
            })
          };
          break;
        case $kindChan:
          ($ = function(e) {
            this.$val = e
          }).wrapped = !0, $.keyFor = $idKey, $.init = function(e, n, r) {
            $.elem = e, $.sendOnly = n, $.recvOnly = r
          };
          break;
        case $kindFunc:
          ($ = function(e) {
            this.$val = e
          }).wrapped = !0, $.init = function(e, n, r) {
            $.params = e, $.results = n, $.variadic = r, $.comparable = !1
          };
          break;
        case $kindInterface:
          ($ = {
            implementedBy: {},
            missingMethodFor: {}
          }).keyFor = $ifaceKeyFor, $.init = function(e) {
            $.methods = e, e.forEach(function(e) {
              $ifaceNil[e.prop] = $throwNilPointerError
            })
          };
          break;
        case $kindMap:
          ($ = function(e) {
            this.$val = e
          }).wrapped = !0, $.init = function(e, n) {
            $.key = e, $.elem = n, $.comparable = !1
          };
          break;
        case $kindPtr:
          ($ = o || function(e, n, r) {
            this.$get = e, this.$set = n, this.$target = r, this.$val = this
          }).keyFor = $idKey, $.init = function(e) {
            $.elem = e, $.wrapped = e.kind === $kindArray, $.nil = new $($throwNilPointerError, $throwNilPointerError)
          };
          break;
        case $kindSlice:
          ($ = function(e) {
            e.constructor !== $.nativeArray && (e = new $.nativeArray(e)), this.$array = e, this.$offset = 0, this.$length = e.length, this.$capacity = e.length, this.$val = this
          }).init = function(e) {
            $.elem = e, $.comparable = !1, $.nativeArray = $nativeArray(e.kind), $.nil = new $([])
          };
          break;
        case $kindStruct:
          ($ = function(e) {
            this.$val = e
          }).wrapped = !0, $.ptr = $newType(4, $kindPtr, "*" + r, !1, i, a, o), $.ptr.elem = $, $.ptr.prototype.$get = function() {
            return this
          }, $.ptr.prototype.$set = function(e) {
            $.copy(this, e)
          }, $.init = function(e, n) {
            $.pkgPath = e, $.fields = n, n.forEach(function(e) {
              e.typ.comparable || ($.comparable = !1)
            }), $.keyFor = function(e) {
              var r = e.$val;
              return $mapArray(n, function(e) {
                return String(e.typ.keyFor(r[e.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$")
              }).join("$")
            }, $.copy = function(e, r) {
              for (var t = 0; t < n.length; t++) {
                var i = n[t];
                switch (i.typ.kind) {
                  case $kindArray:
                  case $kindStruct:
                    i.typ.copy(e[i.prop], r[i.prop]);
                    continue;
                  default:
                    e[i.prop] = r[i.prop];
                    continue
                }
              }
            };
            var r = {};
            n.forEach(function(e) {
              r[e.prop] = {
                get: $throwNilPointerError,
                set: $throwNilPointerError
              }
            }), $.ptr.nil = Object.create(o.prototype, r), $.ptr.nil.$val = $.ptr.nil, $addMethodSynthesizer(function() {
              var e = function(e, n, r) {
                void 0 === e.prototype[n.prop] && (e.prototype[n.prop] = function() {
                  var e = this.$val[r.prop];
                  return r.typ === $jsObjectPtr && (e = new $jsObjectPtr(e)), void 0 === e.$val && (e = new r.typ(e)), e[n.prop].apply(e, arguments)
                })
              };
              n.forEach(function(n) {
                n.embedded && ($methodSet(n.typ).forEach(function(r) {
                  e($, r, n), e($.ptr, r, n)
                }), $methodSet($ptrType(n.typ)).forEach(function(r) {
                  e($.ptr, r, n)
                }))
              })
            })
          };
          break;
        default:
          $panic(new $String("invalid kind: " + n))
      }
      switch (n) {
        case $kindBool:
        case $kindMap:
          $.zero = function() {
            return !1
          };
          break;
        case $kindInt:
        case $kindInt8:
        case $kindInt16:
        case $kindInt32:
        case $kindUint:
        case $kindUint8:
        case $kindUint16:
        case $kindUint32:
        case $kindUintptr:
        case $kindUnsafePointer:
        case $kindFloat32:
        case $kindFloat64:
          $.zero = function() {
            return 0
          };
          break;
        case $kindString:
          $.zero = function() {
            return ""
          };
          break;
        case $kindInt64:
        case $kindUint64:
        case $kindComplex64:
        case $kindComplex128:
          var c = new $(0, 0);
          $.zero = function() {
            return c
          };
          break;
        case $kindPtr:
        case $kindSlice:
          $.zero = function() {
            return $.nil
          };
          break;
        case $kindChan:
          $.zero = function() {
            return $chanNil
          };
          break;
        case $kindFunc:
          $.zero = function() {
            return $throwNilPointerError
          };
          break;
        case $kindInterface:
          $.zero = function() {
            return $ifaceNil
          };
          break;
        case $kindArray:
          $.zero = function() {
            var e = $nativeArray($.elem.kind);
            if (e !== Array) return new e($.len);
            for (var n = new Array($.len), r = 0; r < $.len; r++) n[r] = $.elem.zero();
            return n
          };
          break;
        case $kindStruct:
          $.zero = function() {
            return new $.ptr
          };
          break;
        default:
          $panic(new $String("invalid kind: " + n))
      }
      return $.id = $typeIDCounter, $typeIDCounter++, $.size = e, $.kind = n, $.string = r, $.named = t, $.pkg = i, $.exported = a, $.methods = [], $.methodSetCache = null, $.comparable = !0, $
    },
    $methodSet = function(e) {
      if (null !== e.methodSetCache) return e.methodSetCache;
      var n = {},
        r = e.kind === $kindPtr;
      if (r && e.elem.kind === $kindInterface) return e.methodSetCache = [], [];
      for (var t = [{
          typ: r ? e.elem : e,
          indirect: r
        }], i = {}; t.length > 0;) {
        var a = [],
          o = [];
        t.forEach(function(e) {
          if (!i[e.typ.string]) switch (i[e.typ.string] = !0, e.typ.named && (o = o.concat(e.typ.methods), e.indirect && (o = o.concat($ptrType(e.typ).methods))), e.typ.kind) {
            case $kindStruct:
              e.typ.fields.forEach(function(n) {
                if (n.embedded) {
                  var r = n.typ,
                    t = r.kind === $kindPtr;
                  a.push({
                    typ: t ? r.elem : r,
                    indirect: e.indirect || t
                  })
                }
              });
              break;
            case $kindInterface:
              o = o.concat(e.typ.methods)
          }
        }), o.forEach(function(e) {
          void 0 === n[e.name] && (n[e.name] = e)
        }), t = a
      }
      return e.methodSetCache = [], Object.keys(n).sort().forEach(function(r) {
        e.methodSetCache.push(n[r])
      }), e.methodSetCache
    },
    $Bool = $newType(1, $kindBool, "bool", !0, "", !1, null),
    $Int = $newType(4, $kindInt, "int", !0, "", !1, null),
    $Int8 = $newType(1, $kindInt8, "int8", !0, "", !1, null),
    $Int16 = $newType(2, $kindInt16, "int16", !0, "", !1, null),
    $Int32 = $newType(4, $kindInt32, "int32", !0, "", !1, null),
    $Int64 = $newType(8, $kindInt64, "int64", !0, "", !1, null),
    $Uint = $newType(4, $kindUint, "uint", !0, "", !1, null),
    $Uint8 = $newType(1, $kindUint8, "uint8", !0, "", !1, null),
    $Uint16 = $newType(2, $kindUint16, "uint16", !0, "", !1, null),
    $Uint32 = $newType(4, $kindUint32, "uint32", !0, "", !1, null),
    $Uint64 = $newType(8, $kindUint64, "uint64", !0, "", !1, null),
    $Uintptr = $newType(4, $kindUintptr, "uintptr", !0, "", !1, null),
    $Float32 = $newType(4, $kindFloat32, "float32", !0, "", !1, null),
    $Float64 = $newType(8, $kindFloat64, "float64", !0, "", !1, null),
    $Complex64 = $newType(8, $kindComplex64, "complex64", !0, "", !1, null),
    $Complex128 = $newType(16, $kindComplex128, "complex128", !0, "", !1, null),
    $String = $newType(8, $kindString, "string", !0, "", !1, null),
    $UnsafePointer = $newType(4, $kindUnsafePointer, "unsafe.Pointer", !0, "", !1, null),
    $nativeArray = function(e) {
      switch (e) {
        case $kindInt:
          return Int32Array;
        case $kindInt8:
          return Int8Array;
        case $kindInt16:
          return Int16Array;
        case $kindInt32:
          return Int32Array;
        case $kindUint:
          return Uint32Array;
        case $kindUint8:
          return Uint8Array;
        case $kindUint16:
          return Uint16Array;
        case $kindUint32:
        case $kindUintptr:
          return Uint32Array;
        case $kindFloat32:
          return Float32Array;
        case $kindFloat64:
          return Float64Array;
        default:
          return Array
      }
    },
    $toNativeArray = function(e, n) {
      var r = $nativeArray(e);
      return r === Array ? n : new r(n)
    },
    $arrayTypes = {},
    $arrayType = function(e, n) {
      var r = e.id + "$" + n,
        t = $arrayTypes[r];
      return void 0 === t && (t = $newType(12, $kindArray, "[" + n + "]" + e.string, !1, "", !1, null), $arrayTypes[r] = t, t.init(e, n)), t
    },
    $chanType = function(e, n, r) {
      var t = (r ? "<-" : "") + "chan" + (n ? "<- " : " ") + e.string,
        i = n ? "SendChan" : r ? "RecvChan" : "Chan",
        a = e[i];
      return void 0 === a && (a = $newType(4, $kindChan, t, !1, "", !1, null), e[i] = a, a.init(e, n, r)), a
    },
    $Chan = function(e, n) {
      (n < 0 || n > 2147483647) && $throwRuntimeError("makechan: size out of range"), this.$elem = e, this.$capacity = n, this.$buffer = [], this.$sendQueue = [], this.$recvQueue = [], this.$closed = !1
    },
    $chanNil = new $Chan(null, 0);
  $chanNil.$sendQueue = $chanNil.$recvQueue = {
    length: 0,
    push: function() {},
    shift: function() {},
    indexOf: function() {
      return -1
    }
  };
  var $funcTypes = {},
    $funcType = function(e, n, r) {
      var t = $mapArray(e, function(e) {
          return e.id
        }).join(",") + "$" + $mapArray(n, function(e) {
          return e.id
        }).join(",") + "$" + r,
        i = $funcTypes[t];
      if (void 0 === i) {
        var a = $mapArray(e, function(e) {
          return e.string
        });
        r && (a[a.length - 1] = "..." + a[a.length - 1].substr(2));
        var o = "func(" + a.join(", ") + ")";
        1 === n.length ? o += " " + n[0].string : n.length > 1 && (o += " (" + $mapArray(n, function(e) {
          return e.string
        }).join(", ") + ")"), i = $newType(4, $kindFunc, o, !1, "", !1, null), $funcTypes[t] = i, i.init(e, n, r)
      }
      return i
    },
    $interfaceTypes = {},
    $interfaceType = function(e) {
      var n = $mapArray(e, function(e) {
          return e.pkg + "," + e.name + "," + e.typ.id
        }).join("$"),
        r = $interfaceTypes[n];
      if (void 0 === r) {
        var t = "interface {}";
        0 !== e.length && (t = "interface { " + $mapArray(e, function(e) {
          return ("" !== e.pkg ? e.pkg + "." : "") + e.name + e.typ.string.substr(4)
        }).join("; ") + " }"), r = $newType(8, $kindInterface, t, !1, "", !1, null), $interfaceTypes[n] = r, r.init(e)
      }
      return r
    },
    $emptyInterface = $interfaceType([]),
    $ifaceNil = {},
    $error = $newType(8, $kindInterface, "error", !0, "", !1, null);
  $error.init([{
    prop: "Error",
    name: "Error",
    pkg: "",
    typ: $funcType([], [$String], !1)
  }]);
  var $panicValue, $jsObjectPtr, $jsErrorPtr, $mapTypes = {},
    $mapType = function(e, n) {
      var r = e.id + "$" + n.id,
        t = $mapTypes[r];
      return void 0 === t && (t = $newType(4, $kindMap, "map[" + e.string + "]" + n.string, !1, "", !1, null), $mapTypes[r] = t, t.init(e, n)), t
    },
    $makeMap = function(e, n) {
      for (var r = {}, t = 0; t < n.length; t++) {
        var i = n[t];
        r[e(i.k)] = i
      }
      return r
    },
    $ptrType = function(e) {
      var n = e.ptr;
      return void 0 === n && (n = $newType(4, $kindPtr, "*" + e.string, !1, "", e.exported, null), e.ptr = n, n.init(e)), n
    },
    $newDataPointer = function(e, n) {
      return n.elem.kind === $kindStruct ? e : new n(function() {
        return e
      }, function(n) {
        e = n
      })
    },
    $indexPtr = function(e, n, r) {
      return e.$ptr = e.$ptr || {}, e.$ptr[n] || (e.$ptr[n] = new r(function() {
        return e[n]
      }, function(r) {
        e[n] = r
      }))
    },
    $sliceType = function(e) {
      var n = e.slice;
      return void 0 === n && (n = $newType(12, $kindSlice, "[]" + e.string, !1, "", !1, null), e.slice = n, n.init(e)), n
    },
    $makeSlice = function(e, n, r) {
      r = r || n, (n < 0 || n > 2147483647) && $throwRuntimeError("makeslice: len out of range"), (r < 0 || r < n || r > 2147483647) && $throwRuntimeError("makeslice: cap out of range");
      var t = new e.nativeArray(r);
      if (e.nativeArray === Array)
        for (var i = 0; i < r; i++) t[i] = e.elem.zero();
      var a = new e(t);
      return a.$length = n, a
    },
    $structTypes = {},
    $structType = function(e, n) {
      var r = $mapArray(n, function(e) {
          return e.name + "," + e.typ.id + "," + e.tag
        }).join("$"),
        t = $structTypes[r];
      if (void 0 === t) {
        var i = "struct { " + $mapArray(n, function(e) {
          return e.name + " " + e.typ.string + ("" !== e.tag ? ' "' + e.tag.replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"' : "")
        }).join("; ") + " }";
        0 === n.length && (i = "struct {}"), t = $newType(0, $kindStruct, i, !1, "", !1, function() {
          this.$val = this;
          for (var e = 0; e < n.length; e++) {
            var r = n[e],
              t = arguments[e];
            this[r.prop] = void 0 !== t ? t : r.typ.zero()
          }
        }), $structTypes[r] = t, t.init(e, n)
      }
      return t
    },
    $assertType = function(e, n, r) {
      var t, i = n.kind === $kindInterface,
        a = "";
      if (e === $ifaceNil) t = !1;
      else if (i) {
        var o = e.constructor.string;
        if (void 0 === (t = n.implementedBy[o])) {
          t = !0;
          for (var $ = $methodSet(e.constructor), c = n.methods, u = 0; u < c.length; u++) {
            for (var l = c[u], s = !1, f = 0; f < $.length; f++) {
              var d = $[f];
              if (d.name === l.name && d.pkg === l.pkg && d.typ === l.typ) {
                s = !0;
                break
              }
            }
            if (!s) {
              t = !1, n.missingMethodFor[o] = l.name;
              break
            }
          }
          n.implementedBy[o] = t
        }
        t || (a = n.missingMethodFor[o])
      } else t = e.constructor === n;
      if (!t) {
        if (r) return [n.zero(), !1];
        $panic(new $packages.runtime.TypeAssertionError.ptr($packages.runtime._type.ptr.nil, e === $ifaceNil ? $packages.runtime._type.ptr.nil : new $packages.runtime._type.ptr(e.constructor.string), new $packages.runtime._type.ptr(n.string), a))
      }
      return i || (e = e.$val), n === $jsObjectPtr && (e = e.object), r ? [e, !0] : e
    },
    $stackDepthOffset = 0,
    $getStackDepth = function() {
      var e = new Error;
      if (void 0 !== e.stack) return $stackDepthOffset + e.stack.split("\n").length
    },
    $panicStackDepth = null,
    $callDeferred = function(e, n, r) {
      if (!r && null !== e && e.index >= $curGoroutine.deferStack.length) throw n;
      if (null !== n) {
        var t = null;
        try {
          $curGoroutine.deferStack.push(e), $panic(new $jsErrorPtr(n))
        } catch (e) {
          t = e
        }
        return $curGoroutine.deferStack.pop(), void $callDeferred(e, t)
      }
      if (!$curGoroutine.asleep) {
        $stackDepthOffset--;
        var i = $panicStackDepth,
          a = $panicValue,
          o = $curGoroutine.panicStack.pop();
        void 0 !== o && ($panicStackDepth = $getStackDepth(), $panicValue = o);
        try {
          for (;;) {
            if (null === e && void 0 === (e = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1])) {
              if ($panicStackDepth = null, o.Object instanceof Error) throw o.Object;
              var $;
              throw $ = o.constructor === $String ? o.$val : void 0 !== o.Error ? o.Error() : void 0 !== o.String ? o.String() : o, new Error($)
            }
            var c = e.pop();
            if (void 0 === c) {
              if ($curGoroutine.deferStack.pop(), void 0 !== o) {
                e = null;
                continue
              }
              return
            }
            var u = c[0].apply(c[2], c[1]);
            if (u && void 0 !== u.$blk) {
              if (e.push([u.$blk, [], u]), r) throw null;
              return
            }
            if (void 0 !== o && null === $panicStackDepth) throw null
          }
        } finally {
          void 0 !== o && (null !== $panicStackDepth && $curGoroutine.panicStack.push(o), $panicStackDepth = i, $panicValue = a), $stackDepthOffset++
        }
      }
    },
    $panic = function(e) {
      $curGoroutine.panicStack.push(e), $callDeferred(null, null, !0)
    },
    $recover = function() {
      return null === $panicStackDepth || void 0 !== $panicStackDepth && $panicStackDepth !== $getStackDepth() - 2 ? $ifaceNil : ($panicStackDepth = null, $panicValue)
    },
    $throw = function(e) {
      throw e
    },
    $noGoroutine = {
      asleep: !1,
      exit: !1,
      deferStack: [],
      panicStack: []
    },
    $curGoroutine = $noGoroutine,
    $totalGoroutines = 0,
    $awakeGoroutines = 0,
    $checkForDeadlock = !0,
    $mainFinished = !1,
    $go = function(e, n) {
      $totalGoroutines++, $awakeGoroutines++;
      var r = function() {
        try {
          $curGoroutine = r;
          var t = e.apply(void 0, n);
          if (t && void 0 !== t.$blk) return e = function() {
            return t.$blk()
          }, void(n = []);
          r.exit = !0
        } catch (e) {
          if (!r.exit) throw e
        } finally {
          $curGoroutine = $noGoroutine, r.exit && ($totalGoroutines--, r.asleep = !0), r.asleep && ($awakeGoroutines--, !$mainFinished && 0 === $awakeGoroutines && $checkForDeadlock && (console.error("fatal error: all goroutines are asleep - deadlock!"), void 0 !== $global.process && $global.process.exit(2)))
        }
      };
      r.asleep = !1, r.exit = !1, r.deferStack = [], r.panicStack = [], $schedule(r)
    },
    $scheduled = [],
    $runScheduled = function() {
      try {
        for (var e; void 0 !== (e = $scheduled.shift());) e()
      } finally {
        $scheduled.length > 0 && setTimeout($runScheduled, 0)
      }
    },
    $schedule = function(e) {
      e.asleep && (e.asleep = !1, $awakeGoroutines++), $scheduled.push(e), $curGoroutine === $noGoroutine && $runScheduled()
    },
    $setTimeout = function(e, n) {
      return $awakeGoroutines++, setTimeout(function() {
        $awakeGoroutines--, e()
      }, n)
    },
    $block = function() {
      $curGoroutine === $noGoroutine && $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine"), $curGoroutine.asleep = !0
    },
    $send = function(e, n) {
      e.$closed && $throwRuntimeError("send on closed channel");
      var r = e.$recvQueue.shift();
      if (void 0 === r) {
        if (!(e.$buffer.length < e.$capacity)) {
          var t, i = $curGoroutine;
          return e.$sendQueue.push(function(e) {
            return t = e, $schedule(i), n
          }), $block(), {
            $blk: function() {
              t && $throwRuntimeError("send on closed channel")
            }
          }
        }
        e.$buffer.push(n)
      } else r([n, !0])
    },
    $recv = function(e) {
      var n = e.$sendQueue.shift();
      void 0 !== n && e.$buffer.push(n(!1));
      var r = e.$buffer.shift();
      if (void 0 !== r) return [r, !0];
      if (e.$closed) return [e.$elem.zero(), !1];
      var t = $curGoroutine,
        i = {
          $blk: function() {
            return this.value
          }
        };
      return e.$recvQueue.push(function(e) {
        i.value = e, $schedule(t)
      }), $block(), i
    },
    $close = function(e) {
      for (e.$closed && $throwRuntimeError("close of closed channel"), e.$closed = !0;;) {
        var n = e.$sendQueue.shift();
        if (void 0 === n) break;
        n(!0)
      }
      for (;;) {
        var r = e.$recvQueue.shift();
        if (void 0 === r) break;
        r([e.$elem.zero(), !1])
      }
    },
    $select = function(e) {
      for (var n = [], r = -1, t = 0; t < e.length; t++) {
        var i, a = (i = e[t])[0];
        switch (i.length) {
          case 0:
            r = t;
            break;
          case 1:
            (0 !== a.$sendQueue.length || 0 !== a.$buffer.length || a.$closed) && n.push(t);
            break;
          case 2:
            a.$closed && $throwRuntimeError("send on closed channel"), (0 !== a.$recvQueue.length || a.$buffer.length < a.$capacity) && n.push(t)
        }
      }
      if (0 !== n.length && (r = n[Math.floor(Math.random() * n.length)]), -1 !== r) switch ((i = e[r]).length) {
        case 0:
          return [r];
        case 1:
          return [r, $recv(i[0])];
        case 2:
          return $send(i[0], i[1]), [r]
      }
      var o = [],
        $ = $curGoroutine,
        c = {
          $blk: function() {
            return this.selection
          }
        },
        u = function() {
          for (var e = 0; e < o.length; e++) {
            var n = o[e],
              r = n[0],
              t = r.indexOf(n[1]); - 1 !== t && r.splice(t, 1)
          }
        };
      for (t = 0; t < e.length; t++) ! function(n) {
        var r = e[n];
        switch (r.length) {
          case 1:
            var t = function(e) {
              c.selection = [n, e], u(), $schedule($)
            };
            o.push([r[0].$recvQueue, t]), r[0].$recvQueue.push(t);
            break;
          case 2:
            t = function() {
              return r[0].$closed && $throwRuntimeError("send on closed channel"), c.selection = [n], u(), $schedule($), r[1]
            };
            o.push([r[0].$sendQueue, t]), r[0].$sendQueue.push(t)
        }
      }(t);
      return $block(), c
    },
    $needsExternalization = function(e) {
      switch (e.kind) {
        case $kindBool:
        case $kindInt:
        case $kindInt8:
        case $kindInt16:
        case $kindInt32:
        case $kindUint:
        case $kindUint8:
        case $kindUint16:
        case $kindUint32:
        case $kindUintptr:
        case $kindFloat32:
        case $kindFloat64:
          return !1;
        default:
          return e !== $jsObjectPtr
      }
    },
    $externalize = function(e, n) {
      if (n === $jsObjectPtr) return e;
      switch (n.kind) {
        case $kindBool:
        case $kindInt:
        case $kindInt8:
        case $kindInt16:
        case $kindInt32:
        case $kindUint:
        case $kindUint8:
        case $kindUint16:
        case $kindUint32:
        case $kindUintptr:
        case $kindFloat32:
        case $kindFloat64:
          return e;
        case $kindInt64:
        case $kindUint64:
          return $flatten64(e);
        case $kindArray:
          return $needsExternalization(n.elem) ? $mapArray(e, function(e) {
            return $externalize(e, n.elem)
          }) : e;
        case $kindFunc:
          return $externalizeFunction(e, n, !1);
        case $kindInterface:
          return e === $ifaceNil ? null : e.constructor === $jsObjectPtr ? e.$val.object : $externalize(e.$val, e.constructor);
        case $kindMap:
          for (var r = {}, t = $keys(e), i = 0; i < t.length; i++) {
            var a = e[t[i]];
            r[$externalize(a.k, n.key)] = $externalize(a.v, n.elem)
          }
          return r;
        case $kindPtr:
          return e === n.nil ? null : $externalize(e.$get(), n.elem);
        case $kindSlice:
          return $needsExternalization(n.elem) ? $mapArray($sliceToArray(e), function(e) {
            return $externalize(e, n.elem)
          }) : $sliceToArray(e);
        case $kindString:
          if ($isASCII(e)) return e;
          var o, $ = "";
          for (i = 0; i < e.length; i += o[1]) {
            var c = (o = $decodeRune(e, i))[0];
            if (c > 65535) {
              var u = Math.floor((c - 65536) / 1024) + 55296,
                l = (c - 65536) % 1024 + 56320;
              $ += String.fromCharCode(u, l)
            } else $ += String.fromCharCode(c)
          }
          return $;
        case $kindStruct:
          var s = $packages.time;
          if (void 0 !== s && e.constructor === s.Time.ptr) {
            var f = $div64(e.UnixNano(), new $Int64(0, 1e6));
            return new Date($flatten64(f))
          }
          var d = {},
            p = function(e, n) {
              if (n === $jsObjectPtr) return e;
              switch (n.kind) {
                case $kindPtr:
                  return e === n.nil ? d : p(e.$get(), n.elem);
                case $kindStruct:
                  var r = n.fields[0];
                  return p(e[r.prop], r.typ);
                case $kindInterface:
                  return p(e.$val, e.constructor);
                default:
                  return d
              }
            },
            h = p(e, n);
          if (h !== d) return h;
          h = {};
          for (i = 0; i < n.fields.length; i++) {
            var k = n.fields[i];
            k.exported && (h[k.name] = $externalize(e[k.prop], k.typ))
          }
          return h
      }
      $throwRuntimeError("cannot externalize " + n.string)
    },
    $externalizeFunction = function(e, n, r) {
      return e === $throwNilPointerError ? null : (void 0 === e.$externalizeWrapper && ($checkForDeadlock = !1, e.$externalizeWrapper = function() {
        for (var t = [], i = 0; i < n.params.length; i++) {
          if (n.variadic && i === n.params.length - 1) {
            for (var a = n.params[i].elem, o = [], $ = i; $ < arguments.length; $++) o.push($internalize(arguments[$], a));
            t.push(new n.params[i](o));
            break
          }
          t.push($internalize(arguments[i], n.params[i]))
        }
        var c = e.apply(r ? this : void 0, t);
        switch (n.results.length) {
          case 0:
            return;
          case 1:
            return $externalize(c, n.results[0]);
          default:
            for (i = 0; i < n.results.length; i++) c[i] = $externalize(c[i], n.results[i]);
            return c
        }
      }), e.$externalizeWrapper)
    },
    $internalize = function(e, n, r) {
      if (n === $jsObjectPtr) return e;
      if (n === $jsObjectPtr.elem && $throwRuntimeError("cannot internalize js.Object, use *js.Object instead"), e && void 0 !== e.__internal_object__) return $assertType(e.__internal_object__, n, !1);
      var t = $packages.time;
      if (void 0 !== t && n === t.Time) return null !== e && void 0 !== e && e.constructor === Date || $throwRuntimeError("cannot internalize time.Time from " + typeof e + ", must be Date"), t.Unix(new $Int64(0, 0), new $Int64(0, 1e6 * e.getTime()));
      switch (n.kind) {
        case $kindBool:
          return !!e;
        case $kindInt:
          return parseInt(e);
        case $kindInt8:
          return parseInt(e) << 24 >> 24;
        case $kindInt16:
          return parseInt(e) << 16 >> 16;
        case $kindInt32:
          return parseInt(e) >> 0;
        case $kindUint:
          return parseInt(e);
        case $kindUint8:
          return parseInt(e) << 24 >>> 24;
        case $kindUint16:
          return parseInt(e) << 16 >>> 16;
        case $kindUint32:
        case $kindUintptr:
          return parseInt(e) >>> 0;
        case $kindInt64:
        case $kindUint64:
          return new n(0, e);
        case $kindFloat32:
        case $kindFloat64:
          return parseFloat(e);
        case $kindArray:
          return e.length !== n.len && $throwRuntimeError("got array with wrong size from JavaScript native"), $mapArray(e, function(e) {
            return $internalize(e, n.elem)
          });
        case $kindFunc:
          return function() {
            for (var t = [], i = 0; i < n.params.length; i++) {
              if (n.variadic && i === n.params.length - 1) {
                for (var a = n.params[i].elem, o = arguments[i], $ = 0; $ < o.$length; $++) t.push($externalize(o.$array[o.$offset + $], a));
                break
              }
              t.push($externalize(arguments[i], n.params[i]))
            }
            var c = e.apply(r, t);
            switch (n.results.length) {
              case 0:
                return;
              case 1:
                return $internalize(c, n.results[0]);
              default:
                for (i = 0; i < n.results.length; i++) c[i] = $internalize(c[i], n.results[i]);
                return c
            }
          };
        case $kindInterface:
          if (0 !== n.methods.length && $throwRuntimeError("cannot internalize " + n.string), null === e) return $ifaceNil;
          if (void 0 === e) return new $jsObjectPtr(void 0);
          switch (e.constructor) {
            case Int8Array:
              return new($sliceType($Int8))(e);
            case Int16Array:
              return new($sliceType($Int16))(e);
            case Int32Array:
              return new($sliceType($Int))(e);
            case Uint8Array:
              return new($sliceType($Uint8))(e);
            case Uint16Array:
              return new($sliceType($Uint16))(e);
            case Uint32Array:
              return new($sliceType($Uint))(e);
            case Float32Array:
              return new($sliceType($Float32))(e);
            case Float64Array:
              return new($sliceType($Float64))(e);
            case Array:
              return $internalize(e, $sliceType($emptyInterface));
            case Boolean:
              return new $Bool(!!e);
            case Date:
              return void 0 === t ? new $jsObjectPtr(e) : new t.Time($internalize(e, t.Time));
            case Function:
              var i = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], !0);
              return new i($internalize(e, i));
            case Number:
              return new $Float64(parseFloat(e));
            case String:
              return new $String($internalize(e, $String));
            default:
              if ($global.Node && e instanceof $global.Node) return new $jsObjectPtr(e);
              var a = $mapType($String, $emptyInterface);
              return new a($internalize(e, a))
          }
        case $kindMap:
          for (var o = {}, $ = $keys(e), c = 0; c < $.length; c++) {
            var u = $internalize($[c], n.key);
            o[n.key.keyFor(u)] = {
              k: u,
              v: $internalize(e[$[c]], n.elem)
            }
          }
          return o;
        case $kindPtr:
          if (n.elem.kind === $kindStruct) return $internalize(e, n.elem);
        case $kindSlice:
          return new n($mapArray(e, function(e) {
            return $internalize(e, n.elem)
          }));
        case $kindString:
          if (e = String(e), $isASCII(e)) return e;
          var l = "";
          for (c = 0; c < e.length;) {
            var s = e.charCodeAt(c);
            if (55296 <= s && s <= 56319) {
              var f = e.charCodeAt(c + 1);
              l += $encodeRune(1024 * (s - 55296) + f - 56320 + 65536), c += 2
            } else l += $encodeRune(s), c++
          }
          return l;
        case $kindStruct:
          var d = {},
            p = function(n) {
              if (n === $jsObjectPtr) return e;
              switch (n === $jsObjectPtr.elem && $throwRuntimeError("cannot internalize js.Object, use *js.Object instead"), n.kind) {
                case $kindPtr:
                  return p(n.elem);
                case $kindStruct:
                  var r = n.fields[0],
                    t = p(r.typ);
                  if (t !== d) {
                    var i = new n.ptr;
                    return i[r.prop] = t, i
                  }
                  return d;
                default:
                  return d
              }
            },
            h = p(n);
          if (h !== d) return h
      }
      $throwRuntimeError("cannot internalize " + n.string)
    },
    $isASCII = function(e) {
      for (var n = 0; n < e.length; n++)
        if (e.charCodeAt(n) >= 128) return !1;
      return !0
    };
  $packages["github.com/gopherjs/gopherjs/js"] = (function() {
    var $pkg = {},
      $init, A, B, L, N, Q, E, K;
    A = $pkg.Object = $newType(0, $kindStruct, "js.Object", true, "github.com/gopherjs/gopherjs/js", true, function(object_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.object = null;
        return;
      }
      this.object = object_;
    });
    B = $pkg.Error = $newType(0, $kindStruct, "js.Error", true, "github.com/gopherjs/gopherjs/js", true, function(Object_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Object = null;
        return;
      }
      this.Object = Object_;
    });
    L = $sliceType($emptyInterface);
    N = $ptrType(A);
    Q = $ptrType(B);
    A.ptr.prototype.Get = function(a) {
      var a, b;
      b = this;
      return b.object[$externalize(a, $String)];
    };
    A.prototype.Get = function(a) {
      return this.$val.Get(a);
    };
    A.ptr.prototype.Set = function(a, b) {
      var a, b, c;
      c = this;
      c.object[$externalize(a, $String)] = $externalize(b, $emptyInterface);
    };
    A.prototype.Set = function(a, b) {
      return this.$val.Set(a, b);
    };
    A.ptr.prototype.Delete = function(a) {
      var a, b;
      b = this;
      delete b.object[$externalize(a, $String)];
    };
    A.prototype.Delete = function(a) {
      return this.$val.Delete(a);
    };
    A.ptr.prototype.Length = function() {
      var a;
      a = this;
      return $parseInt(a.object.length);
    };
    A.prototype.Length = function() {
      return this.$val.Length();
    };
    A.ptr.prototype.Index = function(a) {
      var a, b;
      b = this;
      return b.object[a];
    };
    A.prototype.Index = function(a) {
      return this.$val.Index(a);
    };
    A.ptr.prototype.SetIndex = function(a, b) {
      var a, b, c;
      c = this;
      c.object[a] = $externalize(b, $emptyInterface);
    };
    A.prototype.SetIndex = function(a, b) {
      return this.$val.SetIndex(a, b);
    };
    A.ptr.prototype.Call = function(a, b) {
      var a, b, c, d;
      c = this;
      return (d = c.object, d[$externalize(a, $String)].apply(d, $externalize(b, L)));
    };
    A.prototype.Call = function(a, b) {
      return this.$val.Call(a, b);
    };
    A.ptr.prototype.Invoke = function(a) {
      var a, b;
      b = this;
      return b.object.apply(undefined, $externalize(a, L));
    };
    A.prototype.Invoke = function(a) {
      return this.$val.Invoke(a);
    };
    A.ptr.prototype.New = function(a) {
      var a, b;
      b = this;
      return new($global.Function.prototype.bind.apply(b.object, [undefined].concat($externalize(a, L))));
    };
    A.prototype.New = function(a) {
      return this.$val.New(a);
    };
    A.ptr.prototype.Bool = function() {
      var a;
      a = this;
      return !!(a.object);
    };
    A.prototype.Bool = function() {
      return this.$val.Bool();
    };
    A.ptr.prototype.String = function() {
      var a;
      a = this;
      return $internalize(a.object, $String);
    };
    A.prototype.String = function() {
      return this.$val.String();
    };
    A.ptr.prototype.Int = function() {
      var a;
      a = this;
      return $parseInt(a.object) >> 0;
    };
    A.prototype.Int = function() {
      return this.$val.Int();
    };
    A.ptr.prototype.Int64 = function() {
      var a;
      a = this;
      return $internalize(a.object, $Int64);
    };
    A.prototype.Int64 = function() {
      return this.$val.Int64();
    };
    A.ptr.prototype.Uint64 = function() {
      var a;
      a = this;
      return $internalize(a.object, $Uint64);
    };
    A.prototype.Uint64 = function() {
      return this.$val.Uint64();
    };
    A.ptr.prototype.Float = function() {
      var a;
      a = this;
      return $parseFloat(a.object);
    };
    A.prototype.Float = function() {
      return this.$val.Float();
    };
    A.ptr.prototype.Interface = function() {
      var a;
      a = this;
      return $internalize(a.object, $emptyInterface);
    };
    A.prototype.Interface = function() {
      return this.$val.Interface();
    };
    A.ptr.prototype.Unsafe = function() {
      var a;
      a = this;
      return a.object;
    };
    A.prototype.Unsafe = function() {
      return this.$val.Unsafe();
    };
    B.ptr.prototype.Error = function() {
      var a;
      a = this;
      return "JavaScript error: " + $internalize(a.Object.message, $String);
    };
    B.prototype.Error = function() {
      return this.$val.Error();
    };
    B.ptr.prototype.Stack = function() {
      var a;
      a = this;
      return $internalize(a.Object.stack, $String);
    };
    B.prototype.Stack = function() {
      return this.$val.Stack();
    };
    E = function(a) {
      var a;
      return $makeFunc(a);
    };
    $pkg.MakeFunc = E;
    K = function() {
      var a;
      a = new B.ptr(null);
      $unused(a);
    };
    N.methods = [{
      prop: "Get",
      name: "Get",
      pkg: "",
      typ: $funcType([$String], [N], false)
    }, {
      prop: "Set",
      name: "Set",
      pkg: "",
      typ: $funcType([$String, $emptyInterface], [], false)
    }, {
      prop: "Delete",
      name: "Delete",
      pkg: "",
      typ: $funcType([$String], [], false)
    }, {
      prop: "Length",
      name: "Length",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Index",
      name: "Index",
      pkg: "",
      typ: $funcType([$Int], [N], false)
    }, {
      prop: "SetIndex",
      name: "SetIndex",
      pkg: "",
      typ: $funcType([$Int, $emptyInterface], [], false)
    }, {
      prop: "Call",
      name: "Call",
      pkg: "",
      typ: $funcType([$String, L], [N], true)
    }, {
      prop: "Invoke",
      name: "Invoke",
      pkg: "",
      typ: $funcType([L], [N], true)
    }, {
      prop: "New",
      name: "New",
      pkg: "",
      typ: $funcType([L], [N], true)
    }, {
      prop: "Bool",
      name: "Bool",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Int",
      name: "Int",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Int64",
      name: "Int64",
      pkg: "",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "Uint64",
      name: "Uint64",
      pkg: "",
      typ: $funcType([], [$Uint64], false)
    }, {
      prop: "Float",
      name: "Float",
      pkg: "",
      typ: $funcType([], [$Float64], false)
    }, {
      prop: "Interface",
      name: "Interface",
      pkg: "",
      typ: $funcType([], [$emptyInterface], false)
    }, {
      prop: "Unsafe",
      name: "Unsafe",
      pkg: "",
      typ: $funcType([], [$Uintptr], false)
    }];
    Q.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Stack",
      name: "Stack",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    A.init("github.com/gopherjs/gopherjs/js", [{
      prop: "object",
      name: "object",
      embedded: false,
      exported: false,
      typ: N,
      tag: ""
    }]);
    B.init("", [{
      prop: "Object",
      name: "Object",
      embedded: true,
      exported: true,
      typ: N,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            K();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["internal/cpu"] = (function() {
    var $pkg = {},
      $init;
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["internal/bytealg"] = (function() {
    var $pkg = {},
      $init, A, H, J;
    A = $packages["internal/cpu"];
    H = function(a, b) {
      var a, b;
      $panic(new $String("unimplemented"));
    };
    $pkg.Index = H;
    J = function(a) {
      var a;
      $panic(new $String("unimplemented"));
    };
    $pkg.Cutover = J;
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $pkg.MaxLen = 0;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["runtime/internal/sys"] = (function() {
    var $pkg = {},
      $init;
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["runtime"] = (function() {
    var $pkg = {},
      $init, B, C, A, E, AQ, AR, AX, BF, F, G, I, O, V, AJ, AK;
    B = $packages["github.com/gopherjs/gopherjs/js"];
    C = $packages["internal/bytealg"];
    A = $packages["runtime/internal/sys"];
    E = $pkg._type = $newType(0, $kindStruct, "runtime._type", true, "runtime", false, function(str_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.str = "";
        return;
      }
      this.str = str_;
    });
    AQ = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", true, "runtime", true, function(_interface_, concrete_, asserted_, missingMethod_) {
      this.$val = this;
      if (arguments.length === 0) {
        this._interface = AX.nil;
        this.concrete = AX.nil;
        this.asserted = AX.nil;
        this.missingMethod = "";
        return;
      }
      this._interface = _interface_;
      this.concrete = concrete_;
      this.asserted = asserted_;
      this.missingMethod = missingMethod_;
    });
    AR = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", true, "runtime", false, null);
    AX = $ptrType(E);
    BF = $ptrType(AQ);
    E.ptr.prototype.string = function() {
      var a;
      a = this;
      return a.str;
    };
    E.prototype.string = function() {
      return this.$val.string();
    };
    E.ptr.prototype.pkgpath = function() {
      var a;
      a = this;
      return "";
    };
    E.prototype.pkgpath = function() {
      return this.$val.pkgpath();
    };
    F = function() {
      var a, b;
      a = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
      $jsObjectPtr = a.Object.ptr;
      $jsErrorPtr = a.Error.ptr;
      $throwRuntimeError = AK;
      b = $ifaceNil;
      b = new AQ.ptr(AX.nil, AX.nil, AX.nil, "");
      $unused(b);
    };
    G = function() {
      var a, b;
      a = $global.process;
      if (a === undefined) {
        return "/";
      }
      b = a.env.GOROOT;
      if (!(b === undefined)) {
        return $internalize(b, $String);
      }
      return "/usr/local/go";
    };
    $pkg.GOROOT = G;
    I = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o;
      b = 0;
      c = "";
      d = 0;
      e = false;
      f = new($global.Error)().stack.split($externalize("\n", $String))[(a + 2 >> 0)];
      if (f === undefined) {
        g = 0;
        h = "";
        i = 0;
        j = false;
        b = g;
        c = h;
        d = i;
        e = j;
        return [b, c, d, e];
      }
      k = f.substring(($parseInt(f.indexOf($externalize("(", $String))) >> 0) + 1 >> 0, $parseInt(f.indexOf($externalize(")", $String))) >> 0).split($externalize(":", $String));
      l = 0;
      m = $internalize(k[0], $String);
      n = $parseInt(k[1]) >> 0;
      o = true;
      b = l;
      c = m;
      d = n;
      e = o;
      return [b, c, d, e];
    };
    $pkg.Caller = I;
    O = function() {
      $curGoroutine.exit = $externalize(true, $Bool);
      $throw(null);
    };
    $pkg.Goexit = O;
    V = function(a, b) {
      var a, b;
    };
    $pkg.SetFinalizer = V;
    AJ = function(a) {
      var a;
    };
    $pkg.KeepAlive = AJ;
    AK = function(a) {
      var a;
      $panic(new AR((a)));
    };
    AQ.ptr.prototype.RuntimeError = function() {};
    AQ.prototype.RuntimeError = function() {
      return this.$val.RuntimeError();
    };
    AQ.ptr.prototype.Error = function() {
      var a, b, c, d, e;
      a = this;
      b = "interface";
      if (!(a._interface === AX.nil)) {
        b = a._interface.string();
      }
      c = a.asserted.string();
      if (a.concrete === AX.nil) {
        return "interface conversion: " + b + " is nil, not " + c;
      }
      d = a.concrete.string();
      if (a.missingMethod === "") {
        e = "interface conversion: " + b + " is " + d + ", not " + c;
        if (d === c) {
          if (!(a.concrete.pkgpath() === a.asserted.pkgpath())) {
            e = e + (" (types from different packages)");
          } else {
            e = e + (" (types from different scopes)");
          }
        }
        return e;
      }
      return "interface conversion: " + d + " is not " + c + ": missing method " + a.missingMethod;
    };
    AQ.prototype.Error = function() {
      return this.$val.Error();
    };
    AR.prototype.RuntimeError = function() {
      var a;
      a = this.$val;
    };
    $ptrType(AR).prototype.RuntimeError = function() {
      return new AR(this.$get()).RuntimeError();
    };
    AR.prototype.Error = function() {
      var a;
      a = this.$val;
      return "runtime error: " + (a);
    };
    $ptrType(AR).prototype.Error = function() {
      return new AR(this.$get()).Error();
    };
    AX.methods = [{
      prop: "string",
      name: "string",
      pkg: "runtime",
      typ: $funcType([], [$String], false)
    }, {
      prop: "pkgpath",
      name: "pkgpath",
      pkg: "runtime",
      typ: $funcType([], [$String], false)
    }];
    BF.methods = [{
      prop: "RuntimeError",
      name: "RuntimeError",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    AR.methods = [{
      prop: "RuntimeError",
      name: "RuntimeError",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    E.init("runtime", [{
      prop: "str",
      name: "str",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }]);
    AQ.init("runtime", [{
      prop: "_interface",
      name: "_interface",
      embedded: false,
      exported: false,
      typ: AX,
      tag: ""
    }, {
      prop: "concrete",
      name: "concrete",
      embedded: false,
      exported: false,
      typ: AX,
      tag: ""
    }, {
      prop: "asserted",
      name: "asserted",
      embedded: false,
      exported: false,
      typ: AX,
      tag: ""
    }, {
      prop: "missingMethod",
      name: "missingMethod",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = B.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            F();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["errors"] = (function() {
    var $pkg = {},
      $init, B, C, A;
    B = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", true, "errors", false, function(s_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.s = "";
        return;
      }
      this.s = s_;
    });
    C = $ptrType(B);
    A = function(a) {
      var a;
      return new B.ptr(a);
    };
    $pkg.New = A;
    B.ptr.prototype.Error = function() {
      var a;
      a = this;
      return a.s;
    };
    B.prototype.Error = function() {
      return this.$val.Error();
    };
    C.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    B.init("errors", [{
      prop: "s",
      name: "s",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["internal/race"] = (function() {
    var $pkg = {},
      $init, A, B, C, D, E, H, I;
    A = function(a) {
      var a;
    };
    $pkg.Acquire = A;
    B = function(a) {
      var a;
    };
    $pkg.Release = B;
    C = function(a) {
      var a;
    };
    $pkg.ReleaseMerge = C;
    D = function() {};
    $pkg.Disable = D;
    E = function() {};
    $pkg.Enable = E;
    H = function(a, b) {
      var a, b;
    };
    $pkg.ReadRange = H;
    I = function(a, b) {
      var a, b;
    };
    $pkg.WriteRange = I;
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["sync/atomic"] = (function() {
    var $pkg = {},
      $init, A, AF, AJ, H, K, N, S, V, Y, AA;
    A = $packages["github.com/gopherjs/gopherjs/js"];
    AF = $pkg.Value = $newType(0, $kindStruct, "atomic.Value", true, "sync/atomic", true, function(v_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.v = $ifaceNil;
        return;
      }
      this.v = v_;
    });
    AJ = $ptrType(AF);
    H = function(ad, ae, af) {
      var ad, ae, af;
      if (ad.$get() === ae) {
        ad.$set(af);
        return true;
      }
      return false;
    };
    $pkg.CompareAndSwapInt32 = H;
    K = function(ad, ae, af) {
      var ad, ae, af, ag;
      if ((ag = ad.$get(), (ag.$high === ae.$high && ag.$low === ae.$low))) {
        ad.$set(af);
        return true;
      }
      return false;
    };
    $pkg.CompareAndSwapUint64 = K;
    N = function(ad, ae) {
      var ad, ae, af;
      af = ad.$get() + ae >> 0;
      ad.$set(af);
      return af;
    };
    $pkg.AddInt32 = N;
    S = function(ad) {
      var ad;
      return ad.$get();
    };
    $pkg.LoadInt32 = S;
    V = function(ad) {
      var ad;
      return ad.$get();
    };
    $pkg.LoadUint64 = V;
    Y = function(ad, ae) {
      var ad, ae;
      ad.$set(ae);
    };
    $pkg.StoreInt32 = Y;
    AA = function(ad, ae) {
      var ad, ae;
      ad.$set(ae);
    };
    $pkg.StoreUint32 = AA;
    AF.ptr.prototype.Load = function() {
      var ad, ae;
      ad = $ifaceNil;
      ae = this;
      ad = ae.v;
      return ad;
    };
    AF.prototype.Load = function() {
      return this.$val.Load();
    };
    AF.ptr.prototype.Store = function(ad) {
      var ad, ae;
      ae = this;
      if ($interfaceIsEqual(ad, $ifaceNil)) {
        $panic(new $String("sync/atomic: store of nil value into Value"));
      }
      if (!($interfaceIsEqual(ae.v, $ifaceNil)) && !(ad.constructor === ae.v.constructor)) {
        $panic(new $String("sync/atomic: store of inconsistently typed value into Value"));
      }
      ae.v = ad;
    };
    AF.prototype.Store = function(ad) {
      return this.$val.Store(ad);
    };
    AJ.methods = [{
      prop: "Load",
      name: "Load",
      pkg: "",
      typ: $funcType([], [$emptyInterface], false)
    }, {
      prop: "Store",
      name: "Store",
      pkg: "",
      typ: $funcType([$emptyInterface], [], false)
    }];
    AF.init("sync/atomic", [{
      prop: "v",
      name: "v",
      embedded: false,
      exported: false,
      typ: $emptyInterface,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["sync"] = (function() {
    var $pkg = {},
      $init, A, C, D, B, F, Z, AA, AC, AD, AO, AV, AW, AY, AZ, BA, BB, BC, BI, BL, BM, BN, BO, BR, CA, CD, H, I, W, AJ, G, K, L, M, N, O, P, AH, AK, AL, AT, AU;
    A = $packages["github.com/gopherjs/gopherjs/js"];
    C = $packages["internal/race"];
    D = $packages["runtime"];
    B = $packages["sync/atomic"];
    F = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", true, "sync", true, function(local_, localSize_, store_, New_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.local = 0;
        this.localSize = 0;
        this.store = BM.nil;
        this.New = $throwNilPointerError;
        return;
      }
      this.local = local_;
      this.localSize = localSize_;
      this.store = store_;
      this.New = New_;
    });
    Z = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", true, "sync", true, function(state_, sema_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.state = 0;
        this.sema = 0;
        return;
      }
      this.state = state_;
      this.sema = sema_;
    });
    AA = $pkg.Locker = $newType(8, $kindInterface, "sync.Locker", true, "sync", true, null);
    AC = $pkg.poolLocalInternal = $newType(0, $kindStruct, "sync.poolLocalInternal", true, "sync", false, function(private$0_, shared_, Mutex_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.private$0 = $ifaceNil;
        this.shared = BM.nil;
        this.Mutex = new Z.ptr(0, 0);
        return;
      }
      this.private$0 = private$0_;
      this.shared = shared_;
      this.Mutex = Mutex_;
    });
    AD = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", true, "sync", false, function(poolLocalInternal_, pad_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.poolLocalInternal = new AC.ptr($ifaceNil, BM.nil, new Z.ptr(0, 0));
        this.pad = CD.zero();
        return;
      }
      this.poolLocalInternal = poolLocalInternal_;
      this.pad = pad_;
    });
    AO = $pkg.notifyList = $newType(0, $kindStruct, "sync.notifyList", true, "sync", false, function(wait_, notify_, lock_, head_, tail_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.wait = 0;
        this.notify = 0;
        this.lock = 0;
        this.head = 0;
        this.tail = 0;
        return;
      }
      this.wait = wait_;
      this.notify = notify_;
      this.lock = lock_;
      this.head = head_;
      this.tail = tail_;
    });
    AV = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", true, "sync", true, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.w = new Z.ptr(0, 0);
        this.writerSem = 0;
        this.readerSem = 0;
        this.readerCount = 0;
        this.readerWait = 0;
        return;
      }
      this.w = w_;
      this.writerSem = writerSem_;
      this.readerSem = readerSem_;
      this.readerCount = readerCount_;
      this.readerWait = readerWait_;
    });
    AW = $pkg.rlocker = $newType(0, $kindStruct, "sync.rlocker", true, "sync", false, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.w = new Z.ptr(0, 0);
        this.writerSem = 0;
        this.readerSem = 0;
        this.readerCount = 0;
        this.readerWait = 0;
        return;
      }
      this.w = w_;
      this.writerSem = writerSem_;
      this.readerSem = readerSem_;
      this.readerCount = readerCount_;
      this.readerWait = readerWait_;
    });
    AY = $ptrType(F);
    AZ = $sliceType(AY);
    BA = $ptrType($Uint32);
    BB = $chanType($Bool, false, false);
    BC = $sliceType(BB);
    BI = $ptrType($Int32);
    BL = $ptrType(AD);
    BM = $sliceType($emptyInterface);
    BN = $ptrType(AW);
    BO = $ptrType(AV);
    BR = $funcType([], [$emptyInterface], false);
    CA = $ptrType(Z);
    CD = $arrayType($Uint8, 100);
    F.ptr.prototype.Get = function() {
      var l, m, n, o, p, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            l = this;
            if (l.store.$length === 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            if (!(l.New === $throwNilPointerError)) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            m = l.New();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return m;
          case 4:
            $s = -1;
            return $ifaceNil;
          case 2:
            p = (n = l.store, o = l.store.$length - 1 >> 0, ((o < 0 || o >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + o]));
            l.store = $subslice(l.store, 0, (l.store.$length - 1 >> 0));
            $s = -1;
            return p;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: F.ptr.prototype.Get
        };
      }
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    F.prototype.Get = function() {
      return this.$val.Get();
    };
    F.ptr.prototype.Put = function(l) {
      var l, m;
      m = this;
      if ($interfaceIsEqual(l, $ifaceNil)) {
        return;
      }
      m.store = $append(m.store, l);
    };
    F.prototype.Put = function(l) {
      return this.$val.Put(l);
    };
    G = function(l) {
      var l;
    };
    K = function(l, m) {
      var l, m, n, o, p, q, r, s, t, u, v, w, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (((l.$get() - (n = I[BA.keyFor(l)], n !== undefined ? n.v : 0) >>> 0)) === 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            o = new $Chan($Bool, 0);
            if (m) {
              p = l;
              (H || $throwRuntimeError("assignment to entry in nil map"))[BA.keyFor(p)] = {
                k: p,
                v: $appendSlice(new BC([o]), (q = H[BA.keyFor(l)], q !== undefined ? q.v : BC.nil))
              };
            } else {
              r = l;
              (H || $throwRuntimeError("assignment to entry in nil map"))[BA.keyFor(r)] = {
                k: r,
                v: $append((s = H[BA.keyFor(l)], s !== undefined ? s.v : BC.nil), o)
              };
            }
            t = $recv(o);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            t[0];
            u = l;
            (I || $throwRuntimeError("assignment to entry in nil map"))[BA.keyFor(u)] = {
              k: u,
              v: (v = I[BA.keyFor(l)], v !== undefined ? v.v : 0) - (1) >>> 0
            };
            if ((w = I[BA.keyFor(l)], w !== undefined ? w.v : 0) === 0) {
              delete I[BA.keyFor(l)];
            }
          case 2:
            l.$set(l.$get() - (1) >>> 0);
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: K
        };
      }
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    L = function(l, m) {
      var l, m, n, o, p, q, r, s, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            l.$set(l.$get() + (1) >>> 0);
            o = (n = H[BA.keyFor(l)], n !== undefined ? n.v : BC.nil);
            if (o.$length === 0) {
              $s = -1;
              return;
            }
            p = (0 >= o.$length ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + 0]);
            o = $subslice(o, 1);
            q = l;
            (H || $throwRuntimeError("assignment to entry in nil map"))[BA.keyFor(q)] = {
              k: q,
              v: o
            };
            if (o.$length === 0) {
              delete H[BA.keyFor(l)];
            }
            r = l;
            (I || $throwRuntimeError("assignment to entry in nil map"))[BA.keyFor(r)] = {
              k: r,
              v: (s = I[BA.keyFor(l)], s !== undefined ? s.v : 0) + (1) >>> 0
            };
            $r = $send(p, true);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: L
        };
      }
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M = function(l) {
      var l;
    };
    N = function(l) {
      var l;
      return false;
    };
    O = function() {
      return $mul64($internalize(new($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
    };
    P = function(l) {
      var l;
      $throwRuntimeError($externalize(l, $String));
    };
    Z.ptr.prototype.Lock = function() {
      var l, m, n, o, p, q, r, s, t, u, v, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            l = this;
            if (B.CompareAndSwapInt32((l.$ptr_state || (l.$ptr_state = new BI(function() {
                return this.$target.state;
              }, function($v) {
                this.$target.state = $v;
              }, l))), 0, 1)) {
              if (false) {
                C.Acquire((l));
              }
              $s = -1;
              return;
            }
            m = new $Int64(0, 0);
            n = false;
            o = false;
            p = 0;
            q = l.state;
          case 1:
            if (((q & 5) === 1) && N(p)) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            if (!o && ((q & 2) === 0) && !(((q >> 3 >> 0) === 0)) && B.CompareAndSwapInt32((l.$ptr_state || (l.$ptr_state = new BI(function() {
                return this.$target.state;
              }, function($v) {
                this.$target.state = $v;
              }, l))), q, q | 2)) {
              o = true;
            }
            AU();
            p = p + (1) >> 0;
            q = l.state;
            $s = 1;
            continue;
          case 4:
            r = q;
            if ((q & 4) === 0) {
              r = r | (1);
            }
            if (!(((q & 5) === 0))) {
              r = r + (8) >> 0;
            }
            if (n && !(((q & 1) === 0))) {
              r = r | (4);
            }
            if (o) {
              if ((r & 2) === 0) {
                P("sync: inconsistent mutex state");
              }
              r = (r & ~(2)) >> 0;
            }
            if (B.CompareAndSwapInt32((l.$ptr_state || (l.$ptr_state = new BI(function() {
                return this.$target.state;
              }, function($v) {
                this.$target.state = $v;
              }, l))), q, r)) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            if ((q & 5) === 0) {
              $s = 2;
              continue;
            }
            s = !((m.$high === 0 && m.$low === 0));
            if ((m.$high === 0 && m.$low === 0)) {
              m = O();
            }
            $r = K((l.$ptr_sema || (l.$ptr_sema = new BA(function() {
              return this.$target.sema;
            }, function($v) {
              this.$target.sema = $v;
            }, l))), s);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            n = n || (t = (u = O(), new $Int64(u.$high - m.$high, u.$low - m.$low)), (t.$high > 0 || (t.$high === 0 && t.$low > 1000000)));
            q = l.state;
            if (!(((q & 4) === 0))) {
              if (!(((q & 3) === 0)) || ((q >> 3 >> 0) === 0)) {
                P("sync: inconsistent mutex state");
              }
              v = -7;
              if (!n || ((q >> 3 >> 0) === 1)) {
                v = v - (4) >> 0;
              }
              B.AddInt32((l.$ptr_state || (l.$ptr_state = new BI(function() {
                return this.$target.state;
              }, function($v) {
                this.$target.state = $v;
              }, l))), v);
              $s = 2;
              continue;
            }
            o = true;
            p = 0;
            $s = 7;
            continue;
          case 6:
            q = l.state;
          case 7:
            $s = 1;
            continue;
          case 2:
            if (false) {
              C.Acquire((l));
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Z.ptr.prototype.Lock
        };
      }
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    Z.prototype.Lock = function() {
      return this.$val.Lock();
    };
    Z.ptr.prototype.Unlock = function() {
      var l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            l = this;
            if (false) {
              $unused(l.state);
              C.Release((l));
            }
            m = B.AddInt32((l.$ptr_state || (l.$ptr_state = new BI(function() {
              return this.$target.state;
            }, function($v) {
              this.$target.state = $v;
            }, l))), -1);
            if ((((m + 1 >> 0)) & 1) === 0) {
              P("sync: unlock of unlocked mutex");
            }
            if ((m & 4) === 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            n = m;
          case 4:
            if (((n >> 3 >> 0) === 0) || !(((n & 7) === 0))) {
              $s = -1;
              return;
            }
            m = ((n - 8 >> 0)) | 2;
            if (B.CompareAndSwapInt32((l.$ptr_state || (l.$ptr_state = new BI(function() {
                return this.$target.state;
              }, function($v) {
                this.$target.state = $v;
              }, l))), n, m)) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            $r = L((l.$ptr_sema || (l.$ptr_sema = new BA(function() {
              return this.$target.sema;
            }, function($v) {
              this.$target.sema = $v;
            }, l))), false);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
          case 7:
            n = l.state;
            $s = 4;
            continue;
          case 5:
            $s = 3;
            continue;
          case 2:
            $r = L((l.$ptr_sema || (l.$ptr_sema = new BA(function() {
              return this.$target.sema;
            }, function($v) {
              this.$target.sema = $v;
            }, l))), true);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 3:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Z.ptr.prototype.Unlock
        };
      }
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    Z.prototype.Unlock = function() {
      return this.$val.Unlock();
    };
    AH = function() {
      var l, m, n, o, p, q, r, s, t, u;
      l = AJ;
      m = 0;
      while (true) {
        if (!(m < l.$length)) {
          break;
        }
        n = m;
        o = ((m < 0 || m >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + m]);
        ((n < 0 || n >= AJ.$length) ? ($throwRuntimeError("index out of range"), undefined) : AJ.$array[AJ.$offset + n] = AY.nil);
        p = 0;
        while (true) {
          if (!(p < ((o.localSize >> 0)))) {
            break;
          }
          q = AL(o.local, p);
          q.poolLocalInternal.private$0 = $ifaceNil;
          r = q.poolLocalInternal.shared;
          s = 0;
          while (true) {
            if (!(s < r.$length)) {
              break;
            }
            t = s;
            (u = q.poolLocalInternal.shared, ((t < 0 || t >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + t] = $ifaceNil));
            s++;
          }
          q.poolLocalInternal.shared = BM.nil;
          p = p + (1) >> 0;
        }
        o.local = 0;
        o.localSize = 0;
        m++;
      }
      AJ = new AZ([]);
    };
    AK = function() {
      G(AH);
    };
    AL = function(l, m) {
      var l, m, n;
      n = (((l) + ($imul(((m >>> 0)), 128) >>> 0) >>> 0));
      return ($pointerOfStructConversion(n, BL));
    };
    AT = function() {
      var l;
      l = new AO.ptr(0, 0, 0, 0, 0);
      M(20);
    };
    AU = function() {
      $throwRuntimeError("native function not implemented: sync.runtime_doSpin");
    };
    AV.ptr.prototype.RLock = function() {
      var l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            l = this;
            if (false) {
              $unused(l.w.state);
              C.Disable();
            }
            if (B.AddInt32((l.$ptr_readerCount || (l.$ptr_readerCount = new BI(function() {
                return this.$target.readerCount;
              }, function($v) {
                this.$target.readerCount = $v;
              }, l))), 1) < 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = K((l.$ptr_readerSem || (l.$ptr_readerSem = new BA(function() {
              return this.$target.readerSem;
            }, function($v) {
              this.$target.readerSem = $v;
            }, l))), false);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            if (false) {
              C.Enable();
              C.Acquire(((l.$ptr_readerSem || (l.$ptr_readerSem = new BA(function() {
                return this.$target.readerSem;
              }, function($v) {
                this.$target.readerSem = $v;
              }, l)))));
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AV.ptr.prototype.RLock
        };
      }
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AV.prototype.RLock = function() {
      return this.$val.RLock();
    };
    AV.ptr.prototype.RUnlock = function() {
      var l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            l = this;
            if (false) {
              $unused(l.w.state);
              C.ReleaseMerge(((l.$ptr_writerSem || (l.$ptr_writerSem = new BA(function() {
                return this.$target.writerSem;
              }, function($v) {
                this.$target.writerSem = $v;
              }, l)))));
              C.Disable();
            }
            m = B.AddInt32((l.$ptr_readerCount || (l.$ptr_readerCount = new BI(function() {
              return this.$target.readerCount;
            }, function($v) {
              this.$target.readerCount = $v;
            }, l))), -1);
            if (m < 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            if (((m + 1 >> 0) === 0) || ((m + 1 >> 0) === -1073741824)) {
              C.Enable();
              P("sync: RUnlock of unlocked RWMutex");
            }
            if (B.AddInt32((l.$ptr_readerWait || (l.$ptr_readerWait = new BI(function() {
                return this.$target.readerWait;
              }, function($v) {
                this.$target.readerWait = $v;
              }, l))), -1) === 0) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            $r = L((l.$ptr_writerSem || (l.$ptr_writerSem = new BA(function() {
              return this.$target.writerSem;
            }, function($v) {
              this.$target.writerSem = $v;
            }, l))), false);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 4:
          case 2:
            if (false) {
              C.Enable();
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AV.ptr.prototype.RUnlock
        };
      }
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AV.prototype.RUnlock = function() {
      return this.$val.RUnlock();
    };
    AV.ptr.prototype.Lock = function() {
      var l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            l = this;
            if (false) {
              $unused(l.w.state);
              C.Disable();
            }
            $r = l.w.Lock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            m = B.AddInt32((l.$ptr_readerCount || (l.$ptr_readerCount = new BI(function() {
              return this.$target.readerCount;
            }, function($v) {
              this.$target.readerCount = $v;
            }, l))), -1073741824) + 1073741824 >> 0;
            if (!((m === 0)) && !((B.AddInt32((l.$ptr_readerWait || (l.$ptr_readerWait = new BI(function() {
                return this.$target.readerWait;
              }, function($v) {
                this.$target.readerWait = $v;
              }, l))), m) === 0))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            $r = K((l.$ptr_writerSem || (l.$ptr_writerSem = new BA(function() {
              return this.$target.writerSem;
            }, function($v) {
              this.$target.writerSem = $v;
            }, l))), false);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 3:
            if (false) {
              C.Enable();
              C.Acquire(((l.$ptr_readerSem || (l.$ptr_readerSem = new BA(function() {
                return this.$target.readerSem;
              }, function($v) {
                this.$target.readerSem = $v;
              }, l)))));
              C.Acquire(((l.$ptr_writerSem || (l.$ptr_writerSem = new BA(function() {
                return this.$target.writerSem;
              }, function($v) {
                this.$target.writerSem = $v;
              }, l)))));
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AV.ptr.prototype.Lock
        };
      }
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AV.prototype.Lock = function() {
      return this.$val.Lock();
    };
    AV.ptr.prototype.Unlock = function() {
      var l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            l = this;
            if (false) {
              $unused(l.w.state);
              C.Release(((l.$ptr_readerSem || (l.$ptr_readerSem = new BA(function() {
                return this.$target.readerSem;
              }, function($v) {
                this.$target.readerSem = $v;
              }, l)))));
              C.Disable();
            }
            m = B.AddInt32((l.$ptr_readerCount || (l.$ptr_readerCount = new BI(function() {
              return this.$target.readerCount;
            }, function($v) {
              this.$target.readerCount = $v;
            }, l))), 1073741824);
            if (m >= 1073741824) {
              C.Enable();
              P("sync: Unlock of unlocked RWMutex");
            }
            n = 0;
          case 1:
            if (!(n < ((m >> 0)))) {
              $s = 2;
              continue;
            }
            $r = L((l.$ptr_readerSem || (l.$ptr_readerSem = new BA(function() {
              return this.$target.readerSem;
            }, function($v) {
              this.$target.readerSem = $v;
            }, l))), false);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            n = n + (1) >> 0;
            $s = 1;
            continue;
          case 2:
            $r = l.w.Unlock();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            if (false) {
              C.Enable();
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AV.ptr.prototype.Unlock
        };
      }
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AV.prototype.Unlock = function() {
      return this.$val.Unlock();
    };
    AV.ptr.prototype.RLocker = function() {
      var l;
      l = this;
      return ($pointerOfStructConversion(l, BN));
    };
    AV.prototype.RLocker = function() {
      return this.$val.RLocker();
    };
    AW.ptr.prototype.Lock = function() {
      var l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            l = this;
            $r = ($pointerOfStructConversion(l, BO)).RLock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AW.ptr.prototype.Lock
        };
      }
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AW.prototype.Lock = function() {
      return this.$val.Lock();
    };
    AW.ptr.prototype.Unlock = function() {
      var l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            l = this;
            $r = ($pointerOfStructConversion(l, BO)).RUnlock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AW.ptr.prototype.Unlock
        };
      }
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AW.prototype.Unlock = function() {
      return this.$val.Unlock();
    };
    AY.methods = [{
      prop: "Get",
      name: "Get",
      pkg: "",
      typ: $funcType([], [$emptyInterface], false)
    }, {
      prop: "Put",
      name: "Put",
      pkg: "",
      typ: $funcType([$emptyInterface], [], false)
    }, {
      prop: "getSlow",
      name: "getSlow",
      pkg: "sync",
      typ: $funcType([], [$emptyInterface], false)
    }, {
      prop: "pin",
      name: "pin",
      pkg: "sync",
      typ: $funcType([], [BL], false)
    }, {
      prop: "pinSlow",
      name: "pinSlow",
      pkg: "sync",
      typ: $funcType([], [BL], false)
    }];
    CA.methods = [{
      prop: "Lock",
      name: "Lock",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "Unlock",
      name: "Unlock",
      pkg: "",
      typ: $funcType([], [], false)
    }];
    BO.methods = [{
      prop: "RLock",
      name: "RLock",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "RUnlock",
      name: "RUnlock",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "Lock",
      name: "Lock",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "Unlock",
      name: "Unlock",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "RLocker",
      name: "RLocker",
      pkg: "",
      typ: $funcType([], [AA], false)
    }];
    BN.methods = [{
      prop: "Lock",
      name: "Lock",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "Unlock",
      name: "Unlock",
      pkg: "",
      typ: $funcType([], [], false)
    }];
    F.init("sync", [{
      prop: "local",
      name: "local",
      embedded: false,
      exported: false,
      typ: $UnsafePointer,
      tag: ""
    }, {
      prop: "localSize",
      name: "localSize",
      embedded: false,
      exported: false,
      typ: $Uintptr,
      tag: ""
    }, {
      prop: "store",
      name: "store",
      embedded: false,
      exported: false,
      typ: BM,
      tag: ""
    }, {
      prop: "New",
      name: "New",
      embedded: false,
      exported: true,
      typ: BR,
      tag: ""
    }]);
    Z.init("sync", [{
      prop: "state",
      name: "state",
      embedded: false,
      exported: false,
      typ: $Int32,
      tag: ""
    }, {
      prop: "sema",
      name: "sema",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }]);
    AA.init([{
      prop: "Lock",
      name: "Lock",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "Unlock",
      name: "Unlock",
      pkg: "",
      typ: $funcType([], [], false)
    }]);
    AC.init("sync", [{
      prop: "private$0",
      name: "private",
      embedded: false,
      exported: false,
      typ: $emptyInterface,
      tag: ""
    }, {
      prop: "shared",
      name: "shared",
      embedded: false,
      exported: false,
      typ: BM,
      tag: ""
    }, {
      prop: "Mutex",
      name: "Mutex",
      embedded: true,
      exported: true,
      typ: Z,
      tag: ""
    }]);
    AD.init("sync", [{
      prop: "poolLocalInternal",
      name: "poolLocalInternal",
      embedded: true,
      exported: false,
      typ: AC,
      tag: ""
    }, {
      prop: "pad",
      name: "pad",
      embedded: false,
      exported: false,
      typ: CD,
      tag: ""
    }]);
    AO.init("sync", [{
      prop: "wait",
      name: "wait",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "notify",
      name: "notify",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "lock",
      name: "lock",
      embedded: false,
      exported: false,
      typ: $Uintptr,
      tag: ""
    }, {
      prop: "head",
      name: "head",
      embedded: false,
      exported: false,
      typ: $UnsafePointer,
      tag: ""
    }, {
      prop: "tail",
      name: "tail",
      embedded: false,
      exported: false,
      typ: $UnsafePointer,
      tag: ""
    }]);
    AV.init("sync", [{
      prop: "w",
      name: "w",
      embedded: false,
      exported: false,
      typ: Z,
      tag: ""
    }, {
      prop: "writerSem",
      name: "writerSem",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "readerSem",
      name: "readerSem",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "readerCount",
      name: "readerCount",
      embedded: false,
      exported: false,
      typ: $Int32,
      tag: ""
    }, {
      prop: "readerWait",
      name: "readerWait",
      embedded: false,
      exported: false,
      typ: $Int32,
      tag: ""
    }]);
    AW.init("sync", [{
      prop: "w",
      name: "w",
      embedded: false,
      exported: false,
      typ: Z,
      tag: ""
    }, {
      prop: "writerSem",
      name: "writerSem",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "readerSem",
      name: "readerSem",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "readerCount",
      name: "readerCount",
      embedded: false,
      exported: false,
      typ: $Int32,
      tag: ""
    }, {
      prop: "readerWait",
      name: "readerWait",
      embedded: false,
      exported: false,
      typ: $Int32,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            AJ = AZ.nil;
            H = {};
            I = {};
            W = (new Uint8Array(8));
            AK();
            AT();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["io"] = (function() {
    var $pkg = {},
      $init, A, B, C, D, E, T, V, W, X, AY, AJ, AK, Y, Z, AA;
    A = $packages["errors"];
    B = $packages["sync"];
    C = $packages["sync/atomic"];
    D = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", true, "io", true, null);
    E = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", true, "io", true, null);
    T = $pkg.ByteScanner = $newType(8, $kindInterface, "io.ByteScanner", true, "io", true, null);
    V = $pkg.RuneReader = $newType(8, $kindInterface, "io.RuneReader", true, "io", true, null);
    W = $pkg.RuneScanner = $newType(8, $kindInterface, "io.RuneScanner", true, "io", true, null);
    X = $pkg.stringWriter = $newType(8, $kindInterface, "io.stringWriter", true, "io", false, null);
    AY = $sliceType($Uint8);
    Y = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = 0;
            d = $ifaceNil;
            e = $assertType(a, X, true);
            f = e[0];
            g = e[1];
            if (g) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            i = f.WriteString(b);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            c = h[0];
            d = h[1];
            $s = -1;
            return [c, d];
          case 2:
            k = a.Write((new AY($stringToBytes(b))));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            c = j[0];
            d = j[1];
            $s = -1;
            return [c, d];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Y
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.WriteString = Y;
    Z = function(a, b, c) {
      var a, b, c, d, e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = 0;
            e = $ifaceNil;
            if (b.$length < c) {
              f = 0;
              g = $pkg.ErrShortBuffer;
              d = f;
              e = g;
              $s = -1;
              return [d, e];
            }
          case 1:
            if (!(d < c && $interfaceIsEqual(e, $ifaceNil))) {
              $s = 2;
              continue;
            }
            h = 0;
            j = a.Read($subslice(b, d));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            i = j;
            h = i[0];
            e = i[1];
            d = d + (h) >> 0;
            $s = 1;
            continue;
          case 2:
            if (d >= c) {
              e = $ifaceNil;
            } else if (d > 0 && $interfaceIsEqual(e, $pkg.EOF)) {
              e = $pkg.ErrUnexpectedEOF;
            }
            $s = -1;
            return [d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Z
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.ReadAtLeast = Z;
    AA = function(a, b) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = 0;
            d = $ifaceNil;
            f = Z(a, b, b.$length);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            e = f;
            c = e[0];
            d = e[1];
            $s = -1;
            return [c, d];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AA
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.ReadFull = AA;
    D.init([{
      prop: "Read",
      name: "Read",
      pkg: "",
      typ: $funcType([AY], [$Int, $error], false)
    }]);
    E.init([{
      prop: "Write",
      name: "Write",
      pkg: "",
      typ: $funcType([AY], [$Int, $error], false)
    }]);
    T.init([{
      prop: "ReadByte",
      name: "ReadByte",
      pkg: "",
      typ: $funcType([], [$Uint8, $error], false)
    }, {
      prop: "UnreadByte",
      name: "UnreadByte",
      pkg: "",
      typ: $funcType([], [$error], false)
    }]);
    V.init([{
      prop: "ReadRune",
      name: "ReadRune",
      pkg: "",
      typ: $funcType([], [$Int32, $Int, $error], false)
    }]);
    W.init([{
      prop: "ReadRune",
      name: "ReadRune",
      pkg: "",
      typ: $funcType([], [$Int32, $Int, $error], false)
    }, {
      prop: "UnreadRune",
      name: "UnreadRune",
      pkg: "",
      typ: $funcType([], [$error], false)
    }]);
    X.init([{
      prop: "WriteString",
      name: "WriteString",
      pkg: "",
      typ: $funcType([$String], [$Int, $error], false)
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $pkg.ErrShortWrite = A.New("short write");
            $pkg.ErrShortBuffer = A.New("short buffer");
            $pkg.EOF = A.New("EOF");
            $pkg.ErrUnexpectedEOF = A.New("unexpected EOF");
            $pkg.ErrNoProgress = A.New("multiple Read calls return no data or error");
            AJ = A.New("Seek: invalid whence");
            AK = A.New("Seek: invalid offset");
            $pkg.ErrClosedPipe = A.New("io: read/write on closed pipe");
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["unicode"] = (function() {
    var $pkg = {},
      $init, O, P, Q, R, T, AF, IX, IY, IZ, JA, JB, JC, JD, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP, CQ, CR, CS, CT, CU, CV, CW, CX, CY, CZ, DA, DB, DC, DD, DE, DF, DG, DH, DI, DJ, DK, DL, DM, DN, DO, DP, DQ, DR, DS, DT, DU, DV, DW, DX, DY, DZ, EA, EB, EC, ED, EE, EF, EG, EH, EI, EJ, EK, EL, EM, EN, EO, EP, EQ, ER, ES, ET, EU, EV, EW, EX, EY, EZ, FA, FB, FC, FD, FE, FF, FG, FH, FI, FJ, FK, FL, FM, FN, FO, FP, FQ, FR, FS, FT, FU, FV, FW, FX, FY, FZ, GA, GB, GC, GD, GE, GF, GG, GH, GI, GJ, GK, GL, GM, GN, GO, GP, GQ, GR, GS, GT, GU, GV, GW, GX, GY, GZ, HA, HB, IJ, IK, IL, IM, IN, IO, IP, IQ, IR, IS, IT, IU, IV, IW, A, C, E, G, I, M, U, V, W, X, AB, AC, AD, AE, AG;
    O = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", true, "unicode", true, function(R16_, R32_, LatinOffset_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.R16 = IY.nil;
        this.R32 = IZ.nil;
        this.LatinOffset = 0;
        return;
      }
      this.R16 = R16_;
      this.R32 = R32_;
      this.LatinOffset = LatinOffset_;
    });
    P = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", true, "unicode", true, function(Lo_, Hi_, Stride_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Lo = 0;
        this.Hi = 0;
        this.Stride = 0;
        return;
      }
      this.Lo = Lo_;
      this.Hi = Hi_;
      this.Stride = Stride_;
    });
    Q = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", true, "unicode", true, function(Lo_, Hi_, Stride_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Lo = 0;
        this.Hi = 0;
        this.Stride = 0;
        return;
      }
      this.Lo = Lo_;
      this.Hi = Hi_;
      this.Stride = Stride_;
    });
    R = $pkg.CaseRange = $newType(0, $kindStruct, "unicode.CaseRange", true, "unicode", true, function(Lo_, Hi_, Delta_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Lo = 0;
        this.Hi = 0;
        this.Delta = IX.zero();
        return;
      }
      this.Lo = Lo_;
      this.Hi = Hi_;
      this.Delta = Delta_;
    });
    T = $pkg.d = $newType(12, $kindArray, "unicode.d", true, "unicode", false, null);
    AF = $pkg.foldPair = $newType(0, $kindStruct, "unicode.foldPair", true, "unicode", false, function(From_, To_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.From = 0;
        this.To = 0;
        return;
      }
      this.From = From_;
      this.To = To_;
    });
    IX = $arrayType($Int32, 3);
    IY = $sliceType(P);
    IZ = $sliceType(Q);
    JA = $ptrType(O);
    JB = $sliceType(JA);
    JC = $sliceType(R);
    JD = $sliceType(AF);
    A = function(b, c, d) {
      var b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u;
      e = 0;
      f = false;
      if (b < 0 || 3 <= b) {
        g = 65533;
        h = false;
        e = g;
        f = h;
        return [e, f];
      }
      i = 0;
      j = d.$length;
      while (true) {
        if (!(i < j)) {
          break;
        }
        l = i + (k = ((j - i >> 0)) / 2, (k === k && k !== 1 / 0 && k !== -1 / 0) ? k >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
        m = ((l < 0 || l >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + l]);
        if (((m.Lo >> 0)) <= c && c <= ((m.Hi >> 0))) {
          o = ((n = m.Delta, ((b < 0 || b >= n.length) ? ($throwRuntimeError("index out of range"), undefined) : n[b])));
          if (o > 1114111) {
            p = ((m.Lo >> 0)) + ((((((c - ((m.Lo >> 0)) >> 0)) & ~1) >> 0) | (((b & 1) >> 0)))) >> 0;
            q = true;
            e = p;
            f = q;
            return [e, f];
          }
          r = c + o >> 0;
          s = true;
          e = r;
          f = s;
          return [e, f];
        }
        if (c < ((m.Lo >> 0))) {
          j = l;
        } else {
          i = l + 1 >> 0;
        }
      }
      t = c;
      u = false;
      e = t;
      f = u;
      return [e, f];
    };
    C = function(b) {
      var b;
      if (b <= 255) {
        return 48 <= b && b <= 57;
      }
      return X($pkg.Digit, b);
    };
    $pkg.IsDigit = C;
    E = function(b) {
      var b, c;
      if (((b >>> 0)) <= 255) {
        return !(((((c = ((b << 24 >>> 24)), ((c < 0 || c >= IL.length) ? ($throwRuntimeError("index out of range"), undefined) : IL[c])) & 128) >>> 0) === 0));
      }
      return G(b, $pkg.PrintRanges);
    };
    $pkg.IsPrint = E;
    G = function(b, c) {
      var b, c, d, e, f;
      d = c;
      e = 0;
      while (true) {
        if (!(e < d.$length)) {
          break;
        }
        f = ((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e]);
        if (W(f, b)) {
          return true;
        }
        e++;
      }
      return false;
    };
    $pkg.In = G;
    I = function(b) {
      var b, c;
      if (((b >>> 0)) <= 255) {
        return !(((((c = ((b << 24 >>> 24)), ((c < 0 || c >= IL.length) ? ($throwRuntimeError("index out of range"), undefined) : IL[c])) & 96) >>> 0) === 0));
      }
      return X($pkg.Letter, b);
    };
    $pkg.IsLetter = I;
    M = function(b) {
      var b, c;
      if (((b >>> 0)) <= 255) {
        c = b;
        if ((c === (9)) || (c === (10)) || (c === (11)) || (c === (12)) || (c === (13)) || (c === (32)) || (c === (133)) || (c === (160))) {
          return true;
        }
        return false;
      }
      return X($pkg.White_Space, b);
    };
    $pkg.IsSpace = M;
    U = function(b, c) {
      var b, c, d, e, f, g, h, i, j, k, l, m, n;
      if (b.$length <= 18 || c <= 255) {
        d = b;
        e = 0;
        while (true) {
          if (!(e < d.$length)) {
            break;
          }
          f = e;
          g = ((f < 0 || f >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + f]);
          if (c < g.Lo) {
            return false;
          }
          if (c <= g.Hi) {
            return (g.Stride === 1) || ((h = ((c - g.Lo << 16 >>> 16)) % g.Stride, h === h ? h : $throwRuntimeError("integer divide by zero")) === 0);
          }
          e++;
        }
        return false;
      }
      i = 0;
      j = b.$length;
      while (true) {
        if (!(i < j)) {
          break;
        }
        l = i + (k = ((j - i >> 0)) / 2, (k === k && k !== 1 / 0 && k !== -1 / 0) ? k >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
        m = ((l < 0 || l >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + l]);
        if (m.Lo <= c && c <= m.Hi) {
          return (m.Stride === 1) || ((n = ((c - m.Lo << 16 >>> 16)) % m.Stride, n === n ? n : $throwRuntimeError("integer divide by zero")) === 0);
        }
        if (c < m.Lo) {
          j = l;
        } else {
          i = l + 1 >> 0;
        }
      }
      return false;
    };
    V = function(b, c) {
      var b, c, d, e, f, g, h, i, j, k, l, m, n;
      if (b.$length <= 18) {
        d = b;
        e = 0;
        while (true) {
          if (!(e < d.$length)) {
            break;
          }
          f = e;
          g = ((f < 0 || f >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + f]);
          if (c < g.Lo) {
            return false;
          }
          if (c <= g.Hi) {
            return (g.Stride === 1) || ((h = ((c - g.Lo >>> 0)) % g.Stride, h === h ? h : $throwRuntimeError("integer divide by zero")) === 0);
          }
          e++;
        }
        return false;
      }
      i = 0;
      j = b.$length;
      while (true) {
        if (!(i < j)) {
          break;
        }
        l = i + (k = ((j - i >> 0)) / 2, (k === k && k !== 1 / 0 && k !== -1 / 0) ? k >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
        m = $clone(((l < 0 || l >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + l]), Q);
        if (m.Lo <= c && c <= m.Hi) {
          return (m.Stride === 1) || ((n = ((c - m.Lo >>> 0)) % m.Stride, n === n ? n : $throwRuntimeError("integer divide by zero")) === 0);
        }
        if (c < m.Lo) {
          j = l;
        } else {
          i = l + 1 >> 0;
        }
      }
      return false;
    };
    W = function(b, c) {
      var b, c, d, e, f;
      d = b.R16;
      if (d.$length > 0 && c <= (((e = d.$length - 1 >> 0, ((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e])).Hi >> 0))) {
        return U(d, ((c << 16 >>> 16)));
      }
      f = b.R32;
      if (f.$length > 0 && c >= (((0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0]).Lo >> 0))) {
        return V(f, ((c >>> 0)));
      }
      return false;
    };
    $pkg.Is = W;
    X = function(b, c) {
      var b, c, d, e, f, g;
      d = b.R16;
      e = b.LatinOffset;
      if (d.$length > e && c <= (((f = d.$length - 1 >> 0, ((f < 0 || f >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + f])).Hi >> 0))) {
        return U($subslice(d, e), ((c << 16 >>> 16)));
      }
      g = b.R32;
      if (g.$length > 0 && c >= (((0 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 0]).Lo >> 0))) {
        return V(g, ((c >>> 0)));
      }
      return false;
    };
    AB = function(b, c) {
      var b, c, d;
      d = A(b, c, $pkg.CaseRanges);
      c = d[0];
      return c;
    };
    $pkg.To = AB;
    AC = function(b) {
      var b;
      if (b <= 127) {
        if (97 <= b && b <= 122) {
          b = b - (32) >> 0;
        }
        return b;
      }
      return AB(0, b);
    };
    $pkg.ToUpper = AC;
    AD = function(b) {
      var b;
      if (b <= 127) {
        if (65 <= b && b <= 90) {
          b = b + (32) >> 0;
        }
        return b;
      }
      return AB(1, b);
    };
    $pkg.ToLower = AD;
    AE = function(b) {
      var b;
      if (b <= 127) {
        if (97 <= b && b <= 122) {
          b = b - (32) >> 0;
        }
        return b;
      }
      return AB(2, b);
    };
    $pkg.ToTitle = AE;
    AG = function(b) {
      var b, c, d, e, f, g;
      if (b < 0 || b > 1114111) {
        return b;
      }
      if (((b >> 0)) < 128) {
        return ((((b < 0 || b >= IM.length) ? ($throwRuntimeError("index out of range"), undefined) : IM[b]) >> 0));
      }
      c = 0;
      d = IN.$length;
      while (true) {
        if (!(c < d)) {
          break;
        }
        f = c + (e = ((d - c >> 0)) / 2, (e === e && e !== 1 / 0 && e !== -1 / 0) ? e >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
        if (((((f < 0 || f >= IN.$length) ? ($throwRuntimeError("index out of range"), undefined) : IN.$array[IN.$offset + f]).From >> 0)) < b) {
          c = f + 1 >> 0;
        } else {
          d = f;
        }
      }
      if (c < IN.$length && (((((c < 0 || c >= IN.$length) ? ($throwRuntimeError("index out of range"), undefined) : IN.$array[IN.$offset + c]).From >> 0)) === b)) {
        return ((((c < 0 || c >= IN.$length) ? ($throwRuntimeError("index out of range"), undefined) : IN.$array[IN.$offset + c]).To >> 0));
      }
      g = AD(b);
      if (!((g === b))) {
        return g;
      }
      return AC(b);
    };
    $pkg.SimpleFold = AG;
    O.init("", [{
      prop: "R16",
      name: "R16",
      embedded: false,
      exported: true,
      typ: IY,
      tag: ""
    }, {
      prop: "R32",
      name: "R32",
      embedded: false,
      exported: true,
      typ: IZ,
      tag: ""
    }, {
      prop: "LatinOffset",
      name: "LatinOffset",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: ""
    }]);
    P.init("", [{
      prop: "Lo",
      name: "Lo",
      embedded: false,
      exported: true,
      typ: $Uint16,
      tag: ""
    }, {
      prop: "Hi",
      name: "Hi",
      embedded: false,
      exported: true,
      typ: $Uint16,
      tag: ""
    }, {
      prop: "Stride",
      name: "Stride",
      embedded: false,
      exported: true,
      typ: $Uint16,
      tag: ""
    }]);
    Q.init("", [{
      prop: "Lo",
      name: "Lo",
      embedded: false,
      exported: true,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "Hi",
      name: "Hi",
      embedded: false,
      exported: true,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "Stride",
      name: "Stride",
      embedded: false,
      exported: true,
      typ: $Uint32,
      tag: ""
    }]);
    R.init("", [{
      prop: "Lo",
      name: "Lo",
      embedded: false,
      exported: true,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "Hi",
      name: "Hi",
      embedded: false,
      exported: true,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "Delta",
      name: "Delta",
      embedded: false,
      exported: true,
      typ: T,
      tag: ""
    }]);
    T.init($Int32, 3);
    AF.init("", [{
      prop: "From",
      name: "From",
      embedded: false,
      exported: true,
      typ: $Uint16,
      tag: ""
    }, {
      prop: "To",
      name: "To",
      embedded: false,
      exported: true,
      typ: $Uint16,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            AH = new O.ptr(new IY([new P.ptr(0, 31, 1), new P.ptr(127, 159, 1), new P.ptr(173, 1536, 1363), new P.ptr(1537, 1541, 1), new P.ptr(1564, 1757, 193), new P.ptr(1807, 2274, 467), new P.ptr(6158, 8203, 2045), new P.ptr(8204, 8207, 1), new P.ptr(8234, 8238, 1), new P.ptr(8288, 8292, 1), new P.ptr(8294, 8303, 1), new P.ptr(55296, 63743, 1), new P.ptr(65279, 65529, 250), new P.ptr(65530, 65531, 1)]), new IZ([new Q.ptr(69821, 113824, 44003), new Q.ptr(113825, 113827, 1), new Q.ptr(119155, 119162, 1), new Q.ptr(917505, 917536, 31), new Q.ptr(917537, 917631, 1), new Q.ptr(983040, 1048573, 1), new Q.ptr(1048576, 1114109, 1)]), 2);
            AI = new O.ptr(new IY([new P.ptr(0, 31, 1), new P.ptr(127, 159, 1)]), IZ.nil, 2);
            AJ = new O.ptr(new IY([new P.ptr(173, 1536, 1363), new P.ptr(1537, 1541, 1), new P.ptr(1564, 1757, 193), new P.ptr(1807, 2274, 467), new P.ptr(6158, 8203, 2045), new P.ptr(8204, 8207, 1), new P.ptr(8234, 8238, 1), new P.ptr(8288, 8292, 1), new P.ptr(8294, 8303, 1), new P.ptr(65279, 65529, 250), new P.ptr(65530, 65531, 1)]), new IZ([new Q.ptr(69821, 113824, 44003), new Q.ptr(113825, 113827, 1), new Q.ptr(119155, 119162, 1), new Q.ptr(917505, 917536, 31), new Q.ptr(917537, 917631, 1)]), 0);
            AK = new O.ptr(new IY([new P.ptr(57344, 63743, 1)]), new IZ([new Q.ptr(983040, 1048573, 1), new Q.ptr(1048576, 1114109, 1)]), 0);
            AL = new O.ptr(new IY([new P.ptr(55296, 57343, 1)]), IZ.nil, 0);
            AM = new O.ptr(new IY([new P.ptr(65, 90, 1), new P.ptr(97, 122, 1), new P.ptr(170, 181, 11), new P.ptr(186, 192, 6), new P.ptr(193, 214, 1), new P.ptr(216, 246, 1), new P.ptr(248, 705, 1), new P.ptr(710, 721, 1), new P.ptr(736, 740, 1), new P.ptr(748, 750, 2), new P.ptr(880, 884, 1), new P.ptr(886, 887, 1), new P.ptr(890, 893, 1), new P.ptr(895, 902, 7), new P.ptr(904, 906, 1), new P.ptr(908, 910, 2), new P.ptr(911, 929, 1), new P.ptr(931, 1013, 1), new P.ptr(1015, 1153, 1), new P.ptr(1162, 1327, 1), new P.ptr(1329, 1366, 1), new P.ptr(1369, 1377, 8), new P.ptr(1378, 1415, 1), new P.ptr(1488, 1514, 1), new P.ptr(1520, 1522, 1), new P.ptr(1568, 1610, 1), new P.ptr(1646, 1647, 1), new P.ptr(1649, 1747, 1), new P.ptr(1749, 1765, 16), new P.ptr(1766, 1774, 8), new P.ptr(1775, 1786, 11), new P.ptr(1787, 1788, 1), new P.ptr(1791, 1808, 17), new P.ptr(1810, 1839, 1), new P.ptr(1869, 1957, 1), new P.ptr(1969, 1994, 25), new P.ptr(1995, 2026, 1), new P.ptr(2036, 2037, 1), new P.ptr(2042, 2048, 6), new P.ptr(2049, 2069, 1), new P.ptr(2074, 2084, 10), new P.ptr(2088, 2112, 24), new P.ptr(2113, 2136, 1), new P.ptr(2144, 2154, 1), new P.ptr(2208, 2228, 1), new P.ptr(2230, 2237, 1), new P.ptr(2308, 2361, 1), new P.ptr(2365, 2384, 19), new P.ptr(2392, 2401, 1), new P.ptr(2417, 2432, 1), new P.ptr(2437, 2444, 1), new P.ptr(2447, 2448, 1), new P.ptr(2451, 2472, 1), new P.ptr(2474, 2480, 1), new P.ptr(2482, 2486, 4), new P.ptr(2487, 2489, 1), new P.ptr(2493, 2510, 17), new P.ptr(2524, 2525, 1), new P.ptr(2527, 2529, 1), new P.ptr(2544, 2545, 1), new P.ptr(2556, 2565, 9), new P.ptr(2566, 2570, 1), new P.ptr(2575, 2576, 1), new P.ptr(2579, 2600, 1), new P.ptr(2602, 2608, 1), new P.ptr(2610, 2611, 1), new P.ptr(2613, 2614, 1), new P.ptr(2616, 2617, 1), new P.ptr(2649, 2652, 1), new P.ptr(2654, 2674, 20), new P.ptr(2675, 2676, 1), new P.ptr(2693, 2701, 1), new P.ptr(2703, 2705, 1), new P.ptr(2707, 2728, 1), new P.ptr(2730, 2736, 1), new P.ptr(2738, 2739, 1), new P.ptr(2741, 2745, 1), new P.ptr(2749, 2768, 19), new P.ptr(2784, 2785, 1), new P.ptr(2809, 2821, 12), new P.ptr(2822, 2828, 1), new P.ptr(2831, 2832, 1), new P.ptr(2835, 2856, 1), new P.ptr(2858, 2864, 1), new P.ptr(2866, 2867, 1), new P.ptr(2869, 2873, 1), new P.ptr(2877, 2908, 31), new P.ptr(2909, 2911, 2), new P.ptr(2912, 2913, 1), new P.ptr(2929, 2947, 18), new P.ptr(2949, 2954, 1), new P.ptr(2958, 2960, 1), new P.ptr(2962, 2965, 1), new P.ptr(2969, 2970, 1), new P.ptr(2972, 2974, 2), new P.ptr(2975, 2979, 4), new P.ptr(2980, 2984, 4), new P.ptr(2985, 2986, 1), new P.ptr(2990, 3001, 1), new P.ptr(3024, 3077, 53), new P.ptr(3078, 3084, 1), new P.ptr(3086, 3088, 1), new P.ptr(3090, 3112, 1), new P.ptr(3114, 3129, 1), new P.ptr(3133, 3160, 27), new P.ptr(3161, 3162, 1), new P.ptr(3168, 3169, 1), new P.ptr(3200, 3205, 5), new P.ptr(3206, 3212, 1), new P.ptr(3214, 3216, 1), new P.ptr(3218, 3240, 1), new P.ptr(3242, 3251, 1), new P.ptr(3253, 3257, 1), new P.ptr(3261, 3294, 33), new P.ptr(3296, 3297, 1), new P.ptr(3313, 3314, 1), new P.ptr(3333, 3340, 1), new P.ptr(3342, 3344, 1), new P.ptr(3346, 3386, 1), new P.ptr(3389, 3406, 17), new P.ptr(3412, 3414, 1), new P.ptr(3423, 3425, 1), new P.ptr(3450, 3455, 1), new P.ptr(3461, 3478, 1), new P.ptr(3482, 3505, 1), new P.ptr(3507, 3515, 1), new P.ptr(3517, 3520, 3), new P.ptr(3521, 3526, 1), new P.ptr(3585, 3632, 1), new P.ptr(3634, 3635, 1), new P.ptr(3648, 3654, 1), new P.ptr(3713, 3714, 1), new P.ptr(3716, 3719, 3), new P.ptr(3720, 3722, 2), new P.ptr(3725, 3732, 7), new P.ptr(3733, 3735, 1), new P.ptr(3737, 3743, 1), new P.ptr(3745, 3747, 1), new P.ptr(3749, 3751, 2), new P.ptr(3754, 3755, 1), new P.ptr(3757, 3760, 1), new P.ptr(3762, 3763, 1), new P.ptr(3773, 3776, 3), new P.ptr(3777, 3780, 1), new P.ptr(3782, 3804, 22), new P.ptr(3805, 3807, 1), new P.ptr(3840, 3904, 64), new P.ptr(3905, 3911, 1), new P.ptr(3913, 3948, 1), new P.ptr(3976, 3980, 1), new P.ptr(4096, 4138, 1), new P.ptr(4159, 4176, 17), new P.ptr(4177, 4181, 1), new P.ptr(4186, 4189, 1), new P.ptr(4193, 4197, 4), new P.ptr(4198, 4206, 8), new P.ptr(4207, 4208, 1), new P.ptr(4213, 4225, 1), new P.ptr(4238, 4256, 18), new P.ptr(4257, 4293, 1), new P.ptr(4295, 4301, 6), new P.ptr(4304, 4346, 1), new P.ptr(4348, 4680, 1), new P.ptr(4682, 4685, 1), new P.ptr(4688, 4694, 1), new P.ptr(4696, 4698, 2), new P.ptr(4699, 4701, 1), new P.ptr(4704, 4744, 1), new P.ptr(4746, 4749, 1), new P.ptr(4752, 4784, 1), new P.ptr(4786, 4789, 1), new P.ptr(4792, 4798, 1), new P.ptr(4800, 4802, 2), new P.ptr(4803, 4805, 1), new P.ptr(4808, 4822, 1), new P.ptr(4824, 4880, 1), new P.ptr(4882, 4885, 1), new P.ptr(4888, 4954, 1), new P.ptr(4992, 5007, 1), new P.ptr(5024, 5109, 1), new P.ptr(5112, 5117, 1), new P.ptr(5121, 5740, 1), new P.ptr(5743, 5759, 1), new P.ptr(5761, 5786, 1), new P.ptr(5792, 5866, 1), new P.ptr(5873, 5880, 1), new P.ptr(5888, 5900, 1), new P.ptr(5902, 5905, 1), new P.ptr(5920, 5937, 1), new P.ptr(5952, 5969, 1), new P.ptr(5984, 5996, 1), new P.ptr(5998, 6000, 1), new P.ptr(6016, 6067, 1), new P.ptr(6103, 6108, 5), new P.ptr(6176, 6263, 1), new P.ptr(6272, 6276, 1), new P.ptr(6279, 6312, 1), new P.ptr(6314, 6320, 6), new P.ptr(6321, 6389, 1), new P.ptr(6400, 6430, 1), new P.ptr(6480, 6509, 1), new P.ptr(6512, 6516, 1), new P.ptr(6528, 6571, 1), new P.ptr(6576, 6601, 1), new P.ptr(6656, 6678, 1), new P.ptr(6688, 6740, 1), new P.ptr(6823, 6917, 94), new P.ptr(6918, 6963, 1), new P.ptr(6981, 6987, 1), new P.ptr(7043, 7072, 1), new P.ptr(7086, 7087, 1), new P.ptr(7098, 7141, 1), new P.ptr(7168, 7203, 1), new P.ptr(7245, 7247, 1), new P.ptr(7258, 7293, 1), new P.ptr(7296, 7304, 1), new P.ptr(7401, 7404, 1), new P.ptr(7406, 7409, 1), new P.ptr(7413, 7414, 1), new P.ptr(7424, 7615, 1), new P.ptr(7680, 7957, 1), new P.ptr(7960, 7965, 1), new P.ptr(7968, 8005, 1), new P.ptr(8008, 8013, 1), new P.ptr(8016, 8023, 1), new P.ptr(8025, 8031, 2), new P.ptr(8032, 8061, 1), new P.ptr(8064, 8116, 1), new P.ptr(8118, 8124, 1), new P.ptr(8126, 8130, 4), new P.ptr(8131, 8132, 1), new P.ptr(8134, 8140, 1), new P.ptr(8144, 8147, 1), new P.ptr(8150, 8155, 1), new P.ptr(8160, 8172, 1), new P.ptr(8178, 8180, 1), new P.ptr(8182, 8188, 1), new P.ptr(8305, 8319, 14), new P.ptr(8336, 8348, 1), new P.ptr(8450, 8455, 5), new P.ptr(8458, 8467, 1), new P.ptr(8469, 8473, 4), new P.ptr(8474, 8477, 1), new P.ptr(8484, 8490, 2), new P.ptr(8491, 8493, 1), new P.ptr(8495, 8505, 1), new P.ptr(8508, 8511, 1), new P.ptr(8517, 8521, 1), new P.ptr(8526, 8579, 53), new P.ptr(8580, 11264, 2684), new P.ptr(11265, 11310, 1), new P.ptr(11312, 11358, 1), new P.ptr(11360, 11492, 1), new P.ptr(11499, 11502, 1), new P.ptr(11506, 11507, 1), new P.ptr(11520, 11557, 1), new P.ptr(11559, 11565, 6), new P.ptr(11568, 11623, 1), new P.ptr(11631, 11648, 17), new P.ptr(11649, 11670, 1), new P.ptr(11680, 11686, 1), new P.ptr(11688, 11694, 1), new P.ptr(11696, 11702, 1), new P.ptr(11704, 11710, 1), new P.ptr(11712, 11718, 1), new P.ptr(11720, 11726, 1), new P.ptr(11728, 11734, 1), new P.ptr(11736, 11742, 1), new P.ptr(11823, 12293, 470), new P.ptr(12294, 12337, 43), new P.ptr(12338, 12341, 1), new P.ptr(12347, 12348, 1), new P.ptr(12353, 12438, 1), new P.ptr(12445, 12447, 1), new P.ptr(12449, 12538, 1), new P.ptr(12540, 12543, 1), new P.ptr(12549, 12590, 1), new P.ptr(12593, 12686, 1), new P.ptr(12704, 12730, 1), new P.ptr(12784, 12799, 1), new P.ptr(13312, 19893, 1), new P.ptr(19968, 40938, 1), new P.ptr(40960, 42124, 1), new P.ptr(42192, 42237, 1), new P.ptr(42240, 42508, 1), new P.ptr(42512, 42527, 1), new P.ptr(42538, 42539, 1), new P.ptr(42560, 42606, 1), new P.ptr(42623, 42653, 1), new P.ptr(42656, 42725, 1), new P.ptr(42775, 42783, 1), new P.ptr(42786, 42888, 1), new P.ptr(42891, 42926, 1), new P.ptr(42928, 42935, 1), new P.ptr(42999, 43009, 1), new P.ptr(43011, 43013, 1), new P.ptr(43015, 43018, 1), new P.ptr(43020, 43042, 1), new P.ptr(43072, 43123, 1), new P.ptr(43138, 43187, 1), new P.ptr(43250, 43255, 1), new P.ptr(43259, 43261, 2), new P.ptr(43274, 43301, 1), new P.ptr(43312, 43334, 1), new P.ptr(43360, 43388, 1), new P.ptr(43396, 43442, 1), new P.ptr(43471, 43488, 17), new P.ptr(43489, 43492, 1), new P.ptr(43494, 43503, 1), new P.ptr(43514, 43518, 1), new P.ptr(43520, 43560, 1), new P.ptr(43584, 43586, 1), new P.ptr(43588, 43595, 1), new P.ptr(43616, 43638, 1), new P.ptr(43642, 43646, 4), new P.ptr(43647, 43695, 1), new P.ptr(43697, 43701, 4), new P.ptr(43702, 43705, 3), new P.ptr(43706, 43709, 1), new P.ptr(43712, 43714, 2), new P.ptr(43739, 43741, 1), new P.ptr(43744, 43754, 1), new P.ptr(43762, 43764, 1), new P.ptr(43777, 43782, 1), new P.ptr(43785, 43790, 1), new P.ptr(43793, 43798, 1), new P.ptr(43808, 43814, 1), new P.ptr(43816, 43822, 1), new P.ptr(43824, 43866, 1), new P.ptr(43868, 43877, 1), new P.ptr(43888, 44002, 1), new P.ptr(44032, 55203, 1), new P.ptr(55216, 55238, 1), new P.ptr(55243, 55291, 1), new P.ptr(63744, 64109, 1), new P.ptr(64112, 64217, 1), new P.ptr(64256, 64262, 1), new P.ptr(64275, 64279, 1), new P.ptr(64285, 64287, 2), new P.ptr(64288, 64296, 1), new P.ptr(64298, 64310, 1), new P.ptr(64312, 64316, 1), new P.ptr(64318, 64320, 2), new P.ptr(64321, 64323, 2), new P.ptr(64324, 64326, 2), new P.ptr(64327, 64433, 1), new P.ptr(64467, 64829, 1), new P.ptr(64848, 64911, 1), new P.ptr(64914, 64967, 1), new P.ptr(65008, 65019, 1), new P.ptr(65136, 65140, 1), new P.ptr(65142, 65276, 1), new P.ptr(65313, 65338, 1), new P.ptr(65345, 65370, 1), new P.ptr(65382, 65470, 1), new P.ptr(65474, 65479, 1), new P.ptr(65482, 65487, 1), new P.ptr(65490, 65495, 1), new P.ptr(65498, 65500, 1)]), new IZ([new Q.ptr(65536, 65547, 1), new Q.ptr(65549, 65574, 1), new Q.ptr(65576, 65594, 1), new Q.ptr(65596, 65597, 1), new Q.ptr(65599, 65613, 1), new Q.ptr(65616, 65629, 1), new Q.ptr(65664, 65786, 1), new Q.ptr(66176, 66204, 1), new Q.ptr(66208, 66256, 1), new Q.ptr(66304, 66335, 1), new Q.ptr(66349, 66368, 1), new Q.ptr(66370, 66377, 1), new Q.ptr(66384, 66421, 1), new Q.ptr(66432, 66461, 1), new Q.ptr(66464, 66499, 1), new Q.ptr(66504, 66511, 1), new Q.ptr(66560, 66717, 1), new Q.ptr(66736, 66771, 1), new Q.ptr(66776, 66811, 1), new Q.ptr(66816, 66855, 1), new Q.ptr(66864, 66915, 1), new Q.ptr(67072, 67382, 1), new Q.ptr(67392, 67413, 1), new Q.ptr(67424, 67431, 1), new Q.ptr(67584, 67589, 1), new Q.ptr(67592, 67594, 2), new Q.ptr(67595, 67637, 1), new Q.ptr(67639, 67640, 1), new Q.ptr(67644, 67647, 3), new Q.ptr(67648, 67669, 1), new Q.ptr(67680, 67702, 1), new Q.ptr(67712, 67742, 1), new Q.ptr(67808, 67826, 1), new Q.ptr(67828, 67829, 1), new Q.ptr(67840, 67861, 1), new Q.ptr(67872, 67897, 1), new Q.ptr(67968, 68023, 1), new Q.ptr(68030, 68031, 1), new Q.ptr(68096, 68112, 16), new Q.ptr(68113, 68115, 1), new Q.ptr(68117, 68119, 1), new Q.ptr(68121, 68147, 1), new Q.ptr(68192, 68220, 1), new Q.ptr(68224, 68252, 1), new Q.ptr(68288, 68295, 1), new Q.ptr(68297, 68324, 1), new Q.ptr(68352, 68405, 1), new Q.ptr(68416, 68437, 1), new Q.ptr(68448, 68466, 1), new Q.ptr(68480, 68497, 1), new Q.ptr(68608, 68680, 1), new Q.ptr(68736, 68786, 1), new Q.ptr(68800, 68850, 1), new Q.ptr(69635, 69687, 1), new Q.ptr(69763, 69807, 1), new Q.ptr(69840, 69864, 1), new Q.ptr(69891, 69926, 1), new Q.ptr(69968, 70002, 1), new Q.ptr(70006, 70019, 13), new Q.ptr(70020, 70066, 1), new Q.ptr(70081, 70084, 1), new Q.ptr(70106, 70108, 2), new Q.ptr(70144, 70161, 1), new Q.ptr(70163, 70187, 1), new Q.ptr(70272, 70278, 1), new Q.ptr(70280, 70282, 2), new Q.ptr(70283, 70285, 1), new Q.ptr(70287, 70301, 1), new Q.ptr(70303, 70312, 1), new Q.ptr(70320, 70366, 1), new Q.ptr(70405, 70412, 1), new Q.ptr(70415, 70416, 1), new Q.ptr(70419, 70440, 1), new Q.ptr(70442, 70448, 1), new Q.ptr(70450, 70451, 1), new Q.ptr(70453, 70457, 1), new Q.ptr(70461, 70480, 19), new Q.ptr(70493, 70497, 1), new Q.ptr(70656, 70708, 1), new Q.ptr(70727, 70730, 1), new Q.ptr(70784, 70831, 1), new Q.ptr(70852, 70853, 1), new Q.ptr(70855, 71040, 185), new Q.ptr(71041, 71086, 1), new Q.ptr(71128, 71131, 1), new Q.ptr(71168, 71215, 1), new Q.ptr(71236, 71296, 60), new Q.ptr(71297, 71338, 1), new Q.ptr(71424, 71449, 1), new Q.ptr(71840, 71903, 1), new Q.ptr(71935, 72192, 257), new Q.ptr(72203, 72242, 1), new Q.ptr(72250, 72272, 22), new Q.ptr(72284, 72323, 1), new Q.ptr(72326, 72329, 1), new Q.ptr(72384, 72440, 1), new Q.ptr(72704, 72712, 1), new Q.ptr(72714, 72750, 1), new Q.ptr(72768, 72818, 50), new Q.ptr(72819, 72847, 1), new Q.ptr(72960, 72966, 1), new Q.ptr(72968, 72969, 1), new Q.ptr(72971, 73008, 1), new Q.ptr(73030, 73728, 698), new Q.ptr(73729, 74649, 1), new Q.ptr(74880, 75075, 1), new Q.ptr(77824, 78894, 1), new Q.ptr(82944, 83526, 1), new Q.ptr(92160, 92728, 1), new Q.ptr(92736, 92766, 1), new Q.ptr(92880, 92909, 1), new Q.ptr(92928, 92975, 1), new Q.ptr(92992, 92995, 1), new Q.ptr(93027, 93047, 1), new Q.ptr(93053, 93071, 1), new Q.ptr(93952, 94020, 1), new Q.ptr(94032, 94099, 67), new Q.ptr(94100, 94111, 1), new Q.ptr(94176, 94177, 1), new Q.ptr(94208, 100332, 1), new Q.ptr(100352, 101106, 1), new Q.ptr(110592, 110878, 1), new Q.ptr(110960, 111355, 1), new Q.ptr(113664, 113770, 1), new Q.ptr(113776, 113788, 1), new Q.ptr(113792, 113800, 1), new Q.ptr(113808, 113817, 1), new Q.ptr(119808, 119892, 1), new Q.ptr(119894, 119964, 1), new Q.ptr(119966, 119967, 1), new Q.ptr(119970, 119973, 3), new Q.ptr(119974, 119977, 3), new Q.ptr(119978, 119980, 1), new Q.ptr(119982, 119993, 1), new Q.ptr(119995, 119997, 2), new Q.ptr(119998, 120003, 1), new Q.ptr(120005, 120069, 1), new Q.ptr(120071, 120074, 1), new Q.ptr(120077, 120084, 1), new Q.ptr(120086, 120092, 1), new Q.ptr(120094, 120121, 1), new Q.ptr(120123, 120126, 1), new Q.ptr(120128, 120132, 1), new Q.ptr(120134, 120138, 4), new Q.ptr(120139, 120144, 1), new Q.ptr(120146, 120485, 1), new Q.ptr(120488, 120512, 1), new Q.ptr(120514, 120538, 1), new Q.ptr(120540, 120570, 1), new Q.ptr(120572, 120596, 1), new Q.ptr(120598, 120628, 1), new Q.ptr(120630, 120654, 1), new Q.ptr(120656, 120686, 1), new Q.ptr(120688, 120712, 1), new Q.ptr(120714, 120744, 1), new Q.ptr(120746, 120770, 1), new Q.ptr(120772, 120779, 1), new Q.ptr(124928, 125124, 1), new Q.ptr(125184, 125251, 1), new Q.ptr(126464, 126467, 1), new Q.ptr(126469, 126495, 1), new Q.ptr(126497, 126498, 1), new Q.ptr(126500, 126503, 3), new Q.ptr(126505, 126514, 1), new Q.ptr(126516, 126519, 1), new Q.ptr(126521, 126523, 2), new Q.ptr(126530, 126535, 5), new Q.ptr(126537, 126541, 2), new Q.ptr(126542, 126543, 1), new Q.ptr(126545, 126546, 1), new Q.ptr(126548, 126551, 3), new Q.ptr(126553, 126561, 2), new Q.ptr(126562, 126564, 2), new Q.ptr(126567, 126570, 1), new Q.ptr(126572, 126578, 1), new Q.ptr(126580, 126583, 1), new Q.ptr(126585, 126588, 1), new Q.ptr(126590, 126592, 2), new Q.ptr(126593, 126601, 1), new Q.ptr(126603, 126619, 1), new Q.ptr(126625, 126627, 1), new Q.ptr(126629, 126633, 1), new Q.ptr(126635, 126651, 1), new Q.ptr(131072, 173782, 1), new Q.ptr(173824, 177972, 1), new Q.ptr(177984, 178205, 1), new Q.ptr(178208, 183969, 1), new Q.ptr(183984, 191456, 1), new Q.ptr(194560, 195101, 1)]), 6);
            AN = new O.ptr(new IY([new P.ptr(97, 122, 1), new P.ptr(181, 223, 42), new P.ptr(224, 246, 1), new P.ptr(248, 255, 1), new P.ptr(257, 311, 2), new P.ptr(312, 328, 2), new P.ptr(329, 375, 2), new P.ptr(378, 382, 2), new P.ptr(383, 384, 1), new P.ptr(387, 389, 2), new P.ptr(392, 396, 4), new P.ptr(397, 402, 5), new P.ptr(405, 409, 4), new P.ptr(410, 411, 1), new P.ptr(414, 417, 3), new P.ptr(419, 421, 2), new P.ptr(424, 426, 2), new P.ptr(427, 429, 2), new P.ptr(432, 436, 4), new P.ptr(438, 441, 3), new P.ptr(442, 445, 3), new P.ptr(446, 447, 1), new P.ptr(454, 460, 3), new P.ptr(462, 476, 2), new P.ptr(477, 495, 2), new P.ptr(496, 499, 3), new P.ptr(501, 505, 4), new P.ptr(507, 563, 2), new P.ptr(564, 569, 1), new P.ptr(572, 575, 3), new P.ptr(576, 578, 2), new P.ptr(583, 591, 2), new P.ptr(592, 659, 1), new P.ptr(661, 687, 1), new P.ptr(881, 883, 2), new P.ptr(887, 891, 4), new P.ptr(892, 893, 1), new P.ptr(912, 940, 28), new P.ptr(941, 974, 1), new P.ptr(976, 977, 1), new P.ptr(981, 983, 1), new P.ptr(985, 1007, 2), new P.ptr(1008, 1011, 1), new P.ptr(1013, 1019, 3), new P.ptr(1020, 1072, 52), new P.ptr(1073, 1119, 1), new P.ptr(1121, 1153, 2), new P.ptr(1163, 1215, 2), new P.ptr(1218, 1230, 2), new P.ptr(1231, 1327, 2), new P.ptr(1377, 1415, 1), new P.ptr(5112, 5117, 1), new P.ptr(7296, 7304, 1), new P.ptr(7424, 7467, 1), new P.ptr(7531, 7543, 1), new P.ptr(7545, 7578, 1), new P.ptr(7681, 7829, 2), new P.ptr(7830, 7837, 1), new P.ptr(7839, 7935, 2), new P.ptr(7936, 7943, 1), new P.ptr(7952, 7957, 1), new P.ptr(7968, 7975, 1), new P.ptr(7984, 7991, 1), new P.ptr(8000, 8005, 1), new P.ptr(8016, 8023, 1), new P.ptr(8032, 8039, 1), new P.ptr(8048, 8061, 1), new P.ptr(8064, 8071, 1), new P.ptr(8080, 8087, 1), new P.ptr(8096, 8103, 1), new P.ptr(8112, 8116, 1), new P.ptr(8118, 8119, 1), new P.ptr(8126, 8130, 4), new P.ptr(8131, 8132, 1), new P.ptr(8134, 8135, 1), new P.ptr(8144, 8147, 1), new P.ptr(8150, 8151, 1), new P.ptr(8160, 8167, 1), new P.ptr(8178, 8180, 1), new P.ptr(8182, 8183, 1), new P.ptr(8458, 8462, 4), new P.ptr(8463, 8467, 4), new P.ptr(8495, 8505, 5), new P.ptr(8508, 8509, 1), new P.ptr(8518, 8521, 1), new P.ptr(8526, 8580, 54), new P.ptr(11312, 11358, 1), new P.ptr(11361, 11365, 4), new P.ptr(11366, 11372, 2), new P.ptr(11377, 11379, 2), new P.ptr(11380, 11382, 2), new P.ptr(11383, 11387, 1), new P.ptr(11393, 11491, 2), new P.ptr(11492, 11500, 8), new P.ptr(11502, 11507, 5), new P.ptr(11520, 11557, 1), new P.ptr(11559, 11565, 6), new P.ptr(42561, 42605, 2), new P.ptr(42625, 42651, 2), new P.ptr(42787, 42799, 2), new P.ptr(42800, 42801, 1), new P.ptr(42803, 42865, 2), new P.ptr(42866, 42872, 1), new P.ptr(42874, 42876, 2), new P.ptr(42879, 42887, 2), new P.ptr(42892, 42894, 2), new P.ptr(42897, 42899, 2), new P.ptr(42900, 42901, 1), new P.ptr(42903, 42921, 2), new P.ptr(42933, 42935, 2), new P.ptr(43002, 43824, 822), new P.ptr(43825, 43866, 1), new P.ptr(43872, 43877, 1), new P.ptr(43888, 43967, 1), new P.ptr(64256, 64262, 1), new P.ptr(64275, 64279, 1), new P.ptr(65345, 65370, 1)]), new IZ([new Q.ptr(66600, 66639, 1), new Q.ptr(66776, 66811, 1), new Q.ptr(68800, 68850, 1), new Q.ptr(71872, 71903, 1), new Q.ptr(119834, 119859, 1), new Q.ptr(119886, 119892, 1), new Q.ptr(119894, 119911, 1), new Q.ptr(119938, 119963, 1), new Q.ptr(119990, 119993, 1), new Q.ptr(119995, 119997, 2), new Q.ptr(119998, 120003, 1), new Q.ptr(120005, 120015, 1), new Q.ptr(120042, 120067, 1), new Q.ptr(120094, 120119, 1), new Q.ptr(120146, 120171, 1), new Q.ptr(120198, 120223, 1), new Q.ptr(120250, 120275, 1), new Q.ptr(120302, 120327, 1), new Q.ptr(120354, 120379, 1), new Q.ptr(120406, 120431, 1), new Q.ptr(120458, 120485, 1), new Q.ptr(120514, 120538, 1), new Q.ptr(120540, 120545, 1), new Q.ptr(120572, 120596, 1), new Q.ptr(120598, 120603, 1), new Q.ptr(120630, 120654, 1), new Q.ptr(120656, 120661, 1), new Q.ptr(120688, 120712, 1), new Q.ptr(120714, 120719, 1), new Q.ptr(120746, 120770, 1), new Q.ptr(120772, 120777, 1), new Q.ptr(120779, 125218, 4439), new Q.ptr(125219, 125251, 1)]), 4);
            AO = new O.ptr(new IY([new P.ptr(688, 705, 1), new P.ptr(710, 721, 1), new P.ptr(736, 740, 1), new P.ptr(748, 750, 2), new P.ptr(884, 890, 6), new P.ptr(1369, 1600, 231), new P.ptr(1765, 1766, 1), new P.ptr(2036, 2037, 1), new P.ptr(2042, 2074, 32), new P.ptr(2084, 2088, 4), new P.ptr(2417, 3654, 1237), new P.ptr(3782, 4348, 566), new P.ptr(6103, 6211, 108), new P.ptr(6823, 7288, 465), new P.ptr(7289, 7293, 1), new P.ptr(7468, 7530, 1), new P.ptr(7544, 7579, 35), new P.ptr(7580, 7615, 1), new P.ptr(8305, 8319, 14), new P.ptr(8336, 8348, 1), new P.ptr(11388, 11389, 1), new P.ptr(11631, 11823, 192), new P.ptr(12293, 12337, 44), new P.ptr(12338, 12341, 1), new P.ptr(12347, 12445, 98), new P.ptr(12446, 12540, 94), new P.ptr(12541, 12542, 1), new P.ptr(40981, 42232, 1251), new P.ptr(42233, 42237, 1), new P.ptr(42508, 42623, 115), new P.ptr(42652, 42653, 1), new P.ptr(42775, 42783, 1), new P.ptr(42864, 42888, 24), new P.ptr(43000, 43001, 1), new P.ptr(43471, 43494, 23), new P.ptr(43632, 43741, 109), new P.ptr(43763, 43764, 1), new P.ptr(43868, 43871, 1), new P.ptr(65392, 65438, 46), new P.ptr(65439, 65439, 1)]), new IZ([new Q.ptr(92992, 92992, 1), new Q.ptr(92993, 92995, 1), new Q.ptr(94099, 94111, 1), new Q.ptr(94176, 94177, 1)]), 0);
            AP = new O.ptr(new IY([new P.ptr(170, 186, 16), new P.ptr(443, 448, 5), new P.ptr(449, 451, 1), new P.ptr(660, 1488, 828), new P.ptr(1489, 1514, 1), new P.ptr(1520, 1522, 1), new P.ptr(1568, 1599, 1), new P.ptr(1601, 1610, 1), new P.ptr(1646, 1647, 1), new P.ptr(1649, 1747, 1), new P.ptr(1749, 1774, 25), new P.ptr(1775, 1786, 11), new P.ptr(1787, 1788, 1), new P.ptr(1791, 1808, 17), new P.ptr(1810, 1839, 1), new P.ptr(1869, 1957, 1), new P.ptr(1969, 1994, 25), new P.ptr(1995, 2026, 1), new P.ptr(2048, 2069, 1), new P.ptr(2112, 2136, 1), new P.ptr(2144, 2154, 1), new P.ptr(2208, 2228, 1), new P.ptr(2230, 2237, 1), new P.ptr(2308, 2361, 1), new P.ptr(2365, 2384, 19), new P.ptr(2392, 2401, 1), new P.ptr(2418, 2432, 1), new P.ptr(2437, 2444, 1), new P.ptr(2447, 2448, 1), new P.ptr(2451, 2472, 1), new P.ptr(2474, 2480, 1), new P.ptr(2482, 2486, 4), new P.ptr(2487, 2489, 1), new P.ptr(2493, 2510, 17), new P.ptr(2524, 2525, 1), new P.ptr(2527, 2529, 1), new P.ptr(2544, 2545, 1), new P.ptr(2556, 2565, 9), new P.ptr(2566, 2570, 1), new P.ptr(2575, 2576, 1), new P.ptr(2579, 2600, 1), new P.ptr(2602, 2608, 1), new P.ptr(2610, 2611, 1), new P.ptr(2613, 2614, 1), new P.ptr(2616, 2617, 1), new P.ptr(2649, 2652, 1), new P.ptr(2654, 2674, 20), new P.ptr(2675, 2676, 1), new P.ptr(2693, 2701, 1), new P.ptr(2703, 2705, 1), new P.ptr(2707, 2728, 1), new P.ptr(2730, 2736, 1), new P.ptr(2738, 2739, 1), new P.ptr(2741, 2745, 1), new P.ptr(2749, 2768, 19), new P.ptr(2784, 2785, 1), new P.ptr(2809, 2821, 12), new P.ptr(2822, 2828, 1), new P.ptr(2831, 2832, 1), new P.ptr(2835, 2856, 1), new P.ptr(2858, 2864, 1), new P.ptr(2866, 2867, 1), new P.ptr(2869, 2873, 1), new P.ptr(2877, 2908, 31), new P.ptr(2909, 2911, 2), new P.ptr(2912, 2913, 1), new P.ptr(2929, 2947, 18), new P.ptr(2949, 2954, 1), new P.ptr(2958, 2960, 1), new P.ptr(2962, 2965, 1), new P.ptr(2969, 2970, 1), new P.ptr(2972, 2974, 2), new P.ptr(2975, 2979, 4), new P.ptr(2980, 2984, 4), new P.ptr(2985, 2986, 1), new P.ptr(2990, 3001, 1), new P.ptr(3024, 3077, 53), new P.ptr(3078, 3084, 1), new P.ptr(3086, 3088, 1), new P.ptr(3090, 3112, 1), new P.ptr(3114, 3129, 1), new P.ptr(3133, 3160, 27), new P.ptr(3161, 3162, 1), new P.ptr(3168, 3169, 1), new P.ptr(3200, 3205, 5), new P.ptr(3206, 3212, 1), new P.ptr(3214, 3216, 1), new P.ptr(3218, 3240, 1), new P.ptr(3242, 3251, 1), new P.ptr(3253, 3257, 1), new P.ptr(3261, 3294, 33), new P.ptr(3296, 3297, 1), new P.ptr(3313, 3314, 1), new P.ptr(3333, 3340, 1), new P.ptr(3342, 3344, 1), new P.ptr(3346, 3386, 1), new P.ptr(3389, 3406, 17), new P.ptr(3412, 3414, 1), new P.ptr(3423, 3425, 1), new P.ptr(3450, 3455, 1), new P.ptr(3461, 3478, 1), new P.ptr(3482, 3505, 1), new P.ptr(3507, 3515, 1), new P.ptr(3517, 3520, 3), new P.ptr(3521, 3526, 1), new P.ptr(3585, 3632, 1), new P.ptr(3634, 3635, 1), new P.ptr(3648, 3653, 1), new P.ptr(3713, 3714, 1), new P.ptr(3716, 3719, 3), new P.ptr(3720, 3722, 2), new P.ptr(3725, 3732, 7), new P.ptr(3733, 3735, 1), new P.ptr(3737, 3743, 1), new P.ptr(3745, 3747, 1), new P.ptr(3749, 3751, 2), new P.ptr(3754, 3755, 1), new P.ptr(3757, 3760, 1), new P.ptr(3762, 3763, 1), new P.ptr(3773, 3776, 3), new P.ptr(3777, 3780, 1), new P.ptr(3804, 3807, 1), new P.ptr(3840, 3904, 64), new P.ptr(3905, 3911, 1), new P.ptr(3913, 3948, 1), new P.ptr(3976, 3980, 1), new P.ptr(4096, 4138, 1), new P.ptr(4159, 4176, 17), new P.ptr(4177, 4181, 1), new P.ptr(4186, 4189, 1), new P.ptr(4193, 4197, 4), new P.ptr(4198, 4206, 8), new P.ptr(4207, 4208, 1), new P.ptr(4213, 4225, 1), new P.ptr(4238, 4304, 66), new P.ptr(4305, 4346, 1), new P.ptr(4349, 4680, 1), new P.ptr(4682, 4685, 1), new P.ptr(4688, 4694, 1), new P.ptr(4696, 4698, 2), new P.ptr(4699, 4701, 1), new P.ptr(4704, 4744, 1), new P.ptr(4746, 4749, 1), new P.ptr(4752, 4784, 1), new P.ptr(4786, 4789, 1), new P.ptr(4792, 4798, 1), new P.ptr(4800, 4802, 2), new P.ptr(4803, 4805, 1), new P.ptr(4808, 4822, 1), new P.ptr(4824, 4880, 1), new P.ptr(4882, 4885, 1), new P.ptr(4888, 4954, 1), new P.ptr(4992, 5007, 1), new P.ptr(5121, 5740, 1), new P.ptr(5743, 5759, 1), new P.ptr(5761, 5786, 1), new P.ptr(5792, 5866, 1), new P.ptr(5873, 5880, 1), new P.ptr(5888, 5900, 1), new P.ptr(5902, 5905, 1), new P.ptr(5920, 5937, 1), new P.ptr(5952, 5969, 1), new P.ptr(5984, 5996, 1), new P.ptr(5998, 6000, 1), new P.ptr(6016, 6067, 1), new P.ptr(6108, 6176, 68), new P.ptr(6177, 6210, 1), new P.ptr(6212, 6263, 1), new P.ptr(6272, 6276, 1), new P.ptr(6279, 6312, 1), new P.ptr(6314, 6320, 6), new P.ptr(6321, 6389, 1), new P.ptr(6400, 6430, 1), new P.ptr(6480, 6509, 1), new P.ptr(6512, 6516, 1), new P.ptr(6528, 6571, 1), new P.ptr(6576, 6601, 1), new P.ptr(6656, 6678, 1), new P.ptr(6688, 6740, 1), new P.ptr(6917, 6963, 1), new P.ptr(6981, 6987, 1), new P.ptr(7043, 7072, 1), new P.ptr(7086, 7087, 1), new P.ptr(7098, 7141, 1), new P.ptr(7168, 7203, 1), new P.ptr(7245, 7247, 1), new P.ptr(7258, 7287, 1), new P.ptr(7401, 7404, 1), new P.ptr(7406, 7409, 1), new P.ptr(7413, 7414, 1), new P.ptr(8501, 8504, 1), new P.ptr(11568, 11623, 1), new P.ptr(11648, 11670, 1), new P.ptr(11680, 11686, 1), new P.ptr(11688, 11694, 1), new P.ptr(11696, 11702, 1), new P.ptr(11704, 11710, 1), new P.ptr(11712, 11718, 1), new P.ptr(11720, 11726, 1), new P.ptr(11728, 11734, 1), new P.ptr(11736, 11742, 1), new P.ptr(12294, 12348, 54), new P.ptr(12353, 12438, 1), new P.ptr(12447, 12449, 2), new P.ptr(12450, 12538, 1), new P.ptr(12543, 12549, 6), new P.ptr(12550, 12590, 1), new P.ptr(12593, 12686, 1), new P.ptr(12704, 12730, 1), new P.ptr(12784, 12799, 1), new P.ptr(13312, 19893, 1), new P.ptr(19968, 40938, 1), new P.ptr(40960, 40980, 1), new P.ptr(40982, 42124, 1), new P.ptr(42192, 42231, 1), new P.ptr(42240, 42507, 1), new P.ptr(42512, 42527, 1), new P.ptr(42538, 42539, 1), new P.ptr(42606, 42656, 50), new P.ptr(42657, 42725, 1), new P.ptr(42895, 42999, 104), new P.ptr(43003, 43009, 1), new P.ptr(43011, 43013, 1), new P.ptr(43015, 43018, 1), new P.ptr(43020, 43042, 1), new P.ptr(43072, 43123, 1), new P.ptr(43138, 43187, 1), new P.ptr(43250, 43255, 1), new P.ptr(43259, 43261, 2), new P.ptr(43274, 43301, 1), new P.ptr(43312, 43334, 1), new P.ptr(43360, 43388, 1), new P.ptr(43396, 43442, 1), new P.ptr(43488, 43492, 1), new P.ptr(43495, 43503, 1), new P.ptr(43514, 43518, 1), new P.ptr(43520, 43560, 1), new P.ptr(43584, 43586, 1), new P.ptr(43588, 43595, 1), new P.ptr(43616, 43631, 1), new P.ptr(43633, 43638, 1), new P.ptr(43642, 43646, 4), new P.ptr(43647, 43695, 1), new P.ptr(43697, 43701, 4), new P.ptr(43702, 43705, 3), new P.ptr(43706, 43709, 1), new P.ptr(43712, 43714, 2), new P.ptr(43739, 43740, 1), new P.ptr(43744, 43754, 1), new P.ptr(43762, 43777, 15), new P.ptr(43778, 43782, 1), new P.ptr(43785, 43790, 1), new P.ptr(43793, 43798, 1), new P.ptr(43808, 43814, 1), new P.ptr(43816, 43822, 1), new P.ptr(43968, 44002, 1), new P.ptr(44032, 55203, 1), new P.ptr(55216, 55238, 1), new P.ptr(55243, 55291, 1), new P.ptr(63744, 64109, 1), new P.ptr(64112, 64217, 1), new P.ptr(64285, 64287, 2), new P.ptr(64288, 64296, 1), new P.ptr(64298, 64310, 1), new P.ptr(64312, 64316, 1), new P.ptr(64318, 64320, 2), new P.ptr(64321, 64323, 2), new P.ptr(64324, 64326, 2), new P.ptr(64327, 64433, 1), new P.ptr(64467, 64829, 1), new P.ptr(64848, 64911, 1), new P.ptr(64914, 64967, 1), new P.ptr(65008, 65019, 1), new P.ptr(65136, 65140, 1), new P.ptr(65142, 65276, 1), new P.ptr(65382, 65391, 1), new P.ptr(65393, 65437, 1), new P.ptr(65440, 65470, 1), new P.ptr(65474, 65479, 1), new P.ptr(65482, 65487, 1), new P.ptr(65490, 65495, 1), new P.ptr(65498, 65500, 1)]), new IZ([new Q.ptr(65536, 65547, 1), new Q.ptr(65549, 65574, 1), new Q.ptr(65576, 65594, 1), new Q.ptr(65596, 65597, 1), new Q.ptr(65599, 65613, 1), new Q.ptr(65616, 65629, 1), new Q.ptr(65664, 65786, 1), new Q.ptr(66176, 66204, 1), new Q.ptr(66208, 66256, 1), new Q.ptr(66304, 66335, 1), new Q.ptr(66349, 66368, 1), new Q.ptr(66370, 66377, 1), new Q.ptr(66384, 66421, 1), new Q.ptr(66432, 66461, 1), new Q.ptr(66464, 66499, 1), new Q.ptr(66504, 66511, 1), new Q.ptr(66640, 66717, 1), new Q.ptr(66816, 66855, 1), new Q.ptr(66864, 66915, 1), new Q.ptr(67072, 67382, 1), new Q.ptr(67392, 67413, 1), new Q.ptr(67424, 67431, 1), new Q.ptr(67584, 67589, 1), new Q.ptr(67592, 67594, 2), new Q.ptr(67595, 67637, 1), new Q.ptr(67639, 67640, 1), new Q.ptr(67644, 67647, 3), new Q.ptr(67648, 67669, 1), new Q.ptr(67680, 67702, 1), new Q.ptr(67712, 67742, 1), new Q.ptr(67808, 67826, 1), new Q.ptr(67828, 67829, 1), new Q.ptr(67840, 67861, 1), new Q.ptr(67872, 67897, 1), new Q.ptr(67968, 68023, 1), new Q.ptr(68030, 68031, 1), new Q.ptr(68096, 68112, 16), new Q.ptr(68113, 68115, 1), new Q.ptr(68117, 68119, 1), new Q.ptr(68121, 68147, 1), new Q.ptr(68192, 68220, 1), new Q.ptr(68224, 68252, 1), new Q.ptr(68288, 68295, 1), new Q.ptr(68297, 68324, 1), new Q.ptr(68352, 68405, 1), new Q.ptr(68416, 68437, 1), new Q.ptr(68448, 68466, 1), new Q.ptr(68480, 68497, 1), new Q.ptr(68608, 68680, 1), new Q.ptr(69635, 69687, 1), new Q.ptr(69763, 69807, 1), new Q.ptr(69840, 69864, 1), new Q.ptr(69891, 69926, 1), new Q.ptr(69968, 70002, 1), new Q.ptr(70006, 70019, 13), new Q.ptr(70020, 70066, 1), new Q.ptr(70081, 70084, 1), new Q.ptr(70106, 70108, 2), new Q.ptr(70144, 70161, 1), new Q.ptr(70163, 70187, 1), new Q.ptr(70272, 70278, 1), new Q.ptr(70280, 70282, 2), new Q.ptr(70283, 70285, 1), new Q.ptr(70287, 70301, 1), new Q.ptr(70303, 70312, 1), new Q.ptr(70320, 70366, 1), new Q.ptr(70405, 70412, 1), new Q.ptr(70415, 70416, 1), new Q.ptr(70419, 70440, 1), new Q.ptr(70442, 70448, 1), new Q.ptr(70450, 70451, 1), new Q.ptr(70453, 70457, 1), new Q.ptr(70461, 70480, 19), new Q.ptr(70493, 70497, 1), new Q.ptr(70656, 70708, 1), new Q.ptr(70727, 70730, 1), new Q.ptr(70784, 70831, 1), new Q.ptr(70852, 70853, 1), new Q.ptr(70855, 71040, 185), new Q.ptr(71041, 71086, 1), new Q.ptr(71128, 71131, 1), new Q.ptr(71168, 71215, 1), new Q.ptr(71236, 71296, 60), new Q.ptr(71297, 71338, 1), new Q.ptr(71424, 71449, 1), new Q.ptr(71935, 72192, 257), new Q.ptr(72203, 72242, 1), new Q.ptr(72250, 72272, 22), new Q.ptr(72284, 72323, 1), new Q.ptr(72326, 72329, 1), new Q.ptr(72384, 72440, 1), new Q.ptr(72704, 72712, 1), new Q.ptr(72714, 72750, 1), new Q.ptr(72768, 72818, 50), new Q.ptr(72819, 72847, 1), new Q.ptr(72960, 72966, 1), new Q.ptr(72968, 72969, 1), new Q.ptr(72971, 73008, 1), new Q.ptr(73030, 73728, 698), new Q.ptr(73729, 74649, 1), new Q.ptr(74880, 75075, 1), new Q.ptr(77824, 78894, 1), new Q.ptr(82944, 83526, 1), new Q.ptr(92160, 92728, 1), new Q.ptr(92736, 92766, 1), new Q.ptr(92880, 92909, 1), new Q.ptr(92928, 92975, 1), new Q.ptr(93027, 93047, 1), new Q.ptr(93053, 93071, 1), new Q.ptr(93952, 94020, 1), new Q.ptr(94032, 94208, 176), new Q.ptr(94209, 100332, 1), new Q.ptr(100352, 101106, 1), new Q.ptr(110592, 110878, 1), new Q.ptr(110960, 111355, 1), new Q.ptr(113664, 113770, 1), new Q.ptr(113776, 113788, 1), new Q.ptr(113792, 113800, 1), new Q.ptr(113808, 113817, 1), new Q.ptr(124928, 125124, 1), new Q.ptr(126464, 126467, 1), new Q.ptr(126469, 126495, 1), new Q.ptr(126497, 126498, 1), new Q.ptr(126500, 126503, 3), new Q.ptr(126505, 126514, 1), new Q.ptr(126516, 126519, 1), new Q.ptr(126521, 126523, 2), new Q.ptr(126530, 126535, 5), new Q.ptr(126537, 126541, 2), new Q.ptr(126542, 126543, 1), new Q.ptr(126545, 126546, 1), new Q.ptr(126548, 126551, 3), new Q.ptr(126553, 126561, 2), new Q.ptr(126562, 126564, 2), new Q.ptr(126567, 126570, 1), new Q.ptr(126572, 126578, 1), new Q.ptr(126580, 126583, 1), new Q.ptr(126585, 126588, 1), new Q.ptr(126590, 126592, 2), new Q.ptr(126593, 126601, 1), new Q.ptr(126603, 126619, 1), new Q.ptr(126625, 126627, 1), new Q.ptr(126629, 126633, 1), new Q.ptr(126635, 126651, 1), new Q.ptr(131072, 173782, 1), new Q.ptr(173824, 177972, 1), new Q.ptr(177984, 178205, 1), new Q.ptr(178208, 183969, 1), new Q.ptr(183984, 191456, 1), new Q.ptr(194560, 195101, 1)]), 1);
            AQ = new O.ptr(new IY([new P.ptr(453, 459, 3), new P.ptr(498, 8072, 7574), new P.ptr(8073, 8079, 1), new P.ptr(8088, 8095, 1), new P.ptr(8104, 8111, 1), new P.ptr(8124, 8140, 16), new P.ptr(8188, 8188, 1)]), IZ.nil, 0);
            AR = new O.ptr(new IY([new P.ptr(65, 90, 1), new P.ptr(192, 214, 1), new P.ptr(216, 222, 1), new P.ptr(256, 310, 2), new P.ptr(313, 327, 2), new P.ptr(330, 376, 2), new P.ptr(377, 381, 2), new P.ptr(385, 386, 1), new P.ptr(388, 390, 2), new P.ptr(391, 393, 2), new P.ptr(394, 395, 1), new P.ptr(398, 401, 1), new P.ptr(403, 404, 1), new P.ptr(406, 408, 1), new P.ptr(412, 413, 1), new P.ptr(415, 416, 1), new P.ptr(418, 422, 2), new P.ptr(423, 425, 2), new P.ptr(428, 430, 2), new P.ptr(431, 433, 2), new P.ptr(434, 435, 1), new P.ptr(437, 439, 2), new P.ptr(440, 444, 4), new P.ptr(452, 461, 3), new P.ptr(463, 475, 2), new P.ptr(478, 494, 2), new P.ptr(497, 500, 3), new P.ptr(502, 504, 1), new P.ptr(506, 562, 2), new P.ptr(570, 571, 1), new P.ptr(573, 574, 1), new P.ptr(577, 579, 2), new P.ptr(580, 582, 1), new P.ptr(584, 590, 2), new P.ptr(880, 882, 2), new P.ptr(886, 895, 9), new P.ptr(902, 904, 2), new P.ptr(905, 906, 1), new P.ptr(908, 910, 2), new P.ptr(911, 913, 2), new P.ptr(914, 929, 1), new P.ptr(931, 939, 1), new P.ptr(975, 978, 3), new P.ptr(979, 980, 1), new P.ptr(984, 1006, 2), new P.ptr(1012, 1015, 3), new P.ptr(1017, 1018, 1), new P.ptr(1021, 1071, 1), new P.ptr(1120, 1152, 2), new P.ptr(1162, 1216, 2), new P.ptr(1217, 1229, 2), new P.ptr(1232, 1326, 2), new P.ptr(1329, 1366, 1), new P.ptr(4256, 4293, 1), new P.ptr(4295, 4301, 6), new P.ptr(5024, 5109, 1), new P.ptr(7680, 7828, 2), new P.ptr(7838, 7934, 2), new P.ptr(7944, 7951, 1), new P.ptr(7960, 7965, 1), new P.ptr(7976, 7983, 1), new P.ptr(7992, 7999, 1), new P.ptr(8008, 8013, 1), new P.ptr(8025, 8031, 2), new P.ptr(8040, 8047, 1), new P.ptr(8120, 8123, 1), new P.ptr(8136, 8139, 1), new P.ptr(8152, 8155, 1), new P.ptr(8168, 8172, 1), new P.ptr(8184, 8187, 1), new P.ptr(8450, 8455, 5), new P.ptr(8459, 8461, 1), new P.ptr(8464, 8466, 1), new P.ptr(8469, 8473, 4), new P.ptr(8474, 8477, 1), new P.ptr(8484, 8490, 2), new P.ptr(8491, 8493, 1), new P.ptr(8496, 8499, 1), new P.ptr(8510, 8511, 1), new P.ptr(8517, 8579, 62), new P.ptr(11264, 11310, 1), new P.ptr(11360, 11362, 2), new P.ptr(11363, 11364, 1), new P.ptr(11367, 11373, 2), new P.ptr(11374, 11376, 1), new P.ptr(11378, 11381, 3), new P.ptr(11390, 11392, 1), new P.ptr(11394, 11490, 2), new P.ptr(11499, 11501, 2), new P.ptr(11506, 42560, 31054), new P.ptr(42562, 42604, 2), new P.ptr(42624, 42650, 2), new P.ptr(42786, 42798, 2), new P.ptr(42802, 42862, 2), new P.ptr(42873, 42877, 2), new P.ptr(42878, 42886, 2), new P.ptr(42891, 42893, 2), new P.ptr(42896, 42898, 2), new P.ptr(42902, 42922, 2), new P.ptr(42923, 42926, 1), new P.ptr(42928, 42932, 1), new P.ptr(42934, 65313, 22379), new P.ptr(65314, 65338, 1)]), new IZ([new Q.ptr(66560, 66599, 1), new Q.ptr(66736, 66771, 1), new Q.ptr(68736, 68786, 1), new Q.ptr(71840, 71871, 1), new Q.ptr(119808, 119833, 1), new Q.ptr(119860, 119885, 1), new Q.ptr(119912, 119937, 1), new Q.ptr(119964, 119966, 2), new Q.ptr(119967, 119973, 3), new Q.ptr(119974, 119977, 3), new Q.ptr(119978, 119980, 1), new Q.ptr(119982, 119989, 1), new Q.ptr(120016, 120041, 1), new Q.ptr(120068, 120069, 1), new Q.ptr(120071, 120074, 1), new Q.ptr(120077, 120084, 1), new Q.ptr(120086, 120092, 1), new Q.ptr(120120, 120121, 1), new Q.ptr(120123, 120126, 1), new Q.ptr(120128, 120132, 1), new Q.ptr(120134, 120138, 4), new Q.ptr(120139, 120144, 1), new Q.ptr(120172, 120197, 1), new Q.ptr(120224, 120249, 1), new Q.ptr(120276, 120301, 1), new Q.ptr(120328, 120353, 1), new Q.ptr(120380, 120405, 1), new Q.ptr(120432, 120457, 1), new Q.ptr(120488, 120512, 1), new Q.ptr(120546, 120570, 1), new Q.ptr(120604, 120628, 1), new Q.ptr(120662, 120686, 1), new Q.ptr(120720, 120744, 1), new Q.ptr(120778, 125184, 4406), new Q.ptr(125185, 125217, 1)]), 3);
            AS = new O.ptr(new IY([new P.ptr(768, 879, 1), new P.ptr(1155, 1161, 1), new P.ptr(1425, 1469, 1), new P.ptr(1471, 1473, 2), new P.ptr(1474, 1476, 2), new P.ptr(1477, 1479, 2), new P.ptr(1552, 1562, 1), new P.ptr(1611, 1631, 1), new P.ptr(1648, 1750, 102), new P.ptr(1751, 1756, 1), new P.ptr(1759, 1764, 1), new P.ptr(1767, 1768, 1), new P.ptr(1770, 1773, 1), new P.ptr(1809, 1840, 31), new P.ptr(1841, 1866, 1), new P.ptr(1958, 1968, 1), new P.ptr(2027, 2035, 1), new P.ptr(2070, 2073, 1), new P.ptr(2075, 2083, 1), new P.ptr(2085, 2087, 1), new P.ptr(2089, 2093, 1), new P.ptr(2137, 2139, 1), new P.ptr(2260, 2273, 1), new P.ptr(2275, 2307, 1), new P.ptr(2362, 2364, 1), new P.ptr(2366, 2383, 1), new P.ptr(2385, 2391, 1), new P.ptr(2402, 2403, 1), new P.ptr(2433, 2435, 1), new P.ptr(2492, 2494, 2), new P.ptr(2495, 2500, 1), new P.ptr(2503, 2504, 1), new P.ptr(2507, 2509, 1), new P.ptr(2519, 2530, 11), new P.ptr(2531, 2561, 30), new P.ptr(2562, 2563, 1), new P.ptr(2620, 2622, 2), new P.ptr(2623, 2626, 1), new P.ptr(2631, 2632, 1), new P.ptr(2635, 2637, 1), new P.ptr(2641, 2672, 31), new P.ptr(2673, 2677, 4), new P.ptr(2689, 2691, 1), new P.ptr(2748, 2750, 2), new P.ptr(2751, 2757, 1), new P.ptr(2759, 2761, 1), new P.ptr(2763, 2765, 1), new P.ptr(2786, 2787, 1), new P.ptr(2810, 2815, 1), new P.ptr(2817, 2819, 1), new P.ptr(2876, 2878, 2), new P.ptr(2879, 2884, 1), new P.ptr(2887, 2888, 1), new P.ptr(2891, 2893, 1), new P.ptr(2902, 2903, 1), new P.ptr(2914, 2915, 1), new P.ptr(2946, 3006, 60), new P.ptr(3007, 3010, 1), new P.ptr(3014, 3016, 1), new P.ptr(3018, 3021, 1), new P.ptr(3031, 3072, 41), new P.ptr(3073, 3075, 1), new P.ptr(3134, 3140, 1), new P.ptr(3142, 3144, 1), new P.ptr(3146, 3149, 1), new P.ptr(3157, 3158, 1), new P.ptr(3170, 3171, 1), new P.ptr(3201, 3203, 1), new P.ptr(3260, 3262, 2), new P.ptr(3263, 3268, 1), new P.ptr(3270, 3272, 1), new P.ptr(3274, 3277, 1), new P.ptr(3285, 3286, 1), new P.ptr(3298, 3299, 1), new P.ptr(3328, 3331, 1), new P.ptr(3387, 3388, 1), new P.ptr(3390, 3396, 1), new P.ptr(3398, 3400, 1), new P.ptr(3402, 3405, 1), new P.ptr(3415, 3426, 11), new P.ptr(3427, 3458, 31), new P.ptr(3459, 3530, 71), new P.ptr(3535, 3540, 1), new P.ptr(3542, 3544, 2), new P.ptr(3545, 3551, 1), new P.ptr(3570, 3571, 1), new P.ptr(3633, 3636, 3), new P.ptr(3637, 3642, 1), new P.ptr(3655, 3662, 1), new P.ptr(3761, 3764, 3), new P.ptr(3765, 3769, 1), new P.ptr(3771, 3772, 1), new P.ptr(3784, 3789, 1), new P.ptr(3864, 3865, 1), new P.ptr(3893, 3897, 2), new P.ptr(3902, 3903, 1), new P.ptr(3953, 3972, 1), new P.ptr(3974, 3975, 1), new P.ptr(3981, 3991, 1), new P.ptr(3993, 4028, 1), new P.ptr(4038, 4139, 101), new P.ptr(4140, 4158, 1), new P.ptr(4182, 4185, 1), new P.ptr(4190, 4192, 1), new P.ptr(4194, 4196, 1), new P.ptr(4199, 4205, 1), new P.ptr(4209, 4212, 1), new P.ptr(4226, 4237, 1), new P.ptr(4239, 4250, 11), new P.ptr(4251, 4253, 1), new P.ptr(4957, 4959, 1), new P.ptr(5906, 5908, 1), new P.ptr(5938, 5940, 1), new P.ptr(5970, 5971, 1), new P.ptr(6002, 6003, 1), new P.ptr(6068, 6099, 1), new P.ptr(6109, 6155, 46), new P.ptr(6156, 6157, 1), new P.ptr(6277, 6278, 1), new P.ptr(6313, 6432, 119), new P.ptr(6433, 6443, 1), new P.ptr(6448, 6459, 1), new P.ptr(6679, 6683, 1), new P.ptr(6741, 6750, 1), new P.ptr(6752, 6780, 1), new P.ptr(6783, 6832, 49), new P.ptr(6833, 6846, 1), new P.ptr(6912, 6916, 1), new P.ptr(6964, 6980, 1), new P.ptr(7019, 7027, 1), new P.ptr(7040, 7042, 1), new P.ptr(7073, 7085, 1), new P.ptr(7142, 7155, 1), new P.ptr(7204, 7223, 1), new P.ptr(7376, 7378, 1), new P.ptr(7380, 7400, 1), new P.ptr(7405, 7410, 5), new P.ptr(7411, 7412, 1), new P.ptr(7415, 7417, 1), new P.ptr(7616, 7673, 1), new P.ptr(7675, 7679, 1), new P.ptr(8400, 8432, 1), new P.ptr(11503, 11505, 1), new P.ptr(11647, 11744, 97), new P.ptr(11745, 11775, 1), new P.ptr(12330, 12335, 1), new P.ptr(12441, 12442, 1), new P.ptr(42607, 42610, 1), new P.ptr(42612, 42621, 1), new P.ptr(42654, 42655, 1), new P.ptr(42736, 42737, 1), new P.ptr(43010, 43014, 4), new P.ptr(43019, 43043, 24), new P.ptr(43044, 43047, 1), new P.ptr(43136, 43137, 1), new P.ptr(43188, 43205, 1), new P.ptr(43232, 43249, 1), new P.ptr(43302, 43309, 1), new P.ptr(43335, 43347, 1), new P.ptr(43392, 43395, 1), new P.ptr(43443, 43456, 1), new P.ptr(43493, 43561, 68), new P.ptr(43562, 43574, 1), new P.ptr(43587, 43596, 9), new P.ptr(43597, 43643, 46), new P.ptr(43644, 43645, 1), new P.ptr(43696, 43698, 2), new P.ptr(43699, 43700, 1), new P.ptr(43703, 43704, 1), new P.ptr(43710, 43711, 1), new P.ptr(43713, 43755, 42), new P.ptr(43756, 43759, 1), new P.ptr(43765, 43766, 1), new P.ptr(44003, 44010, 1), new P.ptr(44012, 44013, 1), new P.ptr(64286, 65024, 738), new P.ptr(65025, 65039, 1), new P.ptr(65056, 65071, 1)]), new IZ([new Q.ptr(66045, 66272, 227), new Q.ptr(66422, 66426, 1), new Q.ptr(68097, 68099, 1), new Q.ptr(68101, 68102, 1), new Q.ptr(68108, 68111, 1), new Q.ptr(68152, 68154, 1), new Q.ptr(68159, 68325, 166), new Q.ptr(68326, 69632, 1306), new Q.ptr(69633, 69634, 1), new Q.ptr(69688, 69702, 1), new Q.ptr(69759, 69762, 1), new Q.ptr(69808, 69818, 1), new Q.ptr(69888, 69890, 1), new Q.ptr(69927, 69940, 1), new Q.ptr(70003, 70016, 13), new Q.ptr(70017, 70018, 1), new Q.ptr(70067, 70080, 1), new Q.ptr(70090, 70092, 1), new Q.ptr(70188, 70199, 1), new Q.ptr(70206, 70367, 161), new Q.ptr(70368, 70378, 1), new Q.ptr(70400, 70403, 1), new Q.ptr(70460, 70462, 2), new Q.ptr(70463, 70468, 1), new Q.ptr(70471, 70472, 1), new Q.ptr(70475, 70477, 1), new Q.ptr(70487, 70498, 11), new Q.ptr(70499, 70502, 3), new Q.ptr(70503, 70508, 1), new Q.ptr(70512, 70516, 1), new Q.ptr(70709, 70726, 1), new Q.ptr(70832, 70851, 1), new Q.ptr(71087, 71093, 1), new Q.ptr(71096, 71104, 1), new Q.ptr(71132, 71133, 1), new Q.ptr(71216, 71232, 1), new Q.ptr(71339, 71351, 1), new Q.ptr(71453, 71467, 1), new Q.ptr(72193, 72202, 1), new Q.ptr(72243, 72249, 1), new Q.ptr(72251, 72254, 1), new Q.ptr(72263, 72273, 10), new Q.ptr(72274, 72283, 1), new Q.ptr(72330, 72345, 1), new Q.ptr(72751, 72758, 1), new Q.ptr(72760, 72767, 1), new Q.ptr(72850, 72871, 1), new Q.ptr(72873, 72886, 1), new Q.ptr(73009, 73014, 1), new Q.ptr(73018, 73020, 2), new Q.ptr(73021, 73023, 2), new Q.ptr(73024, 73029, 1), new Q.ptr(73031, 92912, 19881), new Q.ptr(92913, 92916, 1), new Q.ptr(92976, 92982, 1), new Q.ptr(94033, 94078, 1), new Q.ptr(94095, 94098, 1), new Q.ptr(113821, 113822, 1), new Q.ptr(119141, 119145, 1), new Q.ptr(119149, 119154, 1), new Q.ptr(119163, 119170, 1), new Q.ptr(119173, 119179, 1), new Q.ptr(119210, 119213, 1), new Q.ptr(119362, 119364, 1), new Q.ptr(121344, 121398, 1), new Q.ptr(121403, 121452, 1), new Q.ptr(121461, 121476, 15), new Q.ptr(121499, 121503, 1), new Q.ptr(121505, 121519, 1), new Q.ptr(122880, 122886, 1), new Q.ptr(122888, 122904, 1), new Q.ptr(122907, 122913, 1), new Q.ptr(122915, 122916, 1), new Q.ptr(122918, 122922, 1), new Q.ptr(125136, 125142, 1), new Q.ptr(125252, 125258, 1), new Q.ptr(917760, 917999, 1)]), 0);
            AT = new O.ptr(new IY([new P.ptr(2307, 2363, 56), new P.ptr(2366, 2368, 1), new P.ptr(2377, 2380, 1), new P.ptr(2382, 2383, 1), new P.ptr(2434, 2435, 1), new P.ptr(2494, 2496, 1), new P.ptr(2503, 2504, 1), new P.ptr(2507, 2508, 1), new P.ptr(2519, 2563, 44), new P.ptr(2622, 2624, 1), new P.ptr(2691, 2750, 59), new P.ptr(2751, 2752, 1), new P.ptr(2761, 2763, 2), new P.ptr(2764, 2818, 54), new P.ptr(2819, 2878, 59), new P.ptr(2880, 2887, 7), new P.ptr(2888, 2891, 3), new P.ptr(2892, 2903, 11), new P.ptr(3006, 3007, 1), new P.ptr(3009, 3010, 1), new P.ptr(3014, 3016, 1), new P.ptr(3018, 3020, 1), new P.ptr(3031, 3073, 42), new P.ptr(3074, 3075, 1), new P.ptr(3137, 3140, 1), new P.ptr(3202, 3203, 1), new P.ptr(3262, 3264, 2), new P.ptr(3265, 3268, 1), new P.ptr(3271, 3272, 1), new P.ptr(3274, 3275, 1), new P.ptr(3285, 3286, 1), new P.ptr(3330, 3331, 1), new P.ptr(3390, 3392, 1), new P.ptr(3398, 3400, 1), new P.ptr(3402, 3404, 1), new P.ptr(3415, 3458, 43), new P.ptr(3459, 3535, 76), new P.ptr(3536, 3537, 1), new P.ptr(3544, 3551, 1), new P.ptr(3570, 3571, 1), new P.ptr(3902, 3903, 1), new P.ptr(3967, 4139, 172), new P.ptr(4140, 4145, 5), new P.ptr(4152, 4155, 3), new P.ptr(4156, 4182, 26), new P.ptr(4183, 4194, 11), new P.ptr(4195, 4196, 1), new P.ptr(4199, 4205, 1), new P.ptr(4227, 4228, 1), new P.ptr(4231, 4236, 1), new P.ptr(4239, 4250, 11), new P.ptr(4251, 4252, 1), new P.ptr(6070, 6078, 8), new P.ptr(6079, 6085, 1), new P.ptr(6087, 6088, 1), new P.ptr(6435, 6438, 1), new P.ptr(6441, 6443, 1), new P.ptr(6448, 6449, 1), new P.ptr(6451, 6456, 1), new P.ptr(6681, 6682, 1), new P.ptr(6741, 6743, 2), new P.ptr(6753, 6755, 2), new P.ptr(6756, 6765, 9), new P.ptr(6766, 6770, 1), new P.ptr(6916, 6965, 49), new P.ptr(6971, 6973, 2), new P.ptr(6974, 6977, 1), new P.ptr(6979, 6980, 1), new P.ptr(7042, 7073, 31), new P.ptr(7078, 7079, 1), new P.ptr(7082, 7143, 61), new P.ptr(7146, 7148, 1), new P.ptr(7150, 7154, 4), new P.ptr(7155, 7204, 49), new P.ptr(7205, 7211, 1), new P.ptr(7220, 7221, 1), new P.ptr(7393, 7410, 17), new P.ptr(7411, 7415, 4), new P.ptr(12334, 12335, 1), new P.ptr(43043, 43044, 1), new P.ptr(43047, 43136, 89), new P.ptr(43137, 43188, 51), new P.ptr(43189, 43203, 1), new P.ptr(43346, 43347, 1), new P.ptr(43395, 43444, 49), new P.ptr(43445, 43450, 5), new P.ptr(43451, 43453, 2), new P.ptr(43454, 43456, 1), new P.ptr(43567, 43568, 1), new P.ptr(43571, 43572, 1), new P.ptr(43597, 43643, 46), new P.ptr(43645, 43755, 110), new P.ptr(43758, 43759, 1), new P.ptr(43765, 44003, 238), new P.ptr(44004, 44006, 2), new P.ptr(44007, 44009, 2), new P.ptr(44010, 44012, 2)]), new IZ([new Q.ptr(69632, 69634, 2), new Q.ptr(69762, 69808, 46), new Q.ptr(69809, 69810, 1), new Q.ptr(69815, 69816, 1), new Q.ptr(69932, 70018, 86), new Q.ptr(70067, 70069, 1), new Q.ptr(70079, 70080, 1), new Q.ptr(70188, 70190, 1), new Q.ptr(70194, 70195, 1), new Q.ptr(70197, 70368, 171), new Q.ptr(70369, 70370, 1), new Q.ptr(70402, 70403, 1), new Q.ptr(70462, 70463, 1), new Q.ptr(70465, 70468, 1), new Q.ptr(70471, 70472, 1), new Q.ptr(70475, 70477, 1), new Q.ptr(70487, 70498, 11), new Q.ptr(70499, 70709, 210), new Q.ptr(70710, 70711, 1), new Q.ptr(70720, 70721, 1), new Q.ptr(70725, 70832, 107), new Q.ptr(70833, 70834, 1), new Q.ptr(70841, 70843, 2), new Q.ptr(70844, 70846, 1), new Q.ptr(70849, 71087, 238), new Q.ptr(71088, 71089, 1), new Q.ptr(71096, 71099, 1), new Q.ptr(71102, 71216, 114), new Q.ptr(71217, 71218, 1), new Q.ptr(71227, 71228, 1), new Q.ptr(71230, 71340, 110), new Q.ptr(71342, 71343, 1), new Q.ptr(71350, 71456, 106), new Q.ptr(71457, 71462, 5), new Q.ptr(72199, 72200, 1), new Q.ptr(72249, 72279, 30), new Q.ptr(72280, 72343, 63), new Q.ptr(72751, 72766, 15), new Q.ptr(72873, 72881, 8), new Q.ptr(72884, 94033, 21149), new Q.ptr(94034, 94078, 1), new Q.ptr(119141, 119142, 1), new Q.ptr(119149, 119154, 1)]), 0);
            AU = new O.ptr(new IY([new P.ptr(1160, 1161, 1), new P.ptr(6846, 8413, 1567), new P.ptr(8414, 8416, 1), new P.ptr(8418, 8420, 1), new P.ptr(42608, 42610, 1)]), IZ.nil, 0);
            AV = new O.ptr(new IY([new P.ptr(768, 879, 1), new P.ptr(1155, 1159, 1), new P.ptr(1425, 1469, 1), new P.ptr(1471, 1473, 2), new P.ptr(1474, 1476, 2), new P.ptr(1477, 1479, 2), new P.ptr(1552, 1562, 1), new P.ptr(1611, 1631, 1), new P.ptr(1648, 1750, 102), new P.ptr(1751, 1756, 1), new P.ptr(1759, 1764, 1), new P.ptr(1767, 1768, 1), new P.ptr(1770, 1773, 1), new P.ptr(1809, 1840, 31), new P.ptr(1841, 1866, 1), new P.ptr(1958, 1968, 1), new P.ptr(2027, 2035, 1), new P.ptr(2070, 2073, 1), new P.ptr(2075, 2083, 1), new P.ptr(2085, 2087, 1), new P.ptr(2089, 2093, 1), new P.ptr(2137, 2139, 1), new P.ptr(2260, 2273, 1), new P.ptr(2275, 2306, 1), new P.ptr(2362, 2364, 2), new P.ptr(2369, 2376, 1), new P.ptr(2381, 2385, 4), new P.ptr(2386, 2391, 1), new P.ptr(2402, 2403, 1), new P.ptr(2433, 2492, 59), new P.ptr(2497, 2500, 1), new P.ptr(2509, 2530, 21), new P.ptr(2531, 2561, 30), new P.ptr(2562, 2620, 58), new P.ptr(2625, 2626, 1), new P.ptr(2631, 2632, 1), new P.ptr(2635, 2637, 1), new P.ptr(2641, 2672, 31), new P.ptr(2673, 2677, 4), new P.ptr(2689, 2690, 1), new P.ptr(2748, 2753, 5), new P.ptr(2754, 2757, 1), new P.ptr(2759, 2760, 1), new P.ptr(2765, 2786, 21), new P.ptr(2787, 2810, 23), new P.ptr(2811, 2815, 1), new P.ptr(2817, 2876, 59), new P.ptr(2879, 2881, 2), new P.ptr(2882, 2884, 1), new P.ptr(2893, 2902, 9), new P.ptr(2914, 2915, 1), new P.ptr(2946, 3008, 62), new P.ptr(3021, 3072, 51), new P.ptr(3134, 3136, 1), new P.ptr(3142, 3144, 1), new P.ptr(3146, 3149, 1), new P.ptr(3157, 3158, 1), new P.ptr(3170, 3171, 1), new P.ptr(3201, 3260, 59), new P.ptr(3263, 3270, 7), new P.ptr(3276, 3277, 1), new P.ptr(3298, 3299, 1), new P.ptr(3328, 3329, 1), new P.ptr(3387, 3388, 1), new P.ptr(3393, 3396, 1), new P.ptr(3405, 3426, 21), new P.ptr(3427, 3530, 103), new P.ptr(3538, 3540, 1), new P.ptr(3542, 3633, 91), new P.ptr(3636, 3642, 1), new P.ptr(3655, 3662, 1), new P.ptr(3761, 3764, 3), new P.ptr(3765, 3769, 1), new P.ptr(3771, 3772, 1), new P.ptr(3784, 3789, 1), new P.ptr(3864, 3865, 1), new P.ptr(3893, 3897, 2), new P.ptr(3953, 3966, 1), new P.ptr(3968, 3972, 1), new P.ptr(3974, 3975, 1), new P.ptr(3981, 3991, 1), new P.ptr(3993, 4028, 1), new P.ptr(4038, 4141, 103), new P.ptr(4142, 4144, 1), new P.ptr(4146, 4151, 1), new P.ptr(4153, 4154, 1), new P.ptr(4157, 4158, 1), new P.ptr(4184, 4185, 1), new P.ptr(4190, 4192, 1), new P.ptr(4209, 4212, 1), new P.ptr(4226, 4229, 3), new P.ptr(4230, 4237, 7), new P.ptr(4253, 4957, 704), new P.ptr(4958, 4959, 1), new P.ptr(5906, 5908, 1), new P.ptr(5938, 5940, 1), new P.ptr(5970, 5971, 1), new P.ptr(6002, 6003, 1), new P.ptr(6068, 6069, 1), new P.ptr(6071, 6077, 1), new P.ptr(6086, 6089, 3), new P.ptr(6090, 6099, 1), new P.ptr(6109, 6155, 46), new P.ptr(6156, 6157, 1), new P.ptr(6277, 6278, 1), new P.ptr(6313, 6432, 119), new P.ptr(6433, 6434, 1), new P.ptr(6439, 6440, 1), new P.ptr(6450, 6457, 7), new P.ptr(6458, 6459, 1), new P.ptr(6679, 6680, 1), new P.ptr(6683, 6742, 59), new P.ptr(6744, 6750, 1), new P.ptr(6752, 6754, 2), new P.ptr(6757, 6764, 1), new P.ptr(6771, 6780, 1), new P.ptr(6783, 6832, 49), new P.ptr(6833, 6845, 1), new P.ptr(6912, 6915, 1), new P.ptr(6964, 6966, 2), new P.ptr(6967, 6970, 1), new P.ptr(6972, 6978, 6), new P.ptr(7019, 7027, 1), new P.ptr(7040, 7041, 1), new P.ptr(7074, 7077, 1), new P.ptr(7080, 7081, 1), new P.ptr(7083, 7085, 1), new P.ptr(7142, 7144, 2), new P.ptr(7145, 7149, 4), new P.ptr(7151, 7153, 1), new P.ptr(7212, 7219, 1), new P.ptr(7222, 7223, 1), new P.ptr(7376, 7378, 1), new P.ptr(7380, 7392, 1), new P.ptr(7394, 7400, 1), new P.ptr(7405, 7412, 7), new P.ptr(7416, 7417, 1), new P.ptr(7616, 7673, 1), new P.ptr(7675, 7679, 1), new P.ptr(8400, 8412, 1), new P.ptr(8417, 8421, 4), new P.ptr(8422, 8432, 1), new P.ptr(11503, 11505, 1), new P.ptr(11647, 11744, 97), new P.ptr(11745, 11775, 1), new P.ptr(12330, 12333, 1), new P.ptr(12441, 12442, 1), new P.ptr(42607, 42612, 5), new P.ptr(42613, 42621, 1), new P.ptr(42654, 42655, 1), new P.ptr(42736, 42737, 1), new P.ptr(43010, 43014, 4), new P.ptr(43019, 43045, 26), new P.ptr(43046, 43204, 158), new P.ptr(43205, 43232, 27), new P.ptr(43233, 43249, 1), new P.ptr(43302, 43309, 1), new P.ptr(43335, 43345, 1), new P.ptr(43392, 43394, 1), new P.ptr(43443, 43446, 3), new P.ptr(43447, 43449, 1), new P.ptr(43452, 43493, 41), new P.ptr(43561, 43566, 1), new P.ptr(43569, 43570, 1), new P.ptr(43573, 43574, 1), new P.ptr(43587, 43596, 9), new P.ptr(43644, 43696, 52), new P.ptr(43698, 43700, 1), new P.ptr(43703, 43704, 1), new P.ptr(43710, 43711, 1), new P.ptr(43713, 43756, 43), new P.ptr(43757, 43766, 9), new P.ptr(44005, 44008, 3), new P.ptr(44013, 64286, 20273), new P.ptr(65024, 65039, 1), new P.ptr(65056, 65071, 1)]), new IZ([new Q.ptr(66045, 66272, 227), new Q.ptr(66422, 66426, 1), new Q.ptr(68097, 68099, 1), new Q.ptr(68101, 68102, 1), new Q.ptr(68108, 68111, 1), new Q.ptr(68152, 68154, 1), new Q.ptr(68159, 68325, 166), new Q.ptr(68326, 69633, 1307), new Q.ptr(69688, 69702, 1), new Q.ptr(69759, 69761, 1), new Q.ptr(69811, 69814, 1), new Q.ptr(69817, 69818, 1), new Q.ptr(69888, 69890, 1), new Q.ptr(69927, 69931, 1), new Q.ptr(69933, 69940, 1), new Q.ptr(70003, 70016, 13), new Q.ptr(70017, 70070, 53), new Q.ptr(70071, 70078, 1), new Q.ptr(70090, 70092, 1), new Q.ptr(70191, 70193, 1), new Q.ptr(70196, 70198, 2), new Q.ptr(70199, 70206, 7), new Q.ptr(70367, 70371, 4), new Q.ptr(70372, 70378, 1), new Q.ptr(70400, 70401, 1), new Q.ptr(70460, 70464, 4), new Q.ptr(70502, 70508, 1), new Q.ptr(70512, 70516, 1), new Q.ptr(70712, 70719, 1), new Q.ptr(70722, 70724, 1), new Q.ptr(70726, 70835, 109), new Q.ptr(70836, 70840, 1), new Q.ptr(70842, 70847, 5), new Q.ptr(70848, 70850, 2), new Q.ptr(70851, 71090, 239), new Q.ptr(71091, 71093, 1), new Q.ptr(71100, 71101, 1), new Q.ptr(71103, 71104, 1), new Q.ptr(71132, 71133, 1), new Q.ptr(71219, 71226, 1), new Q.ptr(71229, 71231, 2), new Q.ptr(71232, 71339, 107), new Q.ptr(71341, 71344, 3), new Q.ptr(71345, 71349, 1), new Q.ptr(71351, 71453, 102), new Q.ptr(71454, 71455, 1), new Q.ptr(71458, 71461, 1), new Q.ptr(71463, 71467, 1), new Q.ptr(72193, 72198, 1), new Q.ptr(72201, 72202, 1), new Q.ptr(72243, 72248, 1), new Q.ptr(72251, 72254, 1), new Q.ptr(72263, 72273, 10), new Q.ptr(72274, 72278, 1), new Q.ptr(72281, 72283, 1), new Q.ptr(72330, 72342, 1), new Q.ptr(72344, 72345, 1), new Q.ptr(72752, 72758, 1), new Q.ptr(72760, 72765, 1), new Q.ptr(72767, 72850, 83), new Q.ptr(72851, 72871, 1), new Q.ptr(72874, 72880, 1), new Q.ptr(72882, 72883, 1), new Q.ptr(72885, 72886, 1), new Q.ptr(73009, 73014, 1), new Q.ptr(73018, 73020, 2), new Q.ptr(73021, 73023, 2), new Q.ptr(73024, 73029, 1), new Q.ptr(73031, 92912, 19881), new Q.ptr(92913, 92916, 1), new Q.ptr(92976, 92982, 1), new Q.ptr(94095, 94098, 1), new Q.ptr(113821, 113822, 1), new Q.ptr(119143, 119145, 1), new Q.ptr(119163, 119170, 1), new Q.ptr(119173, 119179, 1), new Q.ptr(119210, 119213, 1), new Q.ptr(119362, 119364, 1), new Q.ptr(121344, 121398, 1), new Q.ptr(121403, 121452, 1), new Q.ptr(121461, 121476, 15), new Q.ptr(121499, 121503, 1), new Q.ptr(121505, 121519, 1), new Q.ptr(122880, 122886, 1), new Q.ptr(122888, 122904, 1), new Q.ptr(122907, 122913, 1), new Q.ptr(122915, 122916, 1), new Q.ptr(122918, 122922, 1), new Q.ptr(125136, 125142, 1), new Q.ptr(125252, 125258, 1), new Q.ptr(917760, 917999, 1)]), 0);
            AW = new O.ptr(new IY([new P.ptr(48, 57, 1), new P.ptr(178, 179, 1), new P.ptr(185, 188, 3), new P.ptr(189, 190, 1), new P.ptr(1632, 1641, 1), new P.ptr(1776, 1785, 1), new P.ptr(1984, 1993, 1), new P.ptr(2406, 2415, 1), new P.ptr(2534, 2543, 1), new P.ptr(2548, 2553, 1), new P.ptr(2662, 2671, 1), new P.ptr(2790, 2799, 1), new P.ptr(2918, 2927, 1), new P.ptr(2930, 2935, 1), new P.ptr(3046, 3058, 1), new P.ptr(3174, 3183, 1), new P.ptr(3192, 3198, 1), new P.ptr(3302, 3311, 1), new P.ptr(3416, 3422, 1), new P.ptr(3430, 3448, 1), new P.ptr(3558, 3567, 1), new P.ptr(3664, 3673, 1), new P.ptr(3792, 3801, 1), new P.ptr(3872, 3891, 1), new P.ptr(4160, 4169, 1), new P.ptr(4240, 4249, 1), new P.ptr(4969, 4988, 1), new P.ptr(5870, 5872, 1), new P.ptr(6112, 6121, 1), new P.ptr(6128, 6137, 1), new P.ptr(6160, 6169, 1), new P.ptr(6470, 6479, 1), new P.ptr(6608, 6618, 1), new P.ptr(6784, 6793, 1), new P.ptr(6800, 6809, 1), new P.ptr(6992, 7001, 1), new P.ptr(7088, 7097, 1), new P.ptr(7232, 7241, 1), new P.ptr(7248, 7257, 1), new P.ptr(8304, 8308, 4), new P.ptr(8309, 8313, 1), new P.ptr(8320, 8329, 1), new P.ptr(8528, 8578, 1), new P.ptr(8581, 8585, 1), new P.ptr(9312, 9371, 1), new P.ptr(9450, 9471, 1), new P.ptr(10102, 10131, 1), new P.ptr(11517, 12295, 778), new P.ptr(12321, 12329, 1), new P.ptr(12344, 12346, 1), new P.ptr(12690, 12693, 1), new P.ptr(12832, 12841, 1), new P.ptr(12872, 12879, 1), new P.ptr(12881, 12895, 1), new P.ptr(12928, 12937, 1), new P.ptr(12977, 12991, 1), new P.ptr(42528, 42537, 1), new P.ptr(42726, 42735, 1), new P.ptr(43056, 43061, 1), new P.ptr(43216, 43225, 1), new P.ptr(43264, 43273, 1), new P.ptr(43472, 43481, 1), new P.ptr(43504, 43513, 1), new P.ptr(43600, 43609, 1), new P.ptr(44016, 44025, 1), new P.ptr(65296, 65305, 1)]), new IZ([new Q.ptr(65799, 65843, 1), new Q.ptr(65856, 65912, 1), new Q.ptr(65930, 65931, 1), new Q.ptr(66273, 66299, 1), new Q.ptr(66336, 66339, 1), new Q.ptr(66369, 66378, 9), new Q.ptr(66513, 66517, 1), new Q.ptr(66720, 66729, 1), new Q.ptr(67672, 67679, 1), new Q.ptr(67705, 67711, 1), new Q.ptr(67751, 67759, 1), new Q.ptr(67835, 67839, 1), new Q.ptr(67862, 67867, 1), new Q.ptr(68028, 68029, 1), new Q.ptr(68032, 68047, 1), new Q.ptr(68050, 68095, 1), new Q.ptr(68160, 68167, 1), new Q.ptr(68221, 68222, 1), new Q.ptr(68253, 68255, 1), new Q.ptr(68331, 68335, 1), new Q.ptr(68440, 68447, 1), new Q.ptr(68472, 68479, 1), new Q.ptr(68521, 68527, 1), new Q.ptr(68858, 68863, 1), new Q.ptr(69216, 69246, 1), new Q.ptr(69714, 69743, 1), new Q.ptr(69872, 69881, 1), new Q.ptr(69942, 69951, 1), new Q.ptr(70096, 70105, 1), new Q.ptr(70113, 70132, 1), new Q.ptr(70384, 70393, 1), new Q.ptr(70736, 70745, 1), new Q.ptr(70864, 70873, 1), new Q.ptr(71248, 71257, 1), new Q.ptr(71360, 71369, 1), new Q.ptr(71472, 71483, 1), new Q.ptr(71904, 71922, 1), new Q.ptr(72784, 72812, 1), new Q.ptr(73040, 73049, 1), new Q.ptr(74752, 74862, 1), new Q.ptr(92768, 92777, 1), new Q.ptr(93008, 93017, 1), new Q.ptr(93019, 93025, 1), new Q.ptr(119648, 119665, 1), new Q.ptr(120782, 120831, 1), new Q.ptr(125127, 125135, 1), new Q.ptr(125264, 125273, 1), new Q.ptr(127232, 127244, 1)]), 4);
            AX = new O.ptr(new IY([new P.ptr(48, 57, 1), new P.ptr(1632, 1641, 1), new P.ptr(1776, 1785, 1), new P.ptr(1984, 1993, 1), new P.ptr(2406, 2415, 1), new P.ptr(2534, 2543, 1), new P.ptr(2662, 2671, 1), new P.ptr(2790, 2799, 1), new P.ptr(2918, 2927, 1), new P.ptr(3046, 3055, 1), new P.ptr(3174, 3183, 1), new P.ptr(3302, 3311, 1), new P.ptr(3430, 3439, 1), new P.ptr(3558, 3567, 1), new P.ptr(3664, 3673, 1), new P.ptr(3792, 3801, 1), new P.ptr(3872, 3881, 1), new P.ptr(4160, 4169, 1), new P.ptr(4240, 4249, 1), new P.ptr(6112, 6121, 1), new P.ptr(6160, 6169, 1), new P.ptr(6470, 6479, 1), new P.ptr(6608, 6617, 1), new P.ptr(6784, 6793, 1), new P.ptr(6800, 6809, 1), new P.ptr(6992, 7001, 1), new P.ptr(7088, 7097, 1), new P.ptr(7232, 7241, 1), new P.ptr(7248, 7257, 1), new P.ptr(42528, 42537, 1), new P.ptr(43216, 43225, 1), new P.ptr(43264, 43273, 1), new P.ptr(43472, 43481, 1), new P.ptr(43504, 43513, 1), new P.ptr(43600, 43609, 1), new P.ptr(44016, 44025, 1), new P.ptr(65296, 65305, 1)]), new IZ([new Q.ptr(66720, 66729, 1), new Q.ptr(69734, 69743, 1), new Q.ptr(69872, 69881, 1), new Q.ptr(69942, 69951, 1), new Q.ptr(70096, 70105, 1), new Q.ptr(70384, 70393, 1), new Q.ptr(70736, 70745, 1), new Q.ptr(70864, 70873, 1), new Q.ptr(71248, 71257, 1), new Q.ptr(71360, 71369, 1), new Q.ptr(71472, 71481, 1), new Q.ptr(71904, 71913, 1), new Q.ptr(72784, 72793, 1), new Q.ptr(73040, 73049, 1), new Q.ptr(92768, 92777, 1), new Q.ptr(93008, 93017, 1), new Q.ptr(120782, 120831, 1), new Q.ptr(125264, 125273, 1)]), 1);
            AY = new O.ptr(new IY([new P.ptr(5870, 5872, 1), new P.ptr(8544, 8578, 1), new P.ptr(8581, 8584, 1), new P.ptr(12295, 12321, 26), new P.ptr(12322, 12329, 1), new P.ptr(12344, 12346, 1), new P.ptr(42726, 42735, 1)]), new IZ([new Q.ptr(65856, 65908, 1), new Q.ptr(66369, 66378, 9), new Q.ptr(66513, 66517, 1), new Q.ptr(74752, 74862, 1)]), 0);
            AZ = new O.ptr(new IY([new P.ptr(178, 179, 1), new P.ptr(185, 188, 3), new P.ptr(189, 190, 1), new P.ptr(2548, 2553, 1), new P.ptr(2930, 2935, 1), new P.ptr(3056, 3058, 1), new P.ptr(3192, 3198, 1), new P.ptr(3416, 3422, 1), new P.ptr(3440, 3448, 1), new P.ptr(3882, 3891, 1), new P.ptr(4969, 4988, 1), new P.ptr(6128, 6137, 1), new P.ptr(6618, 8304, 1686), new P.ptr(8308, 8313, 1), new P.ptr(8320, 8329, 1), new P.ptr(8528, 8543, 1), new P.ptr(8585, 9312, 727), new P.ptr(9313, 9371, 1), new P.ptr(9450, 9471, 1), new P.ptr(10102, 10131, 1), new P.ptr(11517, 12690, 1173), new P.ptr(12691, 12693, 1), new P.ptr(12832, 12841, 1), new P.ptr(12872, 12879, 1), new P.ptr(12881, 12895, 1), new P.ptr(12928, 12937, 1), new P.ptr(12977, 12991, 1), new P.ptr(43056, 43061, 1)]), new IZ([new Q.ptr(65799, 65843, 1), new Q.ptr(65909, 65912, 1), new Q.ptr(65930, 65931, 1), new Q.ptr(66273, 66299, 1), new Q.ptr(66336, 66339, 1), new Q.ptr(67672, 67679, 1), new Q.ptr(67705, 67711, 1), new Q.ptr(67751, 67759, 1), new Q.ptr(67835, 67839, 1), new Q.ptr(67862, 67867, 1), new Q.ptr(68028, 68029, 1), new Q.ptr(68032, 68047, 1), new Q.ptr(68050, 68095, 1), new Q.ptr(68160, 68167, 1), new Q.ptr(68221, 68222, 1), new Q.ptr(68253, 68255, 1), new Q.ptr(68331, 68335, 1), new Q.ptr(68440, 68447, 1), new Q.ptr(68472, 68479, 1), new Q.ptr(68521, 68527, 1), new Q.ptr(68858, 68863, 1), new Q.ptr(69216, 69246, 1), new Q.ptr(69714, 69733, 1), new Q.ptr(70113, 70132, 1), new Q.ptr(71482, 71483, 1), new Q.ptr(71914, 71922, 1), new Q.ptr(72794, 72812, 1), new Q.ptr(93019, 93025, 1), new Q.ptr(119648, 119665, 1), new Q.ptr(125127, 125135, 1), new Q.ptr(127232, 127244, 1)]), 3);
            BA = new O.ptr(new IY([new P.ptr(33, 35, 1), new P.ptr(37, 42, 1), new P.ptr(44, 47, 1), new P.ptr(58, 59, 1), new P.ptr(63, 64, 1), new P.ptr(91, 93, 1), new P.ptr(95, 123, 28), new P.ptr(125, 161, 36), new P.ptr(167, 171, 4), new P.ptr(182, 183, 1), new P.ptr(187, 191, 4), new P.ptr(894, 903, 9), new P.ptr(1370, 1375, 1), new P.ptr(1417, 1418, 1), new P.ptr(1470, 1472, 2), new P.ptr(1475, 1478, 3), new P.ptr(1523, 1524, 1), new P.ptr(1545, 1546, 1), new P.ptr(1548, 1549, 1), new P.ptr(1563, 1566, 3), new P.ptr(1567, 1642, 75), new P.ptr(1643, 1645, 1), new P.ptr(1748, 1792, 44), new P.ptr(1793, 1805, 1), new P.ptr(2039, 2041, 1), new P.ptr(2096, 2110, 1), new P.ptr(2142, 2404, 262), new P.ptr(2405, 2416, 11), new P.ptr(2557, 2800, 243), new P.ptr(3572, 3663, 91), new P.ptr(3674, 3675, 1), new P.ptr(3844, 3858, 1), new P.ptr(3860, 3898, 38), new P.ptr(3899, 3901, 1), new P.ptr(3973, 4048, 75), new P.ptr(4049, 4052, 1), new P.ptr(4057, 4058, 1), new P.ptr(4170, 4175, 1), new P.ptr(4347, 4960, 613), new P.ptr(4961, 4968, 1), new P.ptr(5120, 5741, 621), new P.ptr(5742, 5787, 45), new P.ptr(5788, 5867, 79), new P.ptr(5868, 5869, 1), new P.ptr(5941, 5942, 1), new P.ptr(6100, 6102, 1), new P.ptr(6104, 6106, 1), new P.ptr(6144, 6154, 1), new P.ptr(6468, 6469, 1), new P.ptr(6686, 6687, 1), new P.ptr(6816, 6822, 1), new P.ptr(6824, 6829, 1), new P.ptr(7002, 7008, 1), new P.ptr(7164, 7167, 1), new P.ptr(7227, 7231, 1), new P.ptr(7294, 7295, 1), new P.ptr(7360, 7367, 1), new P.ptr(7379, 8208, 829), new P.ptr(8209, 8231, 1), new P.ptr(8240, 8259, 1), new P.ptr(8261, 8273, 1), new P.ptr(8275, 8286, 1), new P.ptr(8317, 8318, 1), new P.ptr(8333, 8334, 1), new P.ptr(8968, 8971, 1), new P.ptr(9001, 9002, 1), new P.ptr(10088, 10101, 1), new P.ptr(10181, 10182, 1), new P.ptr(10214, 10223, 1), new P.ptr(10627, 10648, 1), new P.ptr(10712, 10715, 1), new P.ptr(10748, 10749, 1), new P.ptr(11513, 11516, 1), new P.ptr(11518, 11519, 1), new P.ptr(11632, 11776, 144), new P.ptr(11777, 11822, 1), new P.ptr(11824, 11849, 1), new P.ptr(12289, 12291, 1), new P.ptr(12296, 12305, 1), new P.ptr(12308, 12319, 1), new P.ptr(12336, 12349, 13), new P.ptr(12448, 12539, 91), new P.ptr(42238, 42239, 1), new P.ptr(42509, 42511, 1), new P.ptr(42611, 42622, 11), new P.ptr(42738, 42743, 1), new P.ptr(43124, 43127, 1), new P.ptr(43214, 43215, 1), new P.ptr(43256, 43258, 1), new P.ptr(43260, 43310, 50), new P.ptr(43311, 43359, 48), new P.ptr(43457, 43469, 1), new P.ptr(43486, 43487, 1), new P.ptr(43612, 43615, 1), new P.ptr(43742, 43743, 1), new P.ptr(43760, 43761, 1), new P.ptr(44011, 64830, 20819), new P.ptr(64831, 65040, 209), new P.ptr(65041, 65049, 1), new P.ptr(65072, 65106, 1), new P.ptr(65108, 65121, 1), new P.ptr(65123, 65128, 5), new P.ptr(65130, 65131, 1), new P.ptr(65281, 65283, 1), new P.ptr(65285, 65290, 1), new P.ptr(65292, 65295, 1), new P.ptr(65306, 65307, 1), new P.ptr(65311, 65312, 1), new P.ptr(65339, 65341, 1), new P.ptr(65343, 65371, 28), new P.ptr(65373, 65375, 2), new P.ptr(65376, 65381, 1)]), new IZ([new Q.ptr(65792, 65794, 1), new Q.ptr(66463, 66512, 49), new Q.ptr(66927, 67671, 744), new Q.ptr(67871, 67903, 32), new Q.ptr(68176, 68184, 1), new Q.ptr(68223, 68336, 113), new Q.ptr(68337, 68342, 1), new Q.ptr(68409, 68415, 1), new Q.ptr(68505, 68508, 1), new Q.ptr(69703, 69709, 1), new Q.ptr(69819, 69820, 1), new Q.ptr(69822, 69825, 1), new Q.ptr(69952, 69955, 1), new Q.ptr(70004, 70005, 1), new Q.ptr(70085, 70089, 1), new Q.ptr(70093, 70107, 14), new Q.ptr(70109, 70111, 1), new Q.ptr(70200, 70205, 1), new Q.ptr(70313, 70731, 418), new Q.ptr(70732, 70735, 1), new Q.ptr(70747, 70749, 2), new Q.ptr(70854, 71105, 251), new Q.ptr(71106, 71127, 1), new Q.ptr(71233, 71235, 1), new Q.ptr(71264, 71276, 1), new Q.ptr(71484, 71486, 1), new Q.ptr(72255, 72262, 1), new Q.ptr(72346, 72348, 1), new Q.ptr(72350, 72354, 1), new Q.ptr(72769, 72773, 1), new Q.ptr(72816, 72817, 1), new Q.ptr(74864, 74868, 1), new Q.ptr(92782, 92783, 1), new Q.ptr(92917, 92983, 66), new Q.ptr(92984, 92987, 1), new Q.ptr(92996, 113823, 20827), new Q.ptr(121479, 121483, 1), new Q.ptr(125278, 125279, 1)]), 11);
            BB = new O.ptr(new IY([new P.ptr(95, 8255, 8160), new P.ptr(8256, 8276, 20), new P.ptr(65075, 65076, 1), new P.ptr(65101, 65103, 1), new P.ptr(65343, 65343, 1)]), IZ.nil, 0);
            BC = new O.ptr(new IY([new P.ptr(45, 1418, 1373), new P.ptr(1470, 5120, 3650), new P.ptr(6150, 8208, 2058), new P.ptr(8209, 8213, 1), new P.ptr(11799, 11802, 3), new P.ptr(11834, 11835, 1), new P.ptr(11840, 12316, 476), new P.ptr(12336, 12448, 112), new P.ptr(65073, 65074, 1), new P.ptr(65112, 65123, 11), new P.ptr(65293, 65293, 1)]), IZ.nil, 0);
            BD = new O.ptr(new IY([new P.ptr(41, 93, 52), new P.ptr(125, 3899, 3774), new P.ptr(3901, 5788, 1887), new P.ptr(8262, 8318, 56), new P.ptr(8334, 8969, 635), new P.ptr(8971, 9002, 31), new P.ptr(10089, 10101, 2), new P.ptr(10182, 10215, 33), new P.ptr(10217, 10223, 2), new P.ptr(10628, 10648, 2), new P.ptr(10713, 10715, 2), new P.ptr(10749, 11811, 1062), new P.ptr(11813, 11817, 2), new P.ptr(12297, 12305, 2), new P.ptr(12309, 12315, 2), new P.ptr(12318, 12319, 1), new P.ptr(64830, 65048, 218), new P.ptr(65078, 65092, 2), new P.ptr(65096, 65114, 18), new P.ptr(65116, 65118, 2), new P.ptr(65289, 65341, 52), new P.ptr(65373, 65379, 3)]), IZ.nil, 1);
            BE = new O.ptr(new IY([new P.ptr(187, 8217, 8030), new P.ptr(8221, 8250, 29), new P.ptr(11779, 11781, 2), new P.ptr(11786, 11789, 3), new P.ptr(11805, 11809, 4)]), IZ.nil, 0);
            BF = new O.ptr(new IY([new P.ptr(171, 8216, 8045), new P.ptr(8219, 8220, 1), new P.ptr(8223, 8249, 26), new P.ptr(11778, 11780, 2), new P.ptr(11785, 11788, 3), new P.ptr(11804, 11808, 4)]), IZ.nil, 0);
            BG = new O.ptr(new IY([new P.ptr(33, 35, 1), new P.ptr(37, 39, 1), new P.ptr(42, 46, 2), new P.ptr(47, 58, 11), new P.ptr(59, 63, 4), new P.ptr(64, 92, 28), new P.ptr(161, 167, 6), new P.ptr(182, 183, 1), new P.ptr(191, 894, 703), new P.ptr(903, 1370, 467), new P.ptr(1371, 1375, 1), new P.ptr(1417, 1472, 55), new P.ptr(1475, 1478, 3), new P.ptr(1523, 1524, 1), new P.ptr(1545, 1546, 1), new P.ptr(1548, 1549, 1), new P.ptr(1563, 1566, 3), new P.ptr(1567, 1642, 75), new P.ptr(1643, 1645, 1), new P.ptr(1748, 1792, 44), new P.ptr(1793, 1805, 1), new P.ptr(2039, 2041, 1), new P.ptr(2096, 2110, 1), new P.ptr(2142, 2404, 262), new P.ptr(2405, 2416, 11), new P.ptr(2557, 2800, 243), new P.ptr(3572, 3663, 91), new P.ptr(3674, 3675, 1), new P.ptr(3844, 3858, 1), new P.ptr(3860, 3973, 113), new P.ptr(4048, 4052, 1), new P.ptr(4057, 4058, 1), new P.ptr(4170, 4175, 1), new P.ptr(4347, 4960, 613), new P.ptr(4961, 4968, 1), new P.ptr(5741, 5742, 1), new P.ptr(5867, 5869, 1), new P.ptr(5941, 5942, 1), new P.ptr(6100, 6102, 1), new P.ptr(6104, 6106, 1), new P.ptr(6144, 6149, 1), new P.ptr(6151, 6154, 1), new P.ptr(6468, 6469, 1), new P.ptr(6686, 6687, 1), new P.ptr(6816, 6822, 1), new P.ptr(6824, 6829, 1), new P.ptr(7002, 7008, 1), new P.ptr(7164, 7167, 1), new P.ptr(7227, 7231, 1), new P.ptr(7294, 7295, 1), new P.ptr(7360, 7367, 1), new P.ptr(7379, 8214, 835), new P.ptr(8215, 8224, 9), new P.ptr(8225, 8231, 1), new P.ptr(8240, 8248, 1), new P.ptr(8251, 8254, 1), new P.ptr(8257, 8259, 1), new P.ptr(8263, 8273, 1), new P.ptr(8275, 8277, 2), new P.ptr(8278, 8286, 1), new P.ptr(11513, 11516, 1), new P.ptr(11518, 11519, 1), new P.ptr(11632, 11776, 144), new P.ptr(11777, 11782, 5), new P.ptr(11783, 11784, 1), new P.ptr(11787, 11790, 3), new P.ptr(11791, 11798, 1), new P.ptr(11800, 11801, 1), new P.ptr(11803, 11806, 3), new P.ptr(11807, 11818, 11), new P.ptr(11819, 11822, 1), new P.ptr(11824, 11833, 1), new P.ptr(11836, 11839, 1), new P.ptr(11841, 11843, 2), new P.ptr(11844, 11849, 1), new P.ptr(12289, 12291, 1), new P.ptr(12349, 12539, 190), new P.ptr(42238, 42239, 1), new P.ptr(42509, 42511, 1), new P.ptr(42611, 42622, 11), new P.ptr(42738, 42743, 1), new P.ptr(43124, 43127, 1), new P.ptr(43214, 43215, 1), new P.ptr(43256, 43258, 1), new P.ptr(43260, 43310, 50), new P.ptr(43311, 43359, 48), new P.ptr(43457, 43469, 1), new P.ptr(43486, 43487, 1), new P.ptr(43612, 43615, 1), new P.ptr(43742, 43743, 1), new P.ptr(43760, 43761, 1), new P.ptr(44011, 65040, 21029), new P.ptr(65041, 65046, 1), new P.ptr(65049, 65072, 23), new P.ptr(65093, 65094, 1), new P.ptr(65097, 65100, 1), new P.ptr(65104, 65106, 1), new P.ptr(65108, 65111, 1), new P.ptr(65119, 65121, 1), new P.ptr(65128, 65130, 2), new P.ptr(65131, 65281, 150), new P.ptr(65282, 65283, 1), new P.ptr(65285, 65287, 1), new P.ptr(65290, 65294, 2), new P.ptr(65295, 65306, 11), new P.ptr(65307, 65311, 4), new P.ptr(65312, 65340, 28), new P.ptr(65377, 65380, 3), new P.ptr(65381, 65381, 1)]), new IZ([new Q.ptr(65792, 65792, 1), new Q.ptr(65793, 65794, 1), new Q.ptr(66463, 66512, 49), new Q.ptr(66927, 67671, 744), new Q.ptr(67871, 67903, 32), new Q.ptr(68176, 68184, 1), new Q.ptr(68223, 68336, 113), new Q.ptr(68337, 68342, 1), new Q.ptr(68409, 68415, 1), new Q.ptr(68505, 68508, 1), new Q.ptr(69703, 69709, 1), new Q.ptr(69819, 69820, 1), new Q.ptr(69822, 69825, 1), new Q.ptr(69952, 69955, 1), new Q.ptr(70004, 70005, 1), new Q.ptr(70085, 70089, 1), new Q.ptr(70093, 70107, 14), new Q.ptr(70109, 70111, 1), new Q.ptr(70200, 70205, 1), new Q.ptr(70313, 70731, 418), new Q.ptr(70732, 70735, 1), new Q.ptr(70747, 70749, 2), new Q.ptr(70854, 71105, 251), new Q.ptr(71106, 71127, 1), new Q.ptr(71233, 71235, 1), new Q.ptr(71264, 71276, 1), new Q.ptr(71484, 71486, 1), new Q.ptr(72255, 72262, 1), new Q.ptr(72346, 72348, 1), new Q.ptr(72350, 72354, 1), new Q.ptr(72769, 72773, 1), new Q.ptr(72816, 72817, 1), new Q.ptr(74864, 74868, 1), new Q.ptr(92782, 92783, 1), new Q.ptr(92917, 92983, 66), new Q.ptr(92984, 92987, 1), new Q.ptr(92996, 113823, 20827), new Q.ptr(121479, 121483, 1), new Q.ptr(125278, 125279, 1)]), 8);
            BH = new O.ptr(new IY([new P.ptr(40, 91, 51), new P.ptr(123, 3898, 3775), new P.ptr(3900, 5787, 1887), new P.ptr(8218, 8222, 4), new P.ptr(8261, 8317, 56), new P.ptr(8333, 8968, 635), new P.ptr(8970, 9001, 31), new P.ptr(10088, 10100, 2), new P.ptr(10181, 10214, 33), new P.ptr(10216, 10222, 2), new P.ptr(10627, 10647, 2), new P.ptr(10712, 10714, 2), new P.ptr(10748, 11810, 1062), new P.ptr(11812, 11816, 2), new P.ptr(11842, 12296, 454), new P.ptr(12298, 12304, 2), new P.ptr(12308, 12314, 2), new P.ptr(12317, 64831, 52514), new P.ptr(65047, 65077, 30), new P.ptr(65079, 65091, 2), new P.ptr(65095, 65113, 18), new P.ptr(65115, 65117, 2), new P.ptr(65288, 65339, 51), new P.ptr(65371, 65375, 4), new P.ptr(65378, 65378, 1)]), IZ.nil, 1);
            BI = new O.ptr(new IY([new P.ptr(36, 43, 7), new P.ptr(60, 62, 1), new P.ptr(94, 96, 2), new P.ptr(124, 126, 2), new P.ptr(162, 166, 1), new P.ptr(168, 169, 1), new P.ptr(172, 174, 2), new P.ptr(175, 177, 1), new P.ptr(180, 184, 4), new P.ptr(215, 247, 32), new P.ptr(706, 709, 1), new P.ptr(722, 735, 1), new P.ptr(741, 747, 1), new P.ptr(749, 751, 2), new P.ptr(752, 767, 1), new P.ptr(885, 900, 15), new P.ptr(901, 1014, 113), new P.ptr(1154, 1421, 267), new P.ptr(1422, 1423, 1), new P.ptr(1542, 1544, 1), new P.ptr(1547, 1550, 3), new P.ptr(1551, 1758, 207), new P.ptr(1769, 1789, 20), new P.ptr(1790, 2038, 248), new P.ptr(2546, 2547, 1), new P.ptr(2554, 2555, 1), new P.ptr(2801, 2928, 127), new P.ptr(3059, 3066, 1), new P.ptr(3199, 3407, 208), new P.ptr(3449, 3647, 198), new P.ptr(3841, 3843, 1), new P.ptr(3859, 3861, 2), new P.ptr(3862, 3863, 1), new P.ptr(3866, 3871, 1), new P.ptr(3892, 3896, 2), new P.ptr(4030, 4037, 1), new P.ptr(4039, 4044, 1), new P.ptr(4046, 4047, 1), new P.ptr(4053, 4056, 1), new P.ptr(4254, 4255, 1), new P.ptr(5008, 5017, 1), new P.ptr(6107, 6464, 357), new P.ptr(6622, 6655, 1), new P.ptr(7009, 7018, 1), new P.ptr(7028, 7036, 1), new P.ptr(8125, 8127, 2), new P.ptr(8128, 8129, 1), new P.ptr(8141, 8143, 1), new P.ptr(8157, 8159, 1), new P.ptr(8173, 8175, 1), new P.ptr(8189, 8190, 1), new P.ptr(8260, 8274, 14), new P.ptr(8314, 8316, 1), new P.ptr(8330, 8332, 1), new P.ptr(8352, 8383, 1), new P.ptr(8448, 8449, 1), new P.ptr(8451, 8454, 1), new P.ptr(8456, 8457, 1), new P.ptr(8468, 8470, 2), new P.ptr(8471, 8472, 1), new P.ptr(8478, 8483, 1), new P.ptr(8485, 8489, 2), new P.ptr(8494, 8506, 12), new P.ptr(8507, 8512, 5), new P.ptr(8513, 8516, 1), new P.ptr(8522, 8525, 1), new P.ptr(8527, 8586, 59), new P.ptr(8587, 8592, 5), new P.ptr(8593, 8967, 1), new P.ptr(8972, 9000, 1), new P.ptr(9003, 9254, 1), new P.ptr(9280, 9290, 1), new P.ptr(9372, 9449, 1), new P.ptr(9472, 10087, 1), new P.ptr(10132, 10180, 1), new P.ptr(10183, 10213, 1), new P.ptr(10224, 10626, 1), new P.ptr(10649, 10711, 1), new P.ptr(10716, 10747, 1), new P.ptr(10750, 11123, 1), new P.ptr(11126, 11157, 1), new P.ptr(11160, 11193, 1), new P.ptr(11197, 11208, 1), new P.ptr(11210, 11218, 1), new P.ptr(11244, 11247, 1), new P.ptr(11493, 11498, 1), new P.ptr(11904, 11929, 1), new P.ptr(11931, 12019, 1), new P.ptr(12032, 12245, 1), new P.ptr(12272, 12283, 1), new P.ptr(12292, 12306, 14), new P.ptr(12307, 12320, 13), new P.ptr(12342, 12343, 1), new P.ptr(12350, 12351, 1), new P.ptr(12443, 12444, 1), new P.ptr(12688, 12689, 1), new P.ptr(12694, 12703, 1), new P.ptr(12736, 12771, 1), new P.ptr(12800, 12830, 1), new P.ptr(12842, 12871, 1), new P.ptr(12880, 12896, 16), new P.ptr(12897, 12927, 1), new P.ptr(12938, 12976, 1), new P.ptr(12992, 13054, 1), new P.ptr(13056, 13311, 1), new P.ptr(19904, 19967, 1), new P.ptr(42128, 42182, 1), new P.ptr(42752, 42774, 1), new P.ptr(42784, 42785, 1), new P.ptr(42889, 42890, 1), new P.ptr(43048, 43051, 1), new P.ptr(43062, 43065, 1), new P.ptr(43639, 43641, 1), new P.ptr(43867, 64297, 20430), new P.ptr(64434, 64449, 1), new P.ptr(65020, 65021, 1), new P.ptr(65122, 65124, 2), new P.ptr(65125, 65126, 1), new P.ptr(65129, 65284, 155), new P.ptr(65291, 65308, 17), new P.ptr(65309, 65310, 1), new P.ptr(65342, 65344, 2), new P.ptr(65372, 65374, 2), new P.ptr(65504, 65510, 1), new P.ptr(65512, 65518, 1), new P.ptr(65532, 65533, 1)]), new IZ([new Q.ptr(65847, 65855, 1), new Q.ptr(65913, 65929, 1), new Q.ptr(65932, 65934, 1), new Q.ptr(65936, 65947, 1), new Q.ptr(65952, 66000, 48), new Q.ptr(66001, 66044, 1), new Q.ptr(67703, 67704, 1), new Q.ptr(68296, 71487, 3191), new Q.ptr(92988, 92991, 1), new Q.ptr(92997, 113820, 20823), new Q.ptr(118784, 119029, 1), new Q.ptr(119040, 119078, 1), new Q.ptr(119081, 119140, 1), new Q.ptr(119146, 119148, 1), new Q.ptr(119171, 119172, 1), new Q.ptr(119180, 119209, 1), new Q.ptr(119214, 119272, 1), new Q.ptr(119296, 119361, 1), new Q.ptr(119365, 119552, 187), new Q.ptr(119553, 119638, 1), new Q.ptr(120513, 120539, 26), new Q.ptr(120571, 120597, 26), new Q.ptr(120629, 120655, 26), new Q.ptr(120687, 120713, 26), new Q.ptr(120745, 120771, 26), new Q.ptr(120832, 121343, 1), new Q.ptr(121399, 121402, 1), new Q.ptr(121453, 121460, 1), new Q.ptr(121462, 121475, 1), new Q.ptr(121477, 121478, 1), new Q.ptr(126704, 126705, 1), new Q.ptr(126976, 127019, 1), new Q.ptr(127024, 127123, 1), new Q.ptr(127136, 127150, 1), new Q.ptr(127153, 127167, 1), new Q.ptr(127169, 127183, 1), new Q.ptr(127185, 127221, 1), new Q.ptr(127248, 127278, 1), new Q.ptr(127280, 127339, 1), new Q.ptr(127344, 127404, 1), new Q.ptr(127462, 127490, 1), new Q.ptr(127504, 127547, 1), new Q.ptr(127552, 127560, 1), new Q.ptr(127568, 127569, 1), new Q.ptr(127584, 127589, 1), new Q.ptr(127744, 128724, 1), new Q.ptr(128736, 128748, 1), new Q.ptr(128752, 128760, 1), new Q.ptr(128768, 128883, 1), new Q.ptr(128896, 128980, 1), new Q.ptr(129024, 129035, 1), new Q.ptr(129040, 129095, 1), new Q.ptr(129104, 129113, 1), new Q.ptr(129120, 129159, 1), new Q.ptr(129168, 129197, 1), new Q.ptr(129280, 129291, 1), new Q.ptr(129296, 129342, 1), new Q.ptr(129344, 129356, 1), new Q.ptr(129360, 129387, 1), new Q.ptr(129408, 129431, 1), new Q.ptr(129472, 129488, 16), new Q.ptr(129489, 129510, 1)]), 10);
            BJ = new O.ptr(new IY([new P.ptr(36, 162, 126), new P.ptr(163, 165, 1), new P.ptr(1423, 1547, 124), new P.ptr(2546, 2547, 1), new P.ptr(2555, 2801, 246), new P.ptr(3065, 3647, 582), new P.ptr(6107, 8352, 2245), new P.ptr(8353, 8383, 1), new P.ptr(43064, 65020, 21956), new P.ptr(65129, 65284, 155), new P.ptr(65504, 65505, 1), new P.ptr(65509, 65510, 1)]), IZ.nil, 2);
            BK = new O.ptr(new IY([new P.ptr(94, 96, 2), new P.ptr(168, 175, 7), new P.ptr(180, 184, 4), new P.ptr(706, 709, 1), new P.ptr(722, 735, 1), new P.ptr(741, 747, 1), new P.ptr(749, 751, 2), new P.ptr(752, 767, 1), new P.ptr(885, 900, 15), new P.ptr(901, 8125, 7224), new P.ptr(8127, 8129, 1), new P.ptr(8141, 8143, 1), new P.ptr(8157, 8159, 1), new P.ptr(8173, 8175, 1), new P.ptr(8189, 8190, 1), new P.ptr(12443, 12444, 1), new P.ptr(42752, 42774, 1), new P.ptr(42784, 42785, 1), new P.ptr(42889, 42890, 1), new P.ptr(43867, 64434, 20567), new P.ptr(64435, 64449, 1), new P.ptr(65342, 65344, 2), new P.ptr(65507, 65507, 1)]), new IZ([new Q.ptr(127995, 127995, 1), new Q.ptr(127996, 127999, 1)]), 3);
            BL = new O.ptr(new IY([new P.ptr(43, 60, 17), new P.ptr(61, 62, 1), new P.ptr(124, 126, 2), new P.ptr(172, 177, 5), new P.ptr(215, 247, 32), new P.ptr(1014, 1542, 528), new P.ptr(1543, 1544, 1), new P.ptr(8260, 8274, 14), new P.ptr(8314, 8316, 1), new P.ptr(8330, 8332, 1), new P.ptr(8472, 8512, 40), new P.ptr(8513, 8516, 1), new P.ptr(8523, 8592, 69), new P.ptr(8593, 8596, 1), new P.ptr(8602, 8603, 1), new P.ptr(8608, 8614, 3), new P.ptr(8622, 8654, 32), new P.ptr(8655, 8658, 3), new P.ptr(8660, 8692, 32), new P.ptr(8693, 8959, 1), new P.ptr(8992, 8993, 1), new P.ptr(9084, 9115, 31), new P.ptr(9116, 9139, 1), new P.ptr(9180, 9185, 1), new P.ptr(9655, 9665, 10), new P.ptr(9720, 9727, 1), new P.ptr(9839, 10176, 337), new P.ptr(10177, 10180, 1), new P.ptr(10183, 10213, 1), new P.ptr(10224, 10239, 1), new P.ptr(10496, 10626, 1), new P.ptr(10649, 10711, 1), new P.ptr(10716, 10747, 1), new P.ptr(10750, 11007, 1), new P.ptr(11056, 11076, 1), new P.ptr(11079, 11084, 1), new P.ptr(64297, 65122, 825), new P.ptr(65124, 65126, 1), new P.ptr(65291, 65308, 17), new P.ptr(65309, 65310, 1), new P.ptr(65372, 65374, 2), new P.ptr(65506, 65513, 7), new P.ptr(65514, 65516, 1)]), new IZ([new Q.ptr(120513, 120539, 26), new Q.ptr(120571, 120597, 26), new Q.ptr(120629, 120655, 26), new Q.ptr(120687, 120713, 26), new Q.ptr(120745, 120771, 26), new Q.ptr(126704, 126705, 1)]), 5);
            BM = new O.ptr(new IY([new P.ptr(166, 169, 3), new P.ptr(174, 176, 2), new P.ptr(1154, 1421, 267), new P.ptr(1422, 1550, 128), new P.ptr(1551, 1758, 207), new P.ptr(1769, 1789, 20), new P.ptr(1790, 2038, 248), new P.ptr(2554, 2928, 374), new P.ptr(3059, 3064, 1), new P.ptr(3066, 3199, 133), new P.ptr(3407, 3449, 42), new P.ptr(3841, 3843, 1), new P.ptr(3859, 3861, 2), new P.ptr(3862, 3863, 1), new P.ptr(3866, 3871, 1), new P.ptr(3892, 3896, 2), new P.ptr(4030, 4037, 1), new P.ptr(4039, 4044, 1), new P.ptr(4046, 4047, 1), new P.ptr(4053, 4056, 1), new P.ptr(4254, 4255, 1), new P.ptr(5008, 5017, 1), new P.ptr(6464, 6622, 158), new P.ptr(6623, 6655, 1), new P.ptr(7009, 7018, 1), new P.ptr(7028, 7036, 1), new P.ptr(8448, 8449, 1), new P.ptr(8451, 8454, 1), new P.ptr(8456, 8457, 1), new P.ptr(8468, 8470, 2), new P.ptr(8471, 8478, 7), new P.ptr(8479, 8483, 1), new P.ptr(8485, 8489, 2), new P.ptr(8494, 8506, 12), new P.ptr(8507, 8522, 15), new P.ptr(8524, 8525, 1), new P.ptr(8527, 8586, 59), new P.ptr(8587, 8597, 10), new P.ptr(8598, 8601, 1), new P.ptr(8604, 8607, 1), new P.ptr(8609, 8610, 1), new P.ptr(8612, 8613, 1), new P.ptr(8615, 8621, 1), new P.ptr(8623, 8653, 1), new P.ptr(8656, 8657, 1), new P.ptr(8659, 8661, 2), new P.ptr(8662, 8691, 1), new P.ptr(8960, 8967, 1), new P.ptr(8972, 8991, 1), new P.ptr(8994, 9000, 1), new P.ptr(9003, 9083, 1), new P.ptr(9085, 9114, 1), new P.ptr(9140, 9179, 1), new P.ptr(9186, 9254, 1), new P.ptr(9280, 9290, 1), new P.ptr(9372, 9449, 1), new P.ptr(9472, 9654, 1), new P.ptr(9656, 9664, 1), new P.ptr(9666, 9719, 1), new P.ptr(9728, 9838, 1), new P.ptr(9840, 10087, 1), new P.ptr(10132, 10175, 1), new P.ptr(10240, 10495, 1), new P.ptr(11008, 11055, 1), new P.ptr(11077, 11078, 1), new P.ptr(11085, 11123, 1), new P.ptr(11126, 11157, 1), new P.ptr(11160, 11193, 1), new P.ptr(11197, 11208, 1), new P.ptr(11210, 11218, 1), new P.ptr(11244, 11247, 1), new P.ptr(11493, 11498, 1), new P.ptr(11904, 11929, 1), new P.ptr(11931, 12019, 1), new P.ptr(12032, 12245, 1), new P.ptr(12272, 12283, 1), new P.ptr(12292, 12306, 14), new P.ptr(12307, 12320, 13), new P.ptr(12342, 12343, 1), new P.ptr(12350, 12351, 1), new P.ptr(12688, 12689, 1), new P.ptr(12694, 12703, 1), new P.ptr(12736, 12771, 1), new P.ptr(12800, 12830, 1), new P.ptr(12842, 12871, 1), new P.ptr(12880, 12896, 16), new P.ptr(12897, 12927, 1), new P.ptr(12938, 12976, 1), new P.ptr(12992, 13054, 1), new P.ptr(13056, 13311, 1), new P.ptr(19904, 19967, 1), new P.ptr(42128, 42182, 1), new P.ptr(43048, 43051, 1), new P.ptr(43062, 43063, 1), new P.ptr(43065, 43639, 574), new P.ptr(43640, 43641, 1), new P.ptr(65021, 65508, 487), new P.ptr(65512, 65517, 5), new P.ptr(65518, 65532, 14), new P.ptr(65533, 65533, 1)]), new IZ([new Q.ptr(65847, 65847, 1), new Q.ptr(65848, 65855, 1), new Q.ptr(65913, 65929, 1), new Q.ptr(65932, 65934, 1), new Q.ptr(65936, 65947, 1), new Q.ptr(65952, 66000, 48), new Q.ptr(66001, 66044, 1), new Q.ptr(67703, 67704, 1), new Q.ptr(68296, 71487, 3191), new Q.ptr(92988, 92991, 1), new Q.ptr(92997, 113820, 20823), new Q.ptr(118784, 119029, 1), new Q.ptr(119040, 119078, 1), new Q.ptr(119081, 119140, 1), new Q.ptr(119146, 119148, 1), new Q.ptr(119171, 119172, 1), new Q.ptr(119180, 119209, 1), new Q.ptr(119214, 119272, 1), new Q.ptr(119296, 119361, 1), new Q.ptr(119365, 119552, 187), new Q.ptr(119553, 119638, 1), new Q.ptr(120832, 121343, 1), new Q.ptr(121399, 121402, 1), new Q.ptr(121453, 121460, 1), new Q.ptr(121462, 121475, 1), new Q.ptr(121477, 121478, 1), new Q.ptr(126976, 127019, 1), new Q.ptr(127024, 127123, 1), new Q.ptr(127136, 127150, 1), new Q.ptr(127153, 127167, 1), new Q.ptr(127169, 127183, 1), new Q.ptr(127185, 127221, 1), new Q.ptr(127248, 127278, 1), new Q.ptr(127280, 127339, 1), new Q.ptr(127344, 127404, 1), new Q.ptr(127462, 127490, 1), new Q.ptr(127504, 127547, 1), new Q.ptr(127552, 127560, 1), new Q.ptr(127568, 127569, 1), new Q.ptr(127584, 127589, 1), new Q.ptr(127744, 127994, 1), new Q.ptr(128000, 128724, 1), new Q.ptr(128736, 128748, 1), new Q.ptr(128752, 128760, 1), new Q.ptr(128768, 128883, 1), new Q.ptr(128896, 128980, 1), new Q.ptr(129024, 129035, 1), new Q.ptr(129040, 129095, 1), new Q.ptr(129104, 129113, 1), new Q.ptr(129120, 129159, 1), new Q.ptr(129168, 129197, 1), new Q.ptr(129280, 129291, 1), new Q.ptr(129296, 129342, 1), new Q.ptr(129344, 129356, 1), new Q.ptr(129360, 129387, 1), new Q.ptr(129408, 129431, 1), new Q.ptr(129472, 129488, 16), new Q.ptr(129489, 129510, 1)]), 2);
            BN = new O.ptr(new IY([new P.ptr(32, 160, 128), new P.ptr(5760, 8192, 2432), new P.ptr(8193, 8202, 1), new P.ptr(8232, 8233, 1), new P.ptr(8239, 8287, 48), new P.ptr(12288, 12288, 1)]), IZ.nil, 1);
            BO = new O.ptr(new IY([new P.ptr(8232, 8232, 1)]), IZ.nil, 0);
            BP = new O.ptr(new IY([new P.ptr(8233, 8233, 1)]), IZ.nil, 0);
            BQ = new O.ptr(new IY([new P.ptr(32, 160, 128), new P.ptr(5760, 8192, 2432), new P.ptr(8193, 8202, 1), new P.ptr(8239, 8287, 48), new P.ptr(12288, 12288, 1)]), IZ.nil, 1);
            $pkg.Cc = AI;
            $pkg.Cf = AJ;
            $pkg.Co = AK;
            $pkg.Cs = AL;
            $pkg.Digit = AX;
            $pkg.Nd = AX;
            $pkg.Letter = AM;
            $pkg.L = AM;
            $pkg.Lm = AO;
            $pkg.Lo = AP;
            $pkg.Ll = AN;
            $pkg.M = AS;
            $pkg.Mc = AT;
            $pkg.Me = AU;
            $pkg.Mn = AV;
            $pkg.Nl = AY;
            $pkg.No = AZ;
            $pkg.N = AW;
            $pkg.C = AH;
            $pkg.Pc = BB;
            $pkg.Pd = BC;
            $pkg.Pe = BD;
            $pkg.Pf = BE;
            $pkg.Pi = BF;
            $pkg.Po = BG;
            $pkg.Ps = BH;
            $pkg.P = BA;
            $pkg.Sc = BJ;
            $pkg.Sk = BK;
            $pkg.Sm = BL;
            $pkg.So = BM;
            $pkg.Z = BN;
            $pkg.S = BI;
            $pkg.PrintRanges = new JB([$pkg.L, $pkg.M, $pkg.N, $pkg.P, $pkg.S]);
            $pkg.Lt = AQ;
            $pkg.Lu = AR;
            $pkg.Zl = BO;
            $pkg.Zp = BP;
            $pkg.Zs = BQ;
            $pkg.Categories = $makeMap($String.keyFor, [{
              k: "C",
              v: $pkg.C
            }, {
              k: "Cc",
              v: $pkg.Cc
            }, {
              k: "Cf",
              v: $pkg.Cf
            }, {
              k: "Co",
              v: $pkg.Co
            }, {
              k: "Cs",
              v: $pkg.Cs
            }, {
              k: "L",
              v: $pkg.L
            }, {
              k: "Ll",
              v: $pkg.Ll
            }, {
              k: "Lm",
              v: $pkg.Lm
            }, {
              k: "Lo",
              v: $pkg.Lo
            }, {
              k: "Lt",
              v: $pkg.Lt
            }, {
              k: "Lu",
              v: $pkg.Lu
            }, {
              k: "M",
              v: $pkg.M
            }, {
              k: "Mc",
              v: $pkg.Mc
            }, {
              k: "Me",
              v: $pkg.Me
            }, {
              k: "Mn",
              v: $pkg.Mn
            }, {
              k: "N",
              v: $pkg.N
            }, {
              k: "Nd",
              v: $pkg.Nd
            }, {
              k: "Nl",
              v: $pkg.Nl
            }, {
              k: "No",
              v: $pkg.No
            }, {
              k: "P",
              v: $pkg.P
            }, {
              k: "Pc",
              v: $pkg.Pc
            }, {
              k: "Pd",
              v: $pkg.Pd
            }, {
              k: "Pe",
              v: $pkg.Pe
            }, {
              k: "Pf",
              v: $pkg.Pf
            }, {
              k: "Pi",
              v: $pkg.Pi
            }, {
              k: "Po",
              v: $pkg.Po
            }, {
              k: "Ps",
              v: $pkg.Ps
            }, {
              k: "S",
              v: $pkg.S
            }, {
              k: "Sc",
              v: $pkg.Sc
            }, {
              k: "Sk",
              v: $pkg.Sk
            }, {
              k: "Sm",
              v: $pkg.Sm
            }, {
              k: "So",
              v: $pkg.So
            }, {
              k: "Z",
              v: $pkg.Z
            }, {
              k: "Zl",
              v: $pkg.Zl
            }, {
              k: "Zp",
              v: $pkg.Zp
            }, {
              k: "Zs",
              v: $pkg.Zs
            }]);
            BR = new O.ptr(new IY([]), new IZ([new Q.ptr(125184, 125258, 1), new Q.ptr(125264, 125273, 1), new Q.ptr(125278, 125279, 1)]), 0);
            BS = new O.ptr(new IY([]), new IZ([new Q.ptr(71424, 71449, 1), new Q.ptr(71453, 71467, 1), new Q.ptr(71472, 71487, 1)]), 0);
            BT = new O.ptr(new IY([]), new IZ([new Q.ptr(82944, 83526, 1)]), 0);
            BU = new O.ptr(new IY([new P.ptr(1536, 1540, 1), new P.ptr(1542, 1547, 1), new P.ptr(1549, 1562, 1), new P.ptr(1564, 1564, 1), new P.ptr(1566, 1566, 1), new P.ptr(1568, 1599, 1), new P.ptr(1601, 1610, 1), new P.ptr(1622, 1647, 1), new P.ptr(1649, 1756, 1), new P.ptr(1758, 1791, 1), new P.ptr(1872, 1919, 1), new P.ptr(2208, 2228, 1), new P.ptr(2230, 2237, 1), new P.ptr(2260, 2273, 1), new P.ptr(2275, 2303, 1), new P.ptr(64336, 64449, 1), new P.ptr(64467, 64829, 1), new P.ptr(64848, 64911, 1), new P.ptr(64914, 64967, 1), new P.ptr(65008, 65021, 1), new P.ptr(65136, 65140, 1), new P.ptr(65142, 65276, 1)]), new IZ([new Q.ptr(69216, 69246, 1), new Q.ptr(126464, 126467, 1), new Q.ptr(126469, 126495, 1), new Q.ptr(126497, 126498, 1), new Q.ptr(126500, 126500, 1), new Q.ptr(126503, 126503, 1), new Q.ptr(126505, 126514, 1), new Q.ptr(126516, 126519, 1), new Q.ptr(126521, 126521, 1), new Q.ptr(126523, 126523, 1), new Q.ptr(126530, 126530, 1), new Q.ptr(126535, 126535, 1), new Q.ptr(126537, 126537, 1), new Q.ptr(126539, 126539, 1), new Q.ptr(126541, 126543, 1), new Q.ptr(126545, 126546, 1), new Q.ptr(126548, 126548, 1), new Q.ptr(126551, 126551, 1), new Q.ptr(126553, 126553, 1), new Q.ptr(126555, 126555, 1), new Q.ptr(126557, 126557, 1), new Q.ptr(126559, 126559, 1), new Q.ptr(126561, 126562, 1), new Q.ptr(126564, 126564, 1), new Q.ptr(126567, 126570, 1), new Q.ptr(126572, 126578, 1), new Q.ptr(126580, 126583, 1), new Q.ptr(126585, 126588, 1), new Q.ptr(126590, 126590, 1), new Q.ptr(126592, 126601, 1), new Q.ptr(126603, 126619, 1), new Q.ptr(126625, 126627, 1), new Q.ptr(126629, 126633, 1), new Q.ptr(126635, 126651, 1), new Q.ptr(126704, 126705, 1)]), 0);
            BV = new O.ptr(new IY([new P.ptr(1329, 1366, 1), new P.ptr(1369, 1375, 1), new P.ptr(1377, 1415, 1), new P.ptr(1418, 1418, 1), new P.ptr(1421, 1423, 1), new P.ptr(64275, 64279, 1)]), IZ.nil, 0);
            BW = new O.ptr(new IY([]), new IZ([new Q.ptr(68352, 68405, 1), new Q.ptr(68409, 68415, 1)]), 0);
            BX = new O.ptr(new IY([new P.ptr(6912, 6987, 1), new P.ptr(6992, 7036, 1)]), IZ.nil, 0);
            BY = new O.ptr(new IY([new P.ptr(42656, 42743, 1)]), new IZ([new Q.ptr(92160, 92728, 1)]), 0);
            BZ = new O.ptr(new IY([]), new IZ([new Q.ptr(92880, 92909, 1), new Q.ptr(92912, 92917, 1)]), 0);
            CA = new O.ptr(new IY([new P.ptr(7104, 7155, 1), new P.ptr(7164, 7167, 1)]), IZ.nil, 0);
            CB = new O.ptr(new IY([new P.ptr(2432, 2435, 1), new P.ptr(2437, 2444, 1), new P.ptr(2447, 2448, 1), new P.ptr(2451, 2472, 1), new P.ptr(2474, 2480, 1), new P.ptr(2482, 2482, 1), new P.ptr(2486, 2489, 1), new P.ptr(2492, 2500, 1), new P.ptr(2503, 2504, 1), new P.ptr(2507, 2510, 1), new P.ptr(2519, 2519, 1), new P.ptr(2524, 2525, 1), new P.ptr(2527, 2531, 1), new P.ptr(2534, 2557, 1)]), IZ.nil, 0);
            CC = new O.ptr(new IY([]), new IZ([new Q.ptr(72704, 72712, 1), new Q.ptr(72714, 72758, 1), new Q.ptr(72760, 72773, 1), new Q.ptr(72784, 72812, 1)]), 0);
            CD = new O.ptr(new IY([new P.ptr(746, 747, 1), new P.ptr(12549, 12590, 1), new P.ptr(12704, 12730, 1)]), IZ.nil, 0);
            CE = new O.ptr(new IY([]), new IZ([new Q.ptr(69632, 69709, 1), new Q.ptr(69714, 69743, 1), new Q.ptr(69759, 69759, 1)]), 0);
            CF = new O.ptr(new IY([new P.ptr(10240, 10495, 1)]), IZ.nil, 0);
            CG = new O.ptr(new IY([new P.ptr(6656, 6683, 1), new P.ptr(6686, 6687, 1)]), IZ.nil, 0);
            CH = new O.ptr(new IY([new P.ptr(5952, 5971, 1)]), IZ.nil, 0);
            CI = new O.ptr(new IY([new P.ptr(5120, 5759, 1), new P.ptr(6320, 6389, 1)]), IZ.nil, 0);
            CJ = new O.ptr(new IY([]), new IZ([new Q.ptr(66208, 66256, 1)]), 0);
            CK = new O.ptr(new IY([]), new IZ([new Q.ptr(66864, 66915, 1), new Q.ptr(66927, 66927, 1)]), 0);
            CL = new O.ptr(new IY([]), new IZ([new Q.ptr(69888, 69940, 1), new Q.ptr(69942, 69955, 1)]), 0);
            CM = new O.ptr(new IY([new P.ptr(43520, 43574, 1), new P.ptr(43584, 43597, 1), new P.ptr(43600, 43609, 1), new P.ptr(43612, 43615, 1)]), IZ.nil, 0);
            CN = new O.ptr(new IY([new P.ptr(5024, 5109, 1), new P.ptr(5112, 5117, 1), new P.ptr(43888, 43967, 1)]), IZ.nil, 0);
            CO = new O.ptr(new IY([new P.ptr(0, 64, 1), new P.ptr(91, 96, 1), new P.ptr(123, 169, 1), new P.ptr(171, 185, 1), new P.ptr(187, 191, 1), new P.ptr(215, 215, 1), new P.ptr(247, 247, 1), new P.ptr(697, 735, 1), new P.ptr(741, 745, 1), new P.ptr(748, 767, 1), new P.ptr(884, 884, 1), new P.ptr(894, 894, 1), new P.ptr(901, 901, 1), new P.ptr(903, 903, 1), new P.ptr(1417, 1417, 1), new P.ptr(1541, 1541, 1), new P.ptr(1548, 1548, 1), new P.ptr(1563, 1563, 1), new P.ptr(1567, 1567, 1), new P.ptr(1600, 1600, 1), new P.ptr(1757, 1757, 1), new P.ptr(2274, 2274, 1), new P.ptr(2404, 2405, 1), new P.ptr(3647, 3647, 1), new P.ptr(4053, 4056, 1), new P.ptr(4347, 4347, 1), new P.ptr(5867, 5869, 1), new P.ptr(5941, 5942, 1), new P.ptr(6146, 6147, 1), new P.ptr(6149, 6149, 1), new P.ptr(7379, 7379, 1), new P.ptr(7393, 7393, 1), new P.ptr(7401, 7404, 1), new P.ptr(7406, 7411, 1), new P.ptr(7413, 7415, 1), new P.ptr(8192, 8203, 1), new P.ptr(8206, 8292, 1), new P.ptr(8294, 8304, 1), new P.ptr(8308, 8318, 1), new P.ptr(8320, 8334, 1), new P.ptr(8352, 8383, 1), new P.ptr(8448, 8485, 1), new P.ptr(8487, 8489, 1), new P.ptr(8492, 8497, 1), new P.ptr(8499, 8525, 1), new P.ptr(8527, 8543, 1), new P.ptr(8585, 8587, 1), new P.ptr(8592, 9254, 1), new P.ptr(9280, 9290, 1), new P.ptr(9312, 10239, 1), new P.ptr(10496, 11123, 1), new P.ptr(11126, 11157, 1), new P.ptr(11160, 11193, 1), new P.ptr(11197, 11208, 1), new P.ptr(11210, 11218, 1), new P.ptr(11244, 11247, 1), new P.ptr(11776, 11849, 1), new P.ptr(12272, 12283, 1), new P.ptr(12288, 12292, 1), new P.ptr(12294, 12294, 1), new P.ptr(12296, 12320, 1), new P.ptr(12336, 12343, 1), new P.ptr(12348, 12351, 1), new P.ptr(12443, 12444, 1), new P.ptr(12448, 12448, 1), new P.ptr(12539, 12540, 1), new P.ptr(12688, 12703, 1), new P.ptr(12736, 12771, 1), new P.ptr(12832, 12895, 1), new P.ptr(12927, 13007, 1), new P.ptr(13144, 13311, 1), new P.ptr(19904, 19967, 1), new P.ptr(42752, 42785, 1), new P.ptr(42888, 42890, 1), new P.ptr(43056, 43065, 1), new P.ptr(43310, 43310, 1), new P.ptr(43471, 43471, 1), new P.ptr(43867, 43867, 1), new P.ptr(64830, 64831, 1), new P.ptr(65040, 65049, 1), new P.ptr(65072, 65106, 1), new P.ptr(65108, 65126, 1), new P.ptr(65128, 65131, 1), new P.ptr(65279, 65279, 1), new P.ptr(65281, 65312, 1), new P.ptr(65339, 65344, 1), new P.ptr(65371, 65381, 1), new P.ptr(65392, 65392, 1), new P.ptr(65438, 65439, 1), new P.ptr(65504, 65510, 1), new P.ptr(65512, 65518, 1), new P.ptr(65529, 65533, 1)]), new IZ([new Q.ptr(65792, 65794, 1), new Q.ptr(65799, 65843, 1), new Q.ptr(65847, 65855, 1), new Q.ptr(65936, 65947, 1), new Q.ptr(66000, 66044, 1), new Q.ptr(66273, 66299, 1), new Q.ptr(113824, 113827, 1), new Q.ptr(118784, 119029, 1), new Q.ptr(119040, 119078, 1), new Q.ptr(119081, 119142, 1), new Q.ptr(119146, 119162, 1), new Q.ptr(119171, 119172, 1), new Q.ptr(119180, 119209, 1), new Q.ptr(119214, 119272, 1), new Q.ptr(119552, 119638, 1), new Q.ptr(119648, 119665, 1), new Q.ptr(119808, 119892, 1), new Q.ptr(119894, 119964, 1), new Q.ptr(119966, 119967, 1), new Q.ptr(119970, 119970, 1), new Q.ptr(119973, 119974, 1), new Q.ptr(119977, 119980, 1), new Q.ptr(119982, 119993, 1), new Q.ptr(119995, 119995, 1), new Q.ptr(119997, 120003, 1), new Q.ptr(120005, 120069, 1), new Q.ptr(120071, 120074, 1), new Q.ptr(120077, 120084, 1), new Q.ptr(120086, 120092, 1), new Q.ptr(120094, 120121, 1), new Q.ptr(120123, 120126, 1), new Q.ptr(120128, 120132, 1), new Q.ptr(120134, 120134, 1), new Q.ptr(120138, 120144, 1), new Q.ptr(120146, 120485, 1), new Q.ptr(120488, 120779, 1), new Q.ptr(120782, 120831, 1), new Q.ptr(126976, 127019, 1), new Q.ptr(127024, 127123, 1), new Q.ptr(127136, 127150, 1), new Q.ptr(127153, 127167, 1), new Q.ptr(127169, 127183, 1), new Q.ptr(127185, 127221, 1), new Q.ptr(127232, 127244, 1), new Q.ptr(127248, 127278, 1), new Q.ptr(127280, 127339, 1), new Q.ptr(127344, 127404, 1), new Q.ptr(127462, 127487, 1), new Q.ptr(127489, 127490, 1), new Q.ptr(127504, 127547, 1), new Q.ptr(127552, 127560, 1), new Q.ptr(127568, 127569, 1), new Q.ptr(127584, 127589, 1), new Q.ptr(127744, 128724, 1), new Q.ptr(128736, 128748, 1), new Q.ptr(128752, 128760, 1), new Q.ptr(128768, 128883, 1), new Q.ptr(128896, 128980, 1), new Q.ptr(129024, 129035, 1), new Q.ptr(129040, 129095, 1), new Q.ptr(129104, 129113, 1), new Q.ptr(129120, 129159, 1), new Q.ptr(129168, 129197, 1), new Q.ptr(129280, 129291, 1), new Q.ptr(129296, 129342, 1), new Q.ptr(129344, 129356, 1), new Q.ptr(129360, 129387, 1), new Q.ptr(129408, 129431, 1), new Q.ptr(129472, 129472, 1), new Q.ptr(129488, 129510, 1), new Q.ptr(917505, 917505, 1), new Q.ptr(917536, 917631, 1)]), 7);
            CP = new O.ptr(new IY([new P.ptr(994, 1007, 1), new P.ptr(11392, 11507, 1), new P.ptr(11513, 11519, 1)]), IZ.nil, 0);
            CQ = new O.ptr(new IY([]), new IZ([new Q.ptr(73728, 74649, 1), new Q.ptr(74752, 74862, 1), new Q.ptr(74864, 74868, 1), new Q.ptr(74880, 75075, 1)]), 0);
            CR = new O.ptr(new IY([]), new IZ([new Q.ptr(67584, 67589, 1), new Q.ptr(67592, 67592, 1), new Q.ptr(67594, 67637, 1), new Q.ptr(67639, 67640, 1), new Q.ptr(67644, 67644, 1), new Q.ptr(67647, 67647, 1)]), 0);
            CS = new O.ptr(new IY([new P.ptr(1024, 1156, 1), new P.ptr(1159, 1327, 1), new P.ptr(7296, 7304, 1), new P.ptr(7467, 7467, 1), new P.ptr(7544, 7544, 1), new P.ptr(11744, 11775, 1), new P.ptr(42560, 42655, 1), new P.ptr(65070, 65071, 1)]), IZ.nil, 0);
            CT = new O.ptr(new IY([]), new IZ([new Q.ptr(66560, 66639, 1)]), 0);
            CU = new O.ptr(new IY([new P.ptr(2304, 2384, 1), new P.ptr(2387, 2403, 1), new P.ptr(2406, 2431, 1), new P.ptr(43232, 43261, 1)]), IZ.nil, 0);
            CV = new O.ptr(new IY([]), new IZ([new Q.ptr(113664, 113770, 1), new Q.ptr(113776, 113788, 1), new Q.ptr(113792, 113800, 1), new Q.ptr(113808, 113817, 1), new Q.ptr(113820, 113823, 1)]), 0);
            CW = new O.ptr(new IY([]), new IZ([new Q.ptr(77824, 78894, 1)]), 0);
            CX = new O.ptr(new IY([]), new IZ([new Q.ptr(66816, 66855, 1)]), 0);
            CY = new O.ptr(new IY([new P.ptr(4608, 4680, 1), new P.ptr(4682, 4685, 1), new P.ptr(4688, 4694, 1), new P.ptr(4696, 4696, 1), new P.ptr(4698, 4701, 1), new P.ptr(4704, 4744, 1), new P.ptr(4746, 4749, 1), new P.ptr(4752, 4784, 1), new P.ptr(4786, 4789, 1), new P.ptr(4792, 4798, 1), new P.ptr(4800, 4800, 1), new P.ptr(4802, 4805, 1), new P.ptr(4808, 4822, 1), new P.ptr(4824, 4880, 1), new P.ptr(4882, 4885, 1), new P.ptr(4888, 4954, 1), new P.ptr(4957, 4988, 1), new P.ptr(4992, 5017, 1), new P.ptr(11648, 11670, 1), new P.ptr(11680, 11686, 1), new P.ptr(11688, 11694, 1), new P.ptr(11696, 11702, 1), new P.ptr(11704, 11710, 1), new P.ptr(11712, 11718, 1), new P.ptr(11720, 11726, 1), new P.ptr(11728, 11734, 1), new P.ptr(11736, 11742, 1), new P.ptr(43777, 43782, 1), new P.ptr(43785, 43790, 1), new P.ptr(43793, 43798, 1), new P.ptr(43808, 43814, 1), new P.ptr(43816, 43822, 1)]), IZ.nil, 0);
            CZ = new O.ptr(new IY([new P.ptr(4256, 4293, 1), new P.ptr(4295, 4295, 1), new P.ptr(4301, 4301, 1), new P.ptr(4304, 4346, 1), new P.ptr(4348, 4351, 1), new P.ptr(11520, 11557, 1), new P.ptr(11559, 11559, 1), new P.ptr(11565, 11565, 1)]), IZ.nil, 0);
            DA = new O.ptr(new IY([new P.ptr(11264, 11310, 1), new P.ptr(11312, 11358, 1)]), new IZ([new Q.ptr(122880, 122886, 1), new Q.ptr(122888, 122904, 1), new Q.ptr(122907, 122913, 1), new Q.ptr(122915, 122916, 1), new Q.ptr(122918, 122922, 1)]), 0);
            DB = new O.ptr(new IY([]), new IZ([new Q.ptr(66352, 66378, 1)]), 0);
            DC = new O.ptr(new IY([]), new IZ([new Q.ptr(70400, 70403, 1), new Q.ptr(70405, 70412, 1), new Q.ptr(70415, 70416, 1), new Q.ptr(70419, 70440, 1), new Q.ptr(70442, 70448, 1), new Q.ptr(70450, 70451, 1), new Q.ptr(70453, 70457, 1), new Q.ptr(70460, 70468, 1), new Q.ptr(70471, 70472, 1), new Q.ptr(70475, 70477, 1), new Q.ptr(70480, 70480, 1), new Q.ptr(70487, 70487, 1), new Q.ptr(70493, 70499, 1), new Q.ptr(70502, 70508, 1), new Q.ptr(70512, 70516, 1)]), 0);
            DD = new O.ptr(new IY([new P.ptr(880, 883, 1), new P.ptr(885, 887, 1), new P.ptr(890, 893, 1), new P.ptr(895, 895, 1), new P.ptr(900, 900, 1), new P.ptr(902, 902, 1), new P.ptr(904, 906, 1), new P.ptr(908, 908, 1), new P.ptr(910, 929, 1), new P.ptr(931, 993, 1), new P.ptr(1008, 1023, 1), new P.ptr(7462, 7466, 1), new P.ptr(7517, 7521, 1), new P.ptr(7526, 7530, 1), new P.ptr(7615, 7615, 1), new P.ptr(7936, 7957, 1), new P.ptr(7960, 7965, 1), new P.ptr(7968, 8005, 1), new P.ptr(8008, 8013, 1), new P.ptr(8016, 8023, 1), new P.ptr(8025, 8025, 1), new P.ptr(8027, 8027, 1), new P.ptr(8029, 8029, 1), new P.ptr(8031, 8061, 1), new P.ptr(8064, 8116, 1), new P.ptr(8118, 8132, 1), new P.ptr(8134, 8147, 1), new P.ptr(8150, 8155, 1), new P.ptr(8157, 8175, 1), new P.ptr(8178, 8180, 1), new P.ptr(8182, 8190, 1), new P.ptr(8486, 8486, 1), new P.ptr(43877, 43877, 1)]), new IZ([new Q.ptr(65856, 65934, 1), new Q.ptr(65952, 65952, 1), new Q.ptr(119296, 119365, 1)]), 0);
            DE = new O.ptr(new IY([new P.ptr(2689, 2691, 1), new P.ptr(2693, 2701, 1), new P.ptr(2703, 2705, 1), new P.ptr(2707, 2728, 1), new P.ptr(2730, 2736, 1), new P.ptr(2738, 2739, 1), new P.ptr(2741, 2745, 1), new P.ptr(2748, 2757, 1), new P.ptr(2759, 2761, 1), new P.ptr(2763, 2765, 1), new P.ptr(2768, 2768, 1), new P.ptr(2784, 2787, 1), new P.ptr(2790, 2801, 1), new P.ptr(2809, 2815, 1)]), IZ.nil, 0);
            DF = new O.ptr(new IY([new P.ptr(2561, 2563, 1), new P.ptr(2565, 2570, 1), new P.ptr(2575, 2576, 1), new P.ptr(2579, 2600, 1), new P.ptr(2602, 2608, 1), new P.ptr(2610, 2611, 1), new P.ptr(2613, 2614, 1), new P.ptr(2616, 2617, 1), new P.ptr(2620, 2620, 1), new P.ptr(2622, 2626, 1), new P.ptr(2631, 2632, 1), new P.ptr(2635, 2637, 1), new P.ptr(2641, 2641, 1), new P.ptr(2649, 2652, 1), new P.ptr(2654, 2654, 1), new P.ptr(2662, 2677, 1)]), IZ.nil, 0);
            DG = new O.ptr(new IY([new P.ptr(11904, 11929, 1), new P.ptr(11931, 12019, 1), new P.ptr(12032, 12245, 1), new P.ptr(12293, 12293, 1), new P.ptr(12295, 12295, 1), new P.ptr(12321, 12329, 1), new P.ptr(12344, 12347, 1), new P.ptr(13312, 19893, 1), new P.ptr(19968, 40938, 1), new P.ptr(63744, 64109, 1), new P.ptr(64112, 64217, 1)]), new IZ([new Q.ptr(131072, 173782, 1), new Q.ptr(173824, 177972, 1), new Q.ptr(177984, 178205, 1), new Q.ptr(178208, 183969, 1), new Q.ptr(183984, 191456, 1), new Q.ptr(194560, 195101, 1)]), 0);
            DH = new O.ptr(new IY([new P.ptr(4352, 4607, 1), new P.ptr(12334, 12335, 1), new P.ptr(12593, 12686, 1), new P.ptr(12800, 12830, 1), new P.ptr(12896, 12926, 1), new P.ptr(43360, 43388, 1), new P.ptr(44032, 55203, 1), new P.ptr(55216, 55238, 1), new P.ptr(55243, 55291, 1), new P.ptr(65440, 65470, 1), new P.ptr(65474, 65479, 1), new P.ptr(65482, 65487, 1), new P.ptr(65490, 65495, 1), new P.ptr(65498, 65500, 1)]), IZ.nil, 0);
            DI = new O.ptr(new IY([new P.ptr(5920, 5940, 1)]), IZ.nil, 0);
            DJ = new O.ptr(new IY([]), new IZ([new Q.ptr(67808, 67826, 1), new Q.ptr(67828, 67829, 1), new Q.ptr(67835, 67839, 1)]), 0);
            DK = new O.ptr(new IY([new P.ptr(1425, 1479, 1), new P.ptr(1488, 1514, 1), new P.ptr(1520, 1524, 1), new P.ptr(64285, 64310, 1), new P.ptr(64312, 64316, 1), new P.ptr(64318, 64318, 1), new P.ptr(64320, 64321, 1), new P.ptr(64323, 64324, 1), new P.ptr(64326, 64335, 1)]), IZ.nil, 0);
            DL = new O.ptr(new IY([new P.ptr(12353, 12438, 1), new P.ptr(12445, 12447, 1)]), new IZ([new Q.ptr(110593, 110878, 1), new Q.ptr(127488, 127488, 1)]), 0);
            DM = new O.ptr(new IY([]), new IZ([new Q.ptr(67648, 67669, 1), new Q.ptr(67671, 67679, 1)]), 0);
            DN = new O.ptr(new IY([new P.ptr(768, 879, 1), new P.ptr(1157, 1158, 1), new P.ptr(1611, 1621, 1), new P.ptr(1648, 1648, 1), new P.ptr(2385, 2386, 1), new P.ptr(6832, 6846, 1), new P.ptr(7376, 7378, 1), new P.ptr(7380, 7392, 1), new P.ptr(7394, 7400, 1), new P.ptr(7405, 7405, 1), new P.ptr(7412, 7412, 1), new P.ptr(7416, 7417, 1), new P.ptr(7616, 7673, 1), new P.ptr(7675, 7679, 1), new P.ptr(8204, 8205, 1), new P.ptr(8400, 8432, 1), new P.ptr(12330, 12333, 1), new P.ptr(12441, 12442, 1), new P.ptr(65024, 65039, 1), new P.ptr(65056, 65069, 1)]), new IZ([new Q.ptr(66045, 66045, 1), new Q.ptr(66272, 66272, 1), new Q.ptr(119143, 119145, 1), new Q.ptr(119163, 119170, 1), new Q.ptr(119173, 119179, 1), new Q.ptr(119210, 119213, 1), new Q.ptr(917760, 917999, 1)]), 0);
            DO = new O.ptr(new IY([]), new IZ([new Q.ptr(68448, 68466, 1), new Q.ptr(68472, 68479, 1)]), 0);
            DP = new O.ptr(new IY([]), new IZ([new Q.ptr(68416, 68437, 1), new Q.ptr(68440, 68447, 1)]), 0);
            DQ = new O.ptr(new IY([new P.ptr(43392, 43469, 1), new P.ptr(43472, 43481, 1), new P.ptr(43486, 43487, 1)]), IZ.nil, 0);
            DR = new O.ptr(new IY([]), new IZ([new Q.ptr(69760, 69825, 1)]), 0);
            DS = new O.ptr(new IY([new P.ptr(3200, 3203, 1), new P.ptr(3205, 3212, 1), new P.ptr(3214, 3216, 1), new P.ptr(3218, 3240, 1), new P.ptr(3242, 3251, 1), new P.ptr(3253, 3257, 1), new P.ptr(3260, 3268, 1), new P.ptr(3270, 3272, 1), new P.ptr(3274, 3277, 1), new P.ptr(3285, 3286, 1), new P.ptr(3294, 3294, 1), new P.ptr(3296, 3299, 1), new P.ptr(3302, 3311, 1), new P.ptr(3313, 3314, 1)]), IZ.nil, 0);
            DT = new O.ptr(new IY([new P.ptr(12449, 12538, 1), new P.ptr(12541, 12543, 1), new P.ptr(12784, 12799, 1), new P.ptr(13008, 13054, 1), new P.ptr(13056, 13143, 1), new P.ptr(65382, 65391, 1), new P.ptr(65393, 65437, 1)]), new IZ([new Q.ptr(110592, 110592, 1)]), 0);
            DU = new O.ptr(new IY([new P.ptr(43264, 43309, 1), new P.ptr(43311, 43311, 1)]), IZ.nil, 0);
            DV = new O.ptr(new IY([]), new IZ([new Q.ptr(68096, 68099, 1), new Q.ptr(68101, 68102, 1), new Q.ptr(68108, 68115, 1), new Q.ptr(68117, 68119, 1), new Q.ptr(68121, 68147, 1), new Q.ptr(68152, 68154, 1), new Q.ptr(68159, 68167, 1), new Q.ptr(68176, 68184, 1)]), 0);
            DW = new O.ptr(new IY([new P.ptr(6016, 6109, 1), new P.ptr(6112, 6121, 1), new P.ptr(6128, 6137, 1), new P.ptr(6624, 6655, 1)]), IZ.nil, 0);
            DX = new O.ptr(new IY([]), new IZ([new Q.ptr(70144, 70161, 1), new Q.ptr(70163, 70206, 1)]), 0);
            DY = new O.ptr(new IY([]), new IZ([new Q.ptr(70320, 70378, 1), new Q.ptr(70384, 70393, 1)]), 0);
            DZ = new O.ptr(new IY([new P.ptr(3713, 3714, 1), new P.ptr(3716, 3716, 1), new P.ptr(3719, 3720, 1), new P.ptr(3722, 3722, 1), new P.ptr(3725, 3725, 1), new P.ptr(3732, 3735, 1), new P.ptr(3737, 3743, 1), new P.ptr(3745, 3747, 1), new P.ptr(3749, 3749, 1), new P.ptr(3751, 3751, 1), new P.ptr(3754, 3755, 1), new P.ptr(3757, 3769, 1), new P.ptr(3771, 3773, 1), new P.ptr(3776, 3780, 1), new P.ptr(3782, 3782, 1), new P.ptr(3784, 3789, 1), new P.ptr(3792, 3801, 1), new P.ptr(3804, 3807, 1)]), IZ.nil, 0);
            EA = new O.ptr(new IY([new P.ptr(65, 90, 1), new P.ptr(97, 122, 1), new P.ptr(170, 170, 1), new P.ptr(186, 186, 1), new P.ptr(192, 214, 1), new P.ptr(216, 246, 1), new P.ptr(248, 696, 1), new P.ptr(736, 740, 1), new P.ptr(7424, 7461, 1), new P.ptr(7468, 7516, 1), new P.ptr(7522, 7525, 1), new P.ptr(7531, 7543, 1), new P.ptr(7545, 7614, 1), new P.ptr(7680, 7935, 1), new P.ptr(8305, 8305, 1), new P.ptr(8319, 8319, 1), new P.ptr(8336, 8348, 1), new P.ptr(8490, 8491, 1), new P.ptr(8498, 8498, 1), new P.ptr(8526, 8526, 1), new P.ptr(8544, 8584, 1), new P.ptr(11360, 11391, 1), new P.ptr(42786, 42887, 1), new P.ptr(42891, 42926, 1), new P.ptr(42928, 42935, 1), new P.ptr(42999, 43007, 1), new P.ptr(43824, 43866, 1), new P.ptr(43868, 43876, 1), new P.ptr(64256, 64262, 1), new P.ptr(65313, 65338, 1), new P.ptr(65345, 65370, 1)]), IZ.nil, 6);
            EB = new O.ptr(new IY([new P.ptr(7168, 7223, 1), new P.ptr(7227, 7241, 1), new P.ptr(7245, 7247, 1)]), IZ.nil, 0);
            EC = new O.ptr(new IY([new P.ptr(6400, 6430, 1), new P.ptr(6432, 6443, 1), new P.ptr(6448, 6459, 1), new P.ptr(6464, 6464, 1), new P.ptr(6468, 6479, 1)]), IZ.nil, 0);
            ED = new O.ptr(new IY([]), new IZ([new Q.ptr(67072, 67382, 1), new Q.ptr(67392, 67413, 1), new Q.ptr(67424, 67431, 1)]), 0);
            EE = new O.ptr(new IY([]), new IZ([new Q.ptr(65536, 65547, 1), new Q.ptr(65549, 65574, 1), new Q.ptr(65576, 65594, 1), new Q.ptr(65596, 65597, 1), new Q.ptr(65599, 65613, 1), new Q.ptr(65616, 65629, 1), new Q.ptr(65664, 65786, 1)]), 0);
            EF = new O.ptr(new IY([new P.ptr(42192, 42239, 1)]), IZ.nil, 0);
            EG = new O.ptr(new IY([]), new IZ([new Q.ptr(66176, 66204, 1)]), 0);
            EH = new O.ptr(new IY([]), new IZ([new Q.ptr(67872, 67897, 1), new Q.ptr(67903, 67903, 1)]), 0);
            EI = new O.ptr(new IY([]), new IZ([new Q.ptr(69968, 70006, 1)]), 0);
            EJ = new O.ptr(new IY([new P.ptr(3328, 3331, 1), new P.ptr(3333, 3340, 1), new P.ptr(3342, 3344, 1), new P.ptr(3346, 3396, 1), new P.ptr(3398, 3400, 1), new P.ptr(3402, 3407, 1), new P.ptr(3412, 3427, 1), new P.ptr(3430, 3455, 1)]), IZ.nil, 0);
            EK = new O.ptr(new IY([new P.ptr(2112, 2139, 1), new P.ptr(2142, 2142, 1)]), IZ.nil, 0);
            EL = new O.ptr(new IY([]), new IZ([new Q.ptr(68288, 68326, 1), new Q.ptr(68331, 68342, 1)]), 0);
            EM = new O.ptr(new IY([]), new IZ([new Q.ptr(72816, 72847, 1), new Q.ptr(72850, 72871, 1), new Q.ptr(72873, 72886, 1)]), 0);
            EN = new O.ptr(new IY([]), new IZ([new Q.ptr(72960, 72966, 1), new Q.ptr(72968, 72969, 1), new Q.ptr(72971, 73014, 1), new Q.ptr(73018, 73018, 1), new Q.ptr(73020, 73021, 1), new Q.ptr(73023, 73031, 1), new Q.ptr(73040, 73049, 1)]), 0);
            EO = new O.ptr(new IY([new P.ptr(43744, 43766, 1), new P.ptr(43968, 44013, 1), new P.ptr(44016, 44025, 1)]), IZ.nil, 0);
            EP = new O.ptr(new IY([]), new IZ([new Q.ptr(124928, 125124, 1), new Q.ptr(125127, 125142, 1)]), 0);
            EQ = new O.ptr(new IY([]), new IZ([new Q.ptr(68000, 68023, 1), new Q.ptr(68028, 68047, 1), new Q.ptr(68050, 68095, 1)]), 0);
            ER = new O.ptr(new IY([]), new IZ([new Q.ptr(67968, 67999, 1)]), 0);
            ES = new O.ptr(new IY([]), new IZ([new Q.ptr(93952, 94020, 1), new Q.ptr(94032, 94078, 1), new Q.ptr(94095, 94111, 1)]), 0);
            ET = new O.ptr(new IY([]), new IZ([new Q.ptr(71168, 71236, 1), new Q.ptr(71248, 71257, 1)]), 0);
            EU = new O.ptr(new IY([new P.ptr(6144, 6145, 1), new P.ptr(6148, 6148, 1), new P.ptr(6150, 6158, 1), new P.ptr(6160, 6169, 1), new P.ptr(6176, 6263, 1), new P.ptr(6272, 6314, 1)]), new IZ([new Q.ptr(71264, 71276, 1)]), 0);
            EV = new O.ptr(new IY([]), new IZ([new Q.ptr(92736, 92766, 1), new Q.ptr(92768, 92777, 1), new Q.ptr(92782, 92783, 1)]), 0);
            EW = new O.ptr(new IY([]), new IZ([new Q.ptr(70272, 70278, 1), new Q.ptr(70280, 70280, 1), new Q.ptr(70282, 70285, 1), new Q.ptr(70287, 70301, 1), new Q.ptr(70303, 70313, 1)]), 0);
            EX = new O.ptr(new IY([new P.ptr(4096, 4255, 1), new P.ptr(43488, 43518, 1), new P.ptr(43616, 43647, 1)]), IZ.nil, 0);
            EY = new O.ptr(new IY([]), new IZ([new Q.ptr(67712, 67742, 1), new Q.ptr(67751, 67759, 1)]), 0);
            EZ = new O.ptr(new IY([new P.ptr(6528, 6571, 1), new P.ptr(6576, 6601, 1), new P.ptr(6608, 6618, 1), new P.ptr(6622, 6623, 1)]), IZ.nil, 0);
            FA = new O.ptr(new IY([]), new IZ([new Q.ptr(70656, 70745, 1), new Q.ptr(70747, 70747, 1), new Q.ptr(70749, 70749, 1)]), 0);
            FB = new O.ptr(new IY([new P.ptr(1984, 2042, 1)]), IZ.nil, 0);
            FC = new O.ptr(new IY([]), new IZ([new Q.ptr(94177, 94177, 1), new Q.ptr(110960, 111355, 1)]), 0);
            FD = new O.ptr(new IY([new P.ptr(5760, 5788, 1)]), IZ.nil, 0);
            FE = new O.ptr(new IY([new P.ptr(7248, 7295, 1)]), IZ.nil, 0);
            FF = new O.ptr(new IY([]), new IZ([new Q.ptr(68736, 68786, 1), new Q.ptr(68800, 68850, 1), new Q.ptr(68858, 68863, 1)]), 0);
            FG = new O.ptr(new IY([]), new IZ([new Q.ptr(66304, 66339, 1), new Q.ptr(66349, 66351, 1)]), 0);
            FH = new O.ptr(new IY([]), new IZ([new Q.ptr(68224, 68255, 1)]), 0);
            FI = new O.ptr(new IY([]), new IZ([new Q.ptr(66384, 66426, 1)]), 0);
            FJ = new O.ptr(new IY([]), new IZ([new Q.ptr(66464, 66499, 1), new Q.ptr(66504, 66517, 1)]), 0);
            FK = new O.ptr(new IY([]), new IZ([new Q.ptr(68192, 68223, 1)]), 0);
            FL = new O.ptr(new IY([]), new IZ([new Q.ptr(68608, 68680, 1)]), 0);
            FM = new O.ptr(new IY([new P.ptr(2817, 2819, 1), new P.ptr(2821, 2828, 1), new P.ptr(2831, 2832, 1), new P.ptr(2835, 2856, 1), new P.ptr(2858, 2864, 1), new P.ptr(2866, 2867, 1), new P.ptr(2869, 2873, 1), new P.ptr(2876, 2884, 1), new P.ptr(2887, 2888, 1), new P.ptr(2891, 2893, 1), new P.ptr(2902, 2903, 1), new P.ptr(2908, 2909, 1), new P.ptr(2911, 2915, 1), new P.ptr(2918, 2935, 1)]), IZ.nil, 0);
            FN = new O.ptr(new IY([]), new IZ([new Q.ptr(66736, 66771, 1), new Q.ptr(66776, 66811, 1)]), 0);
            FO = new O.ptr(new IY([]), new IZ([new Q.ptr(66688, 66717, 1), new Q.ptr(66720, 66729, 1)]), 0);
            FP = new O.ptr(new IY([]), new IZ([new Q.ptr(92928, 92997, 1), new Q.ptr(93008, 93017, 1), new Q.ptr(93019, 93025, 1), new Q.ptr(93027, 93047, 1), new Q.ptr(93053, 93071, 1)]), 0);
            FQ = new O.ptr(new IY([]), new IZ([new Q.ptr(67680, 67711, 1)]), 0);
            FR = new O.ptr(new IY([]), new IZ([new Q.ptr(72384, 72440, 1)]), 0);
            FS = new O.ptr(new IY([new P.ptr(43072, 43127, 1)]), IZ.nil, 0);
            FT = new O.ptr(new IY([]), new IZ([new Q.ptr(67840, 67867, 1), new Q.ptr(67871, 67871, 1)]), 0);
            FU = new O.ptr(new IY([]), new IZ([new Q.ptr(68480, 68497, 1), new Q.ptr(68505, 68508, 1), new Q.ptr(68521, 68527, 1)]), 0);
            FV = new O.ptr(new IY([new P.ptr(43312, 43347, 1), new P.ptr(43359, 43359, 1)]), IZ.nil, 0);
            FW = new O.ptr(new IY([new P.ptr(5792, 5866, 1), new P.ptr(5870, 5880, 1)]), IZ.nil, 0);
            FX = new O.ptr(new IY([new P.ptr(2048, 2093, 1), new P.ptr(2096, 2110, 1)]), IZ.nil, 0);
            FY = new O.ptr(new IY([new P.ptr(43136, 43205, 1), new P.ptr(43214, 43225, 1)]), IZ.nil, 0);
            FZ = new O.ptr(new IY([]), new IZ([new Q.ptr(70016, 70093, 1), new Q.ptr(70096, 70111, 1)]), 0);
            GA = new O.ptr(new IY([]), new IZ([new Q.ptr(66640, 66687, 1)]), 0);
            GB = new O.ptr(new IY([]), new IZ([new Q.ptr(71040, 71093, 1), new Q.ptr(71096, 71133, 1)]), 0);
            GC = new O.ptr(new IY([]), new IZ([new Q.ptr(120832, 121483, 1), new Q.ptr(121499, 121503, 1), new Q.ptr(121505, 121519, 1)]), 0);
            GD = new O.ptr(new IY([new P.ptr(3458, 3459, 1), new P.ptr(3461, 3478, 1), new P.ptr(3482, 3505, 1), new P.ptr(3507, 3515, 1), new P.ptr(3517, 3517, 1), new P.ptr(3520, 3526, 1), new P.ptr(3530, 3530, 1), new P.ptr(3535, 3540, 1), new P.ptr(3542, 3542, 1), new P.ptr(3544, 3551, 1), new P.ptr(3558, 3567, 1), new P.ptr(3570, 3572, 1)]), new IZ([new Q.ptr(70113, 70132, 1)]), 0);
            GE = new O.ptr(new IY([]), new IZ([new Q.ptr(69840, 69864, 1), new Q.ptr(69872, 69881, 1)]), 0);
            GF = new O.ptr(new IY([]), new IZ([new Q.ptr(72272, 72323, 1), new Q.ptr(72326, 72348, 1), new Q.ptr(72350, 72354, 1)]), 0);
            GG = new O.ptr(new IY([new P.ptr(7040, 7103, 1), new P.ptr(7360, 7367, 1)]), IZ.nil, 0);
            GH = new O.ptr(new IY([new P.ptr(43008, 43051, 1)]), IZ.nil, 0);
            GI = new O.ptr(new IY([new P.ptr(1792, 1805, 1), new P.ptr(1807, 1866, 1), new P.ptr(1869, 1871, 1), new P.ptr(2144, 2154, 1)]), IZ.nil, 0);
            GJ = new O.ptr(new IY([new P.ptr(5888, 5900, 1), new P.ptr(5902, 5908, 1)]), IZ.nil, 0);
            GK = new O.ptr(new IY([new P.ptr(5984, 5996, 1), new P.ptr(5998, 6000, 1), new P.ptr(6002, 6003, 1)]), IZ.nil, 0);
            GL = new O.ptr(new IY([new P.ptr(6480, 6509, 1), new P.ptr(6512, 6516, 1)]), IZ.nil, 0);
            GM = new O.ptr(new IY([new P.ptr(6688, 6750, 1), new P.ptr(6752, 6780, 1), new P.ptr(6783, 6793, 1), new P.ptr(6800, 6809, 1), new P.ptr(6816, 6829, 1)]), IZ.nil, 0);
            GN = new O.ptr(new IY([new P.ptr(43648, 43714, 1), new P.ptr(43739, 43743, 1)]), IZ.nil, 0);
            GO = new O.ptr(new IY([]), new IZ([new Q.ptr(71296, 71351, 1), new Q.ptr(71360, 71369, 1)]), 0);
            GP = new O.ptr(new IY([new P.ptr(2946, 2947, 1), new P.ptr(2949, 2954, 1), new P.ptr(2958, 2960, 1), new P.ptr(2962, 2965, 1), new P.ptr(2969, 2970, 1), new P.ptr(2972, 2972, 1), new P.ptr(2974, 2975, 1), new P.ptr(2979, 2980, 1), new P.ptr(2984, 2986, 1), new P.ptr(2990, 3001, 1), new P.ptr(3006, 3010, 1), new P.ptr(3014, 3016, 1), new P.ptr(3018, 3021, 1), new P.ptr(3024, 3024, 1), new P.ptr(3031, 3031, 1), new P.ptr(3046, 3066, 1)]), IZ.nil, 0);
            GQ = new O.ptr(new IY([]), new IZ([new Q.ptr(94176, 94176, 1), new Q.ptr(94208, 100332, 1), new Q.ptr(100352, 101106, 1)]), 0);
            GR = new O.ptr(new IY([new P.ptr(3072, 3075, 1), new P.ptr(3077, 3084, 1), new P.ptr(3086, 3088, 1), new P.ptr(3090, 3112, 1), new P.ptr(3114, 3129, 1), new P.ptr(3133, 3140, 1), new P.ptr(3142, 3144, 1), new P.ptr(3146, 3149, 1), new P.ptr(3157, 3158, 1), new P.ptr(3160, 3162, 1), new P.ptr(3168, 3171, 1), new P.ptr(3174, 3183, 1), new P.ptr(3192, 3199, 1)]), IZ.nil, 0);
            GS = new O.ptr(new IY([new P.ptr(1920, 1969, 1)]), IZ.nil, 0);
            GT = new O.ptr(new IY([new P.ptr(3585, 3642, 1), new P.ptr(3648, 3675, 1)]), IZ.nil, 0);
            GU = new O.ptr(new IY([new P.ptr(3840, 3911, 1), new P.ptr(3913, 3948, 1), new P.ptr(3953, 3991, 1), new P.ptr(3993, 4028, 1), new P.ptr(4030, 4044, 1), new P.ptr(4046, 4052, 1), new P.ptr(4057, 4058, 1)]), IZ.nil, 0);
            GV = new O.ptr(new IY([new P.ptr(11568, 11623, 1), new P.ptr(11631, 11632, 1), new P.ptr(11647, 11647, 1)]), IZ.nil, 0);
            GW = new O.ptr(new IY([]), new IZ([new Q.ptr(70784, 70855, 1), new Q.ptr(70864, 70873, 1)]), 0);
            GX = new O.ptr(new IY([]), new IZ([new Q.ptr(66432, 66461, 1), new Q.ptr(66463, 66463, 1)]), 0);
            GY = new O.ptr(new IY([new P.ptr(42240, 42539, 1)]), IZ.nil, 0);
            GZ = new O.ptr(new IY([]), new IZ([new Q.ptr(71840, 71922, 1), new Q.ptr(71935, 71935, 1)]), 0);
            HA = new O.ptr(new IY([new P.ptr(40960, 42124, 1), new P.ptr(42128, 42182, 1)]), IZ.nil, 0);
            HB = new O.ptr(new IY([]), new IZ([new Q.ptr(72192, 72263, 1)]), 0);
            $pkg.Adlam = BR;
            $pkg.Ahom = BS;
            $pkg.Anatolian_Hieroglyphs = BT;
            $pkg.Arabic = BU;
            $pkg.Armenian = BV;
            $pkg.Avestan = BW;
            $pkg.Balinese = BX;
            $pkg.Bamum = BY;
            $pkg.Bassa_Vah = BZ;
            $pkg.Batak = CA;
            $pkg.Bengali = CB;
            $pkg.Bhaiksuki = CC;
            $pkg.Bopomofo = CD;
            $pkg.Brahmi = CE;
            $pkg.Braille = CF;
            $pkg.Buginese = CG;
            $pkg.Buhid = CH;
            $pkg.Canadian_Aboriginal = CI;
            $pkg.Carian = CJ;
            $pkg.Caucasian_Albanian = CK;
            $pkg.Chakma = CL;
            $pkg.Cham = CM;
            $pkg.Cherokee = CN;
            $pkg.Common = CO;
            $pkg.Coptic = CP;
            $pkg.Cuneiform = CQ;
            $pkg.Cypriot = CR;
            $pkg.Cyrillic = CS;
            $pkg.Deseret = CT;
            $pkg.Devanagari = CU;
            $pkg.Duployan = CV;
            $pkg.Egyptian_Hieroglyphs = CW;
            $pkg.Elbasan = CX;
            $pkg.Ethiopic = CY;
            $pkg.Georgian = CZ;
            $pkg.Glagolitic = DA;
            $pkg.Gothic = DB;
            $pkg.Grantha = DC;
            $pkg.Greek = DD;
            $pkg.Gujarati = DE;
            $pkg.Gurmukhi = DF;
            $pkg.Han = DG;
            $pkg.Hangul = DH;
            $pkg.Hanunoo = DI;
            $pkg.Hatran = DJ;
            $pkg.Hebrew = DK;
            $pkg.Hiragana = DL;
            $pkg.Imperial_Aramaic = DM;
            $pkg.Inherited = DN;
            $pkg.Inscriptional_Pahlavi = DO;
            $pkg.Inscriptional_Parthian = DP;
            $pkg.Javanese = DQ;
            $pkg.Kaithi = DR;
            $pkg.Kannada = DS;
            $pkg.Katakana = DT;
            $pkg.Kayah_Li = DU;
            $pkg.Kharoshthi = DV;
            $pkg.Khmer = DW;
            $pkg.Khojki = DX;
            $pkg.Khudawadi = DY;
            $pkg.Lao = DZ;
            $pkg.Latin = EA;
            $pkg.Lepcha = EB;
            $pkg.Limbu = EC;
            $pkg.Linear_A = ED;
            $pkg.Linear_B = EE;
            $pkg.Lisu = EF;
            $pkg.Lycian = EG;
            $pkg.Lydian = EH;
            $pkg.Mahajani = EI;
            $pkg.Malayalam = EJ;
            $pkg.Mandaic = EK;
            $pkg.Manichaean = EL;
            $pkg.Marchen = EM;
            $pkg.Masaram_Gondi = EN;
            $pkg.Meetei_Mayek = EO;
            $pkg.Mende_Kikakui = EP;
            $pkg.Meroitic_Cursive = EQ;
            $pkg.Meroitic_Hieroglyphs = ER;
            $pkg.Miao = ES;
            $pkg.Modi = ET;
            $pkg.Mongolian = EU;
            $pkg.Mro = EV;
            $pkg.Multani = EW;
            $pkg.Myanmar = EX;
            $pkg.Nabataean = EY;
            $pkg.New_Tai_Lue = EZ;
            $pkg.Newa = FA;
            $pkg.Nko = FB;
            $pkg.Nushu = FC;
            $pkg.Ogham = FD;
            $pkg.Ol_Chiki = FE;
            $pkg.Old_Hungarian = FF;
            $pkg.Old_Italic = FG;
            $pkg.Old_North_Arabian = FH;
            $pkg.Old_Permic = FI;
            $pkg.Old_Persian = FJ;
            $pkg.Old_South_Arabian = FK;
            $pkg.Old_Turkic = FL;
            $pkg.Oriya = FM;
            $pkg.Osage = FN;
            $pkg.Osmanya = FO;
            $pkg.Pahawh_Hmong = FP;
            $pkg.Palmyrene = FQ;
            $pkg.Pau_Cin_Hau = FR;
            $pkg.Phags_Pa = FS;
            $pkg.Phoenician = FT;
            $pkg.Psalter_Pahlavi = FU;
            $pkg.Rejang = FV;
            $pkg.Runic = FW;
            $pkg.Samaritan = FX;
            $pkg.Saurashtra = FY;
            $pkg.Sharada = FZ;
            $pkg.Shavian = GA;
            $pkg.Siddham = GB;
            $pkg.SignWriting = GC;
            $pkg.Sinhala = GD;
            $pkg.Sora_Sompeng = GE;
            $pkg.Soyombo = GF;
            $pkg.Sundanese = GG;
            $pkg.Syloti_Nagri = GH;
            $pkg.Syriac = GI;
            $pkg.Tagalog = GJ;
            $pkg.Tagbanwa = GK;
            $pkg.Tai_Le = GL;
            $pkg.Tai_Tham = GM;
            $pkg.Tai_Viet = GN;
            $pkg.Takri = GO;
            $pkg.Tamil = GP;
            $pkg.Tangut = GQ;
            $pkg.Telugu = GR;
            $pkg.Thaana = GS;
            $pkg.Thai = GT;
            $pkg.Tibetan = GU;
            $pkg.Tifinagh = GV;
            $pkg.Tirhuta = GW;
            $pkg.Ugaritic = GX;
            $pkg.Vai = GY;
            $pkg.Warang_Citi = GZ;
            $pkg.Yi = HA;
            $pkg.Zanabazar_Square = HB;
            $pkg.Scripts = $makeMap($String.keyFor, [{
              k: "Adlam",
              v: $pkg.Adlam
            }, {
              k: "Ahom",
              v: $pkg.Ahom
            }, {
              k: "Anatolian_Hieroglyphs",
              v: $pkg.Anatolian_Hieroglyphs
            }, {
              k: "Arabic",
              v: $pkg.Arabic
            }, {
              k: "Armenian",
              v: $pkg.Armenian
            }, {
              k: "Avestan",
              v: $pkg.Avestan
            }, {
              k: "Balinese",
              v: $pkg.Balinese
            }, {
              k: "Bamum",
              v: $pkg.Bamum
            }, {
              k: "Bassa_Vah",
              v: $pkg.Bassa_Vah
            }, {
              k: "Batak",
              v: $pkg.Batak
            }, {
              k: "Bengali",
              v: $pkg.Bengali
            }, {
              k: "Bhaiksuki",
              v: $pkg.Bhaiksuki
            }, {
              k: "Bopomofo",
              v: $pkg.Bopomofo
            }, {
              k: "Brahmi",
              v: $pkg.Brahmi
            }, {
              k: "Braille",
              v: $pkg.Braille
            }, {
              k: "Buginese",
              v: $pkg.Buginese
            }, {
              k: "Buhid",
              v: $pkg.Buhid
            }, {
              k: "Canadian_Aboriginal",
              v: $pkg.Canadian_Aboriginal
            }, {
              k: "Carian",
              v: $pkg.Carian
            }, {
              k: "Caucasian_Albanian",
              v: $pkg.Caucasian_Albanian
            }, {
              k: "Chakma",
              v: $pkg.Chakma
            }, {
              k: "Cham",
              v: $pkg.Cham
            }, {
              k: "Cherokee",
              v: $pkg.Cherokee
            }, {
              k: "Common",
              v: $pkg.Common
            }, {
              k: "Coptic",
              v: $pkg.Coptic
            }, {
              k: "Cuneiform",
              v: $pkg.Cuneiform
            }, {
              k: "Cypriot",
              v: $pkg.Cypriot
            }, {
              k: "Cyrillic",
              v: $pkg.Cyrillic
            }, {
              k: "Deseret",
              v: $pkg.Deseret
            }, {
              k: "Devanagari",
              v: $pkg.Devanagari
            }, {
              k: "Duployan",
              v: $pkg.Duployan
            }, {
              k: "Egyptian_Hieroglyphs",
              v: $pkg.Egyptian_Hieroglyphs
            }, {
              k: "Elbasan",
              v: $pkg.Elbasan
            }, {
              k: "Ethiopic",
              v: $pkg.Ethiopic
            }, {
              k: "Georgian",
              v: $pkg.Georgian
            }, {
              k: "Glagolitic",
              v: $pkg.Glagolitic
            }, {
              k: "Gothic",
              v: $pkg.Gothic
            }, {
              k: "Grantha",
              v: $pkg.Grantha
            }, {
              k: "Greek",
              v: $pkg.Greek
            }, {
              k: "Gujarati",
              v: $pkg.Gujarati
            }, {
              k: "Gurmukhi",
              v: $pkg.Gurmukhi
            }, {
              k: "Han",
              v: $pkg.Han
            }, {
              k: "Hangul",
              v: $pkg.Hangul
            }, {
              k: "Hanunoo",
              v: $pkg.Hanunoo
            }, {
              k: "Hatran",
              v: $pkg.Hatran
            }, {
              k: "Hebrew",
              v: $pkg.Hebrew
            }, {
              k: "Hiragana",
              v: $pkg.Hiragana
            }, {
              k: "Imperial_Aramaic",
              v: $pkg.Imperial_Aramaic
            }, {
              k: "Inherited",
              v: $pkg.Inherited
            }, {
              k: "Inscriptional_Pahlavi",
              v: $pkg.Inscriptional_Pahlavi
            }, {
              k: "Inscriptional_Parthian",
              v: $pkg.Inscriptional_Parthian
            }, {
              k: "Javanese",
              v: $pkg.Javanese
            }, {
              k: "Kaithi",
              v: $pkg.Kaithi
            }, {
              k: "Kannada",
              v: $pkg.Kannada
            }, {
              k: "Katakana",
              v: $pkg.Katakana
            }, {
              k: "Kayah_Li",
              v: $pkg.Kayah_Li
            }, {
              k: "Kharoshthi",
              v: $pkg.Kharoshthi
            }, {
              k: "Khmer",
              v: $pkg.Khmer
            }, {
              k: "Khojki",
              v: $pkg.Khojki
            }, {
              k: "Khudawadi",
              v: $pkg.Khudawadi
            }, {
              k: "Lao",
              v: $pkg.Lao
            }, {
              k: "Latin",
              v: $pkg.Latin
            }, {
              k: "Lepcha",
              v: $pkg.Lepcha
            }, {
              k: "Limbu",
              v: $pkg.Limbu
            }, {
              k: "Linear_A",
              v: $pkg.Linear_A
            }, {
              k: "Linear_B",
              v: $pkg.Linear_B
            }, {
              k: "Lisu",
              v: $pkg.Lisu
            }, {
              k: "Lycian",
              v: $pkg.Lycian
            }, {
              k: "Lydian",
              v: $pkg.Lydian
            }, {
              k: "Mahajani",
              v: $pkg.Mahajani
            }, {
              k: "Malayalam",
              v: $pkg.Malayalam
            }, {
              k: "Mandaic",
              v: $pkg.Mandaic
            }, {
              k: "Manichaean",
              v: $pkg.Manichaean
            }, {
              k: "Marchen",
              v: $pkg.Marchen
            }, {
              k: "Masaram_Gondi",
              v: $pkg.Masaram_Gondi
            }, {
              k: "Meetei_Mayek",
              v: $pkg.Meetei_Mayek
            }, {
              k: "Mende_Kikakui",
              v: $pkg.Mende_Kikakui
            }, {
              k: "Meroitic_Cursive",
              v: $pkg.Meroitic_Cursive
            }, {
              k: "Meroitic_Hieroglyphs",
              v: $pkg.Meroitic_Hieroglyphs
            }, {
              k: "Miao",
              v: $pkg.Miao
            }, {
              k: "Modi",
              v: $pkg.Modi
            }, {
              k: "Mongolian",
              v: $pkg.Mongolian
            }, {
              k: "Mro",
              v: $pkg.Mro
            }, {
              k: "Multani",
              v: $pkg.Multani
            }, {
              k: "Myanmar",
              v: $pkg.Myanmar
            }, {
              k: "Nabataean",
              v: $pkg.Nabataean
            }, {
              k: "New_Tai_Lue",
              v: $pkg.New_Tai_Lue
            }, {
              k: "Newa",
              v: $pkg.Newa
            }, {
              k: "Nko",
              v: $pkg.Nko
            }, {
              k: "Nushu",
              v: $pkg.Nushu
            }, {
              k: "Ogham",
              v: $pkg.Ogham
            }, {
              k: "Ol_Chiki",
              v: $pkg.Ol_Chiki
            }, {
              k: "Old_Hungarian",
              v: $pkg.Old_Hungarian
            }, {
              k: "Old_Italic",
              v: $pkg.Old_Italic
            }, {
              k: "Old_North_Arabian",
              v: $pkg.Old_North_Arabian
            }, {
              k: "Old_Permic",
              v: $pkg.Old_Permic
            }, {
              k: "Old_Persian",
              v: $pkg.Old_Persian
            }, {
              k: "Old_South_Arabian",
              v: $pkg.Old_South_Arabian
            }, {
              k: "Old_Turkic",
              v: $pkg.Old_Turkic
            }, {
              k: "Oriya",
              v: $pkg.Oriya
            }, {
              k: "Osage",
              v: $pkg.Osage
            }, {
              k: "Osmanya",
              v: $pkg.Osmanya
            }, {
              k: "Pahawh_Hmong",
              v: $pkg.Pahawh_Hmong
            }, {
              k: "Palmyrene",
              v: $pkg.Palmyrene
            }, {
              k: "Pau_Cin_Hau",
              v: $pkg.Pau_Cin_Hau
            }, {
              k: "Phags_Pa",
              v: $pkg.Phags_Pa
            }, {
              k: "Phoenician",
              v: $pkg.Phoenician
            }, {
              k: "Psalter_Pahlavi",
              v: $pkg.Psalter_Pahlavi
            }, {
              k: "Rejang",
              v: $pkg.Rejang
            }, {
              k: "Runic",
              v: $pkg.Runic
            }, {
              k: "Samaritan",
              v: $pkg.Samaritan
            }, {
              k: "Saurashtra",
              v: $pkg.Saurashtra
            }, {
              k: "Sharada",
              v: $pkg.Sharada
            }, {
              k: "Shavian",
              v: $pkg.Shavian
            }, {
              k: "Siddham",
              v: $pkg.Siddham
            }, {
              k: "SignWriting",
              v: $pkg.SignWriting
            }, {
              k: "Sinhala",
              v: $pkg.Sinhala
            }, {
              k: "Sora_Sompeng",
              v: $pkg.Sora_Sompeng
            }, {
              k: "Soyombo",
              v: $pkg.Soyombo
            }, {
              k: "Sundanese",
              v: $pkg.Sundanese
            }, {
              k: "Syloti_Nagri",
              v: $pkg.Syloti_Nagri
            }, {
              k: "Syriac",
              v: $pkg.Syriac
            }, {
              k: "Tagalog",
              v: $pkg.Tagalog
            }, {
              k: "Tagbanwa",
              v: $pkg.Tagbanwa
            }, {
              k: "Tai_Le",
              v: $pkg.Tai_Le
            }, {
              k: "Tai_Tham",
              v: $pkg.Tai_Tham
            }, {
              k: "Tai_Viet",
              v: $pkg.Tai_Viet
            }, {
              k: "Takri",
              v: $pkg.Takri
            }, {
              k: "Tamil",
              v: $pkg.Tamil
            }, {
              k: "Tangut",
              v: $pkg.Tangut
            }, {
              k: "Telugu",
              v: $pkg.Telugu
            }, {
              k: "Thaana",
              v: $pkg.Thaana
            }, {
              k: "Thai",
              v: $pkg.Thai
            }, {
              k: "Tibetan",
              v: $pkg.Tibetan
            }, {
              k: "Tifinagh",
              v: $pkg.Tifinagh
            }, {
              k: "Tirhuta",
              v: $pkg.Tirhuta
            }, {
              k: "Ugaritic",
              v: $pkg.Ugaritic
            }, {
              k: "Vai",
              v: $pkg.Vai
            }, {
              k: "Warang_Citi",
              v: $pkg.Warang_Citi
            }, {
              k: "Yi",
              v: $pkg.Yi
            }, {
              k: "Zanabazar_Square",
              v: $pkg.Zanabazar_Square
            }]);
            IJ = new O.ptr(new IY([new P.ptr(9, 13, 1), new P.ptr(32, 32, 1), new P.ptr(133, 133, 1), new P.ptr(160, 160, 1), new P.ptr(5760, 5760, 1), new P.ptr(8192, 8202, 1), new P.ptr(8232, 8233, 1), new P.ptr(8239, 8239, 1), new P.ptr(8287, 8287, 1), new P.ptr(12288, 12288, 1)]), IZ.nil, 4);
            $pkg.White_Space = IJ;
            IK = new JC([new R.ptr(65, 90, $toNativeArray($kindInt32, [0, 32, 0])), new R.ptr(97, 122, $toNativeArray($kindInt32, [-32, 0, -32])), new R.ptr(181, 181, $toNativeArray($kindInt32, [743, 0, 743])), new R.ptr(192, 214, $toNativeArray($kindInt32, [0, 32, 0])), new R.ptr(216, 222, $toNativeArray($kindInt32, [0, 32, 0])), new R.ptr(224, 246, $toNativeArray($kindInt32, [-32, 0, -32])), new R.ptr(248, 254, $toNativeArray($kindInt32, [-32, 0, -32])), new R.ptr(255, 255, $toNativeArray($kindInt32, [121, 0, 121])), new R.ptr(256, 303, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(304, 304, $toNativeArray($kindInt32, [0, -199, 0])), new R.ptr(305, 305, $toNativeArray($kindInt32, [-232, 0, -232])), new R.ptr(306, 311, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(313, 328, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(330, 375, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(376, 376, $toNativeArray($kindInt32, [0, -121, 0])), new R.ptr(377, 382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(383, 383, $toNativeArray($kindInt32, [-300, 0, -300])), new R.ptr(384, 384, $toNativeArray($kindInt32, [195, 0, 195])), new R.ptr(385, 385, $toNativeArray($kindInt32, [0, 210, 0])), new R.ptr(386, 389, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(390, 390, $toNativeArray($kindInt32, [0, 206, 0])), new R.ptr(391, 392, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(393, 394, $toNativeArray($kindInt32, [0, 205, 0])), new R.ptr(395, 396, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(398, 398, $toNativeArray($kindInt32, [0, 79, 0])), new R.ptr(399, 399, $toNativeArray($kindInt32, [0, 202, 0])), new R.ptr(400, 400, $toNativeArray($kindInt32, [0, 203, 0])), new R.ptr(401, 402, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(403, 403, $toNativeArray($kindInt32, [0, 205, 0])), new R.ptr(404, 404, $toNativeArray($kindInt32, [0, 207, 0])), new R.ptr(405, 405, $toNativeArray($kindInt32, [97, 0, 97])), new R.ptr(406, 406, $toNativeArray($kindInt32, [0, 211, 0])), new R.ptr(407, 407, $toNativeArray($kindInt32, [0, 209, 0])), new R.ptr(408, 409, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(410, 410, $toNativeArray($kindInt32, [163, 0, 163])), new R.ptr(412, 412, $toNativeArray($kindInt32, [0, 211, 0])), new R.ptr(413, 413, $toNativeArray($kindInt32, [0, 213, 0])), new R.ptr(414, 414, $toNativeArray($kindInt32, [130, 0, 130])), new R.ptr(415, 415, $toNativeArray($kindInt32, [0, 214, 0])), new R.ptr(416, 421, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(422, 422, $toNativeArray($kindInt32, [0, 218, 0])), new R.ptr(423, 424, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(425, 425, $toNativeArray($kindInt32, [0, 218, 0])), new R.ptr(428, 429, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(430, 430, $toNativeArray($kindInt32, [0, 218, 0])), new R.ptr(431, 432, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(433, 434, $toNativeArray($kindInt32, [0, 217, 0])), new R.ptr(435, 438, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(439, 439, $toNativeArray($kindInt32, [0, 219, 0])), new R.ptr(440, 441, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(444, 445, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(447, 447, $toNativeArray($kindInt32, [56, 0, 56])), new R.ptr(452, 452, $toNativeArray($kindInt32, [0, 2, 1])), new R.ptr(453, 453, $toNativeArray($kindInt32, [-1, 1, 0])), new R.ptr(454, 454, $toNativeArray($kindInt32, [-2, 0, -1])), new R.ptr(455, 455, $toNativeArray($kindInt32, [0, 2, 1])), new R.ptr(456, 456, $toNativeArray($kindInt32, [-1, 1, 0])), new R.ptr(457, 457, $toNativeArray($kindInt32, [-2, 0, -1])), new R.ptr(458, 458, $toNativeArray($kindInt32, [0, 2, 1])), new R.ptr(459, 459, $toNativeArray($kindInt32, [-1, 1, 0])), new R.ptr(460, 460, $toNativeArray($kindInt32, [-2, 0, -1])), new R.ptr(461, 476, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(477, 477, $toNativeArray($kindInt32, [-79, 0, -79])), new R.ptr(478, 495, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(497, 497, $toNativeArray($kindInt32, [0, 2, 1])), new R.ptr(498, 498, $toNativeArray($kindInt32, [-1, 1, 0])), new R.ptr(499, 499, $toNativeArray($kindInt32, [-2, 0, -1])), new R.ptr(500, 501, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(502, 502, $toNativeArray($kindInt32, [0, -97, 0])), new R.ptr(503, 503, $toNativeArray($kindInt32, [0, -56, 0])), new R.ptr(504, 543, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(544, 544, $toNativeArray($kindInt32, [0, -130, 0])), new R.ptr(546, 563, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(570, 570, $toNativeArray($kindInt32, [0, 10795, 0])), new R.ptr(571, 572, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(573, 573, $toNativeArray($kindInt32, [0, -163, 0])), new R.ptr(574, 574, $toNativeArray($kindInt32, [0, 10792, 0])), new R.ptr(575, 576, $toNativeArray($kindInt32, [10815, 0, 10815])), new R.ptr(577, 578, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(579, 579, $toNativeArray($kindInt32, [0, -195, 0])), new R.ptr(580, 580, $toNativeArray($kindInt32, [0, 69, 0])), new R.ptr(581, 581, $toNativeArray($kindInt32, [0, 71, 0])), new R.ptr(582, 591, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(592, 592, $toNativeArray($kindInt32, [10783, 0, 10783])), new R.ptr(593, 593, $toNativeArray($kindInt32, [10780, 0, 10780])), new R.ptr(594, 594, $toNativeArray($kindInt32, [10782, 0, 10782])), new R.ptr(595, 595, $toNativeArray($kindInt32, [-210, 0, -210])), new R.ptr(596, 596, $toNativeArray($kindInt32, [-206, 0, -206])), new R.ptr(598, 599, $toNativeArray($kindInt32, [-205, 0, -205])), new R.ptr(601, 601, $toNativeArray($kindInt32, [-202, 0, -202])), new R.ptr(603, 603, $toNativeArray($kindInt32, [-203, 0, -203])), new R.ptr(604, 604, $toNativeArray($kindInt32, [42319, 0, 42319])), new R.ptr(608, 608, $toNativeArray($kindInt32, [-205, 0, -205])), new R.ptr(609, 609, $toNativeArray($kindInt32, [42315, 0, 42315])), new R.ptr(611, 611, $toNativeArray($kindInt32, [-207, 0, -207])), new R.ptr(613, 613, $toNativeArray($kindInt32, [42280, 0, 42280])), new R.ptr(614, 614, $toNativeArray($kindInt32, [42308, 0, 42308])), new R.ptr(616, 616, $toNativeArray($kindInt32, [-209, 0, -209])), new R.ptr(617, 617, $toNativeArray($kindInt32, [-211, 0, -211])), new R.ptr(618, 618, $toNativeArray($kindInt32, [42308, 0, 42308])), new R.ptr(619, 619, $toNativeArray($kindInt32, [10743, 0, 10743])), new R.ptr(620, 620, $toNativeArray($kindInt32, [42305, 0, 42305])), new R.ptr(623, 623, $toNativeArray($kindInt32, [-211, 0, -211])), new R.ptr(625, 625, $toNativeArray($kindInt32, [10749, 0, 10749])), new R.ptr(626, 626, $toNativeArray($kindInt32, [-213, 0, -213])), new R.ptr(629, 629, $toNativeArray($kindInt32, [-214, 0, -214])), new R.ptr(637, 637, $toNativeArray($kindInt32, [10727, 0, 10727])), new R.ptr(640, 640, $toNativeArray($kindInt32, [-218, 0, -218])), new R.ptr(643, 643, $toNativeArray($kindInt32, [-218, 0, -218])), new R.ptr(647, 647, $toNativeArray($kindInt32, [42282, 0, 42282])), new R.ptr(648, 648, $toNativeArray($kindInt32, [-218, 0, -218])), new R.ptr(649, 649, $toNativeArray($kindInt32, [-69, 0, -69])), new R.ptr(650, 651, $toNativeArray($kindInt32, [-217, 0, -217])), new R.ptr(652, 652, $toNativeArray($kindInt32, [-71, 0, -71])), new R.ptr(658, 658, $toNativeArray($kindInt32, [-219, 0, -219])), new R.ptr(669, 669, $toNativeArray($kindInt32, [42261, 0, 42261])), new R.ptr(670, 670, $toNativeArray($kindInt32, [42258, 0, 42258])), new R.ptr(837, 837, $toNativeArray($kindInt32, [84, 0, 84])), new R.ptr(880, 883, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(886, 887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(891, 893, $toNativeArray($kindInt32, [130, 0, 130])), new R.ptr(895, 895, $toNativeArray($kindInt32, [0, 116, 0])), new R.ptr(902, 902, $toNativeArray($kindInt32, [0, 38, 0])), new R.ptr(904, 906, $toNativeArray($kindInt32, [0, 37, 0])), new R.ptr(908, 908, $toNativeArray($kindInt32, [0, 64, 0])), new R.ptr(910, 911, $toNativeArray($kindInt32, [0, 63, 0])), new R.ptr(913, 929, $toNativeArray($kindInt32, [0, 32, 0])), new R.ptr(931, 939, $toNativeArray($kindInt32, [0, 32, 0])), new R.ptr(940, 940, $toNativeArray($kindInt32, [-38, 0, -38])), new R.ptr(941, 943, $toNativeArray($kindInt32, [-37, 0, -37])), new R.ptr(945, 961, $toNativeArray($kindInt32, [-32, 0, -32])), new R.ptr(962, 962, $toNativeArray($kindInt32, [-31, 0, -31])), new R.ptr(963, 971, $toNativeArray($kindInt32, [-32, 0, -32])), new R.ptr(972, 972, $toNativeArray($kindInt32, [-64, 0, -64])), new R.ptr(973, 974, $toNativeArray($kindInt32, [-63, 0, -63])), new R.ptr(975, 975, $toNativeArray($kindInt32, [0, 8, 0])), new R.ptr(976, 976, $toNativeArray($kindInt32, [-62, 0, -62])), new R.ptr(977, 977, $toNativeArray($kindInt32, [-57, 0, -57])), new R.ptr(981, 981, $toNativeArray($kindInt32, [-47, 0, -47])), new R.ptr(982, 982, $toNativeArray($kindInt32, [-54, 0, -54])), new R.ptr(983, 983, $toNativeArray($kindInt32, [-8, 0, -8])), new R.ptr(984, 1007, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(1008, 1008, $toNativeArray($kindInt32, [-86, 0, -86])), new R.ptr(1009, 1009, $toNativeArray($kindInt32, [-80, 0, -80])), new R.ptr(1010, 1010, $toNativeArray($kindInt32, [7, 0, 7])), new R.ptr(1011, 1011, $toNativeArray($kindInt32, [-116, 0, -116])), new R.ptr(1012, 1012, $toNativeArray($kindInt32, [0, -60, 0])), new R.ptr(1013, 1013, $toNativeArray($kindInt32, [-96, 0, -96])), new R.ptr(1015, 1016, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(1017, 1017, $toNativeArray($kindInt32, [0, -7, 0])), new R.ptr(1018, 1019, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(1021, 1023, $toNativeArray($kindInt32, [0, -130, 0])), new R.ptr(1024, 1039, $toNativeArray($kindInt32, [0, 80, 0])), new R.ptr(1040, 1071, $toNativeArray($kindInt32, [0, 32, 0])), new R.ptr(1072, 1103, $toNativeArray($kindInt32, [-32, 0, -32])), new R.ptr(1104, 1119, $toNativeArray($kindInt32, [-80, 0, -80])), new R.ptr(1120, 1153, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(1162, 1215, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(1216, 1216, $toNativeArray($kindInt32, [0, 15, 0])), new R.ptr(1217, 1230, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(1231, 1231, $toNativeArray($kindInt32, [-15, 0, -15])), new R.ptr(1232, 1327, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(1329, 1366, $toNativeArray($kindInt32, [0, 48, 0])), new R.ptr(1377, 1414, $toNativeArray($kindInt32, [-48, 0, -48])), new R.ptr(4256, 4293, $toNativeArray($kindInt32, [0, 7264, 0])), new R.ptr(4295, 4295, $toNativeArray($kindInt32, [0, 7264, 0])), new R.ptr(4301, 4301, $toNativeArray($kindInt32, [0, 7264, 0])), new R.ptr(5024, 5103, $toNativeArray($kindInt32, [0, 38864, 0])), new R.ptr(5104, 5109, $toNativeArray($kindInt32, [0, 8, 0])), new R.ptr(5112, 5117, $toNativeArray($kindInt32, [-8, 0, -8])), new R.ptr(7296, 7296, $toNativeArray($kindInt32, [-6254, 0, -6254])), new R.ptr(7297, 7297, $toNativeArray($kindInt32, [-6253, 0, -6253])), new R.ptr(7298, 7298, $toNativeArray($kindInt32, [-6244, 0, -6244])), new R.ptr(7299, 7300, $toNativeArray($kindInt32, [-6242, 0, -6242])), new R.ptr(7301, 7301, $toNativeArray($kindInt32, [-6243, 0, -6243])), new R.ptr(7302, 7302, $toNativeArray($kindInt32, [-6236, 0, -6236])), new R.ptr(7303, 7303, $toNativeArray($kindInt32, [-6181, 0, -6181])), new R.ptr(7304, 7304, $toNativeArray($kindInt32, [35266, 0, 35266])), new R.ptr(7545, 7545, $toNativeArray($kindInt32, [35332, 0, 35332])), new R.ptr(7549, 7549, $toNativeArray($kindInt32, [3814, 0, 3814])), new R.ptr(7680, 7829, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(7835, 7835, $toNativeArray($kindInt32, [-59, 0, -59])), new R.ptr(7838, 7838, $toNativeArray($kindInt32, [0, -7615, 0])), new R.ptr(7840, 7935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(7936, 7943, $toNativeArray($kindInt32, [8, 0, 8])), new R.ptr(7944, 7951, $toNativeArray($kindInt32, [0, -8, 0])), new R.ptr(7952, 7957, $toNativeArray($kindInt32, [8, 0, 8])), new R.ptr(7960, 7965, $toNativeArray($kindInt32, [0, -8, 0])), new R.ptr(7968, 7975, $toNativeArray($kindInt32, [8, 0, 8])), new R.ptr(7976, 7983, $toNativeArray($kindInt32, [0, -8, 0])), new R.ptr(7984, 7991, $toNativeArray($kindInt32, [8, 0, 8])), new R.ptr(7992, 7999, $toNativeArray($kindInt32, [0, -8, 0])), new R.ptr(8000, 8005, $toNativeArray($kindInt32, [8, 0, 8])), new R.ptr(8008, 8013, $toNativeArray($kindInt32, [0, -8, 0])), new R.ptr(8017, 8017, $toNativeArray($kindInt32, [8, 0, 8])), new R.ptr(8019, 8019, $toNativeArray($kindInt32, [8, 0, 8])), new R.ptr(8021, 8021, $toNativeArray($kindInt32, [8, 0, 8])), new R.ptr(8023, 8023, $toNativeArray($kindInt32, [8, 0, 8])), new R.ptr(8025, 8025, $toNativeArray($kindInt32, [0, -8, 0])), new R.ptr(8027, 8027, $toNativeArray($kindInt32, [0, -8, 0])), new R.ptr(8029, 8029, $toNativeArray($kindInt32, [0, -8, 0])), new R.ptr(8031, 8031, $toNativeArray($kindInt32, [0, -8, 0])), new R.ptr(8032, 8039, $toNativeArray($kindInt32, [8, 0, 8])), new R.ptr(8040, 8047, $toNativeArray($kindInt32, [0, -8, 0])), new R.ptr(8048, 8049, $toNativeArray($kindInt32, [74, 0, 74])), new R.ptr(8050, 8053, $toNativeArray($kindInt32, [86, 0, 86])), new R.ptr(8054, 8055, $toNativeArray($kindInt32, [100, 0, 100])), new R.ptr(8056, 8057, $toNativeArray($kindInt32, [128, 0, 128])), new R.ptr(8058, 8059, $toNativeArray($kindInt32, [112, 0, 112])), new R.ptr(8060, 8061, $toNativeArray($kindInt32, [126, 0, 126])), new R.ptr(8064, 8071, $toNativeArray($kindInt32, [8, 0, 8])), new R.ptr(8072, 8079, $toNativeArray($kindInt32, [0, -8, 0])), new R.ptr(8080, 8087, $toNativeArray($kindInt32, [8, 0, 8])), new R.ptr(8088, 8095, $toNativeArray($kindInt32, [0, -8, 0])), new R.ptr(8096, 8103, $toNativeArray($kindInt32, [8, 0, 8])), new R.ptr(8104, 8111, $toNativeArray($kindInt32, [0, -8, 0])), new R.ptr(8112, 8113, $toNativeArray($kindInt32, [8, 0, 8])), new R.ptr(8115, 8115, $toNativeArray($kindInt32, [9, 0, 9])), new R.ptr(8120, 8121, $toNativeArray($kindInt32, [0, -8, 0])), new R.ptr(8122, 8123, $toNativeArray($kindInt32, [0, -74, 0])), new R.ptr(8124, 8124, $toNativeArray($kindInt32, [0, -9, 0])), new R.ptr(8126, 8126, $toNativeArray($kindInt32, [-7205, 0, -7205])), new R.ptr(8131, 8131, $toNativeArray($kindInt32, [9, 0, 9])), new R.ptr(8136, 8139, $toNativeArray($kindInt32, [0, -86, 0])), new R.ptr(8140, 8140, $toNativeArray($kindInt32, [0, -9, 0])), new R.ptr(8144, 8145, $toNativeArray($kindInt32, [8, 0, 8])), new R.ptr(8152, 8153, $toNativeArray($kindInt32, [0, -8, 0])), new R.ptr(8154, 8155, $toNativeArray($kindInt32, [0, -100, 0])), new R.ptr(8160, 8161, $toNativeArray($kindInt32, [8, 0, 8])), new R.ptr(8165, 8165, $toNativeArray($kindInt32, [7, 0, 7])), new R.ptr(8168, 8169, $toNativeArray($kindInt32, [0, -8, 0])), new R.ptr(8170, 8171, $toNativeArray($kindInt32, [0, -112, 0])), new R.ptr(8172, 8172, $toNativeArray($kindInt32, [0, -7, 0])), new R.ptr(8179, 8179, $toNativeArray($kindInt32, [9, 0, 9])), new R.ptr(8184, 8185, $toNativeArray($kindInt32, [0, -128, 0])), new R.ptr(8186, 8187, $toNativeArray($kindInt32, [0, -126, 0])), new R.ptr(8188, 8188, $toNativeArray($kindInt32, [0, -9, 0])), new R.ptr(8486, 8486, $toNativeArray($kindInt32, [0, -7517, 0])), new R.ptr(8490, 8490, $toNativeArray($kindInt32, [0, -8383, 0])), new R.ptr(8491, 8491, $toNativeArray($kindInt32, [0, -8262, 0])), new R.ptr(8498, 8498, $toNativeArray($kindInt32, [0, 28, 0])), new R.ptr(8526, 8526, $toNativeArray($kindInt32, [-28, 0, -28])), new R.ptr(8544, 8559, $toNativeArray($kindInt32, [0, 16, 0])), new R.ptr(8560, 8575, $toNativeArray($kindInt32, [-16, 0, -16])), new R.ptr(8579, 8580, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(9398, 9423, $toNativeArray($kindInt32, [0, 26, 0])), new R.ptr(9424, 9449, $toNativeArray($kindInt32, [-26, 0, -26])), new R.ptr(11264, 11310, $toNativeArray($kindInt32, [0, 48, 0])), new R.ptr(11312, 11358, $toNativeArray($kindInt32, [-48, 0, -48])), new R.ptr(11360, 11361, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(11362, 11362, $toNativeArray($kindInt32, [0, -10743, 0])), new R.ptr(11363, 11363, $toNativeArray($kindInt32, [0, -3814, 0])), new R.ptr(11364, 11364, $toNativeArray($kindInt32, [0, -10727, 0])), new R.ptr(11365, 11365, $toNativeArray($kindInt32, [-10795, 0, -10795])), new R.ptr(11366, 11366, $toNativeArray($kindInt32, [-10792, 0, -10792])), new R.ptr(11367, 11372, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(11373, 11373, $toNativeArray($kindInt32, [0, -10780, 0])), new R.ptr(11374, 11374, $toNativeArray($kindInt32, [0, -10749, 0])), new R.ptr(11375, 11375, $toNativeArray($kindInt32, [0, -10783, 0])), new R.ptr(11376, 11376, $toNativeArray($kindInt32, [0, -10782, 0])), new R.ptr(11378, 11379, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(11381, 11382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(11390, 11391, $toNativeArray($kindInt32, [0, -10815, 0])), new R.ptr(11392, 11491, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(11499, 11502, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(11506, 11507, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(11520, 11557, $toNativeArray($kindInt32, [-7264, 0, -7264])), new R.ptr(11559, 11559, $toNativeArray($kindInt32, [-7264, 0, -7264])), new R.ptr(11565, 11565, $toNativeArray($kindInt32, [-7264, 0, -7264])), new R.ptr(42560, 42605, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(42624, 42651, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(42786, 42799, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(42802, 42863, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(42873, 42876, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(42877, 42877, $toNativeArray($kindInt32, [0, -35332, 0])), new R.ptr(42878, 42887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(42891, 42892, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(42893, 42893, $toNativeArray($kindInt32, [0, -42280, 0])), new R.ptr(42896, 42899, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(42902, 42921, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(42922, 42922, $toNativeArray($kindInt32, [0, -42308, 0])), new R.ptr(42923, 42923, $toNativeArray($kindInt32, [0, -42319, 0])), new R.ptr(42924, 42924, $toNativeArray($kindInt32, [0, -42315, 0])), new R.ptr(42925, 42925, $toNativeArray($kindInt32, [0, -42305, 0])), new R.ptr(42926, 42926, $toNativeArray($kindInt32, [0, -42308, 0])), new R.ptr(42928, 42928, $toNativeArray($kindInt32, [0, -42258, 0])), new R.ptr(42929, 42929, $toNativeArray($kindInt32, [0, -42282, 0])), new R.ptr(42930, 42930, $toNativeArray($kindInt32, [0, -42261, 0])), new R.ptr(42931, 42931, $toNativeArray($kindInt32, [0, 928, 0])), new R.ptr(42932, 42935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new R.ptr(43859, 43859, $toNativeArray($kindInt32, [-928, 0, -928])), new R.ptr(43888, 43967, $toNativeArray($kindInt32, [-38864, 0, -38864])), new R.ptr(65313, 65338, $toNativeArray($kindInt32, [0, 32, 0])), new R.ptr(65345, 65370, $toNativeArray($kindInt32, [-32, 0, -32])), new R.ptr(66560, 66599, $toNativeArray($kindInt32, [0, 40, 0])), new R.ptr(66600, 66639, $toNativeArray($kindInt32, [-40, 0, -40])), new R.ptr(66736, 66771, $toNativeArray($kindInt32, [0, 40, 0])), new R.ptr(66776, 66811, $toNativeArray($kindInt32, [-40, 0, -40])), new R.ptr(68736, 68786, $toNativeArray($kindInt32, [0, 64, 0])), new R.ptr(68800, 68850, $toNativeArray($kindInt32, [-64, 0, -64])), new R.ptr(71840, 71871, $toNativeArray($kindInt32, [0, 32, 0])), new R.ptr(71872, 71903, $toNativeArray($kindInt32, [-32, 0, -32])), new R.ptr(125184, 125217, $toNativeArray($kindInt32, [0, 34, 0])), new R.ptr(125218, 125251, $toNativeArray($kindInt32, [-34, 0, -34]))]);
            $pkg.CaseRanges = IK;
            IL = $toNativeArray($kindUint8, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]);
            IM = $toNativeArray($kindUint16, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 91, 92, 93, 94, 95, 96, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 8490, 76, 77, 78, 79, 80, 81, 82, 383, 84, 85, 86, 87, 88, 89, 90, 123, 124, 125, 126, 127]);
            IN = new JD([new AF.ptr(75, 107), new AF.ptr(83, 115), new AF.ptr(107, 8490), new AF.ptr(115, 383), new AF.ptr(181, 924), new AF.ptr(197, 229), new AF.ptr(223, 7838), new AF.ptr(229, 8491), new AF.ptr(304, 304), new AF.ptr(305, 305), new AF.ptr(383, 83), new AF.ptr(452, 453), new AF.ptr(453, 454), new AF.ptr(454, 452), new AF.ptr(455, 456), new AF.ptr(456, 457), new AF.ptr(457, 455), new AF.ptr(458, 459), new AF.ptr(459, 460), new AF.ptr(460, 458), new AF.ptr(497, 498), new AF.ptr(498, 499), new AF.ptr(499, 497), new AF.ptr(837, 921), new AF.ptr(914, 946), new AF.ptr(917, 949), new AF.ptr(920, 952), new AF.ptr(921, 953), new AF.ptr(922, 954), new AF.ptr(924, 956), new AF.ptr(928, 960), new AF.ptr(929, 961), new AF.ptr(931, 962), new AF.ptr(934, 966), new AF.ptr(937, 969), new AF.ptr(946, 976), new AF.ptr(949, 1013), new AF.ptr(952, 977), new AF.ptr(953, 8126), new AF.ptr(954, 1008), new AF.ptr(956, 181), new AF.ptr(960, 982), new AF.ptr(961, 1009), new AF.ptr(962, 963), new AF.ptr(963, 931), new AF.ptr(966, 981), new AF.ptr(969, 8486), new AF.ptr(976, 914), new AF.ptr(977, 1012), new AF.ptr(981, 934), new AF.ptr(982, 928), new AF.ptr(1008, 922), new AF.ptr(1009, 929), new AF.ptr(1012, 920), new AF.ptr(1013, 917), new AF.ptr(1042, 1074), new AF.ptr(1044, 1076), new AF.ptr(1054, 1086), new AF.ptr(1057, 1089), new AF.ptr(1058, 1090), new AF.ptr(1066, 1098), new AF.ptr(1074, 7296), new AF.ptr(1076, 7297), new AF.ptr(1086, 7298), new AF.ptr(1089, 7299), new AF.ptr(1090, 7300), new AF.ptr(1098, 7302), new AF.ptr(1122, 1123), new AF.ptr(1123, 7303), new AF.ptr(7296, 1042), new AF.ptr(7297, 1044), new AF.ptr(7298, 1054), new AF.ptr(7299, 1057), new AF.ptr(7300, 7301), new AF.ptr(7301, 1058), new AF.ptr(7302, 1066), new AF.ptr(7303, 1122), new AF.ptr(7304, 42570), new AF.ptr(7776, 7777), new AF.ptr(7777, 7835), new AF.ptr(7835, 7776), new AF.ptr(7838, 223), new AF.ptr(8126, 837), new AF.ptr(8486, 937), new AF.ptr(8490, 75), new AF.ptr(8491, 197), new AF.ptr(42570, 42571), new AF.ptr(42571, 7304)]);
            IO = new O.ptr(new IY([new P.ptr(837, 837, 1)]), IZ.nil, 0);
            IP = new O.ptr(new IY([new P.ptr(65, 90, 1), new P.ptr(192, 214, 1), new P.ptr(216, 222, 1), new P.ptr(256, 302, 2), new P.ptr(306, 310, 2), new P.ptr(313, 327, 2), new P.ptr(330, 376, 2), new P.ptr(377, 381, 2), new P.ptr(385, 386, 1), new P.ptr(388, 390, 2), new P.ptr(391, 393, 2), new P.ptr(394, 395, 1), new P.ptr(398, 401, 1), new P.ptr(403, 404, 1), new P.ptr(406, 408, 1), new P.ptr(412, 413, 1), new P.ptr(415, 416, 1), new P.ptr(418, 422, 2), new P.ptr(423, 425, 2), new P.ptr(428, 430, 2), new P.ptr(431, 433, 2), new P.ptr(434, 435, 1), new P.ptr(437, 439, 2), new P.ptr(440, 444, 4), new P.ptr(452, 453, 1), new P.ptr(455, 456, 1), new P.ptr(458, 459, 1), new P.ptr(461, 475, 2), new P.ptr(478, 494, 2), new P.ptr(497, 498, 1), new P.ptr(500, 502, 2), new P.ptr(503, 504, 1), new P.ptr(506, 562, 2), new P.ptr(570, 571, 1), new P.ptr(573, 574, 1), new P.ptr(577, 579, 2), new P.ptr(580, 582, 1), new P.ptr(584, 590, 2), new P.ptr(837, 880, 43), new P.ptr(882, 886, 4), new P.ptr(895, 902, 7), new P.ptr(904, 906, 1), new P.ptr(908, 910, 2), new P.ptr(911, 913, 2), new P.ptr(914, 929, 1), new P.ptr(931, 939, 1), new P.ptr(975, 984, 9), new P.ptr(986, 1006, 2), new P.ptr(1012, 1015, 3), new P.ptr(1017, 1018, 1), new P.ptr(1021, 1071, 1), new P.ptr(1120, 1152, 2), new P.ptr(1162, 1216, 2), new P.ptr(1217, 1229, 2), new P.ptr(1232, 1326, 2), new P.ptr(1329, 1366, 1), new P.ptr(4256, 4293, 1), new P.ptr(4295, 4301, 6), new P.ptr(5024, 5109, 1), new P.ptr(7680, 7828, 2), new P.ptr(7838, 7934, 2), new P.ptr(7944, 7951, 1), new P.ptr(7960, 7965, 1), new P.ptr(7976, 7983, 1), new P.ptr(7992, 7999, 1), new P.ptr(8008, 8013, 1), new P.ptr(8025, 8031, 2), new P.ptr(8040, 8047, 1), new P.ptr(8072, 8079, 1), new P.ptr(8088, 8095, 1), new P.ptr(8104, 8111, 1), new P.ptr(8120, 8124, 1), new P.ptr(8136, 8140, 1), new P.ptr(8152, 8155, 1), new P.ptr(8168, 8172, 1), new P.ptr(8184, 8188, 1), new P.ptr(8486, 8490, 4), new P.ptr(8491, 8498, 7), new P.ptr(8579, 11264, 2685), new P.ptr(11265, 11310, 1), new P.ptr(11360, 11362, 2), new P.ptr(11363, 11364, 1), new P.ptr(11367, 11373, 2), new P.ptr(11374, 11376, 1), new P.ptr(11378, 11381, 3), new P.ptr(11390, 11392, 1), new P.ptr(11394, 11490, 2), new P.ptr(11499, 11501, 2), new P.ptr(11506, 42560, 31054), new P.ptr(42562, 42604, 2), new P.ptr(42624, 42650, 2), new P.ptr(42786, 42798, 2), new P.ptr(42802, 42862, 2), new P.ptr(42873, 42877, 2), new P.ptr(42878, 42886, 2), new P.ptr(42891, 42893, 2), new P.ptr(42896, 42898, 2), new P.ptr(42902, 42922, 2), new P.ptr(42923, 42926, 1), new P.ptr(42928, 42932, 1), new P.ptr(42934, 65313, 22379), new P.ptr(65314, 65338, 1)]), new IZ([new Q.ptr(66560, 66599, 1), new Q.ptr(66736, 66771, 1), new Q.ptr(68736, 68786, 1), new Q.ptr(71840, 71871, 1), new Q.ptr(125184, 125217, 1)]), 3);
            IQ = new O.ptr(new IY([new P.ptr(452, 454, 2), new P.ptr(455, 457, 2), new P.ptr(458, 460, 2), new P.ptr(497, 499, 2), new P.ptr(8064, 8071, 1), new P.ptr(8080, 8087, 1), new P.ptr(8096, 8103, 1), new P.ptr(8115, 8131, 16), new P.ptr(8179, 8179, 1)]), IZ.nil, 0);
            IR = new O.ptr(new IY([new P.ptr(97, 122, 1), new P.ptr(181, 223, 42), new P.ptr(224, 246, 1), new P.ptr(248, 255, 1), new P.ptr(257, 303, 2), new P.ptr(307, 311, 2), new P.ptr(314, 328, 2), new P.ptr(331, 375, 2), new P.ptr(378, 382, 2), new P.ptr(383, 384, 1), new P.ptr(387, 389, 2), new P.ptr(392, 396, 4), new P.ptr(402, 405, 3), new P.ptr(409, 410, 1), new P.ptr(414, 417, 3), new P.ptr(419, 421, 2), new P.ptr(424, 429, 5), new P.ptr(432, 436, 4), new P.ptr(438, 441, 3), new P.ptr(445, 447, 2), new P.ptr(453, 454, 1), new P.ptr(456, 457, 1), new P.ptr(459, 460, 1), new P.ptr(462, 476, 2), new P.ptr(477, 495, 2), new P.ptr(498, 499, 1), new P.ptr(501, 505, 4), new P.ptr(507, 543, 2), new P.ptr(547, 563, 2), new P.ptr(572, 575, 3), new P.ptr(576, 578, 2), new P.ptr(583, 591, 2), new P.ptr(592, 596, 1), new P.ptr(598, 599, 1), new P.ptr(601, 603, 2), new P.ptr(604, 608, 4), new P.ptr(609, 613, 2), new P.ptr(614, 616, 2), new P.ptr(617, 620, 1), new P.ptr(623, 625, 2), new P.ptr(626, 629, 3), new P.ptr(637, 643, 3), new P.ptr(647, 652, 1), new P.ptr(658, 669, 11), new P.ptr(670, 837, 167), new P.ptr(881, 883, 2), new P.ptr(887, 891, 4), new P.ptr(892, 893, 1), new P.ptr(940, 943, 1), new P.ptr(945, 974, 1), new P.ptr(976, 977, 1), new P.ptr(981, 983, 1), new P.ptr(985, 1007, 2), new P.ptr(1008, 1011, 1), new P.ptr(1013, 1019, 3), new P.ptr(1072, 1119, 1), new P.ptr(1121, 1153, 2), new P.ptr(1163, 1215, 2), new P.ptr(1218, 1230, 2), new P.ptr(1231, 1327, 2), new P.ptr(1377, 1414, 1), new P.ptr(5112, 5117, 1), new P.ptr(7296, 7304, 1), new P.ptr(7545, 7549, 4), new P.ptr(7681, 7829, 2), new P.ptr(7835, 7841, 6), new P.ptr(7843, 7935, 2), new P.ptr(7936, 7943, 1), new P.ptr(7952, 7957, 1), new P.ptr(7968, 7975, 1), new P.ptr(7984, 7991, 1), new P.ptr(8000, 8005, 1), new P.ptr(8017, 8023, 2), new P.ptr(8032, 8039, 1), new P.ptr(8048, 8061, 1), new P.ptr(8112, 8113, 1), new P.ptr(8126, 8144, 18), new P.ptr(8145, 8160, 15), new P.ptr(8161, 8165, 4), new P.ptr(8526, 8580, 54), new P.ptr(11312, 11358, 1), new P.ptr(11361, 11365, 4), new P.ptr(11366, 11372, 2), new P.ptr(11379, 11382, 3), new P.ptr(11393, 11491, 2), new P.ptr(11500, 11502, 2), new P.ptr(11507, 11520, 13), new P.ptr(11521, 11557, 1), new P.ptr(11559, 11565, 6), new P.ptr(42561, 42605, 2), new P.ptr(42625, 42651, 2), new P.ptr(42787, 42799, 2), new P.ptr(42803, 42863, 2), new P.ptr(42874, 42876, 2), new P.ptr(42879, 42887, 2), new P.ptr(42892, 42897, 5), new P.ptr(42899, 42903, 4), new P.ptr(42905, 42921, 2), new P.ptr(42933, 42935, 2), new P.ptr(43859, 43888, 29), new P.ptr(43889, 43967, 1), new P.ptr(65345, 65370, 1)]), new IZ([new Q.ptr(66600, 66639, 1), new Q.ptr(66776, 66811, 1), new Q.ptr(68800, 68850, 1), new Q.ptr(71872, 71903, 1), new Q.ptr(125218, 125251, 1)]), 4);
            IS = new O.ptr(new IY([new P.ptr(921, 953, 32), new P.ptr(8126, 8126, 1)]), IZ.nil, 0);
            IT = new O.ptr(new IY([new P.ptr(921, 953, 32), new P.ptr(8126, 8126, 1)]), IZ.nil, 0);
            $pkg.FoldCategory = $makeMap($String.keyFor, [{
              k: "L",
              v: IO
            }, {
              k: "Ll",
              v: IP
            }, {
              k: "Lt",
              v: IQ
            }, {
              k: "Lu",
              v: IR
            }, {
              k: "M",
              v: IS
            }, {
              k: "Mn",
              v: IT
            }]);
            IU = new O.ptr(new IY([new P.ptr(924, 956, 32)]), IZ.nil, 0);
            IV = new O.ptr(new IY([new P.ptr(181, 837, 656)]), IZ.nil, 0);
            IW = new O.ptr(new IY([new P.ptr(921, 953, 32), new P.ptr(8126, 8126, 1)]), IZ.nil, 0);
            $pkg.FoldScript = $makeMap($String.keyFor, [{
              k: "Common",
              v: IU
            }, {
              k: "Greek",
              v: IV
            }, {
              k: "Inherited",
              v: IW
            }]);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["unicode/utf8"] = (function() {
    var $pkg = {},
      $init, B, A, C, F, G, H, I, J, K, L, M, N, P, Q;
    B = $pkg.acceptRange = $newType(0, $kindStruct, "utf8.acceptRange", true, "unicode/utf8", false, function(lo_, hi_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.lo = 0;
        this.hi = 0;
        return;
      }
      this.lo = lo_;
      this.hi = hi_;
    });
    F = function(a) {
      var a, aa, ab, ac, ad, ae, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      b = 0;
      c = 0;
      d = a.$length;
      if (d < 1) {
        e = 65533;
        f = 0;
        b = e;
        c = f;
        return [b, c];
      }
      g = (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]);
      h = ((g < 0 || g >= A.length) ? ($throwRuntimeError("index out of range"), undefined) : A[g]);
      if (h >= 240) {
        i = (((h >> 0)) << 31 >> 0) >> 31 >> 0;
        j = (((((0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) >> 0)) & ~i) >> 0) | (65533 & i);
        k = 1;
        b = j;
        c = k;
        return [b, c];
      }
      l = (h & 7) >>> 0;
      n = $clone((m = h >>> 4 << 24 >>> 24, ((m < 0 || m >= C.length) ? ($throwRuntimeError("index out of range"), undefined) : C[m])), B);
      if (d < ((l >> 0))) {
        o = 65533;
        p = 1;
        b = o;
        c = p;
        return [b, c];
      }
      q = (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]);
      if (q < n.lo || n.hi < q) {
        r = 65533;
        s = 1;
        b = r;
        c = s;
        return [b, c];
      }
      if (l === 2) {
        t = (((((g & 31) >>> 0) >> 0)) << 6 >> 0) | ((((q & 63) >>> 0) >> 0));
        u = 2;
        b = t;
        c = u;
        return [b, c];
      }
      v = (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]);
      if (v < 128 || 191 < v) {
        w = 65533;
        x = 1;
        b = w;
        c = x;
        return [b, c];
      }
      if (l === 3) {
        y = ((((((g & 15) >>> 0) >> 0)) << 12 >> 0) | (((((q & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((v & 63) >>> 0) >> 0));
        z = 3;
        b = y;
        c = z;
        return [b, c];
      }
      aa = (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]);
      if (aa < 128 || 191 < aa) {
        ab = 65533;
        ac = 1;
        b = ab;
        c = ac;
        return [b, c];
      }
      ad = (((((((g & 7) >>> 0) >> 0)) << 18 >> 0) | (((((q & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((v & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((aa & 63) >>> 0) >> 0));
      ae = 4;
      b = ad;
      c = ae;
      return [b, c];
    };
    $pkg.DecodeRune = F;
    G = function(a) {
      var a, aa, ab, ac, ad, ae, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      b = 0;
      c = 0;
      d = a.length;
      if (d < 1) {
        e = 65533;
        f = 0;
        b = e;
        c = f;
        return [b, c];
      }
      g = a.charCodeAt(0);
      h = ((g < 0 || g >= A.length) ? ($throwRuntimeError("index out of range"), undefined) : A[g]);
      if (h >= 240) {
        i = (((h >> 0)) << 31 >> 0) >> 31 >> 0;
        j = ((((a.charCodeAt(0) >> 0)) & ~i) >> 0) | (65533 & i);
        k = 1;
        b = j;
        c = k;
        return [b, c];
      }
      l = (h & 7) >>> 0;
      n = $clone((m = h >>> 4 << 24 >>> 24, ((m < 0 || m >= C.length) ? ($throwRuntimeError("index out of range"), undefined) : C[m])), B);
      if (d < ((l >> 0))) {
        o = 65533;
        p = 1;
        b = o;
        c = p;
        return [b, c];
      }
      q = a.charCodeAt(1);
      if (q < n.lo || n.hi < q) {
        r = 65533;
        s = 1;
        b = r;
        c = s;
        return [b, c];
      }
      if (l === 2) {
        t = (((((g & 31) >>> 0) >> 0)) << 6 >> 0) | ((((q & 63) >>> 0) >> 0));
        u = 2;
        b = t;
        c = u;
        return [b, c];
      }
      v = a.charCodeAt(2);
      if (v < 128 || 191 < v) {
        w = 65533;
        x = 1;
        b = w;
        c = x;
        return [b, c];
      }
      if (l === 3) {
        y = ((((((g & 15) >>> 0) >> 0)) << 12 >> 0) | (((((q & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((v & 63) >>> 0) >> 0));
        z = 3;
        b = y;
        c = z;
        return [b, c];
      }
      aa = a.charCodeAt(3);
      if (aa < 128 || 191 < aa) {
        ab = 65533;
        ac = 1;
        b = ab;
        c = ac;
        return [b, c];
      }
      ad = (((((((g & 7) >>> 0) >> 0)) << 18 >> 0) | (((((q & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((v & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((aa & 63) >>> 0) >> 0));
      ae = 4;
      b = ad;
      c = ae;
      return [b, c];
    };
    $pkg.DecodeRuneInString = G;
    H = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o;
      b = 0;
      c = 0;
      d = a.$length;
      if (d === 0) {
        e = 65533;
        f = 0;
        b = e;
        c = f;
        return [b, c];
      }
      g = d - 1 >> 0;
      b = ((((g < 0 || g >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + g]) >> 0));
      if (b < 128) {
        h = b;
        i = 1;
        b = h;
        c = i;
        return [b, c];
      }
      j = d - 4 >> 0;
      if (j < 0) {
        j = 0;
      }
      g = g - (1) >> 0;
      while (true) {
        if (!(g >= j)) {
          break;
        }
        if (N(((g < 0 || g >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + g]))) {
          break;
        }
        g = g - (1) >> 0;
      }
      if (g < 0) {
        g = 0;
      }
      k = F($subslice(a, g, d));
      b = k[0];
      c = k[1];
      if (!(((g + c >> 0) === d))) {
        l = 65533;
        m = 1;
        b = l;
        c = m;
        return [b, c];
      }
      n = b;
      o = c;
      b = n;
      c = o;
      return [b, c];
    };
    $pkg.DecodeLastRune = H;
    I = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o;
      b = 0;
      c = 0;
      d = a.length;
      if (d === 0) {
        e = 65533;
        f = 0;
        b = e;
        c = f;
        return [b, c];
      }
      g = d - 1 >> 0;
      b = ((a.charCodeAt(g) >> 0));
      if (b < 128) {
        h = b;
        i = 1;
        b = h;
        c = i;
        return [b, c];
      }
      j = d - 4 >> 0;
      if (j < 0) {
        j = 0;
      }
      g = g - (1) >> 0;
      while (true) {
        if (!(g >= j)) {
          break;
        }
        if (N(a.charCodeAt(g))) {
          break;
        }
        g = g - (1) >> 0;
      }
      if (g < 0) {
        g = 0;
      }
      k = G($substring(a, g, d));
      b = k[0];
      c = k[1];
      if (!(((g + c >> 0) === d))) {
        l = 65533;
        m = 1;
        b = l;
        c = m;
        return [b, c];
      }
      n = b;
      o = c;
      b = n;
      c = o;
      return [b, c];
    };
    $pkg.DecodeLastRuneInString = I;
    J = function(a) {
      var a;
      if (a < 0) {
        return -1;
      } else if (a <= 127) {
        return 1;
      } else if (a <= 2047) {
        return 2;
      } else if (55296 <= a && a <= 57343) {
        return -1;
      } else if (a <= 65535) {
        return 3;
      } else if (a <= 1114111) {
        return 4;
      }
      return -1;
    };
    $pkg.RuneLen = J;
    K = function(a, b) {
      var a, b, c;
      c = ((b >>> 0));
      if (c <= 127) {
        (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = ((b << 24 >>> 24)));
        return 1;
      } else if (c <= 2047) {
        $unused((1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]));
        (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = ((192 | (((b >> 6 >> 0) << 24 >>> 24))) >>> 0));
        (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = ((128 | ((((b << 24 >>> 24)) & 63) >>> 0)) >>> 0));
        return 2;
      } else if ((c > 1114111) || (55296 <= c && c <= 57343)) {
        b = 65533;
        $unused((2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]));
        (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = ((224 | (((b >> 12 >> 0) << 24 >>> 24))) >>> 0));
        (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = ((128 | (((((b >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
        (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = ((128 | ((((b << 24 >>> 24)) & 63) >>> 0)) >>> 0));
        return 3;
      } else if (c <= 65535) {
        $unused((2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]));
        (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = ((224 | (((b >> 12 >> 0) << 24 >>> 24))) >>> 0));
        (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = ((128 | (((((b >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
        (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = ((128 | ((((b << 24 >>> 24)) & 63) >>> 0)) >>> 0));
        return 3;
      } else {
        $unused((3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]));
        (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = ((240 | (((b >> 18 >> 0) << 24 >>> 24))) >>> 0));
        (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = ((128 | (((((b >> 12 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
        (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = ((128 | (((((b >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
        (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3] = ((128 | ((((b << 24 >>> 24)) & 63) >>> 0)) >>> 0));
        return 4;
      }
    };
    $pkg.EncodeRune = K;
    L = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o;
      b = a.$length;
      c = 0;
      d = 0;
      while (true) {
        if (!(d < b)) {
          break;
        }
        c = c + (1) >> 0;
        e = ((d < 0 || d >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + d]);
        if (e < 128) {
          d = d + (1) >> 0;
          continue;
        }
        f = ((e < 0 || e >= A.length) ? ($throwRuntimeError("index out of range"), undefined) : A[e]);
        if (f === 241) {
          d = d + (1) >> 0;
          continue;
        }
        g = ((((f & 7) >>> 0) >> 0));
        if ((d + g >> 0) > b) {
          d = d + (1) >> 0;
          continue;
        }
        i = $clone((h = f >>> 4 << 24 >>> 24, ((h < 0 || h >= C.length) ? ($throwRuntimeError("index out of range"), undefined) : C[h])), B);
        k = (j = d + 1 >> 0, ((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j]));
        if (k < i.lo || i.hi < k) {
          g = 1;
        } else if (g === 2) {} else {
          m = (l = d + 2 >> 0, ((l < 0 || l >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + l]));
          if (m < 128 || 191 < m) {
            g = 1;
          } else if (g === 3) {} else {
            o = (n = d + 3 >> 0, ((n < 0 || n >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + n]));
            if (o < 128 || 191 < o) {
              g = 1;
            }
          }
        }
        d = d + (g) >> 0;
      }
      return c;
    };
    $pkg.RuneCount = L;
    M = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l;
      b = 0;
      c = a.length;
      d = 0;
      while (true) {
        if (!(d < c)) {
          break;
        }
        e = a.charCodeAt(d);
        if (e < 128) {
          d = d + (1) >> 0;
          b = b + (1) >> 0;
          continue;
        }
        f = ((e < 0 || e >= A.length) ? ($throwRuntimeError("index out of range"), undefined) : A[e]);
        if (f === 241) {
          d = d + (1) >> 0;
          b = b + (1) >> 0;
          continue;
        }
        g = ((((f & 7) >>> 0) >> 0));
        if ((d + g >> 0) > c) {
          d = d + (1) >> 0;
          b = b + (1) >> 0;
          continue;
        }
        i = $clone((h = f >>> 4 << 24 >>> 24, ((h < 0 || h >= C.length) ? ($throwRuntimeError("index out of range"), undefined) : C[h])), B);
        j = a.charCodeAt((d + 1 >> 0));
        if (j < i.lo || i.hi < j) {
          g = 1;
        } else if (g === 2) {} else {
          k = a.charCodeAt((d + 2 >> 0));
          if (k < 128 || 191 < k) {
            g = 1;
          } else if (g === 3) {} else {
            l = a.charCodeAt((d + 3 >> 0));
            if (l < 128 || 191 < l) {
              g = 1;
            }
          }
        }
        d = d + (g) >> 0;
        b = b + (1) >> 0;
      }
      b = b;
      return b;
    };
    $pkg.RuneCountInString = M;
    N = function(a) {
      var a;
      return !((((a & 192) >>> 0) === 128));
    };
    $pkg.RuneStart = N;
    P = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k;
      b = a.length;
      c = 0;
      while (true) {
        if (!(c < b)) {
          break;
        }
        d = a.charCodeAt(c);
        if (d < 128) {
          c = c + (1) >> 0;
          continue;
        }
        e = ((d < 0 || d >= A.length) ? ($throwRuntimeError("index out of range"), undefined) : A[d]);
        if (e === 241) {
          return false;
        }
        f = ((((e & 7) >>> 0) >> 0));
        if ((c + f >> 0) > b) {
          return false;
        }
        h = $clone((g = e >>> 4 << 24 >>> 24, ((g < 0 || g >= C.length) ? ($throwRuntimeError("index out of range"), undefined) : C[g])), B);
        i = a.charCodeAt((c + 1 >> 0));
        if (i < h.lo || h.hi < i) {
          return false;
        } else if (f === 2) {} else {
          j = a.charCodeAt((c + 2 >> 0));
          if (j < 128 || 191 < j) {
            return false;
          } else if (f === 3) {} else {
            k = a.charCodeAt((c + 3 >> 0));
            if (k < 128 || 191 < k) {
              return false;
            }
          }
        }
        c = c + (f) >> 0;
      }
      return true;
    };
    $pkg.ValidString = P;
    Q = function(a) {
      var a;
      if (0 <= a && a < 55296) {
        return true;
      } else if (57343 < a && a <= 1114111) {
        return true;
      }
      return false;
    };
    $pkg.ValidRune = Q;
    B.init("unicode/utf8", [{
      prop: "lo",
      name: "lo",
      embedded: false,
      exported: false,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "hi",
      name: "hi",
      embedded: false,
      exported: false,
      typ: $Uint8,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            A = $toNativeArray($kindUint
            C = $toNativeArray($kindStruct, [new B.ptr(128, 191), new B.ptr(160, 191), new B.ptr(128, 159), new B.ptr(144, 191), new B.ptr(128, 143)]);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["bytes"] = (function() {
    var $pkg = {},
      $init, A, D, B, E, C, I, J, BE, BR, BT, BU, BV, BY, CB, CD, K, F, G, L, AJ, AL, AW, BD, BF, BG, BJ, BN, BO, BP, BQ, BS;
    A = $packages["errors"];
    D = $packages["internal/bytealg"];
    B = $packages["io"];
    E = $packages["unicode"];
    C = $packages["unicode/utf8"];
    I = $pkg.Buffer = $newType(0, $kindStruct, "bytes.Buffer", true, "bytes", true, function(buf_, off_, bootstrap_, lastRead_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.buf = BU.nil;
        this.off = 0;
        this.bootstrap = BV.zero();
        this.lastRead = 0;
        return;
      }
      this.buf = buf_;
      this.off = off_;
      this.bootstrap = bootstrap_;
      this.lastRead = lastRead_;
    });
    J = $pkg.readOp = $newType(1, $kindInt8, "bytes.readOp", true, "bytes", false, null);
    BE = $pkg.asciiSet = $newType(32, $kindArray, "bytes.asciiSet", true, "bytes", false, null);
    BR = $pkg.Reader = $newType(0, $kindStruct, "bytes.Reader", true, "bytes", true, function(s_, i_, prevRune_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.s = BU.nil;
        this.i = new $Int64(0, 0);
        this.prevRune = 0;
        return;
      }
      this.s = s_;
      this.i = i_;
      this.prevRune = prevRune_;
    });
    BT = $ptrType(I);
    BU = $sliceType($Uint8);
    BV = $arrayType($Uint8, 64);
    BY = $ptrType(BE);
    CB = $arrayType($Uint32, 8);
    CD = $ptrType(BR);
    F = function(d, e) {
      var d, e, f, g, h, i;
      f = d;
      g = 0;
      while (true) {
        if (!(g < f.$length)) {
          break;
        }
        h = g;
        i = ((g < 0 || g >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + g]);
        if (i === e) {
          return h;
        }
        g++;
      }
      return -1;
    };
    $pkg.IndexByte = F;
    G = function(d, e) {
      var d, e, f, g, h, i;
      if (!((d.$length === e.$length))) {
        return false;
      }
      f = d;
      g = 0;
      while (true) {
        if (!(g < f.$length)) {
          break;
        }
        h = g;
        i = ((g < 0 || g >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + g]);
        if (!((i === ((h < 0 || h >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + h])))) {
          return false;
        }
        g++;
      }
      return true;
    };
    $pkg.Equal = G;
    I.ptr.prototype.Bytes = function() {
      var d;
      d = this;
      return $subslice(d.buf, d.off);
    };
    I.prototype.Bytes = function() {
      return this.$val.Bytes();
    };
    I.ptr.prototype.String = function() {
      var d;
      d = this;
      if (d === BT.nil) {
        return "<nil>";
      }
      return ($bytesToString($subslice(d.buf, d.off)));
    };
    I.prototype.String = function() {
      return this.$val.String();
    };
    I.ptr.prototype.empty = function() {
      var d;
      d = this;
      return d.buf.$length <= d.off;
    };
    I.prototype.empty = function() {
      return this.$val.empty();
    };
    I.ptr.prototype.Len = function() {
      var d;
      d = this;
      return d.buf.$length - d.off >> 0;
    };
    I.prototype.Len = function() {
      return this.$val.Len();
    };
    I.ptr.prototype.Cap = function() {
      var d;
      d = this;
      return d.buf.$capacity;
    };
    I.prototype.Cap = function() {
      return this.$val.Cap();
    };
    I.ptr.prototype.Truncate = function(d) {
      var d, e;
      e = this;
      if (d === 0) {
        e.Reset();
        return;
      }
      e.lastRead = 0;
      if (d < 0 || d > e.Len()) {
        $panic(new $String("bytes.Buffer: truncation out of range"));
      }
      e.buf = $subslice(e.buf, 0, (e.off + d >> 0));
    };
    I.prototype.Truncate = function(d) {
      return this.$val.Truncate(d);
    };
    I.ptr.prototype.Reset = function() {
      var d;
      d = this;
      d.buf = $subslice(d.buf, 0, 0);
      d.off = 0;
      d.lastRead = 0;
    };
    I.prototype.Reset = function() {
      return this.$val.Reset();
    };
    I.ptr.prototype.tryGrowByReslice = function(d) {
      var d, e, f;
      e = this;
      f = e.buf.$length;
      if (d <= (e.buf.$capacity - f >> 0)) {
        e.buf = $subslice(e.buf, 0, (f + d >> 0));
        return [f, true];
      }
      return [0, false];
    };
    I.prototype.tryGrowByReslice = function(d) {
      return this.$val.tryGrowByReslice(d);
    };
    I.ptr.prototype.grow = function(d) {
      var d, e, f, g, h, i, j, k, l;
      e = this;
      f = e.Len();
      if ((f === 0) && !((e.off === 0))) {
        e.Reset();
      }
      g = e.tryGrowByReslice(d);
      h = g[0];
      i = g[1];
      if (i) {
        return h;
      }
      if (e.buf === BU.nil && d <= 64) {
        e.buf = $subslice(new BU(e.bootstrap), 0, d);
        return 0;
      }
      j = e.buf.$capacity;
      if (d <= ((k = j / 2, (k === k && k !== 1 / 0 && k !== -1 / 0) ? k >> 0 : $throwRuntimeError("integer divide by zero")) - f >> 0)) {
        $copySlice(e.buf, $subslice(e.buf, e.off));
      } else if (j > ((2147483647 - j >> 0) - d >> 0)) {
        $panic($pkg.ErrTooLarge);
      } else {
        l = L(($imul(2, j)) + d >> 0);
        $copySlice(l, $subslice(e.buf, e.off));
        e.buf = l;
      }
      e.off = 0;
      e.buf = $subslice(e.buf, 0, (f + d >> 0));
      return f;
    };
    I.prototype.grow = function(d) {
      return this.$val.grow(d);
    };
    I.ptr.prototype.Grow = function(d) {
      var d, e, f;
      e = this;
      if (d < 0) {
        $panic(new $String("bytes.Buffer.Grow: negative count"));
      }
      f = e.grow(d);
      e.buf = $subslice(e.buf, 0, f);
    };
    I.prototype.Grow = function(d) {
      return this.$val.Grow(d);
    };
    I.ptr.prototype.Write = function(d) {
      var d, e, f, g, h, i, j, k, l;
      e = 0;
      f = $ifaceNil;
      g = this;
      g.lastRead = 0;
      h = g.tryGrowByReslice(d.$length);
      i = h[0];
      j = h[1];
      if (!j) {
        i = g.grow(d.$length);
      }
      k = $copySlice($subslice(g.buf, i), d);
      l = $ifaceNil;
      e = k;
      f = l;
      return [e, f];
    };
    I.prototype.Write = function(d) {
      return this.$val.Write(d);
    };
    I.ptr.prototype.WriteString = function(d) {
      var d, e, f, g, h, i, j, k, l;
      e = 0;
      f = $ifaceNil;
      g = this;
      g.lastRead = 0;
      h = g.tryGrowByReslice(d.length);
      i = h[0];
      j = h[1];
      if (!j) {
        i = g.grow(d.length);
      }
      k = $copyString($subslice(g.buf, i), d);
      l = $ifaceNil;
      e = k;
      f = l;
      return [e, f];
    };
    I.prototype.WriteString = function(d) {
      return this.$val.WriteString(d);
    };
    I.ptr.prototype.ReadFrom = function(d) {
      var d, e, f, g, h, i, j, k, l, m, n, o, p, q, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = new $Int64(0, 0);
            f = $ifaceNil;
            g = this;
            g.lastRead = 0;
          case 1:
            h = g.grow(512);
            g.buf = $subslice(g.buf, 0, h);
            j = d.Read($subslice(g.buf, h, g.buf.$capacity));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            i = j;
            k = i[0];
            l = i[1];
            if (k < 0) {
              $panic(K);
            }
            g.buf = $subslice(g.buf, 0, (h + k >> 0));
            e = (m = (new $Int64(0, k)), new $Int64(e.$high + m.$high, e.$low + m.$low));
            if ($interfaceIsEqual(l, B.EOF)) {
              n = e;
              o = $ifaceNil;
              e = n;
              f = o;
              $s = -1;
              return [e, f];
            }
            if (!($interfaceIsEqual(l, $ifaceNil))) {
              p = e;
              q = l;
              e = p;
              f = q;
              $s = -1;
              return [e, f];
            }
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return [e, f];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: I.ptr.prototype.ReadFrom
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    I.prototype.ReadFrom = function(d) {
      return this.$val.ReadFrom(d);
    };
    L = function(d) {
      var d, $deferred;
      var $err = null;
      try {
        $deferred = [];
        $deferred.index = $curGoroutine.deferStack.length;
        $curGoroutine.deferStack.push($deferred);
        $deferred.push([(function() {
          if (!($interfaceIsEqual($recover(), $ifaceNil))) {
            $panic($pkg.ErrTooLarge);
          }
        }), []]);
        return $makeSlice(BU, d);
      } catch (err) {
        $err = err;
        return BU.nil;
      } finally {
        $callDeferred($deferred, $err);
      }
    };
    I.ptr.prototype.WriteTo = function(d) {
      var d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = new $Int64(0, 0);
            f = $ifaceNil;
            g = this;
            g.lastRead = 0;
            h = g.Len();
            if (h > 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            j = d.Write($subslice(g.buf, g.off));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            i = j;
            k = i[0];
            l = i[1];
            if (k > h) {
              $panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
            }
            g.off = g.off + (k) >> 0;
            e = (new $Int64(0, k));
            if (!($interfaceIsEqual(l, $ifaceNil))) {
              m = e;
              n = l;
              e = m;
              f = n;
              $s = -1;
              return [e, f];
            }
            if (!((k === h))) {
              o = e;
              p = B.ErrShortWrite;
              e = o;
              f = p;
              $s = -1;
              return [e, f];
            }
          case 2:
            g.Reset();
            q = e;
            r = $ifaceNil;
            e = q;
            f = r;
            $s = -1;
            return [e, f];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: I.ptr.prototype.WriteTo
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    I.prototype.WriteTo = function(d) {
      return this.$val.WriteTo(d);
    };
    I.ptr.prototype.WriteByte = function(d) {
      var d, e, f, g, h, i;
      e = this;
      e.lastRead = 0;
      f = e.tryGrowByReslice(1);
      g = f[0];
      h = f[1];
      if (!h) {
        g = e.grow(1);
      }(i = e.buf, ((g < 0 || g >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + g] = d));
      return $ifaceNil;
    };
    I.prototype.WriteByte = function(d) {
      return this.$val.WriteByte(d);
    };
    I.ptr.prototype.WriteRune = function(d) {
      var d, e, f, g, h, i, j, k, l, m, n;
      e = 0;
      f = $ifaceNil;
      g = this;
      if (d < 128) {
        g.WriteByte(((d << 24 >>> 24)));
        h = 1;
        i = $ifaceNil;
        e = h;
        f = i;
        return [e, f];
      }
      g.lastRead = 0;
      j = g.tryGrowByReslice(4);
      k = j[0];
      l = j[1];
      if (!l) {
        k = g.grow(4);
      }
      e = C.EncodeRune($subslice(g.buf, k, (k + 4 >> 0)), d);
      g.buf = $subslice(g.buf, 0, (k + e >> 0));
      m = e;
      n = $ifaceNil;
      e = m;
      f = n;
      return [e, f];
    };
    I.prototype.WriteRune = function(d) {
      return this.$val.WriteRune(d);
    };
    I.ptr.prototype.Read = function(d) {
      var d, e, f, g, h, i, j, k, l, m;
      e = 0;
      f = $ifaceNil;
      g = this;
      g.lastRead = 0;
      if (g.empty()) {
        g.Reset();
        if (d.$length === 0) {
          h = 0;
          i = $ifaceNil;
          e = h;
          f = i;
          return [e, f];
        }
        j = 0;
        k = B.EOF;
        e = j;
        f = k;
        return [e, f];
      }
      e = $copySlice(d, $subslice(g.buf, g.off));
      g.off = g.off + (e) >> 0;
      if (e > 0) {
        g.lastRead = -1;
      }
      l = e;
      m = $ifaceNil;
      e = l;
      f = m;
      return [e, f];
    };
    I.prototype.Read = function(d) {
      return this.$val.Read(d);
    };
    I.ptr.prototype.Next = function(d) {
      var d, e, f, g;
      e = this;
      e.lastRead = 0;
      f = e.Len();
      if (d > f) {
        d = f;
      }
      g = $subslice(e.buf, e.off, (e.off + d >> 0));
      e.off = e.off + (d) >> 0;
      if (d > 0) {
        e.lastRead = -1;
      }
      return g;
    };
    I.prototype.Next = function(d) {
      return this.$val.Next(d);
    };
    I.ptr.prototype.ReadByte = function() {
      var d, e, f, g;
      d = this;
      if (d.empty()) {
        d.Reset();
        return [0, B.EOF];
      }
      g = (e = d.buf, f = d.off, ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]));
      d.off = d.off + (1) >> 0;
      d.lastRead = -1;
      return [g, $ifaceNil];
    };
    I.prototype.ReadByte = function() {
      return this.$val.ReadByte();
    };
    I.ptr.prototype.ReadRune = function() {
      var d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u;
      d = 0;
      e = 0;
      f = $ifaceNil;
      g = this;
      if (g.empty()) {
        g.Reset();
        h = 0;
        i = 0;
        j = B.EOF;
        d = h;
        e = i;
        f = j;
        return [d, e, f];
      }
      m = (k = g.buf, l = g.off, ((l < 0 || l >= k.$length) ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + l]));
      if (m < 128) {
        g.off = g.off + (1) >> 0;
        g.lastRead = 1;
        n = ((m >> 0));
        o = 1;
        p = $ifaceNil;
        d = n;
        e = o;
        f = p;
        return [d, e, f];
      }
      q = C.DecodeRune($subslice(g.buf, g.off));
      d = q[0];
      r = q[1];
      g.off = g.off + (r) >> 0;
      g.lastRead = ((r << 24 >> 24));
      s = d;
      t = r;
      u = $ifaceNil;
      d = s;
      e = t;
      f = u;
      return [d, e, f];
    };
    I.prototype.ReadRune = function() {
      return this.$val.ReadRune();
    };
    I.ptr.prototype.UnreadRune = function() {
      var d;
      d = this;
      if (d.lastRead <= 0) {
        return A.New("bytes.Buffer: UnreadRune: previous operation was not a successful ReadRune");
      }
      if (d.off >= ((d.lastRead >> 0))) {
        d.off = d.off - (((d.lastRead >> 0))) >> 0;
      }
      d.lastRead = 0;
      return $ifaceNil;
    };
    I.prototype.UnreadRune = function() {
      return this.$val.UnreadRune();
    };
    I.ptr.prototype.UnreadByte = function() {
      var d;
      d = this;
      if (d.lastRead === 0) {
        return A.New("bytes.Buffer: UnreadByte: previous operation was not a successful read");
      }
      d.lastRead = 0;
      if (d.off > 0) {
        d.off = d.off - (1) >> 0;
      }
      return $ifaceNil;
    };
    I.prototype.UnreadByte = function() {
      return this.$val.UnreadByte();
    };
    I.ptr.prototype.ReadBytes = function(d) {
      var d, e, f, g, h, i, j, k;
      e = BU.nil;
      f = $ifaceNil;
      g = this;
      h = g.readSlice(d);
      i = h[0];
      f = h[1];
      e = $appendSlice(e, i);
      j = e;
      k = f;
      e = j;
      f = k;
      return [e, f];
    };
    I.prototype.ReadBytes = function(d) {
      return this.$val.ReadBytes(d);
    };
    I.ptr.prototype.readSlice = function(d) {
      var d, e, f, g, h, i, j, k;
      e = BU.nil;
      f = $ifaceNil;
      g = this;
      h = F($subslice(g.buf, g.off), d);
      i = (g.off + h >> 0) + 1 >> 0;
      if (h < 0) {
        i = g.buf.$length;
        f = B.EOF;
      }
      e = $subslice(g.buf, g.off, i);
      g.off = i;
      g.lastRead = -1;
      j = e;
      k = f;
      e = j;
      f = k;
      return [e, f];
    };
    I.prototype.readSlice = function(d) {
      return this.$val.readSlice(d);
    };
    I.ptr.prototype.ReadString = function(d) {
      var d, e, f, g, h, i, j, k;
      e = "";
      f = $ifaceNil;
      g = this;
      h = g.readSlice(d);
      i = h[0];
      f = h[1];
      j = ($bytesToString(i));
      k = f;
      e = j;
      f = k;
      return [e, f];
    };
    I.prototype.ReadString = function(d) {
      return this.$val.ReadString(d);
    };
    AJ = function(d, e) {
      var d, e;
      return d.$length >= e.$length && G($subslice(d, 0, e.$length), e);
    };
    $pkg.HasPrefix = AJ;
    AL = function(d, e) {
      var d, e, f, g, h, i, j, k, l, m, n, o, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = e.$length;
            g = 0;
            h = $makeSlice(BU, f);
            i = 0;
          case 1:
            if (!(i < e.$length)) {
              $s = 2;
              continue;
            }
            j = 1;
            k = ((((i < 0 || i >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + i]) >> 0));
            if (k >= 128) {
              l = C.DecodeRune($subslice(e, i));
              k = l[0];
              j = l[1];
            }
            m = d(k);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            k = m;
            if (k >= 0) {
              n = C.RuneLen(k);
              if (n < 0) {
                n = 3;
              }
              if ((g + n >> 0) > f) {
                f = ($imul(f, 2)) + 4 >> 0;
                o = $makeSlice(BU, f);
                $copySlice(o, $subslice(h, 0, g));
                h = o;
              }
              g = g + (C.EncodeRune($subslice(h, g, f), k)) >> 0;
            }
            i = i + (j) >> 0;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return $subslice(h, 0, g);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AL
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Map = AL;
    AW = function(d, e) {
      var d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = BD(d, e, false);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            g = f;
            if (g >= 0 && ((g < 0 || g >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + g]) >= 128) {
              h = C.DecodeRune($subslice(d, g));
              i = h[1];
              g = g + (i) >> 0;
            } else {
              g = g + (1) >> 0;
            }
            $s = -1;
            return $subslice(d, 0, g);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AW
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.TrimRightFunc = AW;
    BD = function(d, e, f) {
      var d, e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = d.$length;
          case 1:
            if (!(g > 0)) {
              $s = 2;
              continue;
            }
            h = (((i = g - 1 >> 0, ((i < 0 || i >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + i])) >> 0));
            j = 1;
            k = h;
            l = j;
            if (k >= 128) {
              m = C.DecodeLastRune($subslice(d, 0, g));
              k = m[0];
              l = m[1];
            }
            g = g - (l) >> 0;
            n = e(k);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            if (n === f) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            $s = -1;
            return g;
          case 4:
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return -1;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BD
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BF = function(d) {
      var d, e, f, g, h, i, j, k, l, m, n;
      e = CB.zero();
      f = false;
      g = 0;
      while (true) {
        if (!(g < d.length)) {
          break;
        }
        h = d.charCodeAt(g);
        if (h >= 128) {
          i = $clone(e, BE);
          j = false;
          BE.copy(e, i);
          f = j;
          return [e, f];
        }
        k = h >>> 5 << 24 >>> 24;
        ((k < 0 || k >= e.length) ? ($throwRuntimeError("index out of range"), undefined) : e[k] = ((((k < 0 || k >= e.length) ? ($throwRuntimeError("index out of range"), undefined) : e[k]) | (((l = ((((h & 31) >>> 0) >>> 0)), l < 32 ? (1 << l) : 0) >>> 0))) >>> 0));
        g = g + (1) >> 0;
      }
      m = $clone(e, BE);
      n = true;
      BE.copy(e, m);
      f = n;
      return [e, f];
    };
    BE.prototype.contains = function(d) {
      var d, e, f, g;
      e = this.$val;
      return !((((((f = d >>> 5 << 24 >>> 24, (e.nilCheck, ((f < 0 || f >= e.length) ? ($throwRuntimeError("index out of range"), undefined) : e[f]))) & (((g = ((((d & 31) >>> 0) >>> 0)), g < 32 ? (1 << g) : 0) >>> 0))) >>> 0)) === 0));
    };
    $ptrType(BE).prototype.contains = function(d) {
      return (new BE(this.$get())).contains(d);
    };
    BG = function(d) {
      var d, e, f, g;
      if ((d.length === 1) && d.charCodeAt(0) < 128) {
        return (function(e) {
          var e;
          return e === ((d.charCodeAt(0) >> 0));
        });
      }
      e = BF(d);
      f = $clone(e[0], BE);
      g = e[1];
      if (g) {
        return (function(h) {
          var h;
          return h < 128 && new BY(f).contains(((h << 24 >>> 24)));
        });
      }
      return (function(h) {
        var h, i, j, k, l;
        i = d;
        j = 0;
        while (true) {
          if (!(j < i.length)) {
            break;
          }
          k = $decodeRune(i, j);
          l = k[0];
          if (l === h) {
            return true;
          }
          j += k[1];
        }
        return false;
      });
    };
    BJ = function(d, e) {
      var d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = AW(d, BG(e));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BJ
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.TrimRight = BJ;
    BN = function(d, e) {
      var d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      while (true) {
        if (!(!((d.$length === 0)) && !((e.$length === 0)))) {
          break;
        }
        f = 0;
        g = 0;
        h = f;
        i = g;
        if ((0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0]) < 128) {
          j = (((0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0]) >> 0));
          k = $subslice(d, 1);
          h = j;
          d = k;
        } else {
          l = C.DecodeRune(d);
          m = l[0];
          n = l[1];
          o = m;
          p = $subslice(d, n);
          h = o;
          d = p;
        }
        if ((0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]) < 128) {
          q = (((0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]) >> 0));
          r = $subslice(e, 1);
          i = q;
          e = r;
        } else {
          s = C.DecodeRune(e);
          t = s[0];
          u = s[1];
          v = t;
          w = $subslice(e, u);
          i = v;
          e = w;
        }
        if (i === h) {
          continue;
        }
        if (i < h) {
          x = h;
          y = i;
          i = x;
          h = y;
        }
        if (i < 128) {
          if (65 <= h && h <= 90 && (i === ((h + 97 >> 0) - 65 >> 0))) {
            continue;
          }
          return false;
        }
        z = E.SimpleFold(h);
        while (true) {
          if (!(!((z === h)) && z < i)) {
            break;
          }
          z = E.SimpleFold(z);
        }
        if (z === i) {
          continue;
        }
        return false;
      }
      return d.$length === e.$length;
    };
    $pkg.EqualFold = BN;
    BO = function(d, e) {
      var d, e, f, g, h, i, j, k, l, m, n, o, p, q, r;
      f = e.$length;
      if ((f === 0)) {
        return 0;
      } else if ((f === 1)) {
        return F(d, (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]));
      } else if ((f === d.$length)) {
        if (G(e, d)) {
          return 0;
        }
        return -1;
      } else if (f > d.$length) {
        return -1;
      } else if (f <= D.MaxLen) {
        if (d.$length <= 0) {
          return D.Index(d, e);
        }
        g = (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]);
        h = 0;
        i = $subslice(d, 0, ((d.$length - f >> 0) + 1 >> 0));
        j = 0;
        while (true) {
          if (!(h < i.$length)) {
            break;
          }
          if (!((((h < 0 || h >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + h]) === g))) {
            k = F($subslice(i, h), g);
            if (k < 0) {
              return -1;
            }
            h = h + (k) >> 0;
          }
          if (G($subslice(d, h, (h + f >> 0)), e)) {
            return h;
          }
          j = j + (1) >> 0;
          h = h + (1) >> 0;
          if (j > D.Cutover(h)) {
            l = D.Index($subslice(d, h), e);
            if (l >= 0) {
              return l + h >> 0;
            }
            return -1;
          }
        }
        return -1;
      }
      m = (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]);
      n = 0;
      o = 0;
      p = $subslice(d, 0, ((d.$length - f >> 0) + 1 >> 0));
      while (true) {
        if (!(n < p.$length)) {
          break;
        }
        if (!((((n < 0 || n >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + n]) === m))) {
          q = F($subslice(p, n), m);
          if (q < 0) {
            break;
          }
          n = n + (q) >> 0;
        }
        if (G($subslice(d, n, (n + f >> 0)), e)) {
          return n;
        }
        n = n + (1) >> 0;
        o = o + (1) >> 0;
        if (o >= (4 + (n >> 4 >> 0) >> 0) && n < p.$length) {
          r = BP($subslice(d, n), e);
          if (r < 0) {
            return -1;
          }
          return n + r >> 0;
        }
      }
      return -1;
    };
    $pkg.Index = BO;
    BP = function(d, e) {
      var d, e, f, g, h, i, j, k, l, m;
      f = BQ(e);
      g = f[0];
      h = f[1];
      i = e.$length;
      j = 0;
      k = 0;
      while (true) {
        if (!(k < i)) {
          break;
        }
        j = ($imul(j, 16777619) >>> 0) + ((((k < 0 || k >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + k]) >>> 0)) >>> 0;
        k = k + (1) >> 0;
      }
      if ((j === g) && G($subslice(d, 0, i), e)) {
        return 0;
      }
      l = i;
      while (true) {
        if (!(l < d.$length)) {
          break;
        }
        j = $imul(j, (16777619)) >>> 0;
        j = j + (((((l < 0 || l >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + l]) >>> 0))) >>> 0;
        j = j - (($imul(h, (((m = l - i >> 0, ((m < 0 || m >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + m])) >>> 0))) >>> 0)) >>> 0;
        l = l + (1) >> 0;
        if ((j === g) && G($subslice(d, (l - i >> 0), l), e)) {
          return l - i >> 0;
        }
      }
      return -1;
    };
    BQ = function(d) {
      var d, e, f, g, h, i, j, k;
      e = 0;
      f = 0;
      while (true) {
        if (!(f < d.$length)) {
          break;
        }
        e = ($imul(e, 16777619) >>> 0) + ((((f < 0 || f >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + f]) >>> 0)) >>> 0;
        f = f + (1) >> 0;
      }
      g = 1;
      h = 16777619;
      i = g;
      j = h;
      k = d.$length;
      while (true) {
        if (!(k > 0)) {
          break;
        }
        if (!(((k & 1) === 0))) {
          i = $imul(i, (j)) >>> 0;
        }
        j = $imul(j, (j)) >>> 0;
        k = (k >> $min((1), 31)) >> 0;
      }
      return [e, i];
    };
    BR.ptr.prototype.Len = function() {
      var d, e, f, g, h, i;
      d = this;
      if ((e = d.i, f = (new $Int64(0, d.s.$length)), (e.$high > f.$high || (e.$high === f.$high && e.$low >= f.$low)))) {
        return 0;
      }
      return (((g = (h = (new $Int64(0, d.s.$length)), i = d.i, new $Int64(h.$high - i.$high, h.$low - i.$low)), g.$low + ((g.$high >> 31) * 4294967296)) >> 0));
    };
    BR.prototype.Len = function() {
      return this.$val.Len();
    };
    BR.ptr.prototype.Size = function() {
      var d;
      d = this;
      return (new $Int64(0, d.s.$length));
    };
    BR.prototype.Size = function() {
      return this.$val.Size();
    };
    BR.ptr.prototype.Read = function(d) {
      var d, e, f, g, h, i, j, k, l, m;
      e = 0;
      f = $ifaceNil;
      g = this;
      if ((h = g.i, i = (new $Int64(0, g.s.$length)), (h.$high > i.$high || (h.$high === i.$high && h.$low >= i.$low)))) {
        j = 0;
        k = B.EOF;
        e = j;
        f = k;
        return [e, f];
      }
      g.prevRune = -1;
      e = $copySlice(d, $subslice(g.s, $flatten64(g.i)));
      g.i = (l = g.i, m = (new $Int64(0, e)), new $Int64(l.$high + m.$high, l.$low + m.$low));
      return [e, f];
    };
    BR.prototype.Read = function(d) {
      return this.$val.Read(d);
    };
    BR.ptr.prototype.ReadAt = function(d, e) {
      var d, e, f, g, h, i, j, k, l, m;
      f = 0;
      g = $ifaceNil;
      h = this;
      if ((e.$high < 0 || (e.$high === 0 && e.$low < 0))) {
        i = 0;
        j = A.New("bytes.Reader.ReadAt: negative offset");
        f = i;
        g = j;
        return [f, g];
      }
      if ((k = (new $Int64(0, h.s.$length)), (e.$high > k.$high || (e.$high === k.$high && e.$low >= k.$low)))) {
        l = 0;
        m = B.EOF;
        f = l;
        g = m;
        return [f, g];
      }
      f = $copySlice(d, $subslice(h.s, $flatten64(e)));
      if (f < d.$length) {
        g = B.EOF;
      }
      return [f, g];
    };
    BR.prototype.ReadAt = function(d, e) {
      return this.$val.ReadAt(d, e);
    };
    BR.ptr.prototype.ReadByte = function() {
      var d, e, f, g, h, i, j, k;
      d = this;
      d.prevRune = -1;
      if ((e = d.i, f = (new $Int64(0, d.s.$length)), (e.$high > f.$high || (e.$high === f.$high && e.$low >= f.$low)))) {
        return [0, B.EOF];
      }
      i = (g = d.s, h = d.i, (($flatten64(h) < 0 || $flatten64(h) >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + $flatten64(h)]));
      d.i = (j = d.i, k = new $Int64(0, 1), new $Int64(j.$high + k.$high, j.$low + k.$low));
      return [i, $ifaceNil];
    };
    BR.prototype.ReadByte = function() {
      return this.$val.ReadByte();
    };
    BR.ptr.prototype.UnreadByte = function() {
      var d, e, f, g;
      d = this;
      d.prevRune = -1;
      if ((e = d.i, (e.$high < 0 || (e.$high === 0 && e.$low <= 0)))) {
        return A.New("bytes.Reader.UnreadByte: at beginning of slice");
      }
      d.i = (f = d.i, g = new $Int64(0, 1), new $Int64(f.$high - g.$high, f.$low - g.$low));
      return $ifaceNil;
    };
    BR.prototype.UnreadByte = function() {
      return this.$val.UnreadByte();
    };
    BR.ptr.prototype.ReadRune = function() {
      var d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x;
      d = 0;
      e = 0;
      f = $ifaceNil;
      g = this;
      if ((h = g.i, i = (new $Int64(0, g.s.$length)), (h.$high > i.$high || (h.$high === i.$high && h.$low >= i.$low)))) {
        g.prevRune = -1;
        j = 0;
        k = 0;
        l = B.EOF;
        d = j;
        e = k;
        f = l;
        return [d, e, f];
      }
      g.prevRune = (((m = g.i, m.$low + ((m.$high >> 31) * 4294967296)) >> 0));
      p = (n = g.s, o = g.i, (($flatten64(o) < 0 || $flatten64(o) >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + $flatten64(o)]));
      if (p < 128) {
        g.i = (q = g.i, r = new $Int64(0, 1), new $Int64(q.$high + r.$high, q.$low + r.$low));
        s = ((p >> 0));
        t = 1;
        u = $ifaceNil;
        d = s;
        e = t;
        f = u;
        return [d, e, f];
      }
      v = C.DecodeRune($subslice(g.s, $flatten64(g.i)));
      d = v[0];
      e = v[1];
      g.i = (w = g.i, x = (new $Int64(0, e)), new $Int64(w.$high + x.$high, w.$low + x.$low));
      return [d, e, f];
    };
    BR.prototype.ReadRune = function() {
      return this.$val.ReadRune();
    };
    BR.ptr.prototype.UnreadRune = function() {
      var d;
      d = this;
      if (d.prevRune < 0) {
        return A.New("bytes.Reader.UnreadRune: previous operation was not ReadRune");
      }
      d.i = (new $Int64(0, d.prevRune));
      d.prevRune = -1;
      return $ifaceNil;
    };
    BR.prototype.UnreadRune = function() {
      return this.$val.UnreadRune();
    };
    BR.ptr.prototype.Seek = function(d, e) {
      var d, e, f, g, h, i, j;
      f = this;
      f.prevRune = -1;
      g = new $Int64(0, 0);
      h = e;
      if (h === (0)) {
        g = d;
      } else if (h === (1)) {
        g = (i = f.i, new $Int64(i.$high + d.$high, i.$low + d.$low));
      } else if (h === (2)) {
        g = (j = (new $Int64(0, f.s.$length)), new $Int64(j.$high + d.$high, j.$low + d.$low));
      } else {
        return [new $Int64(0, 0), A.New("bytes.Reader.Seek: invalid whence")];
      }
      if ((g.$high < 0 || (g.$high === 0 && g.$low < 0))) {
        return [new $Int64(0, 0), A.New("bytes.Reader.Seek: negative position")];
      }
      f.i = g;
      return [g, $ifaceNil];
    };
    BR.prototype.Seek = function(d, e) {
      return this.$val.Seek(d, e);
    };
    BR.ptr.prototype.WriteTo = function(d) {
      var d, e, f, g, h, i, j, k, l, m, n, o, p, q, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = new $Int64(0, 0);
            f = $ifaceNil;
            g = this;
            g.prevRune = -1;
            if ((h = g.i, i = (new $Int64(0, g.s.$length)), (h.$high > i.$high || (h.$high === i.$high && h.$low >= i.$low)))) {
              j = new $Int64(0, 0);
              k = $ifaceNil;
              e = j;
              f = k;
              $s = -1;
              return [e, f];
            }
            l = $subslice(g.s, $flatten64(g.i));
            n = d.Write(l);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            m = n;
            o = m[0];
            f = m[1];
            if (o > l.$length) {
              $panic(new $String("bytes.Reader.WriteTo: invalid Write count"));
            }
            g.i = (p = g.i, q = (new $Int64(0, o)), new $Int64(p.$high + q.$high, p.$low + q.$low));
            e = (new $Int64(0, o));
            if (!((o === l.$length)) && $interfaceIsEqual(f, $ifaceNil)) {
              f = B.ErrShortWrite;
            }
            $s = -1;
            return [e, f];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BR.ptr.prototype.WriteTo
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BR.prototype.WriteTo = function(d) {
      return this.$val.WriteTo(d);
    };
    BR.ptr.prototype.Reset = function(d) {
      var d, e;
      e = this;
      BR.copy(e, new BR.ptr(d, new $Int64(0, 0), -1));
    };
    BR.prototype.Reset = function(d) {
      return this.$val.Reset(d);
    };
    BS = function(d) {
      var d;
      return new BR.ptr(d, new $Int64(0, 0), -1);
    };
    $pkg.NewReader = BS;
    BT.methods = [{
      prop: "Bytes",
      name: "Bytes",
      pkg: "",
      typ: $funcType([], [BU], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "empty",
      name: "empty",
      pkg: "bytes",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Len",
      name: "Len",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Cap",
      name: "Cap",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Truncate",
      name: "Truncate",
      pkg: "",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "Reset",
      name: "Reset",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "tryGrowByReslice",
      name: "tryGrowByReslice",
      pkg: "bytes",
      typ: $funcType([$Int], [$Int, $Bool], false)
    }, {
      prop: "grow",
      name: "grow",
      pkg: "bytes",
      typ: $funcType([$Int], [$Int], false)
    }, {
      prop: "Grow",
      name: "Grow",
      pkg: "",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "Write",
      name: "Write",
      pkg: "",
      typ: $funcType([BU], [$Int, $error], false)
    }, {
      prop: "WriteString",
      name: "WriteString",
      pkg: "",
      typ: $funcType([$String], [$Int, $error], false)
    }, {
      prop: "ReadFrom",
      name: "ReadFrom",
      pkg: "",
      typ: $funcType([B.Reader], [$Int64, $error], false)
    }, {
      prop: "WriteTo",
      name: "WriteTo",
      pkg: "",
      typ: $funcType([B.Writer], [$Int64, $error], false)
    }, {
      prop: "WriteByte",
      name: "WriteByte",
      pkg: "",
      typ: $funcType([$Uint8], [$error], false)
    }, {
      prop: "WriteRune",
      name: "WriteRune",
      pkg: "",
      typ: $funcType([$Int32], [$Int, $error], false)
    }, {
      prop: "Read",
      name: "Read",
      pkg: "",
      typ: $funcType([BU], [$Int, $error], false)
    }, {
      prop: "Next",
      name: "Next",
      pkg: "",
      typ: $funcType([$Int], [BU], false)
    }, {
      prop: "ReadByte",
      name: "ReadByte",
      pkg: "",
      typ: $funcType([], [$Uint8, $error], false)
    }, {
      prop: "ReadRune",
      name: "ReadRune",
      pkg: "",
      typ: $funcType([], [$Int32, $Int, $error], false)
    }, {
      prop: "UnreadRune",
      name: "UnreadRune",
      pkg: "",
      typ: $funcType([], [$error], false)
    }, {
      prop: "UnreadByte",
      name: "UnreadByte",
      pkg: "",
      typ: $funcType([], [$error], false)
    }, {
      prop: "ReadBytes",
      name: "ReadBytes",
      pkg: "",
      typ: $funcType([$Uint8], [BU, $error], false)
    }, {
      prop: "readSlice",
      name: "readSlice",
      pkg: "bytes",
      typ: $funcType([$Uint8], [BU, $error], false)
    }, {
      prop: "ReadString",
      name: "ReadString",
      pkg: "",
      typ: $funcType([$Uint8], [$String, $error], false)
    }];
    BY.methods = [{
      prop: "contains",
      name: "contains",
      pkg: "bytes",
      typ: $funcType([$Uint8], [$Bool], false)
    }];
    CD.methods = [{
      prop: "Len",
      name: "Len",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Size",
      name: "Size",
      pkg: "",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "Read",
      name: "Read",
      pkg: "",
      typ: $funcType([BU], [$Int, $error], false)
    }, {
      prop: "ReadAt",
      name: "ReadAt",
      pkg: "",
      typ: $funcType([BU, $Int64], [$Int, $error], false)
    }, {
      prop: "ReadByte",
      name: "ReadByte",
      pkg: "",
      typ: $funcType([], [$Uint8, $error], false)
    }, {
      prop: "UnreadByte",
      name: "UnreadByte",
      pkg: "",
      typ: $funcType([], [$error], false)
    }, {
      prop: "ReadRune",
      name: "ReadRune",
      pkg: "",
      typ: $funcType([], [$Int32, $Int, $error], false)
    }, {
      prop: "UnreadRune",
      name: "UnreadRune",
      pkg: "",
      typ: $funcType([], [$error], false)
    }, {
      prop: "Seek",
      name: "Seek",
      pkg: "",
      typ: $funcType([$Int64, $Int], [$Int64, $error], false)
    }, {
      prop: "WriteTo",
      name: "WriteTo",
      pkg: "",
      typ: $funcType([B.Writer], [$Int64, $error], false)
    }, {
      prop: "Reset",
      name: "Reset",
      pkg: "",
      typ: $funcType([BU], [], false)
    }];
    I.init("bytes", [{
      prop: "buf",
      name: "buf",
      embedded: false,
      exported: false,
      typ: BU,
      tag: ""
    }, {
      prop: "off",
      name: "off",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "bootstrap",
      name: "bootstrap",
      embedded: false,
      exported: false,
      typ: BV,
      tag: ""
    }, {
      prop: "lastRead",
      name: "lastRead",
      embedded: false,
      exported: false,
      typ: J,
      tag: ""
    }]);
    BE.init($Uint32, 8);
    BR.init("bytes", [{
      prop: "s",
      name: "s",
      embedded: false,
      exported: false,
      typ: BU,
      tag: ""
    }, {
      prop: "i",
      name: "i",
      embedded: false,
      exported: false,
      typ: $Int64,
      tag: ""
    }, {
      prop: "prevRune",
      name: "prevRune",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $pkg.ErrTooLarge = A.New("bytes.Buffer: too large");
            K = A.New("bytes.Buffer: reader returned negative count from Read");
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["encoding"] = (function() {
    var $pkg = {},
      $init, C, D, E;
    C = $pkg.TextMarshaler = $newType(8, $kindInterface, "encoding.TextMarshaler", true, "encoding", true, null);
    D = $pkg.TextUnmarshaler = $newType(8, $kindInterface, "encoding.TextUnmarshaler", true, "encoding", true, null);
    E = $sliceType($Uint8);
    C.init([{
      prop: "MarshalText",
      name: "MarshalText",
      pkg: "",
      typ: $funcType([], [E, $error], false)
    }]);
    D.init([{
      prop: "UnmarshalText",
      name: "UnmarshalText",
      pkg: "",
      typ: $funcType([E], [$error], false)
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["math"] = (function() {
    var $pkg = {},
      $init, A, FS, FT, FU, FV, B, C, D, E, F, AX, FA, FB, FC, P, U, X, Y, AA, AB, AC, AD, AE, AH, AM, AP, AT, AY, AZ, BA, BB, BC, BD, BN, CF, ED, EP, FD;
    A = $packages["github.com/gopherjs/gopherjs/js"];
    FS = $arrayType($Uint32, 2);
    FT = $arrayType($Float32, 2);
    FU = $arrayType($Float64, 1);
    FV = $structType("math", [{
      prop: "uint32array",
      name: "uint32array",
      embedded: false,
      exported: false,
      typ: FS,
      tag: ""
    }, {
      prop: "float32array",
      name: "float32array",
      embedded: false,
      exported: false,
      typ: FT,
      tag: ""
    }, {
      prop: "float64array",
      name: "float64array",
      embedded: false,
      exported: false,
      typ: FU,
      tag: ""
    }]);
    P = function(av, aw) {
      var av, aw;
      if (!((av < 0 || (1 / av === E)) === (aw < 0 || (1 / aw === E)))) {
        return -av;
      }
      return av;
    };
    $pkg.Copysign = P;
    U = function(av) {
      var av;
      return $parseFloat(B.exp(av));
    };
    $pkg.Exp = U;
    X = function(av) {
      var av;
      return $parseFloat(B.floor(av));
    };
    $pkg.Floor = X;
    Y = function(av) {
      var av, aw, ax, ay;
      aw = 0;
      ax = 0;
      ay = CF(av);
      aw = ay[0];
      ax = ay[1];
      return [aw, ax];
    };
    $pkg.Frexp = Y;
    AA = function(av) {
      var av;
      if (av >= 0) {
        return D;
      } else {
        return E;
      }
    };
    $pkg.Inf = AA;
    AB = function(av, aw) {
      var av, aw;
      if (av === D) {
        return aw >= 0;
      }
      if (av === E) {
        return aw <= 0;
      }
      return false;
    };
    $pkg.IsInf = AB;
    AC = function(av) {
      var av, aw;
      aw = false;
      aw = !((av === av));
      return aw;
    };
    $pkg.IsNaN = AC;
    AD = function(av, aw) {
      var av, aw;
      if (-1024 < aw && aw < 1024) {
        if (av === 0) {
          return av;
        }
        return av * $parseFloat(B.pow(2, aw));
      }
      return ED(av, aw);
    };
    $pkg.Ldexp = AD;
    AE = function(av) {
      var av;
      if (!((av === av))) {
        return F;
      }
      return $parseFloat(B.log(av));
    };
    $pkg.Log = AE;
    AH = function(av) {
      var av;
      return EP(av);
    };
    $pkg.Log2 = AH;
    AM = function() {
      return F;
    };
    $pkg.NaN = AM;
    AP = function(av) {
      var av;
      return av < 0 || (1 / av === E);
    };
    $pkg.Signbit = AP;
    AT = function(av) {
      var av;
      return $parseFloat(B.sqrt(av));
    };
    $pkg.Sqrt = AT;
    AY = function() {
      var av;
      av = new($global.ArrayBuffer)(8);
      AX.uint32array = new($global.Uint32Array)(av);
      AX.float32array = new($global.Float32Array)(av);
      AX.float64array = new($global.Float64Array)(av);
    };
    AZ = function(av) {
      var av;
      AX.float32array[0] = av;
      return AX.uint32array[0];
    };
    $pkg.Float32bits = AZ;
    BA = function(av) {
      var av;
      AX.uint32array[0] = av;
      return AX.float32array[0];
    };
    $pkg.Float32frombits = BA;
    BB = function(av) {
      var av, aw, ax;
      AX.float64array[0] = av;
      return (aw = $shiftLeft64((new $Uint64(0, AX.uint32array[1])), 32), ax = (new $Uint64(0, AX.uint32array[0])), new $Uint64(aw.$high + ax.$high, aw.$low + ax.$low));
    };
    $pkg.Float64bits = BB;
    BC = function(av) {
      var av;
      AX.uint32array[0] = ((av.$low >>> 0));
      AX.uint32array[1] = (($shiftRightUint64(av, 32).$low >>> 0));
      return AX.float64array[0];
    };
    $pkg.Float64frombits = BC;
    BD = function(av) {
      var av, aw;
      return BC((aw = BB(av), new $Uint64(aw.$high & ~2147483648, (aw.$low & ~0) >>> 0)));
    };
    $pkg.Abs = BD;
    BN = function(av) {
      var av, aw, ax, ay, az, ba, bb;
      aw = 0;
      ax = 0;
      if (BD(av) < 2.2250738585072014e-308) {
        ay = av * 4.503599627370496e+15;
        az = -52;
        aw = ay;
        ax = az;
        return [aw, ax];
      }
      ba = av;
      bb = 0;
      aw = ba;
      ax = bb;
      return [aw, ax];
    };
    CF = function(av) {
      var av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg;
      aw = 0;
      ax = 0;
      if ((av === 0)) {
        ay = av;
        az = 0;
        aw = ay;
        ax = az;
        return [aw, ax];
      } else if (AB(av, 0) || AC(av)) {
        ba = av;
        bb = 0;
        aw = ba;
        ax = bb;
        return [aw, ax];
      }
      bc = BN(av);
      av = bc[0];
      ax = bc[1];
      bd = BB(av);
      ax = ax + ((((((be = $shiftRightUint64(bd, 52), new $Uint64(be.$high & 0, (be.$low & 2047) >>> 0)).$low >> 0)) - 1023 >> 0) + 1 >> 0)) >> 0;
      bd = (bf = new $Uint64(2146435072, 0), new $Uint64(bd.$high & ~bf.$high, (bd.$low & ~bf.$low) >>> 0));
      bd = (bg = new $Uint64(1071644672, 0), new $Uint64(bd.$high | bg.$high, (bd.$low | bg.$low) >>> 0));
      aw = BC(bd);
      return [aw, ax];
    };
    ED = function(av, aw) {
      var av, aw, ax, ay, az, ba, bb, bc;
      if ((av === 0)) {
        return av;
      } else if (AB(av, 0) || AC(av)) {
        return av;
      }
      ax = BN(av);
      av = ax[0];
      ay = ax[1];
      aw = aw + (ay) >> 0;
      az = BB(av);
      aw = aw + ((((($shiftRightUint64(az, 52).$low >> 0)) & 2047) - 1023 >> 0)) >> 0;
      if (aw < -1075) {
        return P(0, av);
      }
      if (aw > 1023) {
        if (av < 0) {
          return AA(-1);
        }
        return AA(1);
      }
      ba = 1;
      if (aw < -1022) {
        aw = aw + (53) >> 0;
        ba = 1.1102230246251565e-16;
      }
      az = (bb = new $Uint64(2146435072, 0), new $Uint64(az.$high & ~bb.$high, (az.$low & ~bb.$low) >>> 0));
      az = (bc = $shiftLeft64((new $Uint64(0, (aw + 1023 >> 0))), 52), new $Uint64(az.$high | bc.$high, (az.$low | bc.$low) >>> 0));
      return ba * BC(az);
    };
    EP = function(av) {
      var av, aw, ax, ay;
      aw = Y(av);
      ax = aw[0];
      ay = aw[1];
      if (ax === 0.5) {
        return ((ay - 1 >> 0));
      }
      return AE(ax) * 1.4426950408889634 + (ay);
    };
    FD = function(av) {
      var av, aw, ax, ay, az, ba, bb, bc, bd;
      if (0 <= av && av <= 308) {
        return (aw = (ax = ((av >>> 0)) / 32, (ax === ax && ax !== 1 / 0 && ax !== -1 / 0) ? ax >>> 0 : $throwRuntimeError("integer divide by zero")), ((aw < 0 || aw >= FB.length) ? ($throwRuntimeError("index out of range"), undefined) : FB[aw])) * (ay = (az = ((av >>> 0)) % 32, az === az ? az : $throwRuntimeError("integer divide by zero")), ((ay < 0 || ay >= FA.length) ? ($throwRuntimeError("index out of range"), undefined) : FA[ay]));
      }
      if (-323 <= av && av <= 0) {
        return (ba = (bb = ((-av >>> 0)) / 32, (bb === bb && bb !== 1 / 0 && bb !== -1 / 0) ? bb >>> 0 : $throwRuntimeError("integer divide by zero")), ((ba < 0 || ba >= FC.length) ? ($throwRuntimeError("index out of range"), undefined) : FC[ba])) / (bc = (bd = ((-av >>> 0)) % 32, bd === bd ? bd : $throwRuntimeError("integer divide by zero")), ((bc < 0 || bc >= FA.length) ? ($throwRuntimeError("index out of range"), undefined) : FA[bc]));
      }
      if (av > 0) {
        return AA(1);
      }
      return 0;
    };
    $pkg.Pow10 = FD;
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            AX = new FV.ptr(FS.zero(), FT.zero(), FU.zero());
            B = $global.Math;
            C = 0;
            D = 1 / C;
            E = -1 / C;
            F = 0 / C;
            FA = $toNativeArray($kindFloat64, [1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22, 1e+23, 1e+24, 1e+25, 1e+26, 1e+27, 1e+28, 1e+29, 1e+30, 1e+31]);
            FB = $toNativeArray($kindFloat64, [1, 1e+32, 1e+64, 1e+96, 1e+128, 1e+160, 1e+192, 1e+224, 1e+256, 1e+288]);
            FC = $toNativeArray($kindFloat64, [1, 1e-32, 1e-64, 1e-96, 1e-128, 1e-160, 1e-192, 1e-224, 1e-256, 1e-288, 1e-320]);
            AY();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["math/bits"] = (function() {
    var $pkg = {},
      $init, F, G, AN, A, E, H, K, L, AF, AI, AJ;
    A = function(a) {
      var a;
      return 32 - AF(a) >> 0;
    };
    $pkg.LeadingZeros = A;
    E = function(a) {
      var a;
      return 64 - AJ(a) >> 0;
    };
    $pkg.LeadingZeros64 = E;
    H = function(a) {
      var a;
      if (true) {
        return K(((a >>> 0)));
      }
      return L((new $Uint64(0, a)));
    };
    $pkg.TrailingZeros = H;
    K = function(a) {
      var a, b;
      if (a === 0) {
        return 32;
      }
      return (((b = ($imul((((a & (-a >>> 0)) >>> 0)), 125613361) >>> 0) >>> 27 >>> 0, ((b < 0 || b >= F.length) ? ($throwRuntimeError("index out of range"), undefined) : F[b])) >> 0));
    };
    $pkg.TrailingZeros32 = K;
    L = function(a) {
      var a, b, c;
      if ((a.$high === 0 && a.$low === 0)) {
        return 64;
      }
      return (((b = $shiftRightUint64($mul64(((c = new $Uint64(-a.$high, -a.$low), new $Uint64(a.$high & c.$high, (a.$low & c.$low) >>> 0))), new $Uint64(66559345, 3033172745)), 58), (($flatten64(b) < 0 || $flatten64(b) >= G.length) ? ($throwRuntimeError("index out of range"), undefined) : G[$flatten64(b)])) >> 0));
    };
    $pkg.TrailingZeros64 = L;
    AF = function(a) {
      var a;
      if (true) {
        return AI(((a >>> 0)));
      }
      return AJ((new $Uint64(0, a)));
    };
    $pkg.Len = AF;
    AI = function(a) {
      var a, b, c, d;
      b = 0;
      if (a >= 65536) {
        a = (c = (16), c < 32 ? (a >>> c) : 0) >>> 0;
        b = 16;
      }
      if (a >= 256) {
        a = (d = (8), d < 32 ? (a >>> d) : 0) >>> 0;
        b = b + (8) >> 0;
      }
      b = b + ((((a < 0 || a >= AN.length) ? ($throwRuntimeError("index out of range"), undefined) : AN[a]) >> 0)) >> 0;
      return b;
    };
    $pkg.Len32 = AI;
    AJ = function(a) {
      var a, b;
      b = 0;
      if ((a.$high > 1 || (a.$high === 1 && a.$low >= 0))) {
        a = $shiftRightUint64(a, (32));
        b = 32;
      }
      if ((a.$high > 0 || (a.$high === 0 && a.$low >= 65536))) {
        a = $shiftRightUint64(a, (16));
        b = b + (16) >> 0;
      }
      if ((a.$high > 0 || (a.$high === 0 && a.$low >= 256))) {
        a = $shiftRightUint64(a, (8));
        b = b + (8) >> 0;
      }
      b = b + (((($flatten64(a) < 0 || $flatten64(a) >= AN.length) ? ($throwRuntimeError("index out of range"), undefined) : AN[$flatten64(a)]) >> 0)) >> 0;
      return b;
    };
    $pkg.Len64 = AJ;
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            F = $toNativeArray($kindUint8, [0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9]);
            G = $toNativeArray($kindUint8, [0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4, 62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5, 63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11, 54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6]);
            AN = $toNativeArray($kindUint8, [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["strconv"] = (function() {
    var $pkg = {},
      $init, B, A, C, D, T, AB, AF, AK, AR, BA, CW, CX, CY, CZ, DA, DB, DC, DD, DE, DF, DG, DH, DI, DJ, DK, DL, DM, H, L, M, N, AG, AL, AM, AN, AS, CU, AT, CV, BG, BH, BI, BJ, BK, I, J, K, O, P, Q, R, S, U, V, W, X, Y, Z, AC, AD, AE, AH, AI, AJ, AO, AP, AQ, AU, AV, AW, AX, AY, AZ, BB, BC, BD, BE, BF, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BV, BW, BX, BY, BZ, CA, CB, CF, CH, CK, CL, CM, CN, CO, CP, CQ, CR, CT;
    B = $packages["errors"];
    A = $packages["math"];
    C = $packages["math/bits"];
    D = $packages["unicode/utf8"];
    T = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", true, "strconv", true, function(Func_, Num_, Err_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Func = "";
        this.Num = "";
        this.Err = $ifaceNil;
        return;
      }
      this.Func = Func_;
      this.Num = Num_;
      this.Err = Err_;
    });
    AB = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", true, "strconv", false, function(d_, nd_, dp_, neg_, trunc_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.d = DC.zero();
        this.nd = 0;
        this.dp = 0;
        this.neg = false;
        this.trunc = false;
        return;
      }
      this.d = d_;
      this.nd = nd_;
      this.dp = dp_;
      this.neg = neg_;
      this.trunc = trunc_;
    });
    AF = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", true, "strconv", false, function(delta_, cutoff_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.delta = 0;
        this.cutoff = "";
        return;
      }
      this.delta = delta_;
      this.cutoff = cutoff_;
    });
    AK = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", true, "strconv", false, function(mant_, exp_, neg_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.mant = new $Uint64(0, 0);
        this.exp = 0;
        this.neg = false;
        return;
      }
      this.mant = mant_;
      this.exp = exp_;
      this.neg = neg_;
    });
    AR = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", true, "strconv", false, function(mantbits_, expbits_, bias_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.mantbits = 0;
        this.expbits = 0;
        this.bias = 0;
        return;
      }
      this.mantbits = mantbits_;
      this.expbits = expbits_;
      this.bias = bias_;
    });
    BA = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", true, "strconv", false, function(d_, nd_, dp_, neg_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.d = DD.nil;
        this.nd = 0;
        this.dp = 0;
        this.neg = false;
        return;
      }
      this.d = d_;
      this.nd = nd_;
      this.dp = dp_;
      this.neg = neg_;
    });
    CW = $sliceType($Int);
    CX = $sliceType($Float64);
    CY = $sliceType($Float32);
    CZ = $sliceType(AF);
    DA = $sliceType($Uint16);
    DB = $sliceType($Uint32);
    DC = $arrayType($Uint8, 800);
    DD = $sliceType($Uint8);
    DE = $ptrType(T);
    DF = $arrayType($Uint8, 24);
    DG = $arrayType($Uint8, 32);
    DH = $ptrType(AR);
    DI = $arrayType($Uint8, 65);
    DJ = $arrayType($Uint8, 4);
    DK = $ptrType(AB);
    DL = $ptrType(BA);
    DM = $ptrType(AK);
    I = function(a, b) {
      var a, b, c, d, e;
      if (!((a.length === b.length))) {
        return false;
      }
      c = 0;
      while (true) {
        if (!(c < a.length)) {
          break;
        }
        d = a.charCodeAt(c);
        if (65 <= d && d <= 90) {
          d = d + (32) << 24 >>> 24;
        }
        e = b.charCodeAt(c);
        if (65 <= e && e <= 90) {
          e = e + (32) << 24 >>> 24;
        }
        if (!((d === e))) {
          return false;
        }
        c = c + (1) >> 0;
      }
      return true;
    };
    J = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l;
      b = 0;
      c = false;
      if (a.length === 0) {
        return [b, c];
      }
      d = a.charCodeAt(0);
      if (d === (43)) {
        if (I(a, "+inf") || I(a, "+infinity")) {
          e = A.Inf(1);
          f = true;
          b = e;
          c = f;
          return [b, c];
        }
      } else if (d === (45)) {
        if (I(a, "-inf") || I(a, "-infinity")) {
          g = A.Inf(-1);
          h = true;
          b = g;
          c = h;
          return [b, c];
        }
      } else if ((d === (110)) || (d === (78))) {
        if (I(a, "nan")) {
          i = A.NaN();
          j = true;
          b = i;
          c = j;
          return [b, c];
        }
      } else if ((d === (105)) || (d === (73))) {
        if (I(a, "inf") || I(a, "infinity")) {
          k = A.Inf(1);
          l = true;
          b = k;
          c = l;
          return [b, c];
        }
      } else {
        return [b, c];
      }
      return [b, c];
    };
    AB.ptr.prototype.set = function(a) {
      var a, b, c, d, e, f, g, h, i, j;
      b = false;
      c = this;
      d = 0;
      c.neg = false;
      c.trunc = false;
      if (d >= a.length) {
        return b;
      }
      if ((a.charCodeAt(d) === 43)) {
        d = d + (1) >> 0;
      } else if ((a.charCodeAt(d) === 45)) {
        c.neg = true;
        d = d + (1) >> 0;
      }
      e = false;
      f = false;
      while (true) {
        if (!(d < a.length)) {
          break;
        }
        if ((a.charCodeAt(d) === 46)) {
          if (e) {
            return b;
          }
          e = true;
          c.dp = c.nd;
          d = d + (1) >> 0;
          continue;
        } else if (48 <= a.charCodeAt(d) && a.charCodeAt(d) <= 57) {
          f = true;
          if ((a.charCodeAt(d) === 48) && (c.nd === 0)) {
            c.dp = c.dp - (1) >> 0;
            d = d + (1) >> 0;
            continue;
          }
          if (c.nd < 800) {
            (g = c.d, h = c.nd, ((h < 0 || h >= g.length) ? ($throwRuntimeError("index out of range"), undefined) : g[h] = a.charCodeAt(d)));
            c.nd = c.nd + (1) >> 0;
          } else if (!((a.charCodeAt(d) === 48))) {
            c.trunc = true;
          }
          d = d + (1) >> 0;
          continue;
        }
        break;
      }
      if (!f) {
        return b;
      }
      if (!e) {
        c.dp = c.nd;
      }
      if (d < a.length && ((a.charCodeAt(d) === 101) || (a.charCodeAt(d) === 69))) {
        d = d + (1) >> 0;
        if (d >= a.length) {
          return b;
        }
        i = 1;
        if (a.charCodeAt(d) === 43) {
          d = d + (1) >> 0;
        } else if (a.charCodeAt(d) === 45) {
          d = d + (1) >> 0;
          i = -1;
        }
        if (d >= a.length || a.charCodeAt(d) < 48 || a.charCodeAt(d) > 57) {
          return b;
        }
        j = 0;
        while (true) {
          if (!(d < a.length && 48 <= a.charCodeAt(d) && a.charCodeAt(d) <= 57)) {
            break;
          }
          if (j < 10000) {
            j = (($imul(j, 10)) + ((a.charCodeAt(d) >> 0)) >> 0) - 48 >> 0;
          }
          d = d + (1) >> 0;
        }
        c.dp = c.dp + (($imul(j, i))) >> 0;
      }
      if (!((d === a.length))) {
        return b;
      }
      b = true;
      return b;
    };
    AB.prototype.set = function(a) {
      return this.$val.set(a);
    };
    K = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q;
      b = new $Uint64(0, 0);
      c = 0;
      d = false;
      e = false;
      f = false;
      g = 0;
      if (g >= a.length) {
        return [b, c, d, e, f];
      }
      if ((a.charCodeAt(g) === 43)) {
        g = g + (1) >> 0;
      } else if ((a.charCodeAt(g) === 45)) {
        d = true;
        g = g + (1) >> 0;
      }
      h = false;
      i = false;
      j = 0;
      k = 0;
      l = 0;
      while (true) {
        if (!(g < a.length)) {
          break;
        }
        m = a.charCodeAt(g);
        n = true;
        if (n === ((m === 46))) {
          if (h) {
            return [b, c, d, e, f];
          }
          h = true;
          l = j;
          g = g + (1) >> 0;
          continue;
        } else if (n === (48 <= m && m <= 57)) {
          i = true;
          if ((m === 48) && (j === 0)) {
            l = l - (1) >> 0;
            g = g + (1) >> 0;
            continue;
          }
          j = j + (1) >> 0;
          if (k < 19) {
            b = $mul64(b, (new $Uint64(0, 10)));
            b = (o = (new $Uint64(0, (m - 48 << 24 >>> 24))), new $Uint64(b.$high + o.$high, b.$low + o.$low));
            k = k + (1) >> 0;
          } else if (!((a.charCodeAt(g) === 48))) {
            e = true;
          }
          g = g + (1) >> 0;
          continue;
        }
        break;
      }
      if (!i) {
        return [b, c, d, e, f];
      }
      if (!h) {
        l = j;
      }
      if (g < a.length && ((a.charCodeAt(g) === 101) || (a.charCodeAt(g) === 69))) {
        g = g + (1) >> 0;
        if (g >= a.length) {
          return [b, c, d, e, f];
        }
        p = 1;
        if (a.charCodeAt(g) === 43) {
          g = g + (1) >> 0;
        } else if (a.charCodeAt(g) === 45) {
          g = g + (1) >> 0;
          p = -1;
        }
        if (g >= a.length || a.charCodeAt(g) < 48 || a.charCodeAt(g) > 57) {
          return [b, c, d, e, f];
        }
        q = 0;
        while (true) {
          if (!(g < a.length && 48 <= a.charCodeAt(g) && a.charCodeAt(g) <= 57)) {
            break;
          }
          if (q < 10000) {
            q = (($imul(q, 10)) + ((a.charCodeAt(g) >> 0)) >> 0) - 48 >> 0;
          }
          g = g + (1) >> 0;
        }
        l = l + (($imul(q, p))) >> 0;
      }
      if (!((g === a.length))) {
        return [b, c, d, e, f];
      }
      if (!((b.$high === 0 && b.$low === 0))) {
        c = l - k >> 0;
      }
      f = true;
      return [b, c, d, e, f];
    };
    AB.ptr.prototype.floatBits = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, $s;
      $s = 0;
      s: while (true) {
        switch ($s) {
          case 0:
            b = new $Uint64(0, 0);
            c = false;
            d = this;
            e = 0;
            f = new $Uint64(0, 0);
            if (d.nd === 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            f = new $Uint64(0, 0);
            e = a.bias;
            $s = 3;
            continue;
          case 2:
            if (d.dp > 310) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            $s = 6;
            continue;
          case 5:
            if (d.dp < -330) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            f = new $Uint64(0, 0);
            e = a.bias;
            $s = 3;
            continue;
          case 8:
            e = 0;
            while (true) {
              if (!(d.dp > 0)) {
                break;
              }
              g = 0;
              if (d.dp >= L.$length) {
                g = 27;
              } else {
                g = (h = d.dp, ((h < 0 || h >= L.$length) ? ($throwRuntimeError("index out of range"), undefined) : L.$array[L.$offset + h]));
              }
              d.Shift(-g);
              e = e + (g) >> 0;
            }
            while (true) {
              if (!(d.dp < 0 || (d.dp === 0) && d.d[0] < 53)) {
                break;
              }
              i = 0;
              if (-d.dp >= L.$length) {
                i = 27;
              } else {
                i = (j = -d.dp, ((j < 0 || j >= L.$length) ? ($throwRuntimeError("index out of range"), undefined) : L.$array[L.$offset + j]));
              }
              d.Shift(i);
              e = e - (i) >> 0;
            }
            e = e - (1) >> 0;
            if (e < (a.bias + 1 >> 0)) {
              k = (a.bias + 1 >> 0) - e >> 0;
              d.Shift(-k);
              e = e + (k) >> 0;
            }
            if ((e - a.bias >> 0) >= (((l = a.expbits, l < 32 ? (1 << l) : 0) >> 0) - 1 >> 0)) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            $s = 6;
            continue;
          case 10:
            d.Shift((((1 + a.mantbits >>> 0) >> 0)));
            f = d.RoundedInteger();
            if ((m = $shiftLeft64(new $Uint64(0, 2), a.mantbits), (f.$high === m.$high && f.$low === m.$low))) {
              $s = 11;
              continue;
            }
            $s = 12;
            continue;
          case 11:
            f = $shiftRightUint64(f, (1));
            e = e + (1) >> 0;
            if ((e - a.bias >> 0) >= (((n = a.expbits, n < 32 ? (1 << n) : 0) >> 0) - 1 >> 0)) {
              $s = 13;
              continue;
            }
            $s = 14;
            continue;
          case 13:
            $s = 6;
            continue;
          case 14:
          case 12:
            if ((o = (p = $shiftLeft64(new $Uint64(0, 1), a.mantbits), new $Uint64(f.$high & p.$high, (f.$low & p.$low) >>> 0)), (o.$high === 0 && o.$low === 0))) {
              e = a.bias;
            }
            $s = 3;
            continue;
          case 6:
            f = new $Uint64(0, 0);
            e = (((q = a.expbits, q < 32 ? (1 << q) : 0) >> 0) - 1 >> 0) + a.bias >> 0;
            c = true;
          case 3:
            t = (r = (s = $shiftLeft64(new $Uint64(0, 1), a.mantbits), new $Uint64(s.$high - 0, s.$low - 1)), new $Uint64(f.$high & r.$high, (f.$low & r.$low) >>> 0));
            t = (u = $shiftLeft64((new $Uint64(0, (((e - a.bias >> 0)) & ((((v = a.expbits, v < 32 ? (1 << v) : 0) >> 0) - 1 >> 0))))), a.mantbits), new $Uint64(t.$high | u.$high, (t.$low | u.$low) >>> 0));
            if (d.neg) {
              t = (w = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), a.mantbits), a.expbits), new $Uint64(t.$high | w.$high, (t.$low | w.$low) >>> 0));
            }
            x = t;
            y = c;
            b = x;
            c = y;
            $s = -1;
            return [b, c];
        }
        return;
      }
    };
    AB.prototype.floatBits = function(a) {
      return this.$val.floatBits(a);
    };
    O = function(a, b, c) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n;
      d = 0;
      e = false;
      if (!((f = $shiftRightUint64(a, AT.mantbits), (f.$high === 0 && f.$low === 0)))) {
        return [d, e];
      }
      d = ($flatten64(a));
      if (c) {
        d = -d;
      }
      if ((b === 0)) {
        g = d;
        h = true;
        d = g;
        e = h;
        return [d, e];
      } else if (b > 0 && b <= 37) {
        if (b > 22) {
          d = d * ((i = b - 22 >> 0, ((i < 0 || i >= M.$length) ? ($throwRuntimeError("index out of range"), undefined) : M.$array[M.$offset + i])));
          b = 22;
        }
        if (d > 1e+15 || d < -1e+15) {
          return [d, e];
        }
        j = d * ((b < 0 || b >= M.$length) ? ($throwRuntimeError("index out of range"), undefined) : M.$array[M.$offset + b]);
        k = true;
        d = j;
        e = k;
        return [d, e];
      } else if (b < 0 && b >= -22) {
        l = d / (m = -b, ((m < 0 || m >= M.$length) ? ($throwRuntimeError("index out of range"), undefined) : M.$array[M.$offset + m]));
        n = true;
        d = l;
        e = n;
        return [d, e];
      }
      return [d, e];
    };
    P = function(a, b, c) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n;
      d = 0;
      e = false;
      if (!((f = $shiftRightUint64(a, AS.mantbits), (f.$high === 0 && f.$low === 0)))) {
        return [d, e];
      }
      d = ($flatten64(a));
      if (c) {
        d = -d;
      }
      if ((b === 0)) {
        g = d;
        h = true;
        d = g;
        e = h;
        return [d, e];
      } else if (b > 0 && b <= 17) {
        if (b > 10) {
          d = $fround(d * ((i = b - 10 >> 0, ((i < 0 || i >= N.$length) ? ($throwRuntimeError("index out of range"), undefined) : N.$array[N.$offset + i]))));
          b = 10;
        }
        if (d > 1e+07 || d < -1e+07) {
          return [d, e];
        }
        j = $fround(d * ((b < 0 || b >= N.$length) ? ($throwRuntimeError("index out of range"), undefined) : N.$array[N.$offset + b]));
        k = true;
        d = j;
        e = k;
        return [d, e];
      } else if (b < 0 && b >= -10) {
        l = $fround(d / (m = -b, ((m < 0 || m >= N.$length) ? ($throwRuntimeError("index out of range"), undefined) : N.$array[N.$offset + m])));
        n = true;
        d = l;
        e = n;
        return [d, e];
      }
      return [d, e];
    };
    Q = function(a) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      b = 0;
      c = $ifaceNil;
      d = J(a);
      e = d[0];
      f = d[1];
      if (f) {
        g = ($fround(e));
        h = $ifaceNil;
        b = g;
        c = h;
        return [b, c];
      }
      if (H) {
        i = K(a);
        j = i[0];
        k = i[1];
        l = i[2];
        m = i[3];
        n = i[4];
        if (n) {
          if (!m) {
            o = P(j, k, l);
            p = o[0];
            q = o[1];
            if (q) {
              r = p;
              s = $ifaceNil;
              b = r;
              c = s;
              return [b, c];
            }
          }
          t = new AK.ptr(new $Uint64(0, 0), 0, false);
          u = t.AssignDecimal(j, k, l, m, AS);
          if (u) {
            v = t.floatBits(AS);
            w = v[0];
            x = v[1];
            b = A.Float32frombits(((w.$low >>> 0)));
            if (x) {
              c = V("ParseFloat", a);
            }
            y = b;
            z = c;
            b = y;
            c = z;
            return [b, c];
          }
        }
      }
      aa = new AB.ptr(DC.zero(), 0, 0, false, false);
      if (!aa.set(a)) {
        ab = 0;
        ac = U("ParseFloat", a);
        b = ab;
        c = ac;
        return [b, c];
      }
      ad = aa.floatBits(AS);
      ae = ad[0];
      af = ad[1];
      b = A.Float32frombits(((ae.$low >>> 0)));
      if (af) {
        c = V("ParseFloat", a);
      }
      ag = b;
      ah = c;
      b = ag;
      c = ah;
      return [b, c];
    };
    R = function(a) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      b = 0;
      c = $ifaceNil;
      d = J(a);
      e = d[0];
      f = d[1];
      if (f) {
        g = e;
        h = $ifaceNil;
        b = g;
        c = h;
        return [b, c];
      }
      if (H) {
        i = K(a);
        j = i[0];
        k = i[1];
        l = i[2];
        m = i[3];
        n = i[4];
        if (n) {
          if (!m) {
            o = O(j, k, l);
            p = o[0];
            q = o[1];
            if (q) {
              r = p;
              s = $ifaceNil;
              b = r;
              c = s;
              return [b, c];
            }
          }
          t = new AK.ptr(new $Uint64(0, 0), 0, false);
          u = t.AssignDecimal(j, k, l, m, AT);
          if (u) {
            v = t.floatBits(AT);
            w = v[0];
            x = v[1];
            b = A.Float64frombits(w);
            if (x) {
              c = V("ParseFloat", a);
            }
            y = b;
            z = c;
            b = y;
            c = z;
            return [b, c];
          }
        }
      }
      aa = new AB.ptr(DC.zero(), 0, 0, false, false);
      if (!aa.set(a)) {
        ab = 0;
        ac = U("ParseFloat", a);
        b = ab;
        c = ac;
        return [b, c];
      }
      ad = aa.floatBits(AT);
      ae = ad[0];
      af = ad[1];
      b = A.Float64frombits(ae);
      if (af) {
        c = V("ParseFloat", a);
      }
      ag = b;
      ah = c;
      b = ag;
      c = ah;
      return [b, c];
    };
    S = function(a, b) {
      var a, b, c, d, e;
      if (b === 32) {
        c = Q(a);
        d = c[0];
        e = c[1];
        return [(d), e];
      }
      return R(a);
    };
    $pkg.ParseFloat = S;
    T.ptr.prototype.Error = function() {
      var a, b, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.Err.Error();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return "strconv." + a.Func + ": " + "parsing " + BY(a.Num) + ": " + b;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: T.ptr.prototype.Error
        };
      }
      $f.a = a;
      $f.b = b;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    T.prototype.Error = function() {
      return this.$val.Error();
    };
    U = function(a, b) {
      var a, b;
      return new T.ptr(a, b, $pkg.ErrSyntax);
    };
    V = function(a, b) {
      var a, b;
      return new T.ptr(a, b, $pkg.ErrRange);
    };
    W = function(a, b, c) {
      var a, b, c;
      return new T.ptr(a, b, B.New("invalid base " + BN(c)));
    };
    X = function(a, b, c) {
      var a, b, c;
      return new T.ptr(a, b, B.New("invalid bit size " + BN(c)));
    };
    Y = function(a, b, c) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p;
      if (a.length === 0) {
        return [new $Uint64(0, 0), U("ParseUint", a)];
      }
      d = a;
      if (2 <= b && b <= 36) {} else if ((b === 0)) {
        if ((a.charCodeAt(0) === 48) && a.length > 1 && ((a.charCodeAt(1) === 120) || (a.charCodeAt(1) === 88))) {
          if (a.length < 3) {
            return [new $Uint64(0, 0), U("ParseUint", d)];
          }
          b = 16;
          a = $substring(a, 2);
        } else if ((a.charCodeAt(0) === 48)) {
          b = 8;
          a = $substring(a, 1);
        } else {
          b = 10;
        }
      } else {
        return [new $Uint64(0, 0), W("ParseUint", d, b)];
      }
      if (c === 0) {
        c = 32;
      } else if (c < 0 || c > 64) {
        return [new $Uint64(0, 0), X("ParseUint", d, c)];
      }
      e = new $Uint64(0, 0);
      f = b;
      if (f === (10)) {
        e = new $Uint64(429496729, 2576980378);
      } else if (f === (16)) {
        e = new $Uint64(268435456, 0);
      } else {
        e = (g = $div64(new $Uint64(4294967295, 4294967295), (new $Uint64(0, b)), false), new $Uint64(g.$high + 0, g.$low + 1));
      }
      i = (h = $shiftLeft64(new $Uint64(0, 1), ((c >>> 0))), new $Uint64(h.$high - 0, h.$low - 1));
      j = new $Uint64(0, 0);
      k = (new DD($stringToBytes(a)));
      l = 0;
      while (true) {
        if (!(l < k.$length)) {
          break;
        }
        m = ((l < 0 || l >= k.$length) ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + l]);
        n = 0;
        if (48 <= m && m <= 57) {
          n = m - 48 << 24 >>> 24;
        } else if (97 <= m && m <= 122) {
          n = (m - 97 << 24 >>> 24) + 10 << 24 >>> 24;
        } else if (65 <= m && m <= 90) {
          n = (m - 65 << 24 >>> 24) + 10 << 24 >>> 24;
        } else {
          return [new $Uint64(0, 0), U("ParseUint", d)];
        }
        if (n >= ((b << 24 >>> 24))) {
          return [new $Uint64(0, 0), U("ParseUint", d)];
        }
        if ((j.$high > e.$high || (j.$high === e.$high && j.$low >= e.$low))) {
          return [i, V("ParseUint", d)];
        }
        j = $mul64(j, ((new $Uint64(0, b))));
        p = (o = (new $Uint64(0, n)), new $Uint64(j.$high + o.$high, j.$low + o.$low));
        if ((p.$high < j.$high || (p.$high === j.$high && p.$low < j.$low)) || (p.$high > i.$high || (p.$high === i.$high && p.$low > i.$low))) {
          return [i, V("ParseUint", d)];
        }
        j = p;
        l++;
      }
      return [j, $ifaceNil];
    };
    $pkg.ParseUint = Y;
    Z = function(a, b, c) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w;
      d = new $Int64(0, 0);
      e = $ifaceNil;
      if (a.length === 0) {
        f = new $Int64(0, 0);
        g = U("ParseInt", a);
        d = f;
        e = g;
        return [d, e];
      }
      h = a;
      i = false;
      if (a.charCodeAt(0) === 43) {
        a = $substring(a, 1);
      } else if (a.charCodeAt(0) === 45) {
        i = true;
        a = $substring(a, 1);
      }
      j = new $Uint64(0, 0);
      k = Y(a, b, c);
      j = k[0];
      e = k[1];
      if (!($interfaceIsEqual(e, $ifaceNil)) && !($interfaceIsEqual($assertType(e, DE).Err, $pkg.ErrRange))) {
        $assertType(e, DE).Func = "ParseInt";
        $assertType(e, DE).Num = h;
        l = new $Int64(0, 0);
        m = e;
        d = l;
        e = m;
        return [d, e];
      }
      if (c === 0) {
        c = 32;
      }
      n = ($shiftLeft64(new $Uint64(0, 1), (((c - 1 >> 0) >>> 0))));
      if (!i && (j.$high > n.$high || (j.$high === n.$high && j.$low >= n.$low))) {
        o = ((p = new $Uint64(n.$high - 0, n.$low - 1), new $Int64(p.$high, p.$low)));
        q = V("ParseInt", h);
        d = o;
        e = q;
        return [d, e];
      }
      if (i && (j.$high > n.$high || (j.$high === n.$high && j.$low > n.$low))) {
        r = (s = (new $Int64(n.$high, n.$low)), new $Int64(-s.$high, -s.$low));
        t = V("ParseInt", h);
        d = r;
        e = t;
        return [d, e];
      }
      u = (new $Int64(j.$high, j.$low));
      if (i) {
        u = new $Int64(-u.$high, -u.$low);
      }
      v = u;
      w = $ifaceNil;
      d = v;
      e = w;
      return [d, e];
    };
    $pkg.ParseInt = Z;
    AB.ptr.prototype.String = function() {
      var a, b, c, d;
      a = this;
      b = 10 + a.nd >> 0;
      if (a.dp > 0) {
        b = b + (a.dp) >> 0;
      }
      if (a.dp < 0) {
        b = b + (-a.dp) >> 0;
      }
      c = $makeSlice(DD, b);
      d = 0;
      if ((a.nd === 0)) {
        return "0";
      } else if (a.dp <= 0) {
        ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d] = 48);
        d = d + (1) >> 0;
        ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d] = 46);
        d = d + (1) >> 0;
        d = d + (AC($subslice(c, d, (d + -a.dp >> 0)))) >> 0;
        d = d + ($copySlice($subslice(c, d), $subslice(new DD(a.d), 0, a.nd))) >> 0;
      } else if (a.dp < a.nd) {
        d = d + ($copySlice($subslice(c, d), $subslice(new DD(a.d), 0, a.dp))) >> 0;
        ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d] = 46);
        d = d + (1) >> 0;
        d = d + ($copySlice($subslice(c, d), $subslice(new DD(a.d), a.dp, a.nd))) >> 0;
      } else {
        d = d + ($copySlice($subslice(c, d), $subslice(new DD(a.d), 0, a.nd))) >> 0;
        d = d + (AC($subslice(c, d, ((d + a.dp >> 0) - a.nd >> 0)))) >> 0;
      }
      return ($bytesToString($subslice(c, 0, d)));
    };
    AB.prototype.String = function() {
      return this.$val.String();
    };
    AC = function(a) {
      var a, b, c, d;
      b = a;
      c = 0;
      while (true) {
        if (!(c < b.$length)) {
          break;
        }
        d = c;
        ((d < 0 || d >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + d] = 48);
        c++;
      }
      return a.$length;
    };
    AD = function(a) {
      var a, b, c;
      while (true) {
        if (!(a.nd > 0 && ((b = a.d, c = a.nd - 1 >> 0, ((c < 0 || c >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[c])) === 48))) {
          break;
        }
        a.nd = a.nd - (1) >> 0;
      }
      if (a.nd === 0) {
        a.dp = 0;
      }
    };
    AB.ptr.prototype.Assign = function(a) {
      var a, b, c, d, e, f, g, h;
      b = this;
      c = DF.zero();
      d = 0;
      while (true) {
        if (!((a.$high > 0 || (a.$high === 0 && a.$low > 0)))) {
          break;
        }
        e = $div64(a, new $Uint64(0, 10), false);
        a = (f = $mul64(new $Uint64(0, 10), e), new $Uint64(a.$high - f.$high, a.$low - f.$low));
        ((d < 0 || d >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[d] = ((new $Uint64(a.$high + 0, a.$low + 48).$low << 24 >>> 24)));
        d = d + (1) >> 0;
        a = e;
      }
      b.nd = 0;
      d = d - (1) >> 0;
      while (true) {
        if (!(d >= 0)) {
          break;
        }(g = b.d, h = b.nd, ((h < 0 || h >= g.length) ? ($throwRuntimeError("index out of range"), undefined) : g[h] = ((d < 0 || d >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[d])));
        b.nd = b.nd + (1) >> 0;
        d = d - (1) >> 0;
      }
      b.dp = b.nd;
      AD(b);
    };
    AB.prototype.Assign = function(a) {
      return this.$val.Assign(a);
    };
    AE = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s;
      c = 0;
      d = 0;
      e = 0;
      while (true) {
        if (!(((f = b, f < 32 ? (e >>> f) : 0) >>> 0) === 0)) {
          break;
        }
        if (c >= a.nd) {
          if (e === 0) {
            a.nd = 0;
            return;
          }
          while (true) {
            if (!(((g = b, g < 32 ? (e >>> g) : 0) >>> 0) === 0)) {
              break;
            }
            e = e * 10 >>> 0;
            c = c + (1) >> 0;
          }
          break;
        }
        i = (((h = a.d, ((c < 0 || c >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[c])) >>> 0));
        e = ((e * 10 >>> 0) + i >>> 0) - 48 >>> 0;
        c = c + (1) >> 0;
      }
      a.dp = a.dp - ((c - 1 >> 0)) >> 0;
      k = (((j = b, j < 32 ? (1 << j) : 0) >>> 0)) - 1 >>> 0;
      while (true) {
        if (!(c < a.nd)) {
          break;
        }
        m = (((l = a.d, ((c < 0 || c >= l.length) ? ($throwRuntimeError("index out of range"), undefined) : l[c])) >>> 0));
        o = (n = b, n < 32 ? (e >>> n) : 0) >>> 0;
        e = (e & (k)) >>> 0;
        (p = a.d, ((d < 0 || d >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[d] = (((o + 48 >>> 0) << 24 >>> 24))));
        d = d + (1) >> 0;
        e = ((e * 10 >>> 0) + m >>> 0) - 48 >>> 0;
        c = c + (1) >> 0;
      }
      while (true) {
        if (!(e > 0)) {
          break;
        }
        r = (q = b, q < 32 ? (e >>> q) : 0) >>> 0;
        e = (e & (k)) >>> 0;
        if (d < 800) {
          (s = a.d, ((d < 0 || d >= s.length) ? ($throwRuntimeError("index out of range"), undefined) : s[d] = (((r + 48 >>> 0) << 24 >>> 24))));
          d = d + (1) >> 0;
        } else if (r > 0) {
          a.trunc = true;
        }
        e = e * 10 >>> 0;
      }
      a.nd = d;
      AD(a);
    };
    AH = function(a, b) {
      var a, b, c;
      c = 0;
      while (true) {
        if (!(c < b.length)) {
          break;
        }
        if (c >= a.$length) {
          return true;
        }
        if (!((((c < 0 || c >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + c]) === b.charCodeAt(c)))) {
          return ((c < 0 || c >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + c]) < b.charCodeAt(c);
        }
        c = c + (1) >> 0;
      }
      return false;
    };
    AI = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p;
      c = ((b < 0 || b >= AG.$length) ? ($throwRuntimeError("index out of range"), undefined) : AG.$array[AG.$offset + b]).delta;
      if (AH($subslice(new DD(a.d), 0, a.nd), ((b < 0 || b >= AG.$length) ? ($throwRuntimeError("index out of range"), undefined) : AG.$array[AG.$offset + b]).cutoff)) {
        c = c - (1) >> 0;
      }
      d = a.nd;
      e = a.nd + c >> 0;
      f = 0;
      d = d - (1) >> 0;
      while (true) {
        if (!(d >= 0)) {
          break;
        }
        f = f + (((g = b, g < 32 ? ((((((h = a.d, ((d < 0 || d >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[d])) >>> 0)) - 48 >>> 0)) << g) : 0) >>> 0)) >>> 0;
        j = (i = f / 10, (i === i && i !== 1 / 0 && i !== -1 / 0) ? i >>> 0 : $throwRuntimeError("integer divide by zero"));
        k = f - (10 * j >>> 0) >>> 0;
        e = e - (1) >> 0;
        if (e < 800) {
          (l = a.d, ((e < 0 || e >= l.length) ? ($throwRuntimeError("index out of range"), undefined) : l[e] = (((k + 48 >>> 0) << 24 >>> 24))));
        } else if (!((k === 0))) {
          a.trunc = true;
        }
        f = j;
        d = d - (1) >> 0;
      }
      while (true) {
        if (!(f > 0)) {
          break;
        }
        n = (m = f / 10, (m === m && m !== 1 / 0 && m !== -1 / 0) ? m >>> 0 : $throwRuntimeError("integer divide by zero"));
        o = f - (10 * n >>> 0) >>> 0;
        e = e - (1) >> 0;
        if (e < 800) {
          (p = a.d, ((e < 0 || e >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[e] = (((o + 48 >>> 0) << 24 >>> 24))));
        } else if (!((o === 0))) {
          a.trunc = true;
        }
        f = n;
      }
      a.nd = a.nd + (c) >> 0;
      if (a.nd >= 800) {
        a.nd = 800;
      }
      a.dp = a.dp + (c) >> 0;
      AD(a);
    };
    AB.ptr.prototype.Shift = function(a) {
      var a, b;
      b = this;
      if ((b.nd === 0)) {} else if (a > 0) {
        while (true) {
          if (!(a > 28)) {
            break;
          }
          AI(b, 28);
          a = a - (28) >> 0;
        }
        AI(b, ((a >>> 0)));
      } else if (a < 0) {
        while (true) {
          if (!(a < -28)) {
            break;
          }
          AE(b, 28);
          a = a + (28) >> 0;
        }
        AE(b, ((-a >>> 0)));
      }
    };
    AB.prototype.Shift = function(a) {
      return this.$val.Shift(a);
    };
    AJ = function(a, b) {
      var a, b, c, d, e, f, g;
      if (b < 0 || b >= a.nd) {
        return false;
      }
      if (((c = a.d, ((b < 0 || b >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[b])) === 53) && ((b + 1 >> 0) === a.nd)) {
        if (a.trunc) {
          return true;
        }
        return b > 0 && !(((d = (((e = a.d, f = b - 1 >> 0, ((f < 0 || f >= e.length) ? ($throwRuntimeError("index out of range"), undefined) : e[f])) - 48 << 24 >>> 24)) % 2, d === d ? d : $throwRuntimeError("integer divide by zero")) === 0));
      }
      return (g = a.d, ((b < 0 || b >= g.length) ? ($throwRuntimeError("index out of range"), undefined) : g[b])) >= 53;
    };
    AB.ptr.prototype.Round = function(a) {
      var a, b;
      b = this;
      if (a < 0 || a >= b.nd) {
        return;
      }
      if (AJ(b, a)) {
        b.RoundUp(a);
      } else {
        b.RoundDown(a);
      }
    };
    AB.prototype.Round = function(a) {
      return this.$val.Round(a);
    };
    AB.ptr.prototype.RoundDown = function(a) {
      var a, b;
      b = this;
      if (a < 0 || a >= b.nd) {
        return;
      }
      b.nd = a;
      AD(b);
    };
    AB.prototype.RoundDown = function(a) {
      return this.$val.RoundDown(a);
    };
    AB.ptr.prototype.RoundUp = function(a) {
      var a, b, c, d, e, f, g;
      b = this;
      if (a < 0 || a >= b.nd) {
        return;
      }
      c = a - 1 >> 0;
      while (true) {
        if (!(c >= 0)) {
          break;
        }
        e = (d = b.d, ((c < 0 || c >= d.length) ? ($throwRuntimeError("index out of range"), undefined) : d[c]));
        if (e < 57) {
          (g = b.d, ((c < 0 || c >= g.length) ? ($throwRuntimeError("index out of range"), undefined) : g[c] = ((f = b.d, ((c < 0 || c >= f.length) ? ($throwRuntimeError("index out of range"), undefined) : f[c])) + (1) << 24 >>> 24)));
          b.nd = c + 1 >> 0;
          return;
        }
        c = c - (1) >> 0;
      }
      b.d[0] = 49;
      b.nd = 1;
      b.dp = b.dp + (1) >> 0;
    };
    AB.prototype.RoundUp = function(a) {
      return this.$val.RoundUp(a);
    };
    AB.ptr.prototype.RoundedInteger = function() {
      var a, b, c, d, e, f, g;
      a = this;
      if (a.dp > 20) {
        return new $Uint64(4294967295, 4294967295);
      }
      b = 0;
      c = new $Uint64(0, 0);
      b = 0;
      while (true) {
        if (!(b < a.dp && b < a.nd)) {
          break;
        }
        c = (d = $mul64(c, new $Uint64(0, 10)), e = (new $Uint64(0, ((f = a.d, ((b < 0 || b >= f.length) ? ($throwRuntimeError("index out of range"), undefined) : f[b])) - 48 << 24 >>> 24))), new $Uint64(d.$high + e.$high, d.$low + e.$low));
        b = b + (1) >> 0;
      }
      while (true) {
        if (!(b < a.dp)) {
          break;
        }
        c = $mul64(c, (new $Uint64(0, 10)));
        b = b + (1) >> 0;
      }
      if (AJ(a, a.dp)) {
        c = (g = new $Uint64(0, 1), new $Uint64(c.$high + g.$high, c.$low + g.$low));
      }
      return c;
    };
    AB.prototype.RoundedInteger = function() {
      return this.$val.RoundedInteger();
    };
    AK.ptr.prototype.floatBits = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u;
      b = new $Uint64(0, 0);
      c = false;
      d = this;
      d.Normalize();
      e = d.exp + 63 >> 0;
      if (e < (a.bias + 1 >> 0)) {
        f = (a.bias + 1 >> 0) - e >> 0;
        d.mant = $shiftRightUint64(d.mant, (((f >>> 0))));
        e = e + (f) >> 0;
      }
      g = $shiftRightUint64(d.mant, ((63 - a.mantbits >>> 0)));
      if (!((h = (i = d.mant, j = $shiftLeft64(new $Uint64(0, 1), ((62 - a.mantbits >>> 0))), new $Uint64(i.$high & j.$high, (i.$low & j.$low) >>> 0)), (h.$high === 0 && h.$low === 0)))) {
        g = (k = new $Uint64(0, 1), new $Uint64(g.$high + k.$high, g.$low + k.$low));
      }
      if ((l = $shiftLeft64(new $Uint64(0, 2), a.mantbits), (g.$high === l.$high && g.$low === l.$low))) {
        g = $shiftRightUint64(g, (1));
        e = e + (1) >> 0;
      }
      if ((e - a.bias >> 0) >= (((m = a.expbits, m < 32 ? (1 << m) : 0) >> 0) - 1 >> 0)) {
        g = new $Uint64(0, 0);
        e = (((p = a.expbits, p < 32 ? (1 << p) : 0) >> 0) - 1 >> 0) + a.bias >> 0;
        c = true;
      } else if ((n = (o = $shiftLeft64(new $Uint64(0, 1), a.mantbits), new $Uint64(g.$high & o.$high, (g.$low & o.$low) >>> 0)), (n.$high === 0 && n.$low === 0))) {
        e = a.bias;
      }
      b = (q = (r = $shiftLeft64(new $Uint64(0, 1), a.mantbits), new $Uint64(r.$high - 0, r.$low - 1)), new $Uint64(g.$high & q.$high, (g.$low & q.$low) >>> 0));
      b = (s = $shiftLeft64((new $Uint64(0, (((e - a.bias >> 0)) & ((((t = a.expbits, t < 32 ? (1 << t) : 0) >> 0) - 1 >> 0))))), a.mantbits), new $Uint64(b.$high | s.$high, (b.$low | s.$low) >>> 0));
      if (d.neg) {
        b = (u = $shiftLeft64(new $Uint64(0, 1), ((a.mantbits + a.expbits >>> 0))), new $Uint64(b.$high | u.$high, (b.$low | u.$low) >>> 0));
      }
      return [b, c];
    };
    AK.prototype.floatBits = function(a) {
      return this.$val.floatBits(a);
    };
    AK.ptr.prototype.AssignComputeBounds = function(a, b, c, d) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o;
      e = new AK.ptr(new $Uint64(0, 0), 0, false);
      f = new AK.ptr(new $Uint64(0, 0), 0, false);
      g = this;
      g.mant = a;
      g.exp = b - ((d.mantbits >> 0)) >> 0;
      g.neg = c;
      if (g.exp <= 0 && (h = $shiftLeft64(($shiftRightUint64(a, ((-g.exp >>> 0)))), ((-g.exp >>> 0))), (a.$high === h.$high && a.$low === h.$low))) {
        g.mant = $shiftRightUint64(g.mant, (((-g.exp >>> 0))));
        g.exp = 0;
        i = $clone(g, AK);
        j = $clone(g, AK);
        AK.copy(e, i);
        AK.copy(f, j);
        return [e, f];
      }
      k = b - d.bias >> 0;
      AK.copy(f, new AK.ptr((l = $mul64(new $Uint64(0, 2), g.mant), new $Uint64(l.$high + 0, l.$low + 1)), g.exp - 1 >> 0, g.neg));
      if (!((m = $shiftLeft64(new $Uint64(0, 1), d.mantbits), (a.$high === m.$high && a.$low === m.$low))) || (k === 1)) {
        AK.copy(e, new AK.ptr((n = $mul64(new $Uint64(0, 2), g.mant), new $Uint64(n.$high - 0, n.$low - 1)), g.exp - 1 >> 0, g.neg));
      } else {
        AK.copy(e, new AK.ptr((o = $mul64(new $Uint64(0, 4), g.mant), new $Uint64(o.$high - 0, o.$low - 1)), g.exp - 2 >> 0, g.neg));
      }
      return [e, f];
    };
    AK.prototype.AssignComputeBounds = function(a, b, c, d) {
      return this.$val.AssignComputeBounds(a, b, c, d);
    };
    AK.ptr.prototype.Normalize = function() {
      var a, b, c;
      a = this;
      if ((b = a.mant, (b.$high === 0 && b.$low === 0))) {
        return 0;
      }
      c = C.LeadingZeros64(a.mant);
      a.mant = $shiftLeft64(a.mant, (((c >>> 0))));
      a.exp = a.exp - (c) >> 0;
      return ((c >>> 0));
    };
    AK.prototype.Normalize = function() {
      return this.$val.Normalize();
    };
    AK.ptr.prototype.Multiply = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x;
      b = this;
      c = $shiftRightUint64(b.mant, 32);
      d = (new $Uint64(0, ((b.mant.$low >>> 0))));
      e = c;
      f = d;
      g = $shiftRightUint64(a.mant, 32);
      h = (new $Uint64(0, ((a.mant.$low >>> 0))));
      i = g;
      j = h;
      k = $mul64(e, j);
      l = $mul64(f, i);
      b.mant = (m = (n = $mul64(e, i), o = $shiftRightUint64(k, 32), new $Uint64(n.$high + o.$high, n.$low + o.$low)), p = $shiftRightUint64(l, 32), new $Uint64(m.$high + p.$high, m.$low + p.$low));
      u = (q = (r = (new $Uint64(0, ((k.$low >>> 0)))), s = (new $Uint64(0, ((l.$low >>> 0)))), new $Uint64(r.$high + s.$high, r.$low + s.$low)), t = $shiftRightUint64(($mul64(f, j)), 32), new $Uint64(q.$high + t.$high, q.$low + t.$low));
      u = (v = new $Uint64(0, 2147483648), new $Uint64(u.$high + v.$high, u.$low + v.$low));
      b.mant = (w = b.mant, x = ($shiftRightUint64(u, 32)), new $Uint64(w.$high + x.$high, w.$low + x.$low));
      b.exp = (b.exp + a.exp >> 0) + 64 >> 0;
    };
    AK.prototype.Multiply = function(a) {
      return this.$val.Multiply(a);
    };
    AK.ptr.prototype.AssignDecimal = function(a, b, c, d, e) {
      var a, aa, ab, ac, ad, ae, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      f = false;
      g = this;
      h = 0;
      if (d) {
        h = h + (4) >> 0;
      }
      g.mant = a;
      g.exp = 0;
      g.neg = c;
      j = (i = ((b - -348 >> 0)) / 8, (i === i && i !== 1 / 0 && i !== -1 / 0) ? i >> 0 : $throwRuntimeError("integer divide by zero"));
      if (b < -348 || j >= 87) {
        f = false;
        return f;
      }
      l = (k = ((b - -348 >> 0)) % 8, k === k ? k : $throwRuntimeError("integer divide by zero"));
      if (l < 19 && (m = (n = 19 - l >> 0, ((n < 0 || n >= AN.length) ? ($throwRuntimeError("index out of range"), undefined) : AN[n])), (a.$high < m.$high || (a.$high === m.$high && a.$low < m.$low)))) {
        g.mant = $mul64(g.mant, (((l < 0 || l >= AN.length) ? ($throwRuntimeError("index out of range"), undefined) : AN[l])));
        g.Normalize();
      } else {
        g.Normalize();
        g.Multiply($clone(((l < 0 || l >= AL.length) ? ($throwRuntimeError("index out of range"), undefined) : AL[l]), AK));
        h = h + (4) >> 0;
      }
      g.Multiply($clone(((j < 0 || j >= AM.length) ? ($throwRuntimeError("index out of range"), undefined) : AM[j]), AK));
      if (h > 0) {
        h = h + (1) >> 0;
      }
      h = h + (4) >> 0;
      o = g.Normalize();
      h = (p = (o), p < 32 ? (h << p) : 0) >> 0;
      q = e.bias - 63 >> 0;
      r = 0;
      if (g.exp <= q) {
        r = ((63 - e.mantbits >>> 0) + 1 >>> 0) + (((q - g.exp >> 0) >>> 0)) >>> 0;
      } else {
        r = 63 - e.mantbits >>> 0;
      }
      s = $shiftLeft64(new $Uint64(0, 1), ((r - 1 >>> 0)));
      w = (t = g.mant, u = (v = $shiftLeft64(new $Uint64(0, 1), r), new $Uint64(v.$high - 0, v.$low - 1)), new $Uint64(t.$high & u.$high, (t.$low & u.$low) >>> 0));
      if ((x = (y = (new $Int64(s.$high, s.$low)), z = (new $Int64(0, h)), new $Int64(y.$high - z.$high, y.$low - z.$low)), aa = (new $Int64(w.$high, w.$low)), (x.$high < aa.$high || (x.$high === aa.$high && x.$low < aa.$low))) && (ab = (new $Int64(w.$high, w.$low)), ac = (ad = (new $Int64(s.$high, s.$low)), ae = (new $Int64(0, h)), new $Int64(ad.$high + ae.$high, ad.$low + ae.$low)), (ab.$high < ac.$high || (ab.$high === ac.$high && ab.$low < ac.$low)))) {
        f = false;
        return f;
      }
      f = true;
      return f;
    };
    AK.prototype.AssignDecimal = function(a, b, c, d, e) {
      return this.$val.AssignDecimal(a, b, c, d, e);
    };
    AK.ptr.prototype.frexp10 = function() {
      var a, b, c, d, e, f, g, h, i, j;
      a = 0;
      b = 0;
      c = this;
      e = (d = ($imul(((-46 - c.exp >> 0)), 28)) / 93, (d === d && d !== 1 / 0 && d !== -1 / 0) ? d >> 0 : $throwRuntimeError("integer divide by zero"));
      g = (f = ((e - -348 >> 0)) / 8, (f === f && f !== 1 / 0 && f !== -1 / 0) ? f >> 0 : $throwRuntimeError("integer divide by zero"));
      Loop: while (true) {
        h = (c.exp + ((g < 0 || g >= AM.length) ? ($throwRuntimeError("index out of range"), undefined) : AM[g]).exp >> 0) + 64 >> 0;
        if (h < -60) {
          g = g + (1) >> 0;
        } else if (h > -32) {
          g = g - (1) >> 0;
        } else {
          break Loop;
        }
      }
      c.Multiply($clone(((g < 0 || g >= AM.length) ? ($throwRuntimeError("index out of range"), undefined) : AM[g]), AK));
      i = -((-348 + ($imul(g, 8)) >> 0));
      j = g;
      a = i;
      b = j;
      return [a, b];
    };
    AK.prototype.frexp10 = function() {
      return this.$val.frexp10();
    };
    AO = function(a, b, c) {
      var a, b, c, d, e, f;
      d = 0;
      e = c.frexp10();
      d = e[0];
      f = e[1];
      a.Multiply($clone(((f < 0 || f >= AM.length) ? ($throwRuntimeError("index out of range"), undefined) : AM[f]), AK));
      b.Multiply($clone(((f < 0 || f >= AM.length) ? ($throwRuntimeError("index out of range"), undefined) : AM[f]), AK));
      return d;
    };
    AK.ptr.prototype.FixedDecimal = function(a, b) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      c = this;
      if ((d = c.mant, (d.$high === 0 && d.$low === 0))) {
        a.nd = 0;
        a.dp = 0;
        a.neg = c.neg;
        return true;
      }
      if (b === 0) {
        $panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
      }
      c.Normalize();
      e = c.frexp10();
      f = e[0];
      g = ((-c.exp >>> 0));
      h = (($shiftRightUint64(c.mant, g).$low >>> 0));
      k = (i = c.mant, j = $shiftLeft64((new $Uint64(0, h)), g), new $Uint64(i.$high - j.$high, i.$low - j.$low));
      l = new $Uint64(0, 1);
      m = b;
      n = 0;
      o = new $Uint64(0, 1);
      p = 0;
      q = new $Uint64(0, 1);
      r = p;
      s = q;
      while (true) {
        if (!(r < 20)) {
          break;
        }
        if ((t = (new $Uint64(0, h)), (s.$high > t.$high || (s.$high === t.$high && s.$low > t.$low)))) {
          n = r;
          break;
        }
        s = $mul64(s, (new $Uint64(0, 10)));
        r = r + (1) >> 0;
      }
      u = h;
      if (n > m) {
        o = (v = n - m >> 0, ((v < 0 || v >= AN.length) ? ($throwRuntimeError("index out of range"), undefined) : AN[v]));
        h = (w = h / (((o.$low >>> 0))), (w === w && w !== 1 / 0 && w !== -1 / 0) ? w >>> 0 : $throwRuntimeError("integer divide by zero"));
        u = u - (($imul(h, ((o.$low >>> 0))) >>> 0)) >>> 0;
      } else {
        u = 0;
      }
      x = DG.zero();
      y = 32;
      z = h;
      while (true) {
        if (!(z > 0)) {
          break;
        }
        ab = (aa = z / 10, (aa === aa && aa !== 1 / 0 && aa !== -1 / 0) ? aa >>> 0 : $throwRuntimeError("integer divide by zero"));
        z = z - (($imul(10, ab) >>> 0)) >>> 0;
        y = y - (1) >> 0;
        ((y < 0 || y >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[y] = (((z + 48 >>> 0) << 24 >>> 24)));
        z = ab;
      }
      ac = y;
      while (true) {
        if (!(ac < 32)) {
          break;
        }(ad = a.d, ae = ac - y >> 0, ((ae < 0 || ae >= ad.$length) ? ($throwRuntimeError("index out of range"), undefined) : ad.$array[ad.$offset + ae] = ((ac < 0 || ac >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[ac])));
        ac = ac + (1) >> 0;
      }
      af = 32 - y >> 0;
      a.nd = af;
      a.dp = n + f >> 0;
      m = m - (af) >> 0;
      if (m > 0) {
        if (!((u === 0)) || !((o.$high === 0 && o.$low === 1))) {
          $panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
        }
        while (true) {
          if (!(m > 0)) {
            break;
          }
          k = $mul64(k, (new $Uint64(0, 10)));
          l = $mul64(l, (new $Uint64(0, 10)));
          if ((ag = $mul64(new $Uint64(0, 2), l), ah = $shiftLeft64(new $Uint64(0, 1), g), (ag.$high > ah.$high || (ag.$high === ah.$high && ag.$low > ah.$low)))) {
            return false;
          }
          ai = $shiftRightUint64(k, g);
          (aj = a.d, ((af < 0 || af >= aj.$length) ? ($throwRuntimeError("index out of range"), undefined) : aj.$array[aj.$offset + af] = ((new $Uint64(ai.$high + 0, ai.$low + 48).$low << 24 >>> 24))));
          k = (ak = $shiftLeft64(ai, g), new $Uint64(k.$high - ak.$high, k.$low - ak.$low));
          af = af + (1) >> 0;
          m = m - (1) >> 0;
        }
        a.nd = af;
      }
      am = AP(a, (al = $shiftLeft64((new $Uint64(0, u)), g), new $Uint64(al.$high | k.$high, (al.$low | k.$low) >>> 0)), o, g, l);
      if (!am) {
        return false;
      }
      an = a.nd - 1 >> 0;
      while (true) {
        if (!(an >= 0)) {
          break;
        }
        if (!(((ao = a.d, ((an < 0 || an >= ao.$length) ? ($throwRuntimeError("index out of range"), undefined) : ao.$array[ao.$offset + an])) === 48))) {
          a.nd = an + 1 >> 0;
          break;
        }
        an = an - (1) >> 0;
      }
      return true;
    };
    AK.prototype.FixedDecimal = function(a, b) {
      return this.$val.FixedDecimal(a, b);
    };
    AP = function(a, b, c, d, e) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q;
      if ((f = $shiftLeft64(c, d), (b.$high > f.$high || (b.$high === f.$high && b.$low > f.$low)))) {
        $panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
      }
      if ((g = $mul64(new $Uint64(0, 2), e), h = $shiftLeft64(c, d), (g.$high > h.$high || (g.$high === h.$high && g.$low > h.$low)))) {
        $panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
      }
      if ((i = $mul64(new $Uint64(0, 2), (new $Uint64(b.$high + e.$high, b.$low + e.$low))), j = $shiftLeft64(c, d), (i.$high < j.$high || (i.$high === j.$high && i.$low < j.$low)))) {
        return true;
      }
      if ((k = $mul64(new $Uint64(0, 2), (new $Uint64(b.$high - e.$high, b.$low - e.$low))), l = $shiftLeft64(c, d), (k.$high > l.$high || (k.$high === l.$high && k.$low > l.$low)))) {
        m = a.nd - 1 >> 0;
        while (true) {
          if (!(m >= 0)) {
            break;
          }
          if ((n = a.d, ((m < 0 || m >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + m])) === 57) {
            a.nd = a.nd - (1) >> 0;
          } else {
            break;
          }
          m = m - (1) >> 0;
        }
        if (m < 0) {
          (o = a.d, (0 >= o.$length ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + 0] = 49));
          a.nd = 1;
          a.dp = a.dp + (1) >> 0;
        } else {
          (q = a.d, ((m < 0 || m >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + m] = ((p = a.d, ((m < 0 || m >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + m])) + (1) << 24 >>> 24)));
        }
        return true;
      }
      return false;
    };
    AK.ptr.prototype.ShortestDecimal = function(a, b, c) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, b, ba, bb, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      d = this;
      if ((e = d.mant, (e.$high === 0 && e.$low === 0))) {
        a.nd = 0;
        a.dp = 0;
        a.neg = d.neg;
        return true;
      }
      if ((d.exp === 0) && $equal(b, d, AK) && $equal(b, c, AK)) {
        f = DF.zero();
        g = 23;
        h = d.mant;
        while (true) {
          if (!((h.$high > 0 || (h.$high === 0 && h.$low > 0)))) {
            break;
          }
          i = $div64(h, new $Uint64(0, 10), false);
          h = (j = $mul64(new $Uint64(0, 10), i), new $Uint64(h.$high - j.$high, h.$low - j.$low));
          ((g < 0 || g >= f.length) ? ($throwRuntimeError("index out of range"), undefined) : f[g] = ((new $Uint64(h.$high + 0, h.$low + 48).$low << 24 >>> 24)));
          g = g - (1) >> 0;
          h = i;
        }
        k = (24 - g >> 0) - 1 >> 0;
        l = 0;
        while (true) {
          if (!(l < k)) {
            break;
          }(n = a.d, ((l < 0 || l >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + l] = (m = (g + 1 >> 0) + l >> 0, ((m < 0 || m >= f.length) ? ($throwRuntimeError("index out of range"), undefined) : f[m]))));
          l = l + (1) >> 0;
        }
        o = k;
        p = k;
        a.nd = o;
        a.dp = p;
        while (true) {
          if (!(a.nd > 0 && ((q = a.d, r = a.nd - 1 >> 0, ((r < 0 || r >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + r])) === 48))) {
            break;
          }
          a.nd = a.nd - (1) >> 0;
        }
        if (a.nd === 0) {
          a.dp = 0;
        }
        a.neg = d.neg;
        return true;
      }
      c.Normalize();
      if (d.exp > c.exp) {
        d.mant = $shiftLeft64(d.mant, ((((d.exp - c.exp >> 0) >>> 0))));
        d.exp = c.exp;
      }
      if (b.exp > c.exp) {
        b.mant = $shiftLeft64(b.mant, ((((b.exp - c.exp >> 0) >>> 0))));
        b.exp = c.exp;
      }
      s = AO(b, d, c);
      c.mant = (t = c.mant, u = new $Uint64(0, 1), new $Uint64(t.$high + u.$high, t.$low + u.$low));
      b.mant = (v = b.mant, w = new $Uint64(0, 1), new $Uint64(v.$high - w.$high, v.$low - w.$low));
      x = ((-c.exp >>> 0));
      y = (($shiftRightUint64(c.mant, x).$low >>> 0));
      ab = (z = c.mant, aa = $shiftLeft64((new $Uint64(0, y)), x), new $Uint64(z.$high - aa.$high, z.$low - aa.$low));
      ae = (ac = c.mant, ad = b.mant, new $Uint64(ac.$high - ad.$high, ac.$low - ad.$low));
      ah = (af = c.mant, ag = d.mant, new $Uint64(af.$high - ag.$high, af.$low - ag.$low));
      ai = 0;
      aj = 0;
      ak = new $Uint64(0, 1);
      al = aj;
      am = ak;
      while (true) {
        if (!(al < 20)) {
          break;
        }
        if ((an = (new $Uint64(0, y)), (am.$high > an.$high || (am.$high === an.$high && am.$low > an.$low)))) {
          ai = al;
          break;
        }
        am = $mul64(am, (new $Uint64(0, 10)));
        al = al + (1) >> 0;
      }
      ao = 0;
      while (true) {
        if (!(ao < ai)) {
          break;
        }
        aq = (ap = (ai - ao >> 0) - 1 >> 0, ((ap < 0 || ap >= AN.length) ? ($throwRuntimeError("index out of range"), undefined) : AN[ap]));
        as = (ar = y / ((aq.$low >>> 0)), (ar === ar && ar !== 1 / 0 && ar !== -1 / 0) ? ar >>> 0 : $throwRuntimeError("integer divide by zero"));
        (at = a.d, ((ao < 0 || ao >= at.$length) ? ($throwRuntimeError("index out of range"), undefined) : at.$array[at.$offset + ao] = (((as + 48 >>> 0) << 24 >>> 24))));
        y = y - (($imul(as, ((aq.$low >>> 0))) >>> 0)) >>> 0;
        av = (au = $shiftLeft64((new $Uint64(0, y)), x), new $Uint64(au.$high + ab.$high, au.$low + ab.$low));
        if ((av.$high < ae.$high || (av.$high === ae.$high && av.$low < ae.$low))) {
          a.nd = ao + 1 >> 0;
          a.dp = ai + s >> 0;
          a.neg = d.neg;
          return AQ(a, av, ah, ae, $shiftLeft64(aq, x), new $Uint64(0, 2));
        }
        ao = ao + (1) >> 0;
      }
      a.nd = ai;
      a.dp = a.nd + s >> 0;
      a.neg = d.neg;
      aw = 0;
      ax = new $Uint64(0, 1);
      while (true) {
        ab = $mul64(ab, (new $Uint64(0, 10)));
        ax = $mul64(ax, (new $Uint64(0, 10)));
        aw = (($shiftRightUint64(ab, x).$low >> 0));
        (ay = a.d, az = a.nd, ((az < 0 || az >= ay.$length) ? ($throwRuntimeError("index out of range"), undefined) : ay.$array[ay.$offset + az] = (((aw + 48 >> 0) << 24 >>> 24))));
        a.nd = a.nd + (1) >> 0;
        ab = (ba = $shiftLeft64((new $Uint64(0, aw)), x), new $Uint64(ab.$high - ba.$high, ab.$low - ba.$low));
        if ((bb = $mul64(ae, ax), (ab.$high < bb.$high || (ab.$high === bb.$high && ab.$low < bb.$low)))) {
          return AQ(a, ab, $mul64(ah, ax), $mul64(ae, ax), $shiftLeft64(new $Uint64(0, 1), x), $mul64(ax, new $Uint64(0, 2)));
        }
      }
    };
    AK.prototype.ShortestDecimal = function(a, b, c) {
      return this.$val.ShortestDecimal(a, b, c);
    };
    AQ = function(a, b, c, d, e, f) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t;
      if ((g = $mul64(new $Uint64(0, 2), f), (e.$high < g.$high || (e.$high === g.$high && e.$low < g.$low)))) {
        return false;
      }
      while (true) {
        if (!((h = (i = (j = $div64(e, new $Uint64(0, 2), false), new $Uint64(b.$high + j.$high, b.$low + j.$low)), new $Uint64(i.$high + f.$high, i.$low + f.$low)), (h.$high < c.$high || (h.$high === c.$high && h.$low < c.$low))))) {
          break;
        }
        k = a.nd - 1 >> 0;
        (m = a.d, ((k < 0 || k >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + k] = ((l = a.d, ((k < 0 || k >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + k])) - (1) << 24 >>> 24)));
        b = (n = e, new $Uint64(b.$high + n.$high, b.$low + n.$low));
      }
      if ((o = new $Uint64(b.$high + e.$high, b.$low + e.$low), p = (q = (r = $div64(e, new $Uint64(0, 2), false), new $Uint64(c.$high + r.$high, c.$low + r.$low)), new $Uint64(q.$high + f.$high, q.$low + f.$low)), (o.$high < p.$high || (o.$high === p.$high && o.$low <= p.$low)))) {
        return false;
      }
      if ((b.$high < f.$high || (b.$high === f.$high && b.$low < f.$low)) || (s = new $Uint64(d.$high - f.$high, d.$low - f.$low), (b.$high > s.$high || (b.$high === s.$high && b.$low > s.$low)))) {
        return false;
      }
      if ((a.nd === 1) && ((t = a.d, (0 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 0])) === 48)) {
        a.nd = 0;
        a.dp = 0;
      }
      return true;
    };
    AU = function(a, b, c, d) {
      var a, b, c, d;
      return ($bytesToString(AW($makeSlice(DD, 0, BF(c + 4 >> 0, 24)), a, b, c, d)));
    };
    $pkg.FormatFloat = AU;
    AV = function(a, b, c, d, e) {
      var a, b, c, d, e;
      return AW(a, b, c, d, e);
    };
    $pkg.AppendFloat = AV;
    AW = function(a, b, c, d, e) {
      var a, aa, ab, ac, ad, ae, af, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      f = new $Uint64(0, 0);
      g = DH.nil;
      h = e;
      if (h === (32)) {
        f = (new $Uint64(0, A.Float32bits(($fround(b)))));
        g = AS;
      } else if (h === (64)) {
        f = A.Float64bits(b);
        g = AT;
      } else {
        $panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
      }
      j = !((i = $shiftRightUint64(f, ((g.expbits + g.mantbits >>> 0))), (i.$high === 0 && i.$low === 0)));
      l = (($shiftRightUint64(f, g.mantbits).$low >> 0)) & ((((k = g.expbits, k < 32 ? (1 << k) : 0) >> 0) - 1 >> 0));
      o = (m = (n = $shiftLeft64(new $Uint64(0, 1), g.mantbits), new $Uint64(n.$high - 0, n.$low - 1)), new $Uint64(f.$high & m.$high, (f.$low & m.$low) >>> 0));
      p = l;
      if (p === ((((q = g.expbits, q < 32 ? (1 << q) : 0) >> 0) - 1 >> 0))) {
        r = "";
        if (!((o.$high === 0 && o.$low === 0))) {
          r = "NaN";
        } else if (j) {
          r = "-Inf";
        } else {
          r = "+Inf";
        }
        return $appendSlice(a, r);
      } else if (p === (0)) {
        l = l + (1) >> 0;
      } else {
        o = (s = $shiftLeft64(new $Uint64(0, 1), g.mantbits), new $Uint64(o.$high | s.$high, (o.$low | s.$low) >>> 0));
      }
      l = l + (g.bias) >> 0;
      if (c === 98) {
        return BD(a, j, o, l, g);
      }
      if (!H) {
        return AX(a, d, c, j, o, l, g);
      }
      t = new BA.ptr(DD.nil, 0, 0, false);
      u = false;
      v = d < 0;
      if (v) {
        w = new AK.ptr(new $Uint64(0, 0), 0, false);
        x = w.AssignComputeBounds(o, l, j, g);
        y = $clone(x[0], AK);
        z = $clone(x[1], AK);
        aa = DG.zero();
        t.d = new DD(aa);
        u = w.ShortestDecimal(t, y, z);
        if (!u) {
          return AX(a, d, c, j, o, l, g);
        }
        ab = c;
        if ((ab === (101)) || (ab === (69))) {
          d = BF(t.nd - 1 >> 0, 0);
        } else if (ab === (102)) {
          d = BF(t.nd - t.dp >> 0, 0);
        } else if ((ab === (103)) || (ab === (71))) {
          d = t.nd;
        }
      } else if (!((c === 102))) {
        ac = d;
        ad = c;
        if ((ad === (101)) || (ad === (69))) {
          ac = ac + (1) >> 0;
        } else if ((ad === (103)) || (ad === (71))) {
          if (d === 0) {
            d = 1;
          }
          ac = d;
        }
        if (ac <= 15) {
          ae = DF.zero();
          t.d = new DD(ae);
          af = new AK.ptr(o, l - ((g.mantbits >> 0)) >> 0, j);
          u = af.FixedDecimal(t, ac);
        }
      }
      if (!u) {
        return AX(a, d, c, j, o, l, g);
      }
      return AY(a, v, j, $clone(t, BA), d, c);
    };
    AX = function(a, b, c, d, e, f, g) {
      var a, b, c, d, e, f, g, h, i, j, k, l;
      h = new AB.ptr(DC.zero(), 0, 0, false, false);
      h.Assign(e);
      h.Shift(f - ((g.mantbits >> 0)) >> 0);
      i = new BA.ptr(DD.nil, 0, 0, false);
      j = b < 0;
      if (j) {
        AZ(h, e, f, g);
        BA.copy(i, new BA.ptr(new DD(h.d), h.nd, h.dp, false));
        k = c;
        if ((k === (101)) || (k === (69))) {
          b = i.nd - 1 >> 0;
        } else if (k === (102)) {
          b = BF(i.nd - i.dp >> 0, 0);
        } else if ((k === (103)) || (k === (71))) {
          b = i.nd;
        }
      } else {
        l = c;
        if ((l === (101)) || (l === (69))) {
          h.Round(b + 1 >> 0);
        } else if (l === (102)) {
          h.Round(h.dp + b >> 0);
        } else if ((l === (103)) || (l === (71))) {
          if (b === 0) {
            b = 1;
          }
          h.Round(b);
        }
        BA.copy(i, new BA.ptr(new DD(h.d), h.nd, h.dp, false));
      }
      return AY(a, j, d, $clone(i, BA), b, c);
    };
    AY = function(a, b, c, d, e, f) {
      var a, b, c, d, e, f, g, h, i;
      g = f;
      if ((g === (101)) || (g === (69))) {
        return BB(a, c, $clone(d, BA), e, f);
      } else if (g === (102)) {
        return BC(a, c, $clone(d, BA), e);
      } else if ((g === (103)) || (g === (71))) {
        h = e;
        if (h > d.nd && d.nd >= d.dp) {
          h = d.nd;
        }
        if (b) {
          h = 6;
        }
        i = d.dp - 1 >> 0;
        if (i < -4 || i >= h) {
          if (e > d.nd) {
            e = d.nd;
          }
          return BB(a, c, $clone(d, BA), e - 1 >> 0, (f + 101 << 24 >>> 24) - 103 << 24 >>> 24);
        }
        if (e > d.dp) {
          e = d.nd;
        }
        return BC(a, c, $clone(d, BA), BF(e - d.dp >> 0, 0));
      }
      return $append(a, 37, f);
    };
    AZ = function(a, b, c, d) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x;
      if ((b.$high === 0 && b.$low === 0)) {
        a.nd = 0;
        return;
      }
      e = d.bias + 1 >> 0;
      if (c > e && ($imul(332, ((a.dp - a.nd >> 0)))) >= ($imul(100, ((c - ((d.mantbits >> 0)) >> 0))))) {
        return;
      }
      f = new AB.ptr(DC.zero(), 0, 0, false, false);
      f.Assign((g = $mul64(b, new $Uint64(0, 2)), new $Uint64(g.$high + 0, g.$low + 1)));
      f.Shift((c - ((d.mantbits >> 0)) >> 0) - 1 >> 0);
      h = new $Uint64(0, 0);
      i = 0;
      if ((j = $shiftLeft64(new $Uint64(0, 1), d.mantbits), (b.$high > j.$high || (b.$high === j.$high && b.$low > j.$low))) || (c === e)) {
        h = new $Uint64(b.$high - 0, b.$low - 1);
        i = c;
      } else {
        h = (k = $mul64(b, new $Uint64(0, 2)), new $Uint64(k.$high - 0, k.$low - 1));
        i = c - 1 >> 0;
      }
      l = new AB.ptr(DC.zero(), 0, 0, false, false);
      l.Assign((m = $mul64(h, new $Uint64(0, 2)), new $Uint64(m.$high + 0, m.$low + 1)));
      l.Shift((i - ((d.mantbits >> 0)) >> 0) - 1 >> 0);
      o = (n = $div64(b, new $Uint64(0, 2), true), (n.$high === 0 && n.$low === 0));
      p = 0;
      while (true) {
        if (!(p < a.nd)) {
          break;
        }
        q = 48;
        if (p < l.nd) {
          q = (r = l.d, ((p < 0 || p >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[p]));
        }
        t = (s = a.d, ((p < 0 || p >= s.length) ? ($throwRuntimeError("index out of range"), undefined) : s[p]));
        u = 48;
        if (p < f.nd) {
          u = (v = f.d, ((p < 0 || p >= v.length) ? ($throwRuntimeError("index out of range"), undefined) : v[p]));
        }
        w = !((q === t)) || o && ((p + 1 >> 0) === l.nd);
        x = !((t === u)) && (o || (t + 1 << 24 >>> 24) < u || (p + 1 >> 0) < f.nd);
        if (w && x) {
          a.Round(p + 1 >> 0);
          return;
        } else if (w) {
          a.RoundDown(p + 1 >> 0);
          return;
        } else if (x) {
          a.RoundUp(p + 1 >> 0);
          return;
        }
        p = p + (1) >> 0;
      }
    };
    BB = function(a, b, c, d, e) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p;
      if (b) {
        a = $append(a, 45);
      }
      f = 48;
      if (!((c.nd === 0))) {
        f = (g = c.d, (0 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 0]));
      }
      a = $append(a, f);
      if (d > 0) {
        a = $append(a, 46);
        h = 1;
        i = BE(c.nd, d + 1 >> 0);
        if (h < i) {
          a = $appendSlice(a, $subslice(c.d, h, i));
          h = i;
        }
        while (true) {
          if (!(h <= d)) {
            break;
          }
          a = $append(a, 48);
          h = h + (1) >> 0;
        }
      }
      a = $append(a, e);
      j = c.dp - 1 >> 0;
      if (c.nd === 0) {
        j = 0;
      }
      if (j < 0) {
        f = 45;
        j = -j;
      } else {
        f = 43;
      }
      a = $append(a, f);
      if (j < 10) {
        a = $append(a, 48, ((j << 24 >>> 24)) + 48 << 24 >>> 24);
      } else if (j < 100) {
        a = $append(a, (((k = j / 10, (k === k && k !== 1 / 0 && k !== -1 / 0) ? k >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((l = j % 10, l === l ? l : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
      } else {
        a = $append(a, (((m = j / 100, (m === m && m !== 1 / 0 && m !== -1 / 0) ? m >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (n = (((o = j / 10, (o === o && o !== 1 / 0 && o !== -1 / 0) ? o >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) % 10, n === n ? n : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, (((p = j % 10, p === p ? p : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
      }
      return a;
    };
    BC = function(a, b, c, d) {
      var a, b, c, d, e, f, g, h, i;
      if (b) {
        a = $append(a, 45);
      }
      if (c.dp > 0) {
        e = BE(c.nd, c.dp);
        a = $appendSlice(a, $subslice(c.d, 0, e));
        while (true) {
          if (!(e < c.dp)) {
            break;
          }
          a = $append(a, 48);
          e = e + (1) >> 0;
        }
      } else {
        a = $append(a, 48);
      }
      if (d > 0) {
        a = $append(a, 46);
        f = 0;
        while (true) {
          if (!(f < d)) {
            break;
          }
          g = 48;
          h = c.dp + f >> 0;
          if (0 <= h && h < c.nd) {
            g = (i = c.d, ((h < 0 || h >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + h]));
          }
          a = $append(a, g);
          f = f + (1) >> 0;
        }
      }
      return a;
    };
    BD = function(a, b, c, d, e) {
      var a, b, c, d, e, f, g;
      if (b) {
        a = $append(a, 45);
      }
      f = BR(a, c, 10, false, true);
      a = f[0];
      a = $append(a, 112);
      d = d - (((e.mantbits >> 0))) >> 0;
      if (d >= 0) {
        a = $append(a, 43);
      }
      g = BR(a, (new $Uint64(0, d)), 10, d < 0, true);
      a = g[0];
      return a;
    };
    BE = function(a, b) {
      var a, b;
      if (a < b) {
        return a;
      }
      return b;
    };
    BF = function(a, b) {
      var a, b;
      if (a > b) {
        return a;
      }
      return b;
    };
    BL = function(a, b) {
      var a, b, c, d;
      if (true && (a.$high < 0 || (a.$high === 0 && a.$low < 100)) && (b === 10)) {
        return BQ(((a.$low >> 0)));
      }
      c = BR(DD.nil, a, b, false, false);
      d = c[1];
      return d;
    };
    $pkg.FormatUint = BL;
    BM = function(a, b) {
      var a, b, c, d;
      if (true && (0 < a.$high || (0 === a.$high && 0 <= a.$low)) && (a.$high < 0 || (a.$high === 0 && a.$low < 100)) && (b === 10)) {
        return BQ((((a.$low + ((a.$high >> 31) * 4294967296)) >> 0)));
      }
      c = BR(DD.nil, (new $Uint64(a.$high, a.$low)), b, (a.$high < 0 || (a.$high === 0 && a.$low < 0)), false);
      d = c[1];
      return d;
    };
    $pkg.FormatInt = BM;
    BN = function(a) {
      var a;
      return BM((new $Int64(0, a)), 10);
    };
    $pkg.Itoa = BN;
    BO = function(a, b, c) {
      var a, b, c, d;
      if (true && (0 < b.$high || (0 === b.$high && 0 <= b.$low)) && (b.$high < 0 || (b.$high === 0 && b.$low < 100)) && (c === 10)) {
        return $appendSlice(a, BQ((((b.$low + ((b.$high >> 31) * 4294967296)) >> 0))));
      }
      d = BR(a, (new $Uint64(b.$high, b.$low)), c, (b.$high < 0 || (b.$high === 0 && b.$low < 0)), true);
      a = d[0];
      return a;
    };
    $pkg.AppendInt = BO;
    BP = function(a, b, c) {
      var a, b, c, d;
      if (true && (b.$high < 0 || (b.$high === 0 && b.$low < 100)) && (c === 10)) {
        return $appendSlice(a, BQ(((b.$low >> 0))));
      }
      d = BR(a, b, c, false, true);
      a = d[0];
      return a;
    };
    $pkg.AppendUint = BP;
    BQ = function(a) {
      var a;
      if (a < 10) {
        return $substring("0123456789abcdefghijklmnopqrstuvwxyz", a, (a + 1 >> 0));
      }
      return $substring("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", ($imul(a, 2)), (($imul(a, 2)) + 2 >> 0));
    };
    BR = function(a, b, c, d, e) {
      var a, aa, ab, ac, ad, ae, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      f = DD.nil;
      g = "";
      if (c < 2 || c > 36) {
        $panic(new $String("strconv: illegal AppendInt/FormatInt base"));
      }
      h = DI.zero();
      i = 65;
      if (d) {
        b = new $Uint64(-b.$high, -b.$low);
      }
      if (c === 10) {
        if (true) {
          while (true) {
            if (!((b.$high > 0 || (b.$high === 0 && b.$low >= 1000000000)))) {
              break;
            }
            j = $div64(b, new $Uint64(0, 1000000000), false);
            l = (((k = $mul64(j, new $Uint64(0, 1000000000)), new $Uint64(b.$high - k.$high, b.$low - k.$low)).$low >>> 0));
            m = 4;
            while (true) {
              if (!(m > 0)) {
                break;
              }
              o = (n = l % 100, n === n ? n : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
              l = (p = l / (100), (p === p && p !== 1 / 0 && p !== -1 / 0) ? p >>> 0 : $throwRuntimeError("integer divide by zero"));
              i = i - (2) >> 0;
              (q = i + 1 >> 0, ((q < 0 || q >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[q] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((o + 1 >>> 0))));
              (r = i + 0 >> 0, ((r < 0 || r >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[r] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((o + 0 >>> 0))));
              m = m - (1) >> 0;
            }
            i = i - (1) >> 0;
            ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(((l * 2 >>> 0) + 1 >>> 0)));
            b = j;
          }
        }
        s = ((b.$low >>> 0));
        while (true) {
          if (!(s >= 100)) {
            break;
          }
          u = (t = s % 100, t === t ? t : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
          s = (v = s / (100), (v === v && v !== 1 / 0 && v !== -1 / 0) ? v >>> 0 : $throwRuntimeError("integer divide by zero"));
          i = i - (2) >> 0;
          (w = i + 1 >> 0, ((w < 0 || w >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[w] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((u + 1 >>> 0))));
          (x = i + 0 >> 0, ((x < 0 || x >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[x] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((u + 0 >>> 0))));
        }
        y = s * 2 >>> 0;
        i = i - (1) >> 0;
        ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((y + 1 >>> 0)));
        if (s >= 10) {
          i = i - (1) >> 0;
          ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(y));
        }
      } else if (BS(c)) {
        z = (((C.TrailingZeros(((c >>> 0))) >>> 0)) & 31) >>> 0;
        aa = (new $Uint64(0, c));
        ab = ((c >>> 0)) - 1 >>> 0;
        while (true) {
          if (!((b.$high > aa.$high || (b.$high === aa.$high && b.$low >= aa.$low)))) {
            break;
          }
          i = i - (1) >> 0;
          ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((((b.$low >>> 0)) & ab) >>> 0)));
          b = $shiftRightUint64(b, (z));
        }
        i = i - (1) >> 0;
        ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((b.$low >>> 0))));
      } else {
        ac = (new $Uint64(0, c));
        while (true) {
          if (!((b.$high > ac.$high || (b.$high === ac.$high && b.$low >= ac.$low)))) {
            break;
          }
          i = i - (1) >> 0;
          ad = $div64(b, ac, false);
          ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((ae = $mul64(ad, ac), new $Uint64(b.$high - ae.$high, b.$low - ae.$low)).$low >>> 0))));
          b = ad;
        }
        i = i - (1) >> 0;
        ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((b.$low >>> 0))));
      }
      if (d) {
        i = i - (1) >> 0;
        ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i] = 45);
      }
      if (e) {
        f = $appendSlice(a, $subslice(new DD(h), i));
        return [f, g];
      }
      g = ($bytesToString($subslice(new DD(h), i)));
      return [f, g];
    };
    BS = function(a) {
      var a;
      return (a & ((a - 1 >> 0))) === 0;
    };
    BT = function(a, b, c, d) {
      var a, b, c, d, e;
      return ($bytesToString(BV($makeSlice(DD, 0, (e = ($imul(3, a.length)) / 2, (e === e && e !== 1 / 0 && e !== -1 / 0) ? e >> 0 : $throwRuntimeError("integer divide by zero"))), a, b, c, d)));
    };
    BV = function(a, b, c, d, e) {
      var a, b, c, d, e, f, g, h;
      a = $append(a, c);
      f = 0;
      while (true) {
        if (!(b.length > 0)) {
          break;
        }
        g = ((b.charCodeAt(0) >> 0));
        f = 1;
        if (g >= 128) {
          h = D.DecodeRuneInString(b);
          g = h[0];
          f = h[1];
        }
        if ((f === 1) && (g === 65533)) {
          a = $appendSlice(a, "\\x");
          a = $append(a, "0123456789abcdef".charCodeAt((b.charCodeAt(0) >>> 4 << 24 >>> 24)));
          a = $append(a, "0123456789abcdef".charCodeAt(((b.charCodeAt(0) & 15) >>> 0)));
          b = $substring(b, f);
          continue;
        }
        a = BX(a, g, c, d, e);
        b = $substring(b, f);
      }
      a = $append(a, c);
      return a;
    };
    BW = function(a, b, c, d, e) {
      var a, b, c, d, e;
      a = $append(a, c);
      if (!D.ValidRune(b)) {
        b = 65533;
      }
      a = BX(a, b, c, d, e);
      a = $append(a, c);
      return a;
    };
    BX = function(a, b, c, d, e) {
      var a, b, c, d, e, f, g, h, i, j;
      f = DJ.zero();
      if ((b === ((c >> 0))) || (b === 92)) {
        a = $append(a, 92);
        a = $append(a, ((b << 24 >>> 24)));
        return a;
      }
      if (d) {
        if (b < 128 && CR(b)) {
          a = $append(a, ((b << 24 >>> 24)));
          return a;
        }
      } else if (CR(b) || e && CT(b)) {
        g = D.EncodeRune(new DD(f), b);
        a = $appendSlice(a, $subslice(new DD(f), 0, g));
        return a;
      }
      h = b;
      if (h === (7)) {
        a = $appendSlice(a, "\\a");
      } else if (h === (8)) {
        a = $appendSlice(a, "\\b");
      } else if (h === (12)) {
        a = $appendSlice(a, "\\f");
      } else if (h === (10)) {
        a = $appendSlice(a, "\\n");
      } else if (h === (13)) {
        a = $appendSlice(a, "\\r");
      } else if (h === (9)) {
        a = $appendSlice(a, "\\t");
      } else if (h === (11)) {
        a = $appendSlice(a, "\\v");
      } else {
        if (b < 32) {
          a = $appendSlice(a, "\\x");
          a = $append(a, "0123456789abcdef".charCodeAt((((b << 24 >>> 24)) >>> 4 << 24 >>> 24)));
          a = $append(a, "0123456789abcdef".charCodeAt(((((b << 24 >>> 24)) & 15) >>> 0)));
        } else if (b > 1114111) {
          b = 65533;
          a = $appendSlice(a, "\\u");
          i = 12;
          while (true) {
            if (!(i >= 0)) {
              break;
            }
            a = $append(a, "0123456789abcdef".charCodeAt((((b >> $min(((i >>> 0)), 31)) >> 0) & 15)));
            i = i - (4) >> 0;
          }
        } else if (b < 65536) {
          a = $appendSlice(a, "\\u");
          i = 12;
          while (true) {
            if (!(i >= 0)) {
              break;
            }
            a = $append(a, "0123456789abcdef".charCodeAt((((b >> $min(((i >>> 0)), 31)) >> 0) & 15)));
            i = i - (4) >> 0;
          }
        } else {
          a = $appendSlice(a, "\\U");
          j = 28;
          while (true) {
            if (!(j >= 0)) {
              break;
            }
            a = $append(a, "0123456789abcdef".charCodeAt((((b >> $min(((j >>> 0)), 31)) >> 0) & 15)));
            j = j - (4) >> 0;
          }
        }
      }
      return a;
    };
    BY = function(a) {
      var a;
      return BT(a, 34, false, false);
    };
    $pkg.Quote = BY;
    BZ = function(a, b) {
      var a, b;
      return BV(a, b, 34, false, false);
    };
    $pkg.AppendQuote = BZ;
    CA = function(a) {
      var a;
      return BT(a, 34, true, false);
    };
    $pkg.QuoteToASCII = CA;
    CB = function(a, b) {
      var a, b;
      return BV(a, b, 34, true, false);
    };
    $pkg.AppendQuoteToASCII = CB;
    CF = function(a, b) {
      var a, b;
      return BW(a, b, 39, false, false);
    };
    $pkg.AppendQuoteRune = CF;
    CH = function(a, b) {
      var a, b;
      return BW(a, b, 39, true, false);
    };
    $pkg.AppendQuoteRuneToASCII = CH;
    CK = function(a) {
      var a, b, c, d;
      while (true) {
        if (!(a.length > 0)) {
          break;
        }
        b = D.DecodeRuneInString(a);
        c = b[0];
        d = b[1];
        a = $substring(a, d);
        if (d > 1) {
          if (c === 65279) {
            return false;
          }
          continue;
        }
        if (c === 65533) {
          return false;
        }
        if ((c < 32 && !((c === 9))) || (c === 96) || (c === 127)) {
          return false;
        }
      }
      return true;
    };
    $pkg.CanBackquote = CK;
    CL = function(a) {
      var a, b, c, d, e, f, g, h, i, j;
      b = 0;
      c = false;
      d = ((a >> 0));
      if (48 <= d && d <= 57) {
        e = d - 48 >> 0;
        f = true;
        b = e;
        c = f;
        return [b, c];
      } else if (97 <= d && d <= 102) {
        g = (d - 97 >> 0) + 10 >> 0;
        h = true;
        b = g;
        c = h;
        return [b, c];
      } else if (65 <= d && d <= 70) {
        i = (d - 65 >> 0) + 10 >> 0;
        j = true;
        b = i;
        c = j;
        return [b, c];
      }
      return [b, c];
    };
    CM = function(a, b) {
      var a, aa, ab, ac, ad, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      c = 0;
      d = false;
      e = "";
      f = $ifaceNil;
      if (a.length === 0) {
        f = $pkg.ErrSyntax;
        return [c, d, e, f];
      }
      g = a.charCodeAt(0);
      if ((g === b) && ((b === 39) || (b === 34))) {
        f = $pkg.ErrSyntax;
        return [c, d, e, f];
      } else if (g >= 128) {
        h = D.DecodeRuneInString(a);
        i = h[0];
        j = h[1];
        k = i;
        l = true;
        m = $substring(a, j);
        n = $ifaceNil;
        c = k;
        d = l;
        e = m;
        f = n;
        return [c, d, e, f];
      } else if (!((g === 92))) {
        o = ((a.charCodeAt(0) >> 0));
        p = false;
        q = $substring(a, 1);
        r = $ifaceNil;
        c = o;
        d = p;
        e = q;
        f = r;
        return [c, d, e, f];
      }
      if (a.length <= 1) {
        f = $pkg.ErrSyntax;
        return [c, d, e, f];
      }
      s = a.charCodeAt(1);
      a = $substring(a, 2);
      switch (0) {
        default:
          t = s;
          if (t === (97)) {
            c = 7;
          } else if (t === (98)) {
            c = 8;
          } else if (t === (102)) {
            c = 12;
          } else if (t === (110)) {
            c = 10;
          } else if (t === (114)) {
            c = 13;
          } else if (t === (116)) {
            c = 9;
          } else if (t === (118)) {
            c = 11;
          } else if ((t === (120)) || (t === (117)) || (t === (85))) {
            u = 0;
            v = s;
            if (v === (120)) {
              u = 2;
            } else if (v === (117)) {
              u = 4;
            } else if (v === (85)) {
              u = 8;
            }
            w = 0;
            if (a.length < u) {
              f = $pkg.ErrSyntax;
              return [c, d, e, f];
            }
            x = 0;
            while (true) {
              if (!(x < u)) {
                break;
              }
              y = CL(a.charCodeAt(x));
              z = y[0];
              aa = y[1];
              if (!aa) {
                f = $pkg.ErrSyntax;
                return [c, d, e, f];
              }
              w = (w << 4 >> 0) | z;
              x = x + (1) >> 0;
            }
            a = $substring(a, u);
            if (s === 120) {
              c = w;
              break;
            }
            if (w > 1114111) {
              f = $pkg.ErrSyntax;
              return [c, d, e, f];
            }
            c = w;
            d = true;
          } else if ((t === (48)) || (t === (49)) || (t === (50)) || (t === (51)) || (t === (52)) || (t === (53)) || (t === (54)) || (t === (55))) {
            ab = ((s >> 0)) - 48 >> 0;
            if (a.length < 2) {
              f = $pkg.ErrSyntax;
              return [c, d, e, f];
            }
            ac = 0;
            while (true) {
              if (!(ac < 2)) {
                break;
              }
              ad = ((a.charCodeAt(ac) >> 0)) - 48 >> 0;
              if (ad < 0 || ad > 7) {
                f = $pkg.ErrSyntax;
                return [c, d, e, f];
              }
              ab = ((ab << 3 >> 0)) | ad;
              ac = ac + (1) >> 0;
            }
            a = $substring(a, 2);
            if (ab > 255) {
              f = $pkg.ErrSyntax;
              return [c, d, e, f];
            }
            c = ab;
          } else if (t === (92)) {
            c = 92;
          } else if ((t === (39)) || (t === (34))) {
            if (!((s === b))) {
              f = $pkg.ErrSyntax;
              return [c, d, e, f];
            }
            c = ((s >> 0));
          } else {
            f = $pkg.ErrSyntax;
            return [c, d, e, f];
          }
      }
      e = a;
      return [c, d, e, f];
    };
    $pkg.UnquoteChar = CM;
    CN = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r;
      b = a.length;
      if (b < 2) {
        return ["", $pkg.ErrSyntax];
      }
      c = a.charCodeAt(0);
      if (!((c === a.charCodeAt((b - 1 >> 0))))) {
        return ["", $pkg.ErrSyntax];
      }
      a = $substring(a, 1, (b - 1 >> 0));
      if (c === 96) {
        if (CO(a, 96)) {
          return ["", $pkg.ErrSyntax];
        }
        if (CO(a, 13)) {
          d = $makeSlice(DD, 0, (a.length - 1 >> 0));
          e = 0;
          while (true) {
            if (!(e < a.length)) {
              break;
            }
            if (!((a.charCodeAt(e) === 13))) {
              d = $append(d, a.charCodeAt(e));
            }
            e = e + (1) >> 0;
          }
          return [($bytesToString(d)), $ifaceNil];
        }
        return [a, $ifaceNil];
      }
      if (!((c === 34)) && !((c === 39))) {
        return ["", $pkg.ErrSyntax];
      }
      if (CO(a, 10)) {
        return ["", $pkg.ErrSyntax];
      }
      if (!CO(a, 92) && !CO(a, c)) {
        f = c;
        if (f === (34)) {
          if (D.ValidString(a)) {
            return [a, $ifaceNil];
          }
        } else if (f === (39)) {
          g = D.DecodeRuneInString(a);
          h = g[0];
          i = g[1];
          if ((i === a.length) && (!((h === 65533)) || !((i === 1)))) {
            return [a, $ifaceNil];
          }
        }
      }
      j = DJ.zero();
      l = $makeSlice(DD, 0, (k = ($imul(3, a.length)) / 2, (k === k && k !== 1 / 0 && k !== -1 / 0) ? k >> 0 : $throwRuntimeError("integer divide by zero")));
      while (true) {
        if (!(a.length > 0)) {
          break;
        }
        m = CM(a, c);
        n = m[0];
        o = m[1];
        p = m[2];
        q = m[3];
        if (!($interfaceIsEqual(q, $ifaceNil))) {
          return ["", q];
        }
        a = p;
        if (n < 128 || !o) {
          l = $append(l, ((n << 24 >>> 24)));
        } else {
          r = D.EncodeRune(new DD(j), n);
          l = $appendSlice(l, $subslice(new DD(j), 0, r));
        }
        if ((c === 39) && !((a.length === 0))) {
          return ["", $pkg.ErrSyntax];
        }
      }
      return [($bytesToString(l)), $ifaceNil];
    };
    $pkg.Unquote = CN;
    CO = function(a, b) {
      var a, b, c;
      c = 0;
      while (true) {
        if (!(c < a.length)) {
          break;
        }
        if (a.charCodeAt(c) === b) {
          return true;
        }
        c = c + (1) >> 0;
      }
      return false;
    };
    CP = function(a, b) {
      var a, b, c, d, e, f, g, h;
      c = 0;
      d = a.$length;
      e = c;
      f = d;
      while (true) {
        if (!(e < f)) {
          break;
        }
        h = e + (g = ((f - e >> 0)) / 2, (g === g && g !== 1 / 0 && g !== -1 / 0) ? g >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
        if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < b) {
          e = h + 1 >> 0;
        } else {
          f = h;
        }
      }
      return e;
    };
    CQ = function(a, b) {
      var a, b, c, d, e, f, g, h;
      c = 0;
      d = a.$length;
      e = c;
      f = d;
      while (true) {
        if (!(e < f)) {
          break;
        }
        h = e + (g = ((f - e >> 0)) / 2, (g === g && g !== 1 / 0 && g !== -1 / 0) ? g >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
        if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < b) {
          e = h + 1 >> 0;
        } else {
          f = h;
        }
      }
      return e;
    };
    CR = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u;
      if (a <= 255) {
        if (32 <= a && a <= 126) {
          return true;
        }
        if (161 <= a && a <= 255) {
          return !((a === 173));
        }
        return false;
      }
      if (0 <= a && a < 65536) {
        b = ((a << 16 >>> 16));
        c = BG;
        d = BH;
        e = b;
        f = c;
        g = d;
        h = CP(f, e);
        if (h >= f.$length || e < (i = (h & ~1) >> 0, ((i < 0 || i >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + i])) || (j = h | 1, ((j < 0 || j >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + j])) < e) {
          return false;
        }
        k = CP(g, e);
        return k >= g.$length || !((((k < 0 || k >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + k]) === e));
      }
      l = ((a >>> 0));
      m = BI;
      n = BJ;
      o = l;
      p = m;
      q = n;
      r = CQ(p, o);
      if (r >= p.$length || o < (s = (r & ~1) >> 0, ((s < 0 || s >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + s])) || (t = r | 1, ((t < 0 || t >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + t])) < o) {
        return false;
      }
      if (a >= 131072) {
        return true;
      }
      a = a - (65536) >> 0;
      u = CP(q, ((a << 16 >>> 16)));
      return u >= q.$length || !((((u < 0 || u >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + u]) === ((a << 16 >>> 16))));
    };
    $pkg.IsPrint = CR;
    CT = function(a) {
      var a, b, c;
      if (a > 65535) {
        return false;
      }
      b = ((a << 16 >>> 16));
      c = CP(BK, b);
      return c < BK.$length && (b === ((c < 0 || c >= BK.$length) ? ($throwRuntimeError("index out of range"), undefined) : BK.$array[BK.$offset + c]));
    };
    DE.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    DK.methods = [{
      prop: "set",
      name: "set",
      pkg: "strconv",
      typ: $funcType([$String], [$Bool], false)
    }, {
      prop: "floatBits",
      name: "floatBits",
      pkg: "strconv",
      typ: $funcType([DH], [$Uint64, $Bool], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Assign",
      name: "Assign",
      pkg: "",
      typ: $funcType([$Uint64], [], false)
    }, {
      prop: "Shift",
      name: "Shift",
      pkg: "",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "Round",
      name: "Round",
      pkg: "",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "RoundDown",
      name: "RoundDown",
      pkg: "",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "RoundUp",
      name: "RoundUp",
      pkg: "",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "RoundedInteger",
      name: "RoundedInteger",
      pkg: "",
      typ: $funcType([], [$Uint64], false)
    }];
    DM.methods = [{
      prop: "floatBits",
      name: "floatBits",
      pkg: "strconv",
      typ: $funcType([DH], [$Uint64, $Bool], false)
    }, {
      prop: "AssignComputeBounds",
      name: "AssignComputeBounds",
      pkg: "",
      typ: $funcType([$Uint64, $Int, $Bool, DH], [AK, AK], false)
    }, {
      prop: "Normalize",
      name: "Normalize",
      pkg: "",
      typ: $funcType([], [$Uint], false)
    }, {
      prop: "Multiply",
      name: "Multiply",
      pkg: "",
      typ: $funcType([AK], [], false)
    }, {
      prop: "AssignDecimal",
      name: "AssignDecimal",
      pkg: "",
      typ: $funcType([$Uint64, $Int, $Bool, $Bool, DH], [$Bool], false)
    }, {
      prop: "frexp10",
      name: "frexp10",
      pkg: "strconv",
      typ: $funcType([], [$Int, $Int], false)
    }, {
      prop: "FixedDecimal",
      name: "FixedDecimal",
      pkg: "",
      typ: $funcType([DL, $Int], [$Bool], false)
    }, {
      prop: "ShortestDecimal",
      name: "ShortestDecimal",
      pkg: "",
      typ: $funcType([DL, DM, DM], [$Bool], false)
    }];
    T.init("", [{
      prop: "Func",
      name: "Func",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Num",
      name: "Num",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Err",
      name: "Err",
      embedded: false,
      exported: true,
      typ: $error,
      tag: ""
    }]);
    AB.init("strconv", [{
      prop: "d",
      name: "d",
      embedded: false,
      exported: false,
      typ: DC,
      tag: ""
    }, {
      prop: "nd",
      name: "nd",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "dp",
      name: "dp",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "neg",
      name: "neg",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "trunc",
      name: "trunc",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    AF.init("strconv", [{
      prop: "delta",
      name: "delta",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "cutoff",
      name: "cutoff",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }]);
    AK.init("strconv", [{
      prop: "mant",
      name: "mant",
      embedded: false,
      exported: false,
      typ: $Uint64,
      tag: ""
    }, {
      prop: "exp",
      name: "exp",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "neg",
      name: "neg",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    AR.init("strconv", [{
      prop: "mantbits",
      name: "mantbits",
      embedded: false,
      exported: false,
      typ: $Uint,
      tag: ""
    }, {
      prop: "expbits",
      name: "expbits",
      embedded: false,
      exported: false,
      typ: $Uint,
      tag: ""
    }, {
      prop: "bias",
      name: "bias",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }]);
    BA.init("strconv", [{
      prop: "d",
      name: "d",
      embedded: false,
      exported: false,
      typ: DD,
      tag: ""
    }, {
      prop: "nd",
      name: "nd",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "dp",
      name: "dp",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "neg",
      name: "neg",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = B.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            H = true;
            L = new CW([1, 3, 6, 9, 13, 16, 19, 23, 26]);
            M = new CX([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);
            N = new CY([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);
            $pkg.ErrRange = B.New("value out of range");
            $pkg.ErrSyntax = B.New("invalid syntax");
            AG = new CZ([new AF.ptr(0, ""), new AF.ptr(1, "5"), new AF.ptr(1, "25"), new AF.ptr(1, "125"), new AF.ptr(2, "625"), new AF.ptr(2, "3125"), new AF.ptr(2, "15625"), new AF.ptr(3, "78125"), new AF.ptr(3, "390625"), new AF.ptr(3, "1953125"), new AF.ptr(4, "9765625"), new AF.ptr(4, "48828125"), new AF.ptr(4, "244140625"), new AF.ptr(4, "1220703125"), new AF.ptr(5, "6103515625"), new AF.ptr(5, "30517578125"), new AF.ptr(5, "152587890625"), new AF.ptr(6, "762939453125"), new AF.ptr(6, "3814697265625"), new AF.ptr(6, "19073486328125"), new AF.ptr(7, "95367431640625"), new AF.ptr(7, "476837158203125"), new AF.ptr(7, "2384185791015625"), new AF.ptr(7, "11920928955078125"), new AF.ptr(8, "59604644775390625"), new AF.ptr(8, "298023223876953125"), new AF.ptr(8, "1490116119384765625"), new AF.ptr(9, "7450580596923828125"), new AF.ptr(9, "37252902984619140625"), new AF.ptr(9, "186264514923095703125"), new AF.ptr(10, "931322574615478515625"), new AF.ptr(10, "4656612873077392578125"), new AF.ptr(10, "23283064365386962890625"), new AF.ptr(10, "116415321826934814453125"), new AF.ptr(11, "582076609134674072265625"), new AF.ptr(11, "2910383045673370361328125"), new AF.ptr(11, "14551915228366851806640625"), new AF.ptr(12, "72759576141834259033203125"), new AF.ptr(12, "363797880709171295166015625"), new AF.ptr(12, "1818989403545856475830078125"), new AF.ptr(13, "9094947017729282379150390625"), new AF.ptr(13, "45474735088646411895751953125"), new AF.ptr(13, "227373675443232059478759765625"), new AF.ptr(13, "1136868377216160297393798828125"), new AF.ptr(14, "5684341886080801486968994140625"), new AF.ptr(14, "28421709430404007434844970703125"), new AF.ptr(14, "142108547152020037174224853515625"), new AF.ptr(15, "710542735760100185871124267578125"), new AF.ptr(15, "3552713678800500929355621337890625"), new AF.ptr(15, "17763568394002504646778106689453125"), new AF.ptr(16, "88817841970012523233890533447265625"), new AF.ptr(16, "444089209850062616169452667236328125"), new AF.ptr(16, "2220446049250313080847263336181640625"), new AF.ptr(16, "11102230246251565404236316680908203125"), new AF.ptr(17, "55511151231257827021181583404541015625"), new AF.ptr(17, "277555756156289135105907917022705078125"), new AF.ptr(17, "1387778780781445675529539585113525390625"), new AF.ptr(18, "6938893903907228377647697925567626953125"), new AF.ptr(18, "34694469519536141888238489627838134765625"), new AF.ptr(18, "173472347597680709441192448139190673828125"), new AF.ptr(19, "867361737988403547205962240695953369140625")]);
            AL = $toNativeArray($kindStruct, [new AK.ptr(new $Uint64(2147483648, 0), -63, false), new AK.ptr(new $Uint64(2684354560, 0), -60, false), new AK.ptr(new $Uint64(3355443200, 0), -57, false), new AK.ptr(new $Uint64(4194304000, 0), -54, false), new AK.ptr(new $Uint64(2621440000, 0), -50, false), new AK.ptr(new $Uint64(3276800000, 0), -47, false), new AK.ptr(new $Uint64(4096000000, 0), -44, false), new AK.ptr(new $Uint64(2560000000, 0), -40, false)]);
            AM = $toNativeArray($kindStruct, [new AK.ptr(new $Uint64(4203730336, 136053384), -1220, false), new AK.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new AK.ptr(new $Uint64(2333539104, 810921078), -1166, false), new AK.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new AK.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new AK.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new AK.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new AK.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new AK.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new AK.ptr(new $Uint64(2379227053, 2424306748), -980, false), new AK.ptr(new $Uint64(3545324584, 827693699), -954, false), new AK.ptr(new $Uint64(2641472655, 2913388981), -927, false), new AK.ptr(new $Uint64(3936100983, 602835915), -901, false), new AK.ptr(new $Uint64(2932623761, 1081627501), -874, false), new AK.ptr(new $Uint64(2184974969, 1572261463), -847, false), new AK.ptr(new $Uint64(3255866422, 1308317239), -821, false), new AK.ptr(new $Uint64(2425809519, 944281679), -794, false), new AK.ptr(new $Uint64(3614737867, 629291719), -768, false), new AK.ptr(new $Uint64(2693189581, 2545915892), -741, false), new AK.ptr(new $Uint64(4013165208, 388672741), -715, false), new AK.ptr(new $Uint64(2990041083, 708162190), -688, false), new AK.ptr(new $Uint64(2227754207, 3536207675), -661, false), new AK.ptr(new $Uint64(3319612455, 450088378), -635, false), new AK.ptr(new $Uint64(2473304014, 3139815830), -608, false), new AK.ptr(new $Uint64(3685510180, 2103616900), -582, false), new AK.ptr(new $Uint64(2745919064, 224385782), -555, false), new AK.ptr(new $Uint64(4091738259, 3737383206), -529, false), new AK.ptr(new $Uint64(3048582568, 2868871352), -502, false), new AK.ptr(new $Uint64(2271371013, 1820084875), -475, false), new AK.ptr(new $Uint64(3384606560, 885076051), -449, false), new AK.ptr(new $Uint64(2521728396, 2444895829), -422, false), new AK.ptr(new $Uint64(3757668132, 1881767613), -396, false), new AK.ptr(new $Uint64(2799680927, 3102062735), -369, false), new AK.ptr(new $Uint64(4171849679, 2289335700), -343, false), new AK.ptr(new $Uint64(3108270227, 2410191823), -316, false), new AK.ptr(new $Uint64(2315841784, 3205436779), -289, false), new AK.ptr(new $Uint64(3450873173, 1697722806), -263, false), new AK.ptr(new $Uint64(2571100870, 3497754540), -236, false), new AK.ptr(new $Uint64(3831238852, 707476230), -210, false), new AK.ptr(new $Uint64(2854495385, 1769181907), -183, false), new AK.ptr(new $Uint64(4253529586, 2197867022), -157, false), new AK.ptr(new $Uint64(3169126500, 2450594539), -130, false), new AK.ptr(new $Uint64(2361183241, 1867548876), -103, false), new AK.ptr(new $Uint64(3518437208, 3793315116), -77, false), new AK.ptr(new $Uint64(2621440000, 0), -50, false), new AK.ptr(new $Uint64(3906250000, 0), -24, false), new AK.ptr(new $Uint64(2910383045, 2892103680), 3, false), new AK.ptr(new $Uint64(2168404344, 4170451332), 30, false), new AK.ptr(new $Uint64(3231174267, 3372684723), 56, false), new AK.ptr(new $Uint64(2407412430, 2078956656), 83, false), new AK.ptr(new $Uint64(3587324068, 2884206696), 109, false), new AK.ptr(new $Uint64(2672764710, 395977285), 136, false), new AK.ptr(new $Uint64(3982729777, 3569679143), 162, false), new AK.ptr(new $Uint64(2967364920, 2361961896), 189, false), new AK.ptr(new $Uint64(2210859150, 447440347), 216, false), new AK.ptr(new $Uint64(3294436857, 1114709402), 242, false), new AK.ptr(new $Uint64(2454546732, 2786846552), 269, false), new AK.ptr(new $Uint64(3657559652, 443583978), 295, false), new AK.ptr(new $Uint64(2725094297, 2599384906), 322, false), new AK.ptr(new $Uint64(4060706939, 3028118405), 348, false), new AK.ptr(new $Uint64(3025462433, 2044532855), 375, false), new AK.ptr(new $Uint64(2254145170, 1536935362), 402, false), new AK.ptr(new $Uint64(3358938053, 3365297469), 428, false), new AK.ptr(new $Uint64(2502603868, 4204241075), 455, false), new AK.ptr(new $Uint64(3729170365, 2577424355), 481, false), new AK.ptr(new $Uint64(2778448436, 3677981733), 508, false), new AK.ptr(new $Uint64(4140210802, 2744688476), 534, false), new AK.ptr(new $Uint64(3084697427, 1424604878), 561, false), new AK.ptr(new $Uint64(2298278679, 4062331362), 588, false), new AK.ptr(new $Uint64(3424702107, 3546052773), 614, false), new AK.ptr(new $Uint64(2551601907, 2065781727), 641, false), new AK.ptr(new $Uint64(3802183132, 2535403578), 667, false), new AK.ptr(new $Uint64(2832847187, 1558426518), 694, false), new AK.ptr(new $Uint64(4221271257, 2762425404), 720, false), new AK.ptr(new $Uint64(3145092172, 2812560400), 747, false), new AK.ptr(new $Uint64(2343276271, 3057687578), 774, false), new AK.ptr(new $Uint64(3491753744, 2790753324), 800, false), new AK.ptr(new $Uint64(2601559269, 3918606633), 827, false), new AK.ptr(new $Uint64(3876625403, 2711358621), 853, false), new AK.ptr(new $Uint64(2888311001, 1648096297), 880, false), new AK.ptr(new $Uint64(2151959390, 2057817989), 907, false), new AK.ptr(new $Uint64(3206669376, 61660461), 933, false), new AK.ptr(new $Uint64(2389154863, 1581580175), 960, false), new AK.ptr(new $Uint64(3560118173, 2626467905), 986, false), new AK.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new AK.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new AK.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
            AN = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
            AS = new AR.ptr(23, 8, -127);
            AT = new AR.ptr(52, 11, -1023);
            BG = new DA([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2154, 2208, 2237, 2260, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2557, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2809, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3162, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3328, 3407, 3412, 3427, 3430, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5109, 5112, 5117, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7304, 7360, 7367, 7376, 7417, 7424, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8383, 8400, 8432, 8448, 8587, 8592, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11218, 11244, 11247, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11849, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12590, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40938, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42935, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43205, 43214, 43225, 43232, 43261, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43877, 43888, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
            BH = new DA([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2143, 2229, 2274, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2816, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7674, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42927, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
            BI = new DB([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66349, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67808, 67829, 67835, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68028, 68047, 68050, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 68736, 68786, 68800, 68850, 68858, 68863, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70093, 70096, 70132, 70144, 70206, 70272, 70313, 70320, 70378, 70384, 70393, 70400, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70749, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71133, 71168, 71236, 71248, 71257, 71264, 71276, 71296, 71351, 71360, 71369, 71424, 71449, 71453, 71467, 71472, 71487, 71840, 71922, 71935, 71935, 72192, 72263, 72272, 72323, 72326, 72354, 72384, 72440, 72704, 72773, 72784, 72812, 72816, 72847, 72850, 72886, 72960, 73014, 73018, 73031, 73040, 73049, 73728, 74649, 74752, 74868, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 94176, 94177, 94208, 100332, 100352, 101106, 110592, 110878, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119272, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 121483, 121499, 121519, 122880, 122904, 122907, 122922, 124928, 125124, 125127, 125142, 125184, 125258, 125264, 125273, 125278, 125279, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127404, 127462, 127490, 127504, 127547, 127552, 127560, 127568, 127569, 127584, 127589, 127744, 128724, 128736, 128748, 128752, 128760, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 129280, 129291, 129296, 129356, 129360, 129387, 129408, 129431, 129472, 129472, 129488, 129510, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 183984, 191456, 194560, 195101, 917760, 917999]);
            BJ = new DA([12, 39, 59, 62, 399, 926, 2057, 2102, 2134, 2291, 2564, 2580, 2584, 4285, 4405, 4576, 4626, 4743, 4745, 4750, 4766, 4868, 4905, 4913, 4916, 5210, 5212, 6813, 7177, 7223, 7336, 7431, 7434, 7483, 7486, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 55968, 57351, 57378, 57381, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 63807]);
            BK = new DA([160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288]);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["reflect"] = (function() {
    var $pkg = {},
      $init, A, C, H, D, B, E, F, G, N, P, Q, R, AW, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP, CR, DA, DB, DC, DF, DG, DH, FA, FB, FE, HO, HP, HQ, HT, HU, HV, HW, HX, HY, HZ, IA, IB, IC, ID, IE, IF, IG, IH, II, IL, IM, IN, IO, IP, IQ, JB, JD, JE, JG, JH, JI, JJ, JQ, JR, I, O, S, U, W, BH, BI, BM, CS, FN, J, K, L, M, T, V, X, Y, Z, AA, AB, AC, AD, AE, AH, AJ, AK, AL, AM, AO, AR, AS, AT, AU, AV, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BJ, BK, BL, BN, BO, BS, BT, DJ, DL, DM, DN, DO, ES, EX, FO, FT, GE, GF, GH, GJ, GK, GL, GM, GN, GO, GP, GQ, GR, GS, GT, GU, GV, GW, GX, GY, GZ, HA, HB, HC, HD, HE;
    A = $packages["errors"];
    C = $packages["github.com/gopherjs/gopherjs/js"];
    H = $packages["math"];
    D = $packages["runtime"];
    B = $packages["strconv"];
    E = $packages["sync"];
    F = $packages["unicode"];
    G = $packages["unicode/utf8"];
    N = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", true, "reflect", false, function(pkgPath_, mcount_, xcount_, moff_, _methods_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.pkgPath = 0;
        this.mcount = 0;
        this.xcount = 0;
        this.moff = 0;
        this._methods = HZ.nil;
        return;
      }
      this.pkgPath = pkgPath_;
      this.mcount = mcount_;
      this.xcount = xcount_;
      this.moff = moff_;
      this._methods = _methods_;
    });
    P = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", true, "reflect", false, function(rtype_, inCount_, outCount_, _in_, _out_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.rtype = new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0);
        this.inCount = 0;
        this.outCount = 0;
        this._in = HQ.nil;
        this._out = HQ.nil;
        return;
      }
      this.rtype = rtype_;
      this.inCount = inCount_;
      this.outCount = outCount_;
      this._in = _in_;
      this._out = _out_;
    });
    Q = $pkg.name = $newType(0, $kindStruct, "reflect.name", true, "reflect", false, function(bytes_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.bytes = HY.nil;
        return;
      }
      this.bytes = bytes_;
    });
    R = $pkg.nameData = $newType(0, $kindStruct, "reflect.nameData", true, "reflect", false, function(name_, tag_, exported_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.name = "";
        this.tag = "";
        this.exported = false;
        return;
      }
      this.name = name_;
      this.tag = tag_;
      this.exported = exported_;
    });
    AW = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", true, "reflect", false, function(t_, m_, keys_, i_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.t = $ifaceNil;
        this.m = null;
        this.keys = null;
        this.i = 0;
        return;
      }
      this.t = t_;
      this.m = m_;
      this.keys = keys_;
      this.i = i_;
    });
    CA = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", true, "reflect", true, null);
    CB = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", true, "reflect", true, null);
    CC = $pkg.tflag = $newType(1, $kindUint8, "reflect.tflag", true, "reflect", false, null);
    CD = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", true, "reflect", false, function(size_, ptrdata_, hash_, tflag_, align_, fieldAlign_, kind_, alg_, gcdata_, str_, ptrToThis_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.size = 0;
        this.ptrdata = 0;
        this.hash = 0;
        this.tflag = 0;
        this.align = 0;
        this.fieldAlign = 0;
        this.kind = 0;
        this.alg = HX.nil;
        this.gcdata = HY.nil;
        this.str = 0;
        this.ptrToThis = 0;
        return;
      }
      this.size = size_;
      this.ptrdata = ptrdata_;
      this.hash = hash_;
      this.tflag = tflag_;
      this.align = align_;
      this.fieldAlign = fieldAlign_;
      this.kind = kind_;
      this.alg = alg_;
      this.gcdata = gcdata_;
      this.str = str_;
      this.ptrToThis = ptrToThis_;
    });
    CE = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", true, "reflect", false, function(hash_, equal_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.hash = $throwNilPointerError;
        this.equal = $throwNilPointerError;
        return;
      }
      this.hash = hash_;
      this.equal = equal_;
    });
    CF = $pkg.method = $newType(0, $kindStruct, "reflect.method", true, "reflect", false, function(name_, mtyp_, ifn_, tfn_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.name = 0;
        this.mtyp = 0;
        this.ifn = 0;
        this.tfn = 0;
        return;
      }
      this.name = name_;
      this.mtyp = mtyp_;
      this.ifn = ifn_;
      this.tfn = tfn_;
    });
    CG = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", true, "reflect", true, null);
    CH = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", true, "reflect", false, function(rtype_, elem_, slice_, len_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.rtype = new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0);
        this.elem = HP.nil;
        this.slice = HP.nil;
        this.len = 0;
        return;
      }
      this.rtype = rtype_;
      this.elem = elem_;
      this.slice = slice_;
      this.len = len_;
    });
    CI = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", true, "reflect", false, function(rtype_, elem_, dir_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.rtype = new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0);
        this.elem = HP.nil;
        this.dir = 0;
        return;
      }
      this.rtype = rtype_;
      this.elem = elem_;
      this.dir = dir_;
    });
    CJ = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", true, "reflect", false, function(name_, typ_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.name = 0;
        this.typ = 0;
        return;
      }
      this.name = name_;
      this.typ = typ_;
    });
    CK = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", true, "reflect", false, function(rtype_, pkgPath_, methods_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.rtype = new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0);
        this.pkgPath = new Q.ptr(HY.nil);
        this.methods = IA.nil;
        return;
      }
      this.rtype = rtype_;
      this.pkgPath = pkgPath_;
      this.methods = methods_;
    });
    CL = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", true, "reflect", false, function(rtype_, key_, elem_, bucket_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_, reflexivekey_, needkeyupdate_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.rtype = new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0);
        this.key = HP.nil;
        this.elem = HP.nil;
        this.bucket = HP.nil;
        this.keysize = 0;
        this.indirectkey = 0;
        this.valuesize = 0;
        this.indirectvalue = 0;
        this.bucketsize = 0;
        this.reflexivekey = false;
        this.needkeyupdate = false;
        return;
      }
      this.rtype = rtype_;
      this.key = key_;
      this.elem = elem_;
      this.bucket = bucket_;
      this.keysize = keysize_;
      this.indirectkey = indirectkey_;
      this.valuesize = valuesize_;
      this.indirectvalue = indirectvalue_;
      this.bucketsize = bucketsize_;
      this.reflexivekey = reflexivekey_;
      this.needkeyupdate = needkeyupdate_;
    });
    CM = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", true, "reflect", false, function(rtype_, elem_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.rtype = new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0);
        this.elem = HP.nil;
        return;
      }
      this.rtype = rtype_;
      this.elem = elem_;
    });
    CN = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", true, "reflect", false, function(rtype_, elem_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.rtype = new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0);
        this.elem = HP.nil;
        return;
      }
      this.rtype = rtype_;
      this.elem = elem_;
    });
    CO = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", true, "reflect", false, function(name_, typ_, offsetEmbed_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.name = new Q.ptr(HY.nil);
        this.typ = HP.nil;
        this.offsetEmbed = 0;
        return;
      }
      this.name = name_;
      this.typ = typ_;
      this.offsetEmbed = offsetEmbed_;
    });
    CP = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", true, "reflect", false, function(rtype_, pkgPath_, fields_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.rtype = new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0);
        this.pkgPath = new Q.ptr(HY.nil);
        this.fields = IB.nil;
        return;
      }
      this.rtype = rtype_;
      this.pkgPath = pkgPath_;
      this.fields = fields_;
    });
    CR = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", true, "reflect", true, function(Name_, PkgPath_, Type_, Func_, Index_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Name = "";
        this.PkgPath = "";
        this.Type = $ifaceNil;
        this.Func = new FA.ptr(HP.nil, 0, 0);
        this.Index = 0;
        return;
      }
      this.Name = Name_;
      this.PkgPath = PkgPath_;
      this.Type = Type_;
      this.Func = Func_;
      this.Index = Index_;
    });
    DA = $pkg.nameOff = $newType(4, $kindInt32, "reflect.nameOff", true, "reflect", false, null);
    DB = $pkg.typeOff = $newType(4, $kindInt32, "reflect.typeOff", true, "reflect", false, null);
    DC = $pkg.textOff = $newType(4, $kindInt32, "reflect.textOff", true, "reflect", false, null);
    DF = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", true, "reflect", true, function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Name = "";
        this.PkgPath = "";
        this.Type = $ifaceNil;
        this.Tag = "";
        this.Offset = 0;
        this.Index = IN.nil;
        this.Anonymous = false;
        return;
      }
      this.Name = Name_;
      this.PkgPath = PkgPath_;
      this.Type = Type_;
      this.Tag = Tag_;
      this.Offset = Offset_;
      this.Index = Index_;
      this.Anonymous = Anonymous_;
    });
    DG = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", true, "reflect", true, null);
    DH = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", true, "reflect", false, function(typ_, index_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.typ = IP.nil;
        this.index = IN.nil;
        return;
      }
      this.typ = typ_;
      this.index = index_;
    });
    FA = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", true, "reflect", true, function(typ_, ptr_, flag_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.typ = HP.nil;
        this.ptr = 0;
        this.flag = 0;
        return;
      }
      this.typ = typ_;
      this.ptr = ptr_;
      this.flag = flag_;
    });
    FB = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", true, "reflect", false, null);
    FE = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", true, "reflect", true, function(Method_, Kind_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Method = "";
        this.Kind = 0;
        return;
      }
      this.Method = Method_;
      this.Kind = Kind_;
    });
    HO = $sliceType(Q);
    HP = $ptrType(CD);
    HQ = $sliceType(HP);
    HT = $sliceType($emptyInterface);
    HU = $ptrType(C.Object);
    HV = $funcType([HT], [HU], true);
    HW = $sliceType($String);
    HX = $ptrType(CE);
    HY = $ptrType($Uint8);
    HZ = $sliceType(CF);
    IA = $sliceType(CJ);
    IB = $sliceType(CO);
    IC = $ptrType(N);
    ID = $ptrType(R);
    IE = $structType("reflect", [{
      prop: "str",
      name: "str",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }]);
    IF = $sliceType(HU);
    IG = $sliceType(FA);
    IH = $sliceType(CA);
    II = $sliceType(IF);
    IL = $ptrType(CK);
    IM = $ptrType(CJ);
    IN = $sliceType($Int);
    IO = $sliceType(DH);
    IP = $ptrType(CP);
    IQ = $sliceType($Uint8);
    JB = $ptrType($UnsafePointer);
    JD = $sliceType($Int32);
    JE = $ptrType(P);
    JG = $funcType([$String], [$Bool], false);
    JH = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
    JI = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
    JJ = $ptrType(CO);
    JQ = $arrayType($Uintptr, 2);
    JR = $ptrType(FE);
    J = function() {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            am = (function(am) {
              var am;
            });
            $r = am((an = new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0), new an.constructor.elem(an)));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = am((ao = new N.ptr(0, 0, 0, 0, HZ.nil), new ao.constructor.elem(ao)));
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = am((ap = new CF.ptr(0, 0, 0, 0), new ap.constructor.elem(ap)));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = am((aq = new CH.ptr(new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0), HP.nil, HP.nil, 0), new aq.constructor.elem(aq)));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = am((ar = new CI.ptr(new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0), HP.nil, 0), new ar.constructor.elem(ar)));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = am((as = new P.ptr(new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0), 0, 0, HQ.nil, HQ.nil), new as.constructor.elem(as)));
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = am((at = new CK.ptr(new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0), new Q.ptr(HY.nil), IA.nil), new at.constructor.elem(at)));
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = am((au = new CL.ptr(new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0), HP.nil, HP.nil, HP.nil, 0, 0, 0, 0, 0, false, false), new au.constructor.elem(au)));
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = am((av = new CM.ptr(new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0), HP.nil), new av.constructor.elem(av)));
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = am((aw = new CN.ptr(new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0), HP.nil), new aw.constructor.elem(aw)));
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = am((ax = new CP.ptr(new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0), new Q.ptr(HY.nil), IB.nil), new ax.constructor.elem(ax)));
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = am((ay = new CJ.ptr(0, 0), new ay.constructor.elem(ay)));
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = am((az = new CO.ptr(new Q.ptr(HY.nil), HP.nil, 0), new az.constructor.elem(az)));
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            I = true;
            FN = $assertType(AD(new $Uint8(0)), HP);
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: J
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    K = function(am) {
      var am;
      return am.jsType;
    };
    L = function(am) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, bq, br, bs, bt, bu, bv, bw, bx, by;
      if (am.reflectType === undefined) {
        an = new CD.ptr(((($parseInt(am.size) >> 0) >>> 0)), 0, 0, 0, 0, 0, ((($parseInt(am.kind) >> 0) << 24 >>> 24)), HX.nil, HY.nil, V($clone(T(Y(am.string), "", !!(am.exported)), Q)), 0);
        an.jsType = am;
        am.reflectType = an;
        ao = $methodSet(am);
        if (!(($parseInt(ao.length) === 0)) || !!(am.named)) {
          an.tflag = (an.tflag | (1)) >>> 0;
          if (!!(am.named)) {
            an.tflag = (an.tflag | (4)) >>> 0;
          }
          ap = HZ.nil;
          aq = 0;
          while (true) {
            if (!(aq < $parseInt(ao.length))) {
              break;
            }
            ar = ao[aq];
            as = Y(ar.pkg) === "";
            if (!as) {
              aq = aq + (1) >> 0;
              continue;
            }
            ap = $append(ap, new CF.ptr(V($clone(T(Y(ar.name), "", as), Q)), X(L(ar.typ)), 0, 0));
            aq = aq + (1) >> 0;
          }
          at = ((ap.$length << 16 >>> 16));
          au = 0;
          while (true) {
            if (!(au < $parseInt(ao.length))) {
              break;
            }
            av = ao[au];
            aw = Y(av.pkg) === "";
            if (aw) {
              au = au + (1) >> 0;
              continue;
            }
            ap = $append(ap, new CF.ptr(V($clone(T(Y(av.name), "", aw), Q)), X(L(av.typ)), 0, 0));
            au = au + (1) >> 0;
          }
          ax = new N.ptr(V($clone(T(Y(am.pkg), "", false), Q)), (($parseInt(ao.length) << 16 >>> 16)), at, 0, ap);
          ay = an;
          (O || $throwRuntimeError("assignment to entry in nil map"))[HP.keyFor(ay)] = {
            k: ay,
            v: ax
          };
          ax.jsType = am;
        }
        az = an.Kind();
        if (az === (17)) {
          M(an, new CH.ptr(new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0), L(am.elem), HP.nil, ((($parseInt(am.len) >> 0) >>> 0))));
        } else if (az === (18)) {
          ba = 3;
          if (!!(am.sendOnly)) {
            ba = 2;
          }
          if (!!(am.recvOnly)) {
            ba = 1;
          }
          M(an, new CI.ptr(new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0), L(am.elem), ((ba >>> 0))));
        } else if (az === (19)) {
          bb = am.params;
          bc = $makeSlice(HQ, $parseInt(bb.length));
          bd = bc;
          be = 0;
          while (true) {
            if (!(be < bd.$length)) {
              break;
            }
            bf = be;
            ((bf < 0 || bf >= bc.$length) ? ($throwRuntimeError("index out of range"), undefined) : bc.$array[bc.$offset + bf] = L(bb[bf]));
            be++;
          }
          bg = am.results;
          bh = $makeSlice(HQ, $parseInt(bg.length));
          bi = bh;
          bj = 0;
          while (true) {
            if (!(bj < bi.$length)) {
              break;
            }
            bk = bj;
            ((bk < 0 || bk >= bh.$length) ? ($throwRuntimeError("index out of range"), undefined) : bh.$array[bh.$offset + bk] = L(bg[bk]));
            bj++;
          }
          bl = (($parseInt(bg.length) << 16 >>> 16));
          if (!!(am.variadic)) {
            bl = (bl | (32768)) >>> 0;
          }
          M(an, new P.ptr($clone(an, CD), (($parseInt(bb.length) << 16 >>> 16)), bl, bc, bh));
        } else if (az === (20)) {
          bm = am.methods;
          bn = $makeSlice(IA, $parseInt(bm.length));
          bo = bn;
          bp = 0;
          while (true) {
            if (!(bp < bo.$length)) {
              break;
            }
            bq = bp;
            br = bm[bq];
            CJ.copy(((bq < 0 || bq >= bn.$length) ? ($throwRuntimeError("index out of range"), undefined) : bn.$array[bn.$offset + bq]), new CJ.ptr(V($clone(T(Y(br.name), "", Y(br.pkg) === ""), Q)), X(L(br.typ))));
            bp++;
          }
          M(an, new CK.ptr($clone(an, CD), $clone(T(Y(am.pkg), "", false), Q), bn));
        } else if (az === (21)) {
          M(an, new CL.ptr(new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0), L(am.key), L(am.elem), HP.nil, 0, 0, 0, 0, 0, false, false));
        } else if (az === (22)) {
          M(an, new CM.ptr(new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0), L(am.elem)));
        } else if (az === (23)) {
          M(an, new CN.ptr(new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0), L(am.elem)));
        } else if (az === (25)) {
          bs = am.fields;
          bt = $makeSlice(IB, $parseInt(bs.length));
          bu = bt;
          bv = 0;
          while (true) {
            if (!(bv < bu.$length)) {
              break;
            }
            bw = bv;
            bx = bs[bw];
            by = ((bw >>> 0)) << 1 >>> 0;
            if (!!(bx.embedded)) {
              by = (by | (1)) >>> 0;
            }
            CO.copy(((bw < 0 || bw >= bt.$length) ? ($throwRuntimeError("index out of range"), undefined) : bt.$array[bt.$offset + bw]), new CO.ptr($clone(T(Y(bx.name), Y(bx.tag), !!(bx.exported)), Q), L(bx.typ), by));
            bv++;
          }
          M(an, new CP.ptr($clone(an, CD), $clone(T(Y(am.pkgPath), "", false), Q), bt));
        }
      }
      return ((am.reflectType));
    };
    M = function(am, an) {
      var am, an;
      am.kindType = an;
      an.rtype = am;
    };
    N.ptr.prototype.methods = function() {
      var am;
      am = this;
      return am._methods;
    };
    N.prototype.methods = function() {
      return this.$val.methods();
    };
    N.ptr.prototype.exportedMethods = function() {
      var am;
      am = this;
      return $subslice(am._methods, 0, am.xcount, am.xcount);
    };
    N.prototype.exportedMethods = function() {
      return this.$val.exportedMethods();
    };
    CD.ptr.prototype.uncommon = function() {
      var am, an;
      am = this;
      return (an = O[HP.keyFor(am)], an !== undefined ? an.v : IC.nil);
    };
    CD.prototype.uncommon = function() {
      return this.$val.uncommon();
    };
    P.ptr.prototype.in$ = function() {
      var am;
      am = this;
      return am._in;
    };
    P.prototype.in$ = function() {
      return this.$val.in$();
    };
    P.ptr.prototype.out = function() {
      var am;
      am = this;
      return am._out;
    };
    P.prototype.out = function() {
      return this.$val.out();
    };
    Q.ptr.prototype.name = function() {
      var am, an, ao;
      am = "";
      an = this;
      am = (ao = S[HY.keyFor(an.bytes)], ao !== undefined ? ao.v : ID.nil).name;
      return am;
    };
    Q.prototype.name = function() {
      return this.$val.name();
    };
    Q.ptr.prototype.tag = function() {
      var am, an, ao;
      am = "";
      an = this;
      am = (ao = S[HY.keyFor(an.bytes)], ao !== undefined ? ao.v : ID.nil).tag;
      return am;
    };
    Q.prototype.tag = function() {
      return this.$val.tag();
    };
    Q.ptr.prototype.pkgPath = function() {
      var am;
      am = this;
      return "";
    };
    Q.prototype.pkgPath = function() {
      return this.$val.pkgPath();
    };
    Q.ptr.prototype.isExported = function() {
      var am, an;
      am = this;
      return (an = S[HY.keyFor(am.bytes)], an !== undefined ? an.v : ID.nil).exported;
    };
    Q.prototype.isExported = function() {
      return this.$val.isExported();
    };
    T = function(am, an, ao) {
      var am, an, ao, ap, aq;
      ap = $newDataPointer(0, HY);
      aq = ap;
      (S || $throwRuntimeError("assignment to entry in nil map"))[HY.keyFor(aq)] = {
        k: aq,
        v: new R.ptr(am, an, ao)
      };
      return new Q.ptr(ap);
    };
    CD.ptr.prototype.nameOff = function(am) {
      var am, an, ao;
      an = this;
      return (ao = ((am >> 0)), ((ao < 0 || ao >= U.$length) ? ($throwRuntimeError("index out of range"), undefined) : U.$array[U.$offset + ao]));
    };
    CD.prototype.nameOff = function(am) {
      return this.$val.nameOff(am);
    };
    V = function(am) {
      var am, an;
      an = U.$length;
      U = $append(U, am);
      return ((an >> 0));
    };
    CD.ptr.prototype.typeOff = function(am) {
      var am, an, ao;
      an = this;
      return (ao = ((am >> 0)), ((ao < 0 || ao >= W.$length) ? ($throwRuntimeError("index out of range"), undefined) : W.$array[W.$offset + ao]));
    };
    CD.prototype.typeOff = function(am) {
      return this.$val.typeOff(am);
    };
    X = function(am) {
      var am, an;
      an = W.$length;
      W = $append(W, am);
      return ((an >> 0));
    };
    Y = function(am) {
      var am, an;
      an = new IE.ptr("");
      an.str = am;
      return an.str;
    };
    Z = function(am) {
      var am;
      return !!(K(am).wrapped);
    };
    AA = function(am, an, ao) {
      var am, an, ao, ap, aq, ar;
      ap = K(ao).fields;
      aq = 0;
      while (true) {
        if (!(aq < $parseInt(ap.length))) {
          break;
        }
        ar = $internalize(ap[aq].prop, $String);
        am[$externalize(ar, $String)] = an[$externalize(ar, $String)];
        aq = aq + (1) >> 0;
      }
    };
    AB = function(am, an, ao) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ap = am.common();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            aq = ap;
            at = am.Kind();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              at = at.$blk();
            }
            if (at && at.$blk !== undefined) {
              break s;
            }
            if (at === 17) {
              as = true;
              $s = 5;
              continue s;
            }
            au = am.Kind();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              au = au.$blk();
            }
            if (au && au.$blk !== undefined) {
              break s;
            }
            as = au === 25;
          case 5:
            if (as) {
              ar = true;
              $s = 4;
              continue s;
            }
            av = am.Kind();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              av = av.$blk();
            }
            if (av && av.$blk !== undefined) {
              break s;
            }
            ar = av === 22;
          case 4:
            if (ar) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            aw = am.Kind();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              aw = aw.$blk();
            }
            if (aw && aw.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return new FA.ptr(aq, (an), (ao | ((aw >>> 0))) >>> 0);
          case 3:
            ax = am.Kind();
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              ax = ax.$blk();
            }
            if (ax && ax.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return new FA.ptr(aq, ($newDataPointer(an, K(aq.ptrTo()))), (((ao | ((ax >>> 0))) >>> 0) | 128) >>> 0);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AB
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AC = function(am, an, ao) {
      var am, an, ao, ap, aq, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            am = [am];
            ap = am[0].Kind();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            if (!((ap === 23))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $panic(new $String("reflect.MakeSlice of non-slice type"));
          case 2:
            if (an < 0) {
              $panic(new $String("reflect.MakeSlice: negative len"));
            }
            if (ao < 0) {
              $panic(new $String("reflect.MakeSlice: negative cap"));
            }
            if (an > ao) {
              $panic(new $String("reflect.MakeSlice: len > cap"));
            }
            aq = AB(am[0], $makeSlice(K(am[0]), an, ao, (function(am) {
              return function $b() {
                var aq, ar, $s, $r;
                $s = 0;
                var $f, $c = false;
                if (this !== undefined && this.$blk !== undefined) {
                  $f = this;
                  $c = true;
                  aq = $f.aq;
                  ar = $f.ar;
                  $s = $f.$s;
                  $r = $f.$r;
                }
                s: while (true) {
                  switch ($s) {
                    case 0:
                      aq = am[0].Elem();
                      $s = 1;
                    case 1:
                      if ($c) {
                        $c = false;
                        aq = aq.$blk();
                      }
                      if (aq && aq.$blk !== undefined) {
                        break s;
                      }
                      ar = K(aq);
                      $s = 2;
                    case 2:
                      if ($c) {
                        $c = false;
                        ar = ar.$blk();
                      }
                      if (ar && ar.$blk !== undefined) {
                        break s;
                      }
                      $s = -1;
                      return ar.zero();
                  }
                  return;
                }
                if ($f === undefined) {
                  $f = {
                    $blk: $b
                  };
                }
                $f.aq = aq;
                $f.ar = ar;
                $f.$s = $s;
                $f.$r = $r;
                return $f;
              };
            })(am)), 0);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return aq;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AC
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.MakeSlice = AC;
    AD = function(am) {
      var am;
      if (!I) {
        return new CD.ptr(0, 0, 0, 0, 0, 0, 0, HX.nil, HY.nil, 0, 0);
      }
      if ($interfaceIsEqual(am, $ifaceNil)) {
        return $ifaceNil;
      }
      return L(am.constructor);
    };
    $pkg.TypeOf = AD;
    AE = function(am) {
      var am, an, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if ($interfaceIsEqual(am, $ifaceNil)) {
              $s = -1;
              return new FA.ptr(HP.nil, 0, 0);
            }
            an = AB(L(am.constructor), am.$val, 0);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              an = an.$blk();
            }
            if (an && an.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return an;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AE
        };
      }
      $f.am = am;
      $f.an = an;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.ValueOf = AE;
    AH = function(am, an, ao) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        ba = $f.ba;
        bb = $f.bb;
        bc = $f.bc;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (!(ao)) {
              ap = false;
              $s = 3;
              continue s;
            }
            if (am.$length === 0) {
              aq = true;
              $s = 4;
              continue s;
            }
            as = (ar = am.$length - 1 >> 0, ((ar < 0 || ar >= am.$length) ? ($throwRuntimeError("index out of range"), undefined) : am.$array[am.$offset + ar])).Kind();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            aq = !((as === 23));
          case 4:
            ap = aq;
          case 3:
            if (ap) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $panic(new $String("reflect.FuncOf: last arg of variadic func must be slice"));
          case 2:
            at = $makeSlice(IF, am.$length);
            au = am;
            av = 0;
            while (true) {
              if (!(av < au.$length)) {
                break;
              }
              aw = av;
              ax = ((av < 0 || av >= au.$length) ? ($throwRuntimeError("index out of range"), undefined) : au.$array[au.$offset + av]);
              ((aw < 0 || aw >= at.$length) ? ($throwRuntimeError("index out of range"), undefined) : at.$array[at.$offset + aw] = K(ax));
              av++;
            }
            ay = $makeSlice(IF, an.$length);
            az = an;
            ba = 0;
            while (true) {
              if (!(ba < az.$length)) {
                break;
              }
              bb = ba;
              bc = ((ba < 0 || ba >= az.$length) ? ($throwRuntimeError("index out of range"), undefined) : az.$array[az.$offset + ba]);
              ((bb < 0 || bb >= ay.$length) ? ($throwRuntimeError("index out of range"), undefined) : ay.$array[ay.$offset + bb] = K(bc));
              ba++;
            }
            $s = -1;
            return L($funcType($externalize(at, IF), $externalize(ay, IF), $externalize(ao, $Bool)));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AH
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.ba = ba;
      $f.bb = bb;
      $f.bc = bc;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.FuncOf = AH;
    CD.ptr.prototype.ptrTo = function() {
      var am;
      am = this;
      return L($ptrType(K(am)));
    };
    CD.prototype.ptrTo = function() {
      return this.$val.ptrTo();
    };
    AJ = function(am) {
      var am;
      return L($sliceType(K(am)));
    };
    $pkg.SliceOf = AJ;
    AK = function(am) {
      var am, an, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = AB(am, K(am).zero(), 0);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              an = an.$blk();
            }
            if (an && an.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return an;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AK
        };
      }
      $f.am = am;
      $f.an = an;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Zero = AK;
    AL = function(am) {
      var am, an;
      an = am.Kind();
      if (an === (25)) {
        return (new(K(am).ptr)());
      } else if (an === (17)) {
        return (K(am).zero());
      } else {
        return ($newDataPointer(K(am).zero(), K(am.ptrTo())));
      }
    };
    AM = function(am, an, ao) {
      var am, an, ao, ap, aq, ar, as, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ap = ao.common();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            aq = ap;
            ar = AL(aq);
            as = aq.Kind();
            if (as === (3)) {
              (ar).$set(((an.$low << 24 >> 24)));
            } else if (as === (4)) {
              (ar).$set(((an.$low << 16 >> 16)));
            } else if ((as === (2)) || (as === (5))) {
              (ar).$set(((an.$low >> 0)));
            } else if (as === (6)) {
              (ar).$set((new $Int64(an.$high, an.$low)));
            } else if (as === (8)) {
              (ar).$set(((an.$low << 24 >>> 24)));
            } else if (as === (9)) {
              (ar).$set(((an.$low << 16 >>> 16)));
            } else if ((as === (7)) || (as === (10)) || (as === (12))) {
              (ar).$set(((an.$low >>> 0)));
            } else if (as === (11)) {
              (ar).$set((an));
            }
            $s = -1;
            return new FA.ptr(aq, ar, (((am | 128) >>> 0) | ((aq.Kind() >>> 0))) >>> 0);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AM
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AO = function(am, an, ao) {
      var am, an, ao;
      an.$set(ao.$get());
    };
    AR = function(am, an) {
      var am, an, ao;
      ao = 0;
      ao = (new($global.Object)());
      return ao;
    };
    AS = function(am, an) {
      var am, an, ao, ap;
      ao = an;
      if (!(ao.$get === undefined)) {
        ao = ao.$get();
      }
      ap = $internalize(K(am.Key()).keyFor(ao), $String);
      return [ao, ap];
    };
    AT = function(am, an, ao) {
      var am, an, ao, ap, aq, ar;
      ap = AS(am, ao);
      aq = ap[1];
      ar = an[$externalize(aq, $String)];
      if (ar === undefined) {
        return 0;
      }
      return ($newDataPointer(ar.v, K(DJ(am.Elem()))));
    };
    AU = function(am, an, ao, ap) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            aq = AS(am, ao);
            ar = aq[0];
            as = aq[1];
            at = ap.$get();
            au = am.Elem();
            av = au.Kind();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              av = av.$blk();
            }
            if (av && av.$blk !== undefined) {
              break s;
            }
            if (av === 25) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            aw = K(au).zero();
            AA(aw, at, au);
            at = aw;
          case 2:
            ax = new($global.Object)();
            ax.k = ar;
            ax.v = at;
            an[$externalize(as, $String)] = ax;
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AU
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AV = function(am, an, ao) {
      var am, an, ao, ap, aq;
      ap = AS(am, ao);
      aq = ap[1];
      delete an[$externalize(aq, $String)];
    };
    AX = function(am, an) {
      var am, an;
      return ((new AW.ptr(am, an, $keys(an), 0)));
    };
    AY = function(am) {
      var am, an, ao, ap, aq, ar, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = ((am));
            ao = an.keys[an.i];
            ap = an.t.Key();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            aq = DJ(ap);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            ar = K(aq);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              ar = ar.$blk();
            }
            if (ar && ar.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ($newDataPointer(an.m[$externalize($internalize(ao, $String), $String)].k, ar));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AY
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AZ = function(am) {
      var am, an;
      an = ((am));
      an.i = an.i + (1) >> 0;
    };
    BA = function(am) {
      var am;
      return $parseInt($keys(am).length);
    };
    BB = function(am, an) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        ba = $f.ba;
        bb = $f.bb;
        bc = $f.bc;
        bd = $f.bd;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = $clone(am, FA).object();
            if (ao === K(am.typ).nil) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            ap = AB(an, K(an).nil, am.flag);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ap;
          case 2:
            aq = null;
            ar = an.Kind();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              ar = ar.$blk();
            }
            if (ar && ar.$blk !== undefined) {
              break s;
            }
            as = ar;
            at = as;
            if (at === (23)) {
              $s = 6;
              continue;
            }
            if (at === (22)) {
              $s = 7;
              continue;
            }
            if (at === (25)) {
              $s = 8;
              continue;
            }
            if ((at === (17)) || (at === (1)) || (at === (18)) || (at === (19)) || (at === (20)) || (at === (21)) || (at === (24))) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 6:
            au = new(K(an))(ao.$array);
            au.$offset = ao.$offset;
            au.$length = ao.$length;
            au.$capacity = ao.$capacity;
            aq = $newDataPointer(au, K(DJ(an)));
            $s = 11;
            continue;
          case 7:
            av = an.Elem();
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              av = av.$blk();
            }
            if (av && av.$blk !== undefined) {
              break s;
            }
            aw = av.Kind();
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              aw = aw.$blk();
            }
            if (aw && aw.$blk !== undefined) {
              break s;
            }
            if (aw === 25) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 12:
            ax = an.Elem();
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              ax = ax.$blk();
            }
            if (ax && ax.$blk !== undefined) {
              break s;
            }
            if ($interfaceIsEqual(ax, am.typ.Elem())) {
              $s = 16;
              continue;
            }
            $s = 17;
            continue;
          case 16:
            aq = ao;
            $s = 4;
            continue;
          case 17:
            aq = new(K(an))();
            ay = aq;
            az = ao;
            ba = an.Elem();
            $s = 19;
          case 19:
            if ($c) {
              $c = false;
              ba = ba.$blk();
            }
            if (ba && ba.$blk !== undefined) {
              break s;
            }
            bb = ba;
            $r = AA(ay, az, bb);
            $s = 20;
          case 20:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 4;
            continue;
          case 13:
            aq = new(K(an))(ao.$get, ao.$set);
            $s = 11;
            continue;
          case 8:
            aq = new(K(an).ptr)();
            AA(aq, ao, an);
            $s = 11;
            continue;
          case 9:
            aq = am.ptr;
            $s = 11;
            continue;
          case 10:
            $panic(new FE.ptr("reflect.Convert", as));
          case 11:
          case 4:
            bc = an.common();
            $s = 21;
          case 21:
            if ($c) {
              $c = false;
              bc = bc.$blk();
            }
            if (bc && bc.$blk !== undefined) {
              break s;
            }
            bd = an.Kind();
            $s = 22;
          case 22:
            if ($c) {
              $c = false;
              bd = bd.$blk();
            }
            if (bd && bd.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return new FA.ptr(bc, (aq), (((new FB(am.flag).ro() | ((am.flag & 128) >>> 0)) >>> 0) | ((bd >>> 0))) >>> 0);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BB
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.ba = ba;
      $f.bb = bb;
      $f.bc = bc;
      $f.bd = bd;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BC = function(am, an) {
      var am, an, ao, ap, aq, ar, as, at, au, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = new FB(am.flag).kind();
            if (!((ao === 17)) && !((ao === 23))) {
              $panic(new FE.ptr("reflect.Copy", ao));
            }
            if (ao === 17) {
              new FB(am.flag).mustBeAssignable();
            }
            new FB(am.flag).mustBeExported();
            ap = new FB(an.flag).kind();
            aq = false;
            if (!((ap === 17)) && !((ap === 23))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            if (!(ap === 24)) {
              ar = false;
              $s = 3;
              continue s;
            }
            as = am.typ.Elem().Kind();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            ar = as === 8;
          case 3:
            aq = ar;
            if (!aq) {
              $panic(new FE.ptr("reflect.Copy", ap));
            }
          case 2:
            new FB(an.flag).mustBeExported();
            if (!aq) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            $r = FT("reflect.Copy", am.typ.Elem(), an.typ.Elem());
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 6:
            at = $clone(am, FA).object();
            if (ao === 17) {
              at = new(K(AJ(am.typ.Elem())))(at);
            }
            au = $clone(an, FA).object();
            if (ap === 17) {
              au = new(K(AJ(an.typ.Elem())))(au);
            }
            if (aq) {
              $s = -1;
              return $parseInt($copyString(at, au)) >> 0;
            }
            $s = -1;
            return $parseInt($copySlice(at, au)) >> 0;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BC
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Copy = BC;
    BD = function(am, an) {
      var am, an, ao, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (am.flag === 0) {
              $panic(new FE.ptr("reflect.Value.Interface", 0));
            }
            if (an && !((((am.flag & 96) >>> 0) === 0))) {
              $panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
            }
            if (!((((am.flag & 512) >>> 0) === 0))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            ao = BG("Interface", $clone(am, FA));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            am = ao;
          case 2:
            if (Z(am.typ)) {
              $s = -1;
              return ((new(K(am.typ))($clone(am, FA).object())));
            }
            $s = -1;
            return (($clone(am, FA).object()));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BD
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BE = function(am, an, ao) {
      var am, an, ao;
      ao.$set(an);
    };
    BF = function() {
      return "?FIXME?";
    };
    BG = function(am, an) {
      var am, an, ao, ap, aq, ar, as, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = [ao];
            ap = [ap];
            if (((an.flag & 512) >>> 0) === 0) {
              $panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
            }
            aq = BS(am, $clone(an, FA), ((an.flag >> 0)) >> 10 >> 0);
            ao[0] = aq[2];
            ap[0] = $clone(an, FA).object();
            if (Z(an.typ)) {
              ap[0] = new(K(an.typ))(ap[0]);
            }
            ar = C.MakeFunc((function(ao, ap) {
              return function(ar, as) {
                var ar, as;
                return new $jsObjectPtr(ao[0].apply(ap[0], $externalize(as, IF)));
              };
            })(ao, ap));
            as = $clone(an, FA).Type().common();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return new FA.ptr(as, (ar), (new FB(an.flag).ro() | 19) >>> 0);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BG
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CD.ptr.prototype.pointers = function() {
      var am, an;
      am = this;
      an = am.Kind();
      if ((an === (22)) || (an === (21)) || (an === (18)) || (an === (19)) || (an === (25)) || (an === (17))) {
        return true;
      } else {
        return false;
      }
    };
    CD.prototype.pointers = function() {
      return this.$val.pointers();
    };
    CD.ptr.prototype.Comparable = function() {
      var am, an, ao, ap, aq, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            am = this;
            an = am.Kind();
            if ((an === (19)) || (an === (23)) || (an === (21))) {
              $s = 2;
              continue;
            }
            if (an === (17)) {
              $s = 3;
              continue;
            }
            if (an === (25)) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 2:
            $s = -1;
            return false;
          case 3:
            ao = am.Elem().Comparable();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ao;
          case 4:
            ap = 0;
          case 7:
            if (!(ap < am.NumField())) {
              $s = 8;
              continue;
            }
            aq = am.Field(ap).Type.Comparable();
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            if (!aq) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            $s = -1;
            return false;
          case 10:
            ap = ap + (1) >> 0;
            $s = 7;
            continue;
          case 8:
          case 5:
          case 1:
            $s = -1;
            return true;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CD.ptr.prototype.Comparable
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CD.prototype.Comparable = function() {
      return this.$val.Comparable();
    };
    CD.ptr.prototype.Method = function(am) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        ba = $f.ba;
        bb = $f.bb;
        bc = $f.bc;
        bd = $f.bd;
        be = $f.be;
        bf = $f.bf;
        bg = $f.bg;
        bh = $f.bh;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = [an];
            ao = new CR.ptr("", "", $ifaceNil, new FA.ptr(HP.nil, 0, 0), 0);
            ap = this;
            if (ap.Kind() === 20) {
              aq = (ap.kindType);
              CR.copy(ao, aq.Method(am));
              $s = -1;
              return ao;
            }
            ar = ap.exportedMethods();
            if (am < 0 || am >= ar.$length) {
              $panic(new $String("reflect: Method index out of range"));
            }
            as = $clone(((am < 0 || am >= ar.$length) ? ($throwRuntimeError("index out of range"), undefined) : ar.$array[ar.$offset + am]), CF);
            at = $clone(ap.nameOff(as.name), Q);
            ao.Name = $clone(at, Q).name();
            au = 19;
            av = ap.typeOff(as.mtyp);
            aw = (av.kindType);
            ax = $makeSlice(IH, 0, (1 + aw.in$().$length >> 0));
            ax = $append(ax, ap);
            ay = aw.in$();
            az = 0;
            while (true) {
              if (!(az < ay.$length)) {
                break;
              }
              ba = ((az < 0 || az >= ay.$length) ? ($throwRuntimeError("index out of range"), undefined) : ay.$array[ay.$offset + az]);
              ax = $append(ax, ba);
              az++;
            }
            bb = $makeSlice(IH, 0, aw.out().$length);
            bc = aw.out();
            bd = 0;
            while (true) {
              if (!(bd < bc.$length)) {
                break;
              }
              be = ((bd < 0 || bd >= bc.$length) ? ($throwRuntimeError("index out of range"), undefined) : bc.$array[bc.$offset + bd]);
              bb = $append(bb, be);
              bd++;
            }
            bf = AH(ax, bb, aw.rtype.IsVariadic());
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              bf = bf.$blk();
            }
            if (bf && bf.$blk !== undefined) {
              break s;
            }
            bg = bf;
            ao.Type = bg;
            an[0] = $internalize($methodSet(ap.jsType)[am].prop, $String);
            bh = C.MakeFunc((function(an) {
              return function(bh, bi) {
                var bh, bi, bj;
                bj = (0 >= bi.$length ? ($throwRuntimeError("index out of range"), undefined) : bi.$array[bi.$offset + 0]);
                return new $jsObjectPtr(bj[$externalize(an[0], $String)].apply(bj, $externalize($subslice(bi, 1), IF)));
              };
            })(an));
            ao.Func = new FA.ptr($assertType(bg, HP), (bh), au);
            ao.Index = am;
            CR.copy(ao, ao);
            $s = -1;
            return ao;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CD.ptr.prototype.Method
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.ba = ba;
      $f.bb = bb;
      $f.bc = bc;
      $f.bd = bd;
      $f.be = be;
      $f.bf = bf;
      $f.bg = bg;
      $f.bh = bh;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CD.prototype.Method = function(am) {
      return this.$val.Method(am);
    };
    FA.ptr.prototype.object = function() {
      var am, an, ao, ap;
      am = this;
      if ((am.typ.Kind() === 17) || (am.typ.Kind() === 25)) {
        return am.ptr;
      }
      if (!((((am.flag & 128) >>> 0) === 0))) {
        an = am.ptr.$get();
        if (!(an === $ifaceNil) && !(an.constructor === K(am.typ))) {
          switch (0) {
            default:
              ao = am.typ.Kind();
              if ((ao === (11)) || (ao === (6))) {
                an = new(K(am.typ))(an.$high, an.$low);
              } else if ((ao === (15)) || (ao === (16))) {
                an = new(K(am.typ))(an.$real, an.$imag);
              } else if (ao === (23)) {
                if (an === an.constructor.nil) {
                  an = K(am.typ).nil;
                  break;
                }
                ap = new(K(am.typ))(an.$array);
                ap.$offset = an.$offset;
                ap.$length = an.$length;
                ap.$capacity = an.$capacity;
                an = ap;
              }
          }
        }
        return an;
      }
      return am.ptr;
    };
    FA.prototype.object = function() {
      return this.$val.object();
    };
    FA.ptr.prototype.assignTo = function(am, an, ao) {
      var am, an, ao, ap, aq, ar, as, at, au, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ap = this;
            if (!((((ap.flag & 512) >>> 0) === 0))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            aq = BG(am, $clone(ap, FA));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            ap = aq;
          case 2:
            ar = DM(an, ap.typ);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              ar = ar.$blk();
            }
            if (ar && ar.$blk !== undefined) {
              break s;
            }
            if (ar) {
              $s = 5;
              continue;
            }
            if (DL(an, ap.typ)) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 5:
            as = (((ap.flag & 384) >>> 0) | new FB(ap.flag).ro()) >>> 0;
            as = (as | (((an.Kind() >>> 0)))) >>> 0;
            $s = -1;
            return new FA.ptr(an, ap.ptr, as);
          case 6:
            if (ao === 0) {
              ao = AL(an);
            }
            at = BD($clone(ap, FA), false);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              at = at.$blk();
            }
            if (at && at.$blk !== undefined) {
              break s;
            }
            au = at;
            if (an.NumMethod() === 0) {
              (ao).$set(au);
            } else {
              BE(an, au, ao);
            }
            $s = -1;
            return new FA.ptr(an, ao, 148);
          case 7:
          case 4:
            $panic(new $String(am + ": value of type " + ap.typ.String() + " is not assignable to type " + an.String()));
            $s = -1;
            return new FA.ptr(HP.nil, 0, 0);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.assignTo
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.assignTo = function(am, an, ao) {
      return this.$val.assignTo(am, an, ao);
    };
    FA.ptr.prototype.Cap = function() {
      var am, an, ao;
      am = this;
      an = new FB(am.flag).kind();
      ao = an;
      if (ao === (17)) {
        return am.typ.Len();
      } else if ((ao === (18)) || (ao === (23))) {
        return $parseInt($clone(am, FA).object().$capacity) >> 0;
      }
      $panic(new FE.ptr("reflect.Value.Cap", an));
    };
    FA.prototype.Cap = function() {
      return this.$val.Cap();
    };
    BJ = function(am, an) {
      var am, an;
      if ($interfaceIsEqual(am, BI)) {
        return new(K(BI))(an);
      }
      return an;
    };
    BK = function(am, an) {
      var am, an;
      if ($interfaceIsEqual(am, BI)) {
        return an.object;
      }
      return an;
    };
    FA.ptr.prototype.Elem = function() {
      var am, an, ao, ap, aq, ar, as, at, au, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            am = this;
            an = new FB(am.flag).kind();
            ao = an;
            if (ao === (20)) {
              $s = 2;
              continue;
            }
            if (ao === (22)) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 2:
            ap = $clone(am, FA).object();
            if (ap === $ifaceNil) {
              $s = -1;
              return new FA.ptr(HP.nil, 0, 0);
            }
            aq = L(ap.constructor);
            ar = AB(aq, ap.$val, new FB(am.flag).ro());
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              ar = ar.$blk();
            }
            if (ar && ar.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ar;
          case 3:
            if ($clone(am, FA).IsNil()) {
              $s = -1;
              return new FA.ptr(HP.nil, 0, 0);
            }
            as = $clone(am, FA).object();
            at = (am.typ.kindType);
            au = (((((am.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
            au = (au | (((at.elem.Kind() >>> 0)))) >>> 0;
            $s = -1;
            return new FA.ptr(at.elem, (BJ(at.elem, as)), au);
          case 4:
            $panic(new FE.ptr("reflect.Value.Elem", an));
          case 5:
          case 1:
            $s = -1;
            return new FA.ptr(HP.nil, 0, 0);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.Elem
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.Elem = function() {
      return this.$val.Elem();
    };
    FA.ptr.prototype.Field = function(am) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        ba = $f.ba;
        bb = $f.bb;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = [an];
            ao = [ao];
            ap = [ap];
            aq = [aq];
            ar = this;
            if (!((new FB(ar.flag).kind() === 25))) {
              $panic(new FE.ptr("reflect.Value.Field", new FB(ar.flag).kind()));
            }
            as = (ar.typ.kindType);
            if (((am >>> 0)) >= ((as.fields.$length >>> 0))) {
              $panic(new $String("reflect: Field index out of range"));
            }
            ao[0] = $internalize(K(ar.typ).fields[am].prop, $String);
            au = (at = as.fields, ((am < 0 || am >= at.$length) ? ($throwRuntimeError("index out of range"), undefined) : at.$array[at.$offset + am]));
            aq[0] = au.typ;
            av = (((ar.flag & 416) >>> 0) | ((aq[0].Kind() >>> 0))) >>> 0;
            if (!$clone(au.name, Q).isExported()) {
              if (au.embedded()) {
                av = (av | (64)) >>> 0;
              } else {
                av = (av | (32)) >>> 0;
              }
            }
            ax = $clone((aw = as.fields, ((am < 0 || am >= aw.$length) ? ($throwRuntimeError("index out of range"), undefined) : aw.$array[aw.$offset + am])).name, Q).tag();
            if (!(ax === "") && !((am === 0))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            an[0] = BL(ax);
            if (!(an[0] === "")) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
          case 5:
            ay = [ay];
            az = $clone(ar, FA).Field(0);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              az = az.$blk();
            }
            if (az && az.$blk !== undefined) {
              break s;
            }
            ar = az;
            if (ar.typ === BI) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            ay[0] = $clone(ar, FA).object().object;
            $s = -1;
            return new FA.ptr(aq[0], (new(K(DJ(aq[0])))((function(an, ao, ap, aq, ay) {
              return function() {
                return $internalize(ay[0][$externalize(an[0], $String)], K(aq[0]));
              };
            })(an, ao, ap, aq, ay), (function(an, ao, ap, aq, ay) {
              return function(ba) {
                var ba;
                ay[0][$externalize(an[0], $String)] = $externalize(ba, K(aq[0]));
              };
            })(an, ao, ap, aq, ay))), av);
          case 9:
            if (ar.typ.Kind() === 22) {
              $s = 10;
              continue;
            }
            $s = 11;
            continue;
          case 10:
            ba = $clone(ar, FA).Elem();
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              ba = ba.$blk();
            }
            if (ba && ba.$blk !== undefined) {
              break s;
            }
            ar = ba;
          case 11:
            $s = 5;
            continue;
          case 6:
          case 4:
          case 2:
            ap[0] = ar.ptr;
            if (!((((av & 128) >>> 0) === 0)) && !((aq[0].Kind() === 17)) && !((aq[0].Kind() === 25))) {
              $s = 13;
              continue;
            }
            $s = 14;
            continue;
          case 13:
            $s = -1;
            return new FA.ptr(aq[0], (new(K(DJ(aq[0])))((function(an, ao, ap, aq) {
              return function() {
                return BJ(aq[0], ap[0][$externalize(ao[0], $String)]);
              };
            })(an, ao, ap, aq), (function(an, ao, ap, aq) {
              return function(bb) {
                var bb;
                ap[0][$externalize(ao[0], $String)] = BK(aq[0], bb);
              };
            })(an, ao, ap, aq))), av);
          case 14:
            bb = AB(aq[0], BJ(aq[0], ap[0][$externalize(ao[0], $String)]), av);
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              bb = bb.$blk();
            }
            if (bb && bb.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return bb;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.Field
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.ba = ba;
      $f.bb = bb;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.Field = function(am) {
      return this.$val.Field(am);
    };
    BL = function(am) {
      var am, an, ao, ap, aq, ar;
      while (true) {
        if (!(!(am === ""))) {
          break;
        }
        an = 0;
        while (true) {
          if (!(an < am.length && (am.charCodeAt(an) === 32))) {
            break;
          }
          an = an + (1) >> 0;
        }
        am = $substring(am, an);
        if (am === "") {
          break;
        }
        an = 0;
        while (true) {
          if (!(an < am.length && !((am.charCodeAt(an) === 32)) && !((am.charCodeAt(an) === 58)) && !((am.charCodeAt(an) === 34)))) {
            break;
          }
          an = an + (1) >> 0;
        }
        if ((an + 1 >> 0) >= am.length || !((am.charCodeAt(an) === 58)) || !((am.charCodeAt((an + 1 >> 0)) === 34))) {
          break;
        }
        ao = ($substring(am, 0, an));
        am = $substring(am, (an + 1 >> 0));
        an = 1;
        while (true) {
          if (!(an < am.length && !((am.charCodeAt(an) === 34)))) {
            break;
          }
          if (am.charCodeAt(an) === 92) {
            an = an + (1) >> 0;
          }
          an = an + (1) >> 0;
        }
        if (an >= am.length) {
          break;
        }
        ap = ($substring(am, 0, (an + 1 >> 0)));
        am = $substring(am, (an + 1 >> 0));
        if (ao === "js") {
          aq = B.Unquote(ap);
          ar = aq[0];
          return ar;
        }
      }
      return "";
    };
    FA.ptr.prototype.Index = function(am) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        ba = $f.ba;
        bb = $f.bb;
        bc = $f.bc;
        bd = $f.bd;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            am = [am];
            an = [an];
            ao = [ao];
            ap = [ap];
            aq = [aq];
            ar = [ar];
            as = this;
            at = new FB(as.flag).kind();
            au = at;
            if (au === (17)) {
              $s = 2;
              continue;
            }
            if (au === (23)) {
              $s = 3;
              continue;
            }
            if (au === (24)) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 2:
            av = (as.typ.kindType);
            if (am[0] < 0 || am[0] > ((av.len >> 0))) {
              $panic(new $String("reflect: array index out of range"));
            }
            aq[0] = av.elem;
            aw = (((((as.flag & 384) >>> 0) | new FB(as.flag).ro()) >>> 0) | ((aq[0].Kind() >>> 0))) >>> 0;
            an[0] = as.ptr;
            if (!((((aw & 128) >>> 0) === 0)) && !((aq[0].Kind() === 17)) && !((aq[0].Kind() === 25))) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            $s = -1;
            return new FA.ptr(aq[0], (new(K(DJ(aq[0])))((function(am, an, ao, ap, aq, ar) {
              return function() {
                return BJ(aq[0], an[0][am[0]]);
              };
            })(am, an, ao, ap, aq, ar), (function(am, an, ao, ap, aq, ar) {
              return function(ax) {
                var ax;
                an[0][am[0]] = BK(aq[0], ax);
              };
            })(am, an, ao, ap, aq, ar))), aw);
          case 8:
            ax = AB(aq[0], BJ(aq[0], an[0][am[0]]), aw);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              ax = ax.$blk();
            }
            if (ax && ax.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ax;
          case 3:
            ay = $clone(as, FA).object();
            if (am[0] < 0 || am[0] >= ($parseInt(ay.$length) >> 0)) {
              $panic(new $String("reflect: slice index out of range"));
            }
            az = (as.typ.kindType);
            ar[0] = az.elem;
            ba = (((384 | new FB(as.flag).ro()) >>> 0) | ((ar[0].Kind() >>> 0))) >>> 0;
            am[0] = am[0] + (($parseInt(ay.$offset) >> 0)) >> 0;
            ao[0] = ay.$array;
            if (!((((ba & 128) >>> 0) === 0)) && !((ar[0].Kind() === 17)) && !((ar[0].Kind() === 25))) {
              $s = 10;
              continue;
            }
            $s = 11;
            continue;
          case 10:
            $s = -1;
            return new FA.ptr(ar[0], (new(K(DJ(ar[0])))((function(am, an, ao, ap, aq, ar) {
              return function() {
                return BJ(ar[0], ao[0][am[0]]);
              };
            })(am, an, ao, ap, aq, ar), (function(am, an, ao, ap, aq, ar) {
              return function(bb) {
                var bb;
                ao[0][am[0]] = BK(ar[0], bb);
              };
            })(am, an, ao, ap, aq, ar))), ba);
          case 11:
            bb = AB(ar[0], BJ(ar[0], ao[0][am[0]]), ba);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              bb = bb.$blk();
            }
            if (bb && bb.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return bb;
          case 4:
            bc = (as.ptr).$get();
            if (am[0] < 0 || am[0] >= bc.length) {
              $panic(new $String("reflect: string index out of range"));
            }
            bd = (((new FB(as.flag).ro() | 8) >>> 0) | 128) >>> 0;
            ap[0] = bc.charCodeAt(am[0]);
            $s = -1;
            return new FA.ptr(FN, ((ap.$ptr || (ap.$ptr = new HY(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, ap)))), bd);
          case 5:
            $panic(new FE.ptr("reflect.Value.Index", at));
          case 6:
          case 1:
            $s = -1;
            return new FA.ptr(HP.nil, 0, 0);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.Index
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.ba = ba;
      $f.bb = bb;
      $f.bc = bc;
      $f.bd = bd;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.Index = function(am) {
      return this.$val.Index(am);
    };
    FA.ptr.prototype.InterfaceData = function() {
      var am;
      am = this;
      $panic(A.New("InterfaceData is not supported by GopherJS"));
    };
    FA.prototype.InterfaceData = function() {
      return this.$val.InterfaceData();
    };
    FA.ptr.prototype.IsNil = function() {
      var am, an, ao;
      am = this;
      an = new FB(am.flag).kind();
      ao = an;
      if ((ao === (22)) || (ao === (23))) {
        return $clone(am, FA).object() === K(am.typ).nil;
      } else if (ao === (18)) {
        return $clone(am, FA).object() === $chanNil;
      } else if (ao === (19)) {
        return $clone(am, FA).object() === $throwNilPointerError;
      } else if (ao === (21)) {
        return $clone(am, FA).object() === false;
      } else if (ao === (20)) {
        return $clone(am, FA).object() === $ifaceNil;
      } else {
        $panic(new FE.ptr("reflect.Value.IsNil", an));
      }
    };
    FA.prototype.IsNil = function() {
      return this.$val.IsNil();
    };
    FA.ptr.prototype.Len = function() {
      var am, an, ao;
      am = this;
      an = new FB(am.flag).kind();
      ao = an;
      if ((ao === (17)) || (ao === (24))) {
        return $parseInt($clone(am, FA).object().length);
      } else if (ao === (23)) {
        return $parseInt($clone(am, FA).object().$length) >> 0;
      } else if (ao === (18)) {
        return $parseInt($clone(am, FA).object().$buffer.length) >> 0;
      } else if (ao === (21)) {
        return $parseInt($keys($clone(am, FA).object()).length);
      } else {
        $panic(new FE.ptr("reflect.Value.Len", an));
      }
    };
    FA.prototype.Len = function() {
      return this.$val.Len();
    };
    FA.ptr.prototype.Pointer = function() {
      var am, an, ao;
      am = this;
      an = new FB(am.flag).kind();
      ao = an;
      if ((ao === (18)) || (ao === (21)) || (ao === (22)) || (ao === (26))) {
        if ($clone(am, FA).IsNil()) {
          return 0;
        }
        return $clone(am, FA).object();
      } else if (ao === (19)) {
        if ($clone(am, FA).IsNil()) {
          return 0;
        }
        return 1;
      } else if (ao === (23)) {
        if ($clone(am, FA).IsNil()) {
          return 0;
        }
        return $clone(am, FA).object().$array;
      } else {
        $panic(new FE.ptr("reflect.Value.Pointer", an));
      }
    };
    FA.prototype.Pointer = function() {
      return this.$val.Pointer();
    };
    FA.ptr.prototype.Set = function(am) {
      var am, an, ao, ap, aq, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            new FB(an.flag).mustBeAssignable();
            new FB(am.flag).mustBeExported();
            ao = $clone(am, FA).assignTo("reflect.Set", an.typ, 0);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            am = ao;
            if (!((((an.flag & 128) >>> 0) === 0))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            ap = an.typ.Kind();
            if (ap === (17)) {
              $s = 5;
              continue;
            }
            if (ap === (20)) {
              $s = 6;
              continue;
            }
            if (ap === (25)) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 5:
            K(an.typ).copy(an.ptr, am.ptr);
            $s = 9;
            continue;
          case 6:
            aq = BD($clone(am, FA), false);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            an.ptr.$set(aq);
            $s = 9;
            continue;
          case 7:
            AA(an.ptr, am.ptr, an.typ);
            $s = 9;
            continue;
          case 8:
            an.ptr.$set($clone(am, FA).object());
          case 9:
          case 4:
            $s = -1;
            return;
          case 3:
            an.ptr = am.ptr;
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.Set
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.Set = function(am) {
      return this.$val.Set(am);
    };
    FA.ptr.prototype.SetBytes = function(am) {
      var am, an, ao, ap, aq, ar, as, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            new FB(an.flag).mustBeAssignable();
            new FB(an.flag).mustBe(23);
            ao = an.typ.Elem().Kind();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            if (!((ao === 8))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $panic(new $String("reflect.Value.SetBytes of non-byte slice"));
          case 2:
            ap = am;
            if (!(an.typ.Name() === "")) {
              aq = true;
              $s = 6;
              continue s;
            }
            ar = an.typ.Elem().Name();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              ar = ar.$blk();
            }
            if (ar && ar.$blk !== undefined) {
              break s;
            }
            aq = !(ar === "");
          case 6:
            if (aq) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            as = new(K(an.typ))(ap.$array);
            as.$offset = ap.$offset;
            as.$length = ap.$length;
            as.$capacity = ap.$capacity;
            ap = as;
          case 5:
            an.ptr.$set(ap);
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.SetBytes
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.SetBytes = function(am) {
      return this.$val.SetBytes(am);
    };
    FA.ptr.prototype.SetCap = function(am) {
      var am, an, ao, ap;
      an = this;
      new FB(an.flag).mustBeAssignable();
      new FB(an.flag).mustBe(23);
      ao = an.ptr.$get();
      if (am < ($parseInt(ao.$length) >> 0) || am > ($parseInt(ao.$capacity) >> 0)) {
        $panic(new $String("reflect: slice capacity out of range in SetCap"));
      }
      ap = new(K(an.typ))(ao.$array);
      ap.$offset = ao.$offset;
      ap.$length = ao.$length;
      ap.$capacity = am;
      an.ptr.$set(ap);
    };
    FA.prototype.SetCap = function(am) {
      return this.$val.SetCap(am);
    };
    FA.ptr.prototype.SetLen = function(am) {
      var am, an, ao, ap;
      an = this;
      new FB(an.flag).mustBeAssignable();
      new FB(an.flag).mustBe(23);
      ao = an.ptr.$get();
      if (am < 0 || am > ($parseInt(ao.$capacity) >> 0)) {
        $panic(new $String("reflect: slice length out of range in SetLen"));
      }
      ap = new(K(an.typ))(ao.$array);
      ap.$offset = ao.$offset;
      ap.$length = am;
      ap.$capacity = ao.$capacity;
      an.ptr.$set(ap);
    };
    FA.prototype.SetLen = function(am) {
      return this.$val.SetLen(am);
    };
    FA.ptr.prototype.Slice = function(am, an) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = this;
            ap = 0;
            aq = $ifaceNil;
            ar = null;
            as = new FB(ao.flag).kind();
            at = as;
            if (at === (17)) {
              $s = 2;
              continue;
            }
            if (at === (23)) {
              $s = 3;
              continue;
            }
            if (at === (24)) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 2:
            if (((ao.flag & 256) >>> 0) === 0) {
              $panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
            }
            au = (ao.typ.kindType);
            ap = ((au.len >> 0));
            aq = AJ(au.elem);
            ar = new(K(aq))($clone(ao, FA).object());
            $s = 6;
            continue;
          case 3:
            aq = ao.typ;
            ar = $clone(ao, FA).object();
            ap = $parseInt(ar.$capacity) >> 0;
            $s = 6;
            continue;
          case 4:
            av = (ao.ptr).$get();
            if (am < 0 || an < am || an > av.length) {
              $panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
            }
            aw = AE(new $String($substring(av, am, an)));
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              aw = aw.$blk();
            }
            if (aw && aw.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return aw;
          case 5:
            $panic(new FE.ptr("reflect.Value.Slice", as));
          case 6:
          case 1:
            if (am < 0 || an < am || an > ap) {
              $panic(new $String("reflect.Value.Slice: slice index out of bounds"));
            }
            ax = AB(aq, $subslice(ar, am, an), new FB(ao.flag).ro());
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              ax = ax.$blk();
            }
            if (ax && ax.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ax;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.Slice
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.Slice = function(am, an) {
      return this.$val.Slice(am, an);
    };
    FA.ptr.prototype.Slice3 = function(am, an, ao) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ap = this;
            aq = 0;
            ar = $ifaceNil;
            as = null;
            at = new FB(ap.flag).kind();
            au = at;
            if (au === (17)) {
              if (((ap.flag & 256) >>> 0) === 0) {
                $panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
              }
              av = (ap.typ.kindType);
              aq = ((av.len >> 0));
              ar = AJ(av.elem);
              as = new(K(ar))($clone(ap, FA).object());
            } else if (au === (23)) {
              ar = ap.typ;
              as = $clone(ap, FA).object();
              aq = $parseInt(as.$capacity) >> 0;
            } else {
              $panic(new FE.ptr("reflect.Value.Slice3", at));
            }
            if (am < 0 || an < am || ao < an || ao > aq) {
              $panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
            }
            aw = AB(ar, $subslice(as, am, an, ao), new FB(ap.flag).ro());
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              aw = aw.$blk();
            }
            if (aw && aw.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return aw;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.Slice3
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.Slice3 = function(am, an, ao) {
      return this.$val.Slice3(am, an, ao);
    };
    FA.ptr.prototype.Close = function() {
      var am;
      am = this;
      new FB(am.flag).mustBe(18);
      new FB(am.flag).mustBeExported();
      $close($clone(am, FA).object());
    };
    FA.prototype.Close = function() {
      return this.$val.Close();
    };
    BN = function(am, an, ao) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ap = false;
            aq = false;
            ar = new II([new IF([am])]);
            if (an) {
              ar = $append(ar, new IF([]));
            }
            as = BM(new HT([ar]));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            at = as;
            if (an && (($parseInt(at[0]) >> 0) === 1)) {
              au = false;
              av = false;
              ap = au;
              aq = av;
              $s = -1;
              return [ap, aq];
            }
            aw = at[1];
            ao.$set(aw[0]);
            ax = true;
            ay = !!(aw[1]);
            ap = ax;
            aq = ay;
            $s = -1;
            return [ap, aq];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BN
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BO = function(am, an, ao) {
      var am, an, ao, ap, aq, ar, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ap = new II([new IF([am, an.$get()])]);
            if (ao) {
              ap = $append(ap, new IF([]));
            }
            aq = BM(new HT([ap]));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            ar = aq;
            if (ao && (($parseInt(ar[0]) >> 0) === 1)) {
              $s = -1;
              return false;
            }
            $s = -1;
            return true;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BO
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BS = function(am, an, ao) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay;
      ap = HP.nil;
      aq = HP.nil;
      ar = 0;
      as = "";
      if (an.typ.Kind() === 20) {
        at = (an.typ.kindType);
        if (ao < 0 || ao >= at.methods.$length) {
          $panic(new $String("reflect: internal error: invalid method index"));
        }
        av = (au = at.methods, ((ao < 0 || ao >= au.$length) ? ($throwRuntimeError("index out of range"), undefined) : au.$array[au.$offset + ao]));
        if (!$clone(at.rtype.nameOff(av.name), Q).isExported()) {
          $panic(new $String("reflect: " + am + " of unexported method"));
        }
        aq = at.rtype.typeOff(av.typ);
        as = $clone(at.rtype.nameOff(av.name), Q).name();
      } else {
        aw = an.typ.exportedMethods();
        if (((ao >>> 0)) >= ((aw.$length >>> 0))) {
          $panic(new $String("reflect: internal error: invalid method index"));
        }
        ax = $clone(((ao < 0 || ao >= aw.$length) ? ($throwRuntimeError("index out of range"), undefined) : aw.$array[aw.$offset + ao]), CF);
        if (!$clone(an.typ.nameOff(ax.name), Q).isExported()) {
          $panic(new $String("reflect: " + am + " of unexported method"));
        }
        aq = an.typ.typeOff(ax.mtyp);
        as = $internalize($methodSet(K(an.typ))[ao].prop, $String);
      }
      ay = $clone(an, FA).object();
      if (Z(an.typ)) {
        ay = new(K(an.typ))(ay);
      }
      ar = (ay[$externalize(as, $String)]);
      return [ap, aq, ar];
    };
    FA.ptr.prototype.call = function(am, an) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, bq, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, cd, ce, cf, cg, ch, ci, cj, ck, cl, cm, cn, co, cp, cq, cr, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        ba = $f.ba;
        bb = $f.bb;
        bc = $f.bc;
        bd = $f.bd;
        be = $f.be;
        bf = $f.bf;
        bg = $f.bg;
        bh = $f.bh;
        bi = $f.bi;
        bj = $f.bj;
        bk = $f.bk;
        bl = $f.bl;
        bm = $f.bm;
        bn = $f.bn;
        bo = $f.bo;
        bp = $f.bp;
        bq = $f.bq;
        br = $f.br;
        bs = $f.bs;
        bt = $f.bt;
        bu = $f.bu;
        bv = $f.bv;
        bw = $f.bw;
        bx = $f.bx;
        by = $f.by;
        bz = $f.bz;
        ca = $f.ca;
        cb = $f.cb;
        cc = $f.cc;
        cd = $f.cd;
        ce = $f.ce;
        cf = $f.cf;
        cg = $f.cg;
        ch = $f.ch;
        ci = $f.ci;
        cj = $f.cj;
        ck = $f.ck;
        cl = $f.cl;
        cm = $f.cm;
        cn = $f.cn;
        co = $f.co;
        cp = $f.cp;
        cq = $f.cq;
        cr = $f.cr;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = this;
            ap = HP.nil;
            aq = 0;
            ar = null;
            if (!((((ao.flag & 512) >>> 0) === 0))) {
              as = BS(am, $clone(ao, FA), ((ao.flag >> 0)) >> 10 >> 0);
              ap = as[1];
              aq = as[2];
              ar = $clone(ao, FA).object();
              if (Z(ao.typ)) {
                ar = new(K(ao.typ))(ar);
              }
            } else {
              ap = ao.typ;
              aq = ($clone(ao, FA).object());
              ar = undefined;
            }
            if (aq === 0) {
              $panic(new $String("reflect.Value.Call: call of nil function"));
            }
            at = am === "CallSlice";
            au = ap.NumIn();
            if (at) {
              if (!ap.IsVariadic()) {
                $panic(new $String("reflect: CallSlice of non-variadic function"));
              }
              if (an.$length < au) {
                $panic(new $String("reflect: CallSlice with too few input arguments"));
              }
              if (an.$length > au) {
                $panic(new $String("reflect: CallSlice with too many input arguments"));
              }
            } else {
              if (ap.IsVariadic()) {
                au = au - (1) >> 0;
              }
              if (an.$length < au) {
                $panic(new $String("reflect: Call with too few input arguments"));
              }
              if (!ap.IsVariadic() && an.$length > au) {
                $panic(new $String("reflect: Call with too many input arguments"));
              }
            }
            av = an;
            aw = 0;
            while (true) {
              if (!(aw < av.$length)) {
                break;
              }
              ax = ((aw < 0 || aw >= av.$length) ? ($throwRuntimeError("index out of range"), undefined) : av.$array[av.$offset + aw]);
              if ($clone(ax, FA).Kind() === 0) {
                $panic(new $String("reflect: " + am + " using zero Value argument"));
              }
              aw++;
            }
            ay = 0;
          case 1:
            if (!(ay < au)) {
              $s = 2;
              continue;
            }
            az = $clone(((ay < 0 || ay >= an.$length) ? ($throwRuntimeError("index out of range"), undefined) : an.$array[an.$offset + ay]), FA).Type();
            ba = ap.In(ay);
            bb = az;
            bc = ba;
            bd = bb.AssignableTo(bc);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              bd = bd.$blk();
            }
            if (bd && bd.$blk !== undefined) {
              break s;
            }
            if (!bd) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            be = bb.String();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              be = be.$blk();
            }
            if (be && be.$blk !== undefined) {
              break s;
            }
            bf = bc.String();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              bf = bf.$blk();
            }
            if (bf && bf.$blk !== undefined) {
              break s;
            }
            $panic(new $String("reflect: " + am + " using " + be + " as type " + bf));
          case 4:
            ay = ay + (1) >> 0;
            $s = 1;
            continue;
          case 2:
            if (!at && ap.IsVariadic()) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            bg = an.$length - au >> 0;
            bh = AC(ap.In(au), bg, bg);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              bh = bh.$blk();
            }
            if (bh && bh.$blk !== undefined) {
              break s;
            }
            bi = bh;
            bj = ap.In(au).Elem();
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              bj = bj.$blk();
            }
            if (bj && bj.$blk !== undefined) {
              break s;
            }
            bk = bj;
            bl = 0;
          case 12:
            if (!(bl < bg)) {
              $s = 13;
              continue;
            }
            bn = (bm = au + bl >> 0, ((bm < 0 || bm >= an.$length) ? ($throwRuntimeError("index out of range"), undefined) : an.$array[an.$offset + bm]));
            bo = $clone(bn, FA).Type();
            bp = bo.AssignableTo(bk);
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              bp = bp.$blk();
            }
            if (bp && bp.$blk !== undefined) {
              break s;
            }
            if (!bp) {
              $s = 14;
              continue;
            }
            $s = 15;
            continue;
          case 14:
            bq = bo.String();
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              bq = bq.$blk();
            }
            if (bq && bq.$blk !== undefined) {
              break s;
            }
            br = bk.String();
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              br = br.$blk();
            }
            if (br && br.$blk !== undefined) {
              break s;
            }
            $panic(new $String("reflect: cannot use " + bq + " as type " + br + " in " + am));
          case 15:
            bs = $clone(bi, FA).Index(bl);
            $s = 19;
          case 19:
            if ($c) {
              $c = false;
              bs = bs.$blk();
            }
            if (bs && bs.$blk !== undefined) {
              break s;
            }
            $r = $clone(bs, FA).Set($clone(bn, FA));
            $s = 20;
          case 20:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            bl = bl + (1) >> 0;
            $s = 12;
            continue;
          case 13:
            bt = an;
            an = $makeSlice(IG, (au + 1 >> 0));
            $copySlice($subslice(an, 0, au), bt);
            ((au < 0 || au >= an.$length) ? ($throwRuntimeError("index out of range"), undefined) : an.$array[an.$offset + au] = bi);
          case 9:
            bu = an.$length;
            if (!((bu === ap.NumIn()))) {
              $panic(new $String("reflect.Value.Call: wrong argument count"));
            }
            bv = ap.NumOut();
            bw = new($global.Array)(ap.NumIn());
            bx = an;
            by = 0;
          case 21:
            if (!(by < bx.$length)) {
              $s = 22;
              continue;
            }
            bz = by;
            ca = ((by < 0 || by >= bx.$length) ? ($throwRuntimeError("index out of range"), undefined) : bx.$array[bx.$offset + by]);
            cb = ap.In(bz);
            cc = ap.In(bz).common();
            $s = 23;
          case 23:
            if ($c) {
              $c = false;
              cc = cc.$blk();
            }
            if (cc && cc.$blk !== undefined) {
              break s;
            }
            cd = cc;
            ce = 0;
            cf = $clone(ca, FA).assignTo("reflect.Value.Call", cd, ce);
            $s = 24;
          case 24:
            if ($c) {
              $c = false;
              cf = cf.$blk();
            }
            if (cf && cf.$blk !== undefined) {
              break s;
            }
            cg = $clone(cf, FA).object();
            $s = 25;
          case 25:
            if ($c) {
              $c = false;
              cg = cg.$blk();
            }
            if (cg && cg.$blk !== undefined) {
              break s;
            }
            ch = cg;
            ci = BK(cb, ch);
            $s = 26;
          case 26:
            if ($c) {
              $c = false;
              ci = ci.$blk();
            }
            if (ci && ci.$blk !== undefined) {
              break s;
            }
            bw[bz] = ci;
            by++;
            $s = 21;
            continue;
          case 22:
            cj = BH(new HT([new $jsObjectPtr(aq), new $jsObjectPtr(ar), new $jsObjectPtr(bw)]));
            $s = 27;
          case 27:
            if ($c) {
              $c = false;
              cj = cj.$blk();
            }
            if (cj && cj.$blk !== undefined) {
              break s;
            }
            ck = cj;
            cl = bv;
            if (cl === (0)) {
              $s = 29;
              continue;
            }
            if (cl === (1)) {
              $s = 30;
              continue;
            }
            $s = 31;
            continue;
          case 29:
            $s = -1;
            return IG.nil;
          case 30:
            cm = AB(ap.Out(0), BJ(ap.Out(0), ck), 0);
            $s = 33;
          case 33:
            if ($c) {
              $c = false;
              cm = cm.$blk();
            }
            if (cm && cm.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return new IG([$clone(cm, FA)]);
          case 31:
            cn = $makeSlice(IG, bv);
            co = cn;
            cp = 0;
          case 34:
            if (!(cp < co.$length)) {
              $s = 35;
              continue;
            }
            cq = cp;
            cr = AB(ap.Out(cq), BJ(ap.Out(cq), ck[cq]), 0);
            $s = 36;
          case 36:
            if ($c) {
              $c = false;
              cr = cr.$blk();
            }
            if (cr && cr.$blk !== undefined) {
              break s;
            }((cq < 0 || cq >= cn.$length) ? ($throwRuntimeError("index out of range"), undefined) : cn.$array[cn.$offset + cq] = cr);
            cp++;
            $s = 34;
            continue;
          case 35:
            $s = -1;
            return cn;
          case 32:
          case 28:
            $s = -1;
            return IG.nil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.call
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.ba = ba;
      $f.bb = bb;
      $f.bc = bc;
      $f.bd = bd;
      $f.be = be;
      $f.bf = bf;
      $f.bg = bg;
      $f.bh = bh;
      $f.bi = bi;
      $f.bj = bj;
      $f.bk = bk;
      $f.bl = bl;
      $f.bm = bm;
      $f.bn = bn;
      $f.bo = bo;
      $f.bp = bp;
      $f.bq = bq;
      $f.br = br;
      $f.bs = bs;
      $f.bt = bt;
      $f.bu = bu;
      $f.bv = bv;
      $f.bw = bw;
      $f.bx = bx;
      $f.by = by;
      $f.bz = bz;
      $f.ca = ca;
      $f.cb = cb;
      $f.cc = cc;
      $f.cd = cd;
      $f.ce = ce;
      $f.cf = cf;
      $f.cg = cg;
      $f.ch = ch;
      $f.ci = ci;
      $f.cj = cj;
      $f.ck = ck;
      $f.cl = cl;
      $f.cm = cm;
      $f.cn = cn;
      $f.co = co;
      $f.cp = cp;
      $f.cq = cq;
      $f.cr = cr;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.call = function(am, an) {
      return this.$val.call(am, an);
    };
    BT = function(am) {
      var am, an, ao, ap, aq, ar, as, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = [an];
            ao = [ao];
            ap = [ap];
            aq = AE(am);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            ar = aq;
            if (!(($clone(ar, FA).Kind() === 23))) {
              $panic(new FE.ptr("Swapper", $clone(ar, FA).Kind()));
            }
            ap[0] = (($clone(ar, FA).Len() >>> 0));
            as = ap[0];
            if (as === (0)) {
              $s = -1;
              return (function(an, ao, ap) {
                return function(at, au) {
                  var at, au;
                  $panic(new $String("reflect: slice index out of range"));
                };
              })(an, ao, ap);
            } else if (as === (1)) {
              $s = -1;
              return (function(an, ao, ap) {
                return function(at, au) {
                  var at, au;
                  if (!((at === 0)) || !((au === 0))) {
                    $panic(new $String("reflect: slice index out of range"));
                  }
                };
              })(an, ao, ap);
            }
            an[0] = am.$array;
            ao[0] = $parseInt(am.$offset) >> 0;
            $s = -1;
            return (function(an, ao, ap) {
              return function(at, au) {
                var at, au, av;
                if (((at >>> 0)) >= ap[0] || ((au >>> 0)) >= ap[0]) {
                  $panic(new $String("reflect: slice index out of range"));
                }
                at = at + (ao[0]) >> 0;
                au = au + (ao[0]) >> 0;
                av = an[0][at];
                an[0][at] = an[0][au];
                an[0][au] = av;
              };
            })(an, ao, ap);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BT
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Swapper = BT;
    CO.ptr.prototype.offset = function() {
      var am;
      am = this;
      return am.offsetEmbed >>> 1 >>> 0;
    };
    CO.prototype.offset = function() {
      return this.$val.offset();
    };
    CO.ptr.prototype.embedded = function() {
      var am;
      am = this;
      return !((((am.offsetEmbed & 1) >>> 0) === 0));
    };
    CO.prototype.embedded = function() {
      return this.$val.embedded();
    };
    CB.prototype.String = function() {
      var am;
      am = this.$val;
      if (((am >> 0)) < CS.$length) {
        return ((am < 0 || am >= CS.$length) ? ($throwRuntimeError("index out of range"), undefined) : CS.$array[CS.$offset + am]);
      }
      return "kind" + B.Itoa(((am >> 0)));
    };
    $ptrType(CB).prototype.String = function() {
      return new CB(this.$get()).String();
    };
    CD.ptr.prototype.String = function() {
      var am, an;
      am = this;
      an = $clone(am.nameOff(am.str), Q).name();
      if (!((((am.tflag & 2) >>> 0) === 0))) {
        return $substring(an, 1);
      }
      return an;
    };
    CD.prototype.String = function() {
      return this.$val.String();
    };
    CD.ptr.prototype.Size = function() {
      var am;
      am = this;
      return am.size;
    };
    CD.prototype.Size = function() {
      return this.$val.Size();
    };
    CD.ptr.prototype.Bits = function() {
      var am, an;
      am = this;
      if (am === HP.nil) {
        $panic(new $String("reflect: Bits of nil Type"));
      }
      an = am.Kind();
      if (an < 2 || an > 16) {
        $panic(new $String("reflect: Bits of non-arithmetic Type " + am.String()));
      }
      return $imul(((am.size >> 0)), 8);
    };
    CD.prototype.Bits = function() {
      return this.$val.Bits();
    };
    CD.ptr.prototype.Align = function() {
      var am;
      am = this;
      return ((am.align >> 0));
    };
    CD.prototype.Align = function() {
      return this.$val.Align();
    };
    CD.ptr.prototype.FieldAlign = function() {
      var am;
      am = this;
      return ((am.fieldAlign >> 0));
    };
    CD.prototype.FieldAlign = function() {
      return this.$val.FieldAlign();
    };
    CD.ptr.prototype.Kind = function() {
      var am;
      am = this;
      return ((((am.kind & 31) >>> 0) >>> 0));
    };
    CD.prototype.Kind = function() {
      return this.$val.Kind();
    };
    CD.ptr.prototype.common = function() {
      var am;
      am = this;
      return am;
    };
    CD.prototype.common = function() {
      return this.$val.common();
    };
    CD.ptr.prototype.exportedMethods = function() {
      var am, an;
      am = this;
      an = am.uncommon();
      if (an === IC.nil) {
        return HZ.nil;
      }
      return an.exportedMethods();
    };
    CD.prototype.exportedMethods = function() {
      return this.$val.exportedMethods();
    };
    CD.ptr.prototype.NumMethod = function() {
      var am, an;
      am = this;
      if (am.Kind() === 20) {
        an = (am.kindType);
        return an.NumMethod();
      }
      return am.exportedMethods().$length;
    };
    CD.prototype.NumMethod = function() {
      return this.$val.NumMethod();
    };
    CD.ptr.prototype.MethodByName = function(am) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        ba = $f.ba;
        bb = $f.bb;
        bc = $f.bc;
        bd = $f.bd;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = new CR.ptr("", "", $ifaceNil, new FA.ptr(HP.nil, 0, 0), 0);
            ao = false;
            ap = this;
            if (ap.Kind() === 20) {
              aq = (ap.kindType);
              ar = aq.MethodByName(am);
              CR.copy(an, ar[0]);
              ao = ar[1];
              $s = -1;
              return [an, ao];
            }
            as = ap.uncommon();
            if (as === IC.nil) {
              at = new CR.ptr("", "", $ifaceNil, new FA.ptr(HP.nil, 0, 0), 0);
              au = false;
              CR.copy(an, at);
              ao = au;
              $s = -1;
              return [an, ao];
            }
            av = as.exportedMethods();
            aw = 0;
          case 1:
            if (!(aw < av.$length)) {
              $s = 2;
              continue;
            }
            ax = aw;
            ay = $clone(((aw < 0 || aw >= av.$length) ? ($throwRuntimeError("index out of range"), undefined) : av.$array[av.$offset + aw]), CF);
            if ($clone(ap.nameOff(ay.name), Q).name() === am) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            ba = ap.Method(ax);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              ba = ba.$blk();
            }
            if (ba && ba.$blk !== undefined) {
              break s;
            }
            az = $clone(ba, CR);
            bb = true;
            CR.copy(an, az);
            ao = bb;
            $s = -1;
            return [an, ao];
          case 4:
            aw++;
            $s = 1;
            continue;
          case 2:
            bc = new CR.ptr("", "", $ifaceNil, new FA.ptr(HP.nil, 0, 0), 0);
            bd = false;
            CR.copy(an, bc);
            ao = bd;
            $s = -1;
            return [an, ao];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CD.ptr.prototype.MethodByName
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.ba = ba;
      $f.bb = bb;
      $f.bc = bc;
      $f.bd = bd;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CD.prototype.MethodByName = function(am) {
      return this.$val.MethodByName(am);
    };
    CD.ptr.prototype.PkgPath = function() {
      var am, an;
      am = this;
      if (((am.tflag & 4) >>> 0) === 0) {
        return "";
      }
      an = am.uncommon();
      if (an === IC.nil) {
        return "";
      }
      return $clone(am.nameOff(an.pkgPath), Q).name();
    };
    CD.prototype.PkgPath = function() {
      return this.$val.PkgPath();
    };
    CD.ptr.prototype.Name = function() {
      var am, an, ao;
      am = this;
      if (((am.tflag & 4) >>> 0) === 0) {
        return "";
      }
      an = am.String();
      ao = an.length - 1 >> 0;
      while (true) {
        if (!(ao >= 0)) {
          break;
        }
        if (an.charCodeAt(ao) === 46) {
          break;
        }
        ao = ao - (1) >> 0;
      }
      return $substring(an, (ao + 1 >> 0));
    };
    CD.prototype.Name = function() {
      return this.$val.Name();
    };
    CD.ptr.prototype.ChanDir = function() {
      var am, an;
      am = this;
      if (!((am.Kind() === 18))) {
        $panic(new $String("reflect: ChanDir of non-chan type"));
      }
      an = (am.kindType);
      return ((an.dir >> 0));
    };
    CD.prototype.ChanDir = function() {
      return this.$val.ChanDir();
    };
    CD.ptr.prototype.IsVariadic = function() {
      var am, an;
      am = this;
      if (!((am.Kind() === 19))) {
        $panic(new $String("reflect: IsVariadic of non-func type"));
      }
      an = (am.kindType);
      return !((((an.outCount & 32768) >>> 0) === 0));
    };
    CD.prototype.IsVariadic = function() {
      return this.$val.IsVariadic();
    };
    CD.ptr.prototype.Elem = function() {
      var am, an, ao, ap, aq, ar, as;
      am = this;
      an = am.Kind();
      if (an === (17)) {
        ao = (am.kindType);
        return ES(ao.elem);
      } else if (an === (18)) {
        ap = (am.kindType);
        return ES(ap.elem);
      } else if (an === (21)) {
        aq = (am.kindType);
        return ES(aq.elem);
      } else if (an === (22)) {
        ar = (am.kindType);
        return ES(ar.elem);
      } else if (an === (23)) {
        as = (am.kindType);
        return ES(as.elem);
      }
      $panic(new $String("reflect: Elem of invalid type"));
    };
    CD.prototype.Elem = function() {
      return this.$val.Elem();
    };
    CD.ptr.prototype.Field = function(am) {
      var am, an, ao;
      an = this;
      if (!((an.Kind() === 25))) {
        $panic(new $String("reflect: Field of non-struct type"));
      }
      ao = (an.kindType);
      return ao.Field(am);
    };
    CD.prototype.Field = function(am) {
      return this.$val.Field(am);
    };
    CD.ptr.prototype.FieldByIndex = function(am) {
      var am, an, ao, ap, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            if (!((an.Kind() === 25))) {
              $panic(new $String("reflect: FieldByIndex of non-struct type"));
            }
            ao = (an.kindType);
            ap = ao.FieldByIndex(am);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ap;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CD.ptr.prototype.FieldByIndex
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CD.prototype.FieldByIndex = function(am) {
      return this.$val.FieldByIndex(am);
    };
    CD.ptr.prototype.FieldByName = function(am) {
      var am, an, ao, ap, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            if (!((an.Kind() === 25))) {
              $panic(new $String("reflect: FieldByName of non-struct type"));
            }
            ao = (an.kindType);
            ap = ao.FieldByName(am);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ap;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CD.ptr.prototype.FieldByName
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CD.prototype.FieldByName = function(am) {
      return this.$val.FieldByName(am);
    };
    CD.ptr.prototype.FieldByNameFunc = function(am) {
      var am, an, ao, ap, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            if (!((an.Kind() === 25))) {
              $panic(new $String("reflect: FieldByNameFunc of non-struct type"));
            }
            ao = (an.kindType);
            ap = ao.FieldByNameFunc(am);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ap;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CD.ptr.prototype.FieldByNameFunc
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CD.prototype.FieldByNameFunc = function(am) {
      return this.$val.FieldByNameFunc(am);
    };
    CD.ptr.prototype.In = function(am) {
      var am, an, ao, ap;
      an = this;
      if (!((an.Kind() === 19))) {
        $panic(new $String("reflect: In of non-func type"));
      }
      ao = (an.kindType);
      return ES((ap = ao.in$(), ((am < 0 || am >= ap.$length) ? ($throwRuntimeError("index out of range"), undefined) : ap.$array[ap.$offset + am])));
    };
    CD.prototype.In = function(am) {
      return this.$val.In(am);
    };
    CD.ptr.prototype.Key = function() {
      var am, an;
      am = this;
      if (!((am.Kind() === 21))) {
        $panic(new $String("reflect: Key of non-map type"));
      }
      an = (am.kindType);
      return ES(an.key);
    };
    CD.prototype.Key = function() {
      return this.$val.Key();
    };
    CD.ptr.prototype.Len = function() {
      var am, an;
      am = this;
      if (!((am.Kind() === 17))) {
        $panic(new $String("reflect: Len of non-array type"));
      }
      an = (am.kindType);
      return ((an.len >> 0));
    };
    CD.prototype.Len = function() {
      return this.$val.Len();
    };
    CD.ptr.prototype.NumField = function() {
      var am, an;
      am = this;
      if (!((am.Kind() === 25))) {
        $panic(new $String("reflect: NumField of non-struct type"));
      }
      an = (am.kindType);
      return an.fields.$length;
    };
    CD.prototype.NumField = function() {
      return this.$val.NumField();
    };
    CD.ptr.prototype.NumIn = function() {
      var am, an;
      am = this;
      if (!((am.Kind() === 19))) {
        $panic(new $String("reflect: NumIn of non-func type"));
      }
      an = (am.kindType);
      return ((an.inCount >> 0));
    };
    CD.prototype.NumIn = function() {
      return this.$val.NumIn();
    };
    CD.ptr.prototype.NumOut = function() {
      var am, an;
      am = this;
      if (!((am.Kind() === 19))) {
        $panic(new $String("reflect: NumOut of non-func type"));
      }
      an = (am.kindType);
      return an.out().$length;
    };
    CD.prototype.NumOut = function() {
      return this.$val.NumOut();
    };
    CD.ptr.prototype.Out = function(am) {
      var am, an, ao, ap;
      an = this;
      if (!((an.Kind() === 19))) {
        $panic(new $String("reflect: Out of non-func type"));
      }
      ao = (an.kindType);
      return ES((ap = ao.out(), ((am < 0 || am >= ap.$length) ? ($throwRuntimeError("index out of range"), undefined) : ap.$array[ap.$offset + am])));
    };
    CD.prototype.Out = function(am) {
      return this.$val.Out(am);
    };
    CG.prototype.String = function() {
      var am, an;
      am = this.$val;
      an = am;
      if (an === (2)) {
        return "chan<-";
      } else if (an === (1)) {
        return "<-chan";
      } else if (an === (3)) {
        return "chan";
      }
      return "ChanDir" + B.Itoa(((am >> 0)));
    };
    $ptrType(CG).prototype.String = function() {
      return new CG(this.$get()).String();
    };
    CK.ptr.prototype.Method = function(am) {
      var am, an, ao, ap, aq, ar;
      an = new CR.ptr("", "", $ifaceNil, new FA.ptr(HP.nil, 0, 0), 0);
      ao = this;
      if (am < 0 || am >= ao.methods.$length) {
        return an;
      }
      aq = (ap = ao.methods, ((am < 0 || am >= ap.$length) ? ($throwRuntimeError("index out of range"), undefined) : ap.$array[ap.$offset + am]));
      ar = $clone(ao.rtype.nameOff(aq.name), Q);
      an.Name = $clone(ar, Q).name();
      if (!$clone(ar, Q).isExported()) {
        an.PkgPath = $clone(ar, Q).pkgPath();
        if (an.PkgPath === "") {
          an.PkgPath = $clone(ao.pkgPath, Q).name();
        }
      }
      an.Type = ES(ao.rtype.typeOff(aq.typ));
      an.Index = am;
      return an;
    };
    CK.prototype.Method = function(am) {
      return this.$val.Method(am);
    };
    CK.ptr.prototype.NumMethod = function() {
      var am;
      am = this;
      return am.methods.$length;
    };
    CK.prototype.NumMethod = function() {
      return this.$val.NumMethod();
    };
    CK.ptr.prototype.MethodByName = function(am) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw;
      an = new CR.ptr("", "", $ifaceNil, new FA.ptr(HP.nil, 0, 0), 0);
      ao = false;
      ap = this;
      if (ap === IL.nil) {
        return [an, ao];
      }
      aq = IM.nil;
      ar = ap.methods;
      as = 0;
      while (true) {
        if (!(as < ar.$length)) {
          break;
        }
        at = as;
        aq = (au = ap.methods, ((at < 0 || at >= au.$length) ? ($throwRuntimeError("index out of range"), undefined) : au.$array[au.$offset + at]));
        if ($clone(ap.rtype.nameOff(aq.name), Q).name() === am) {
          av = $clone(ap.Method(at), CR);
          aw = true;
          CR.copy(an, av);
          ao = aw;
          return [an, ao];
        }
        as++;
      }
      return [an, ao];
    };
    CK.prototype.MethodByName = function(am) {
      return this.$val.MethodByName(am);
    };
    DG.prototype.Get = function(am) {
      var am, an, ao, ap;
      an = this.$val;
      ao = new DG(an).Lookup(am);
      ap = ao[0];
      return ap;
    };
    $ptrType(DG).prototype.Get = function(am) {
      return new DG(this.$get()).Get(am);
    };
    DG.prototype.Lookup = function(am) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az;
      an = "";
      ao = false;
      ap = this.$val;
      while (true) {
        if (!(!(ap === ""))) {
          break;
        }
        aq = 0;
        while (true) {
          if (!(aq < ap.length && (ap.charCodeAt(aq) === 32))) {
            break;
          }
          aq = aq + (1) >> 0;
        }
        ap = $substring(ap, aq);
        if (ap === "") {
          break;
        }
        aq = 0;
        while (true) {
          if (!(aq < ap.length && ap.charCodeAt(aq) > 32 && !((ap.charCodeAt(aq) === 58)) && !((ap.charCodeAt(aq) === 34)) && !((ap.charCodeAt(aq) === 127)))) {
            break;
          }
          aq = aq + (1) >> 0;
        }
        if ((aq === 0) || (aq + 1 >> 0) >= ap.length || !((ap.charCodeAt(aq) === 58)) || !((ap.charCodeAt((aq + 1 >> 0)) === 34))) {
          break;
        }
        ar = ($substring(ap, 0, aq));
        ap = $substring(ap, (aq + 1 >> 0));
        aq = 1;
        while (true) {
          if (!(aq < ap.length && !((ap.charCodeAt(aq) === 34)))) {
            break;
          }
          if (ap.charCodeAt(aq) === 92) {
            aq = aq + (1) >> 0;
          }
          aq = aq + (1) >> 0;
        }
        if (aq >= ap.length) {
          break;
        }
        as = ($substring(ap, 0, (aq + 1 >> 0)));
        ap = $substring(ap, (aq + 1 >> 0));
        if (am === ar) {
          at = B.Unquote(as);
          au = at[0];
          av = at[1];
          if (!($interfaceIsEqual(av, $ifaceNil))) {
            break;
          }
          aw = au;
          ax = true;
          an = aw;
          ao = ax;
          return [an, ao];
        }
      }
      ay = "";
      az = false;
      an = ay;
      ao = az;
      return [an, ao];
    };
    $ptrType(DG).prototype.Lookup = function(am) {
      return new DG(this.$get()).Lookup(am);
    };
    CP.ptr.prototype.Field = function(am) {
      var am, an, ao, ap, aq, ar;
      an = new DF.ptr("", "", $ifaceNil, "", 0, IN.nil, false);
      ao = this;
      if (am < 0 || am >= ao.fields.$length) {
        $panic(new $String("reflect: Field index out of bounds"));
      }
      aq = (ap = ao.fields, ((am < 0 || am >= ap.$length) ? ($throwRuntimeError("index out of range"), undefined) : ap.$array[ap.$offset + am]));
      an.Type = ES(aq.typ);
      an.Name = $clone(aq.name, Q).name();
      an.Anonymous = aq.embedded();
      if (!$clone(aq.name, Q).isExported()) {
        an.PkgPath = $clone(ao.pkgPath, Q).name();
      }
      ar = $clone(aq.name, Q).tag();
      if (!(ar === "")) {
        an.Tag = (ar);
      }
      an.Offset = aq.offset();
      an.Index = new IN([am]);
      return an;
    };
    CP.prototype.Field = function(am) {
      return this.$val.Field(am);
    };
    CP.ptr.prototype.FieldByIndex = function(am) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = new DF.ptr("", "", $ifaceNil, "", 0, IN.nil, false);
            ao = this;
            an.Type = ES(ao.rtype);
            ap = am;
            aq = 0;
          case 1:
            if (!(aq < ap.$length)) {
              $s = 2;
              continue;
            }
            ar = aq;
            as = ((aq < 0 || aq >= ap.$length) ? ($throwRuntimeError("index out of range"), undefined) : ap.$array[ap.$offset + aq]);
            if (ar > 0) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            at = an.Type;
            av = at.Kind();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              av = av.$blk();
            }
            if (av && av.$blk !== undefined) {
              break s;
            }
            if (!(av === 22)) {
              au = false;
              $s = 7;
              continue s;
            }
            aw = at.Elem();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              aw = aw.$blk();
            }
            if (aw && aw.$blk !== undefined) {
              break s;
            }
            ax = aw.Kind();
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              ax = ax.$blk();
            }
            if (ax && ax.$blk !== undefined) {
              break s;
            }
            au = ax === 25;
          case 7:
            if (au) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            ay = at.Elem();
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              ay = ay.$blk();
            }
            if (ay && ay.$blk !== undefined) {
              break s;
            }
            at = ay;
          case 6:
            an.Type = at;
          case 4:
            az = an.Type.Field(as);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              az = az.$blk();
            }
            if (az && az.$blk !== undefined) {
              break s;
            }
            DF.copy(an, az);
            aq++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return an;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CP.ptr.prototype.FieldByIndex
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CP.prototype.FieldByIndex = function(am) {
      return this.$val.FieldByIndex(am);
    };
    CP.ptr.prototype.FieldByNameFunc = function(am) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, bq, br, bs, bt, bu, bv, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        ba = $f.ba;
        bb = $f.bb;
        bc = $f.bc;
        bd = $f.bd;
        be = $f.be;
        bf = $f.bf;
        bg = $f.bg;
        bh = $f.bh;
        bi = $f.bi;
        bj = $f.bj;
        bk = $f.bk;
        bl = $f.bl;
        bm = $f.bm;
        bn = $f.bn;
        bo = $f.bo;
        bp = $f.bp;
        bq = $f.bq;
        br = $f.br;
        bs = $f.bs;
        bt = $f.bt;
        bu = $f.bu;
        bv = $f.bv;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = new DF.ptr("", "", $ifaceNil, "", 0, IN.nil, false);
            ao = false;
            ap = this;
            aq = new IO([]);
            ar = new IO([new DH.ptr(ap, IN.nil)]);
            as = false;
            at = $makeMap(IP.keyFor, []);
          case 1:
            if (!(ar.$length > 0)) {
              $s = 2;
              continue;
            }
            au = ar;
            av = $subslice(aq, 0, 0);
            aq = au;
            ar = av;
            aw = as;
            as = false;
            ax = aq;
            ay = 0;
          case 3:
            if (!(ay < ax.$length)) {
              $s = 4;
              continue;
            }
            az = $clone(((ay < 0 || ay >= ax.$length) ? ($throwRuntimeError("index out of range"), undefined) : ax.$array[ax.$offset + ay]), DH);
            ba = az.typ;
            if ((bb = at[IP.keyFor(ba)], bb !== undefined ? bb.v : false)) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            ay++;
            $s = 3;
            continue;
          case 6:
            bc = ba;
            (at || $throwRuntimeError("assignment to entry in nil map"))[IP.keyFor(bc)] = {
              k: bc,
              v: true
            };
            bd = ba.fields;
            be = 0;
          case 7:
            if (!(be < bd.$length)) {
              $s = 8;
              continue;
            }
            bf = be;
            bh = (bg = ba.fields, ((bf < 0 || bf >= bg.$length) ? ($throwRuntimeError("index out of range"), undefined) : bg.$array[bg.$offset + bf]));
            bi = $clone(bh.name, Q).name();
            bj = HP.nil;
            if (bh.embedded()) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            bj = bh.typ;
            if (bj.Kind() === 22) {
              $s = 11;
              continue;
            }
            $s = 12;
            continue;
          case 11:
            bk = bj.Elem().common();
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              bk = bk.$blk();
            }
            if (bk && bk.$blk !== undefined) {
              break s;
            }
            bj = bk;
          case 12:
          case 10:
            bl = am(bi);
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              bl = bl.$blk();
            }
            if (bl && bl.$blk !== undefined) {
              break s;
            }
            if (bl) {
              $s = 14;
              continue;
            }
            $s = 15;
            continue;
          case 14:
            if ((bm = aw[IP.keyFor(ba)], bm !== undefined ? bm.v : 0) > 1 || ao) {
              bn = new DF.ptr("", "", $ifaceNil, "", 0, IN.nil, false);
              bo = false;
              DF.copy(an, bn);
              ao = bo;
              $s = -1;
              return [an, ao];
            }
            DF.copy(an, ba.Field(bf));
            an.Index = IN.nil;
            an.Index = $appendSlice(an.Index, az.index);
            an.Index = $append(an.Index, bf);
            ao = true;
            be++;
            $s = 7;
            continue;
          case 15:
            if (ao || bj === HP.nil || !((bj.Kind() === 25))) {
              be++;
              $s = 7;
              continue;
            }
            bp = (bj.kindType);
            if ((bq = as[IP.keyFor(bp)], bq !== undefined ? bq.v : 0) > 0) {
              br = bp;
              (as || $throwRuntimeError("assignment to entry in nil map"))[IP.keyFor(br)] = {
                k: br,
                v: 2
              };
              be++;
              $s = 7;
              continue;
            }
            if (as === false) {
              as = $makeMap(IP.keyFor, []);
            }
            bs = bp;
            (as || $throwRuntimeError("assignment to entry in nil map"))[IP.keyFor(bs)] = {
              k: bs,
              v: 1
            };
            if ((bt = aw[IP.keyFor(ba)], bt !== undefined ? bt.v : 0) > 1) {
              bu = bp;
              (as || $throwRuntimeError("assignment to entry in nil map"))[IP.keyFor(bu)] = {
                k: bu,
                v: 2
              };
            }
            bv = IN.nil;
            bv = $appendSlice(bv, az.index);
            bv = $append(bv, bf);
            ar = $append(ar, new DH.ptr(bp, bv));
            be++;
            $s = 7;
            continue;
          case 8:
            ay++;
            $s = 3;
            continue;
          case 4:
            if (ao) {
              $s = 2;
              continue;
            }
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return [an, ao];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CP.ptr.prototype.FieldByNameFunc
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.ba = ba;
      $f.bb = bb;
      $f.bc = bc;
      $f.bd = bd;
      $f.be = be;
      $f.bf = bf;
      $f.bg = bg;
      $f.bh = bh;
      $f.bi = bi;
      $f.bj = bj;
      $f.bk = bk;
      $f.bl = bl;
      $f.bm = bm;
      $f.bn = bn;
      $f.bo = bo;
      $f.bp = bp;
      $f.bq = bq;
      $f.br = br;
      $f.bs = bs;
      $f.bt = bt;
      $f.bu = bu;
      $f.bv = bv;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CP.prototype.FieldByNameFunc = function(am) {
      return this.$val.FieldByNameFunc(am);
    };
    CP.ptr.prototype.FieldByName = function(am) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            am = [am];
            an = new DF.ptr("", "", $ifaceNil, "", 0, IN.nil, false);
            ao = false;
            ap = this;
            aq = false;
            if (!(am[0] === "")) {
              ar = ap.fields;
              as = 0;
              while (true) {
                if (!(as < ar.$length)) {
                  break;
                }
                at = as;
                av = (au = ap.fields, ((at < 0 || at >= au.$length) ? ($throwRuntimeError("index out of range"), undefined) : au.$array[au.$offset + at]));
                if ($clone(av.name, Q).name() === am[0]) {
                  aw = $clone(ap.Field(at), DF);
                  ax = true;
                  DF.copy(an, aw);
                  ao = ax;
                  $s = -1;
                  return [an, ao];
                }
                if (av.embedded()) {
                  aq = true;
                }
                as++;
              }
            }
            if (!aq) {
              $s = -1;
              return [an, ao];
            }
            az = ap.FieldByNameFunc((function(am) {
              return function(az) {
                var az;
                return az === am[0];
              };
            })(am));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              az = az.$blk();
            }
            if (az && az.$blk !== undefined) {
              break s;
            }
            ay = az;
            DF.copy(an, ay[0]);
            ao = ay[1];
            $s = -1;
            return [an, ao];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CP.ptr.prototype.FieldByName
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CP.prototype.FieldByName = function(am) {
      return this.$val.FieldByName(am);
    };
    DJ = function(am) {
      var am;
      return $assertType(am, HP).ptrTo();
    };
    $pkg.PtrTo = DJ;
    CD.ptr.prototype.Implements = function(am) {
      var am, an, ao, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            if ($interfaceIsEqual(am, $ifaceNil)) {
              $panic(new $String("reflect: nil type passed to Type.Implements"));
            }
            ao = am.Kind();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            if (!((ao === 20))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $panic(new $String("reflect: non-interface type passed to Type.Implements"));
          case 2:
            $s = -1;
            return DL($assertType(am, HP), an);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CD.ptr.prototype.Implements
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CD.prototype.Implements = function(am) {
      return this.$val.Implements(am);
    };
    CD.ptr.prototype.AssignableTo = function(am) {
      var am, an, ao, ap, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            if ($interfaceIsEqual(am, $ifaceNil)) {
              $panic(new $String("reflect: nil type passed to Type.AssignableTo"));
            }
            ao = $assertType(am, HP);
            ap = DM(ao, an);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ap || DL(ao, an);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CD.ptr.prototype.AssignableTo
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CD.prototype.AssignableTo = function(am) {
      return this.$val.AssignableTo(am);
    };
    CD.ptr.prototype.ConvertibleTo = function(am) {
      var am, an, ao, ap, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            if ($interfaceIsEqual(am, $ifaceNil)) {
              $panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
            }
            ao = $assertType(am, HP);
            ap = GJ(ao, an);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return !(ap === $throwNilPointerError);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CD.ptr.prototype.ConvertibleTo
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CD.prototype.ConvertibleTo = function(am) {
      return this.$val.ConvertibleTo(am);
    };
    DL = function(am, an) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk;
      if (!((am.Kind() === 20))) {
        return false;
      }
      ao = (am.kindType);
      if (ao.methods.$length === 0) {
        return true;
      }
      if (an.Kind() === 20) {
        ap = (an.kindType);
        aq = 0;
        ar = 0;
        while (true) {
          if (!(ar < ap.methods.$length)) {
            break;
          }
          at = (as = ao.methods, ((aq < 0 || aq >= as.$length) ? ($throwRuntimeError("index out of range"), undefined) : as.$array[as.$offset + aq]));
          au = $clone(ao.rtype.nameOff(at.name), Q);
          aw = (av = ap.methods, ((ar < 0 || ar >= av.$length) ? ($throwRuntimeError("index out of range"), undefined) : av.$array[av.$offset + ar]));
          ax = $clone(an.nameOff(aw.name), Q);
          if ($clone(ax, Q).name() === $clone(au, Q).name() && an.typeOff(aw.typ) === ao.rtype.typeOff(at.typ)) {
            if (!$clone(au, Q).isExported()) {
              ay = $clone(au, Q).pkgPath();
              if (ay === "") {
                ay = $clone(ao.pkgPath, Q).name();
              }
              az = $clone(ax, Q).pkgPath();
              if (az === "") {
                az = $clone(ap.pkgPath, Q).name();
              }
              if (!(ay === az)) {
                ar = ar + (1) >> 0;
                continue;
              }
            }
            aq = aq + (1) >> 0;
            if (aq >= ao.methods.$length) {
              return true;
            }
          }
          ar = ar + (1) >> 0;
        }
        return false;
      }
      ba = an.uncommon();
      if (ba === IC.nil) {
        return false;
      }
      bb = 0;
      bc = ba.methods();
      bd = 0;
      while (true) {
        if (!(bd < ((ba.mcount >> 0)))) {
          break;
        }
        bf = (be = ao.methods, ((bb < 0 || bb >= be.$length) ? ($throwRuntimeError("index out of range"), undefined) : be.$array[be.$offset + bb]));
        bg = $clone(ao.rtype.nameOff(bf.name), Q);
        bh = $clone(((bd < 0 || bd >= bc.$length) ? ($throwRuntimeError("index out of range"), undefined) : bc.$array[bc.$offset + bd]), CF);
        bi = $clone(an.nameOff(bh.name), Q);
        if ($clone(bi, Q).name() === $clone(bg, Q).name() && an.typeOff(bh.mtyp) === ao.rtype.typeOff(bf.typ)) {
          if (!$clone(bg, Q).isExported()) {
            bj = $clone(bg, Q).pkgPath();
            if (bj === "") {
              bj = $clone(ao.pkgPath, Q).name();
            }
            bk = $clone(bi, Q).pkgPath();
            if (bk === "") {
              bk = $clone(an.nameOff(ba.pkgPath), Q).name();
            }
            if (!(bj === bk)) {
              bd = bd + (1) >> 0;
              continue;
            }
          }
          bb = bb + (1) >> 0;
          if (bb >= ao.methods.$length) {
            return true;
          }
        }
        bd = bd + (1) >> 0;
      }
      return false;
    };
    DM = function(am, an) {
      var am, an, ao, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (am === an) {
              $s = -1;
              return true;
            }
            if (!(am.Name() === "") && !(an.Name() === "") || !((am.Kind() === an.Kind()))) {
              $s = -1;
              return false;
            }
            ao = DO(am, an, true);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ao;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DN = function(am, an, ao) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (ao) {
              $s = -1;
              return $interfaceIsEqual(am, an);
            }
            aq = am.Name();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            ar = an.Name();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              ar = ar.$blk();
            }
            if (ar && ar.$blk !== undefined) {
              break s;
            }
            if (!(aq === ar)) {
              ap = true;
              $s = 3;
              continue s;
            }
            as = am.Kind();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            at = an.Kind();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              at = at.$blk();
            }
            if (at && at.$blk !== undefined) {
              break s;
            }
            ap = !((as === at));
          case 3:
            if (ap) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $s = -1;
            return false;
          case 2:
            au = am.common();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              au = au.$blk();
            }
            if (au && au.$blk !== undefined) {
              break s;
            }
            av = au;
            aw = an.common();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              aw = aw.$blk();
            }
            if (aw && aw.$blk !== undefined) {
              break s;
            }
            ax = aw;
            ay = DO(av, ax, false);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              ay = ay.$blk();
            }
            if (ay && ay.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ay;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DN
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DO = function(am, an, ao) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, bq, br, bs, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        ba = $f.ba;
        bb = $f.bb;
        bc = $f.bc;
        bd = $f.bd;
        be = $f.be;
        bf = $f.bf;
        bg = $f.bg;
        bh = $f.bh;
        bi = $f.bi;
        bj = $f.bj;
        bk = $f.bk;
        bl = $f.bl;
        bm = $f.bm;
        bn = $f.bn;
        bo = $f.bo;
        bp = $f.bp;
        bq = $f.bq;
        br = $f.br;
        bs = $f.bs;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (am === an) {
              $s = -1;
              return true;
            }
            ap = am.Kind();
            if (!((ap === an.Kind()))) {
              $s = -1;
              return false;
            }
            if (1 <= ap && ap <= 16 || (ap === 24) || (ap === 26)) {
              $s = -1;
              return true;
            }
            aq = ap;
            if (aq === (17)) {
              $s = 2;
              continue;
            }
            if (aq === (18)) {
              $s = 3;
              continue;
            }
            if (aq === (19)) {
              $s = 4;
              continue;
            }
            if (aq === (20)) {
              $s = 5;
              continue;
            }
            if (aq === (21)) {
              $s = 6;
              continue;
            }
            if ((aq === (22)) || (aq === (23))) {
              $s = 7;
              continue;
            }
            if (aq === (25)) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 2:
            if (!(am.Len() === an.Len())) {
              ar = false;
              $s = 10;
              continue s;
            }
            as = DN(am.Elem(), an.Elem(), ao);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            ar = as;
          case 10:
            $s = -1;
            return ar;
          case 3:
            if (!(an.ChanDir() === 3)) {
              at = false;
              $s = 14;
              continue s;
            }
            au = DN(am.Elem(), an.Elem(), ao);
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              au = au.$blk();
            }
            if (au && au.$blk !== undefined) {
              break s;
            }
            at = au;
          case 14:
            if (at) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 12:
            $s = -1;
            return true;
          case 13:
            if (!(an.ChanDir() === am.ChanDir())) {
              av = false;
              $s = 16;
              continue s;
            }
            aw = DN(am.Elem(), an.Elem(), ao);
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              aw = aw.$blk();
            }
            if (aw && aw.$blk !== undefined) {
              break s;
            }
            av = aw;
          case 16:
            $s = -1;
            return av;
          case 4:
            ax = (am.kindType);
            ay = (an.kindType);
            if (!((ax.outCount === ay.outCount)) || !((ax.inCount === ay.inCount))) {
              $s = -1;
              return false;
            }
            az = 0;
          case 18:
            if (!(az < ax.rtype.NumIn())) {
              $s = 19;
              continue;
            }
            ba = DN(ax.rtype.In(az), ay.rtype.In(az), ao);
            $s = 22;
          case 22:
            if ($c) {
              $c = false;
              ba = ba.$blk();
            }
            if (ba && ba.$blk !== undefined) {
              break s;
            }
            if (!ba) {
              $s = 20;
              continue;
            }
            $s = 21;
            continue;
          case 20:
            $s = -1;
            return false;
          case 21:
            az = az + (1) >> 0;
            $s = 18;
            continue;
          case 19:
            bb = 0;
          case 23:
            if (!(bb < ax.rtype.NumOut())) {
              $s = 24;
              continue;
            }
            bc = DN(ax.rtype.Out(bb), ay.rtype.Out(bb), ao);
            $s = 27;
          case 27:
            if ($c) {
              $c = false;
              bc = bc.$blk();
            }
            if (bc && bc.$blk !== undefined) {
              break s;
            }
            if (!bc) {
              $s = 25;
              continue;
            }
            $s = 26;
            continue;
          case 25:
            $s = -1;
            return false;
          case 26:
            bb = bb + (1) >> 0;
            $s = 23;
            continue;
          case 24:
            $s = -1;
            return true;
          case 5:
            bd = (am.kindType);
            be = (an.kindType);
            if ((bd.methods.$length === 0) && (be.methods.$length === 0)) {
              $s = -1;
              return true;
            }
            $s = -1;
            return false;
          case 6:
            bg = DN(am.Key(), an.Key(), ao);
            $s = 29;
          case 29:
            if ($c) {
              $c = false;
              bg = bg.$blk();
            }
            if (bg && bg.$blk !== undefined) {
              break s;
            }
            if (!(bg)) {
              bf = false;
              $s = 28;
              continue s;
            }
            bh = DN(am.Elem(), an.Elem(), ao);
            $s = 30;
          case 30:
            if ($c) {
              $c = false;
              bh = bh.$blk();
            }
            if (bh && bh.$blk !== undefined) {
              break s;
            }
            bf = bh;
          case 28:
            $s = -1;
            return bf;
          case 7:
            bi = DN(am.Elem(), an.Elem(), ao);
            $s = 31;
          case 31:
            if ($c) {
              $c = false;
              bi = bi.$blk();
            }
            if (bi && bi.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return bi;
          case 8:
            bj = (am.kindType);
            bk = (an.kindType);
            if (!((bj.fields.$length === bk.fields.$length))) {
              $s = -1;
              return false;
            }
            if (!($clone(bj.pkgPath, Q).name() === $clone(bk.pkgPath, Q).name())) {
              $s = -1;
              return false;
            }
            bl = bj.fields;
            bm = 0;
          case 32:
            if (!(bm < bl.$length)) {
              $s = 33;
              continue;
            }
            bn = bm;
            bp = (bo = bj.fields, ((bn < 0 || bn >= bo.$length) ? ($throwRuntimeError("index out of range"), undefined) : bo.$array[bo.$offset + bn]));
            br = (bq = bk.fields, ((bn < 0 || bn >= bq.$length) ? ($throwRuntimeError("index out of range"), undefined) : bq.$array[bq.$offset + bn]));
            if (!($clone(bp.name, Q).name() === $clone(br.name, Q).name())) {
              $s = -1;
              return false;
            }
            bs = DN(bp.typ, br.typ, ao);
            $s = 36;
          case 36:
            if ($c) {
              $c = false;
              bs = bs.$blk();
            }
            if (bs && bs.$blk !== undefined) {
              break s;
            }
            if (!bs) {
              $s = 34;
              continue;
            }
            $s = 35;
            continue;
          case 34:
            $s = -1;
            return false;
          case 35:
            if (ao && !($clone(bp.name, Q).tag() === $clone(br.name, Q).tag())) {
              $s = -1;
              return false;
            }
            if (!((bp.offsetEmbed === br.offsetEmbed))) {
              $s = -1;
              return false;
            }
            bm++;
            $s = 32;
            continue;
          case 33:
            $s = -1;
            return true;
          case 9:
          case 1:
            $s = -1;
            return false;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DO
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.ba = ba;
      $f.bb = bb;
      $f.bc = bc;
      $f.bd = bd;
      $f.be = be;
      $f.bf = bf;
      $f.bg = bg;
      $f.bh = bh;
      $f.bi = bi;
      $f.bj = bj;
      $f.bk = bk;
      $f.bl = bl;
      $f.bm = bm;
      $f.bn = bn;
      $f.bo = bo;
      $f.bp = bp;
      $f.bq = bq;
      $f.br = br;
      $f.bs = bs;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    ES = function(am) {
      var am;
      if (am === HP.nil) {
        return $ifaceNil;
      }
      return am;
    };
    EX = function(am) {
      var am;
      return ((am.kind & 32) >>> 0) === 0;
    };
    FB.prototype.kind = function() {
      var am;
      am = this.$val;
      return ((((am & 31) >>> 0) >>> 0));
    };
    $ptrType(FB).prototype.kind = function() {
      return new FB(this.$get()).kind();
    };
    FB.prototype.ro = function() {
      var am;
      am = this.$val;
      if (!((((am & 96) >>> 0) === 0))) {
        return 32;
      }
      return 0;
    };
    $ptrType(FB).prototype.ro = function() {
      return new FB(this.$get()).ro();
    };
    FA.ptr.prototype.pointer = function() {
      var am;
      am = this;
      if (!((am.typ.size === 4)) || !am.typ.pointers()) {
        $panic(new $String("can't call pointer on a non-pointer Value"));
      }
      if (!((((am.flag & 128) >>> 0) === 0))) {
        return (am.ptr).$get();
      }
      return am.ptr;
    };
    FA.prototype.pointer = function() {
      return this.$val.pointer();
    };
    FE.ptr.prototype.Error = function() {
      var am;
      am = this;
      if (am.Kind === 0) {
        return "reflect: call of " + am.Method + " on zero Value";
      }
      return "reflect: call of " + am.Method + " on " + new CB(am.Kind).String() + " Value";
    };
    FE.prototype.Error = function() {
      return this.$val.Error();
    };
    FB.prototype.mustBe = function(am) {
      var am, an;
      an = this.$val;
      if (!((new FB(an).kind() === am))) {
        $panic(new FE.ptr(BF(), new FB(an).kind()));
      }
    };
    $ptrType(FB).prototype.mustBe = function(am) {
      return new FB(this.$get()).mustBe(am);
    };
    FB.prototype.mustBeExported = function() {
      var am;
      am = this.$val;
      if (am === 0) {
        $panic(new FE.ptr(BF(), 0));
      }
      if (!((((am & 96) >>> 0) === 0))) {
        $panic(new $String("reflect: " + BF() + " using value obtained using unexported field"));
      }
    };
    $ptrType(FB).prototype.mustBeExported = function() {
      return new FB(this.$get()).mustBeExported();
    };
    FB.prototype.mustBeAssignable = function() {
      var am;
      am = this.$val;
      if (am === 0) {
        $panic(new FE.ptr(BF(), 0));
      }
      if (!((((am & 96) >>> 0) === 0))) {
        $panic(new $String("reflect: " + BF() + " using value obtained using unexported field"));
      }
      if (((am & 256) >>> 0) === 0) {
        $panic(new $String("reflect: " + BF() + " using unaddressable value"));
      }
    };
    $ptrType(FB).prototype.mustBeAssignable = function() {
      return new FB(this.$get()).mustBeAssignable();
    };
    FA.ptr.prototype.Addr = function() {
      var am;
      am = this;
      if (((am.flag & 256) >>> 0) === 0) {
        $panic(new $String("reflect.Value.Addr of unaddressable value"));
      }
      return new FA.ptr(am.typ.ptrTo(), am.ptr, (new FB(am.flag).ro() | 22) >>> 0);
    };
    FA.prototype.Addr = function() {
      return this.$val.Addr();
    };
    FA.ptr.prototype.Bool = function() {
      var am;
      am = this;
      new FB(am.flag).mustBe(1);
      return (am.ptr).$get();
    };
    FA.prototype.Bool = function() {
      return this.$val.Bool();
    };
    FA.ptr.prototype.Bytes = function() {
      var am, an, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            am = this;
            new FB(am.flag).mustBe(23);
            an = am.typ.Elem().Kind();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              an = an.$blk();
            }
            if (an && an.$blk !== undefined) {
              break s;
            }
            if (!((an === 8))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $panic(new $String("reflect.Value.Bytes of non-byte slice"));
          case 2:
            $s = -1;
            return (am.ptr).$get();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.Bytes
        };
      }
      $f.am = am;
      $f.an = an;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.Bytes = function() {
      return this.$val.Bytes();
    };
    FA.ptr.prototype.runes = function() {
      var am, an, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            am = this;
            new FB(am.flag).mustBe(23);
            an = am.typ.Elem().Kind();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              an = an.$blk();
            }
            if (an && an.$blk !== undefined) {
              break s;
            }
            if (!((an === 5))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $panic(new $String("reflect.Value.Bytes of non-rune slice"));
          case 2:
            $s = -1;
            return (am.ptr).$get();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.runes
        };
      }
      $f.am = am;
      $f.an = an;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.runes = function() {
      return this.$val.runes();
    };
    FA.ptr.prototype.CanAddr = function() {
      var am;
      am = this;
      return !((((am.flag & 256) >>> 0) === 0));
    };
    FA.prototype.CanAddr = function() {
      return this.$val.CanAddr();
    };
    FA.ptr.prototype.CanSet = function() {
      var am;
      am = this;
      return ((am.flag & 352) >>> 0) === 256;
    };
    FA.prototype.CanSet = function() {
      return this.$val.CanSet();
    };
    FA.ptr.prototype.Call = function(am) {
      var am, an, ao, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            new FB(an.flag).mustBe(19);
            new FB(an.flag).mustBeExported();
            ao = $clone(an, FA).call("Call", am);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ao;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.Call
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.Call = function(am) {
      return this.$val.Call(am);
    };
    FA.ptr.prototype.CallSlice = function(am) {
      var am, an, ao, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            new FB(an.flag).mustBe(19);
            new FB(an.flag).mustBeExported();
            ao = $clone(an, FA).call("CallSlice", am);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ao;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.CallSlice
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.CallSlice = function(am) {
      return this.$val.CallSlice(am);
    };
    FA.ptr.prototype.Complex = function() {
      var am, an, ao, ap;
      am = this;
      an = new FB(am.flag).kind();
      ao = an;
      if (ao === (15)) {
        return ((ap = (am.ptr).$get(), new $Complex128(ap.$real, ap.$imag)));
      } else if (ao === (16)) {
        return (am.ptr).$get();
      }
      $panic(new FE.ptr("reflect.Value.Complex", new FB(am.flag).kind()));
    };
    FA.prototype.Complex = function() {
      return this.$val.Complex();
    };
    FA.ptr.prototype.FieldByIndex = function(am) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            if (am.$length === 1) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            ao = $clone(an, FA).Field((0 >= am.$length ? ($throwRuntimeError("index out of range"), undefined) : am.$array[am.$offset + 0]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ao;
          case 2:
            new FB(an.flag).mustBe(25);
            ap = am;
            aq = 0;
          case 4:
            if (!(aq < ap.$length)) {
              $s = 5;
              continue;
            }
            ar = aq;
            as = ((aq < 0 || aq >= ap.$length) ? ($throwRuntimeError("index out of range"), undefined) : ap.$array[ap.$offset + aq]);
            if (ar > 0) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            if (!($clone(an, FA).Kind() === 22)) {
              at = false;
              $s = 10;
              continue s;
            }
            au = an.typ.Elem().Kind();
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              au = au.$blk();
            }
            if (au && au.$blk !== undefined) {
              break s;
            }
            at = au === 25;
          case 10:
            if (at) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            if ($clone(an, FA).IsNil()) {
              $panic(new $String("reflect: indirection through nil pointer to embedded struct"));
            }
            av = $clone(an, FA).Elem();
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              av = av.$blk();
            }
            if (av && av.$blk !== undefined) {
              break s;
            }
            an = av;
          case 9:
          case 7:
            aw = $clone(an, FA).Field(as);
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              aw = aw.$blk();
            }
            if (aw && aw.$blk !== undefined) {
              break s;
            }
            an = aw;
            aq++;
            $s = 4;
            continue;
          case 5:
            $s = -1;
            return an;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.FieldByIndex
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.FieldByIndex = function(am) {
      return this.$val.FieldByIndex(am);
    };
    FA.ptr.prototype.FieldByName = function(am) {
      var am, an, ao, ap, aq, ar, as, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            new FB(an.flag).mustBe(25);
            ap = an.typ.FieldByName(am);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            ao = ap;
            aq = $clone(ao[0], DF);
            ar = ao[1];
            if (ar) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            as = $clone(an, FA).FieldByIndex(aq.Index);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return as;
          case 3:
            $s = -1;
            return new FA.ptr(HP.nil, 0, 0);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.FieldByName
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.FieldByName = function(am) {
      return this.$val.FieldByName(am);
    };
    FA.ptr.prototype.FieldByNameFunc = function(am) {
      var am, an, ao, ap, aq, ar, as, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            ap = an.typ.FieldByNameFunc(am);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            ao = ap;
            aq = $clone(ao[0], DF);
            ar = ao[1];
            if (ar) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            as = $clone(an, FA).FieldByIndex(aq.Index);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return as;
          case 3:
            $s = -1;
            return new FA.ptr(HP.nil, 0, 0);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.FieldByNameFunc
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.FieldByNameFunc = function(am) {
      return this.$val.FieldByNameFunc(am);
    };
    FA.ptr.prototype.Float = function() {
      var am, an, ao;
      am = this;
      an = new FB(am.flag).kind();
      ao = an;
      if (ao === (13)) {
        return ((am.ptr).$get());
      } else if (ao === (14)) {
        return (am.ptr).$get();
      }
      $panic(new FE.ptr("reflect.Value.Float", new FB(am.flag).kind()));
    };
    FA.prototype.Float = function() {
      return this.$val.Float();
    };
    FA.ptr.prototype.Int = function() {
      var am, an, ao, ap;
      am = this;
      an = new FB(am.flag).kind();
      ao = am.ptr;
      ap = an;
      if (ap === (2)) {
        return (new $Int64(0, (ao).$get()));
      } else if (ap === (3)) {
        return (new $Int64(0, (ao).$get()));
      } else if (ap === (4)) {
        return (new $Int64(0, (ao).$get()));
      } else if (ap === (5)) {
        return (new $Int64(0, (ao).$get()));
      } else if (ap === (6)) {
        return (ao).$get();
      }
      $panic(new FE.ptr("reflect.Value.Int", new FB(am.flag).kind()));
    };
    FA.prototype.Int = function() {
      return this.$val.Int();
    };
    FA.ptr.prototype.CanInterface = function() {
      var am;
      am = this;
      if (am.flag === 0) {
        $panic(new FE.ptr("reflect.Value.CanInterface", 0));
      }
      return ((am.flag & 96) >>> 0) === 0;
    };
    FA.prototype.CanInterface = function() {
      return this.$val.CanInterface();
    };
    FA.ptr.prototype.Interface = function() {
      var am, an, ao, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            am = $ifaceNil;
            an = this;
            ao = BD($clone(an, FA), true);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            am = ao;
            $s = -1;
            return am;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.Interface
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.Interface = function() {
      return this.$val.Interface();
    };
    FA.ptr.prototype.IsValid = function() {
      var am;
      am = this;
      return !((am.flag === 0));
    };
    FA.prototype.IsValid = function() {
      return this.$val.IsValid();
    };
    FA.ptr.prototype.Kind = function() {
      var am;
      am = this;
      return new FB(am.flag).kind();
    };
    FA.prototype.Kind = function() {
      return this.$val.Kind();
    };
    FA.ptr.prototype.MapIndex = function(am) {
      var am, an, ao, ap, aq, ar, as, at, au, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            new FB(an.flag).mustBe(21);
            ao = (an.typ.kindType);
            ap = $clone(am, FA).assignTo("reflect.Value.MapIndex", ao.key, 0);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            am = ap;
            aq = 0;
            if (!((((am.flag & 128) >>> 0) === 0))) {
              aq = am.ptr;
            } else {
              aq = ((am.$ptr_ptr || (am.$ptr_ptr = new JB(function() {
                return this.$target.ptr;
              }, function($v) {
                this.$target.ptr = $v;
              }, am))));
            }
            ar = AT(an.typ, $clone(an, FA).pointer(), aq);
            if (ar === 0) {
              $s = -1;
              return new FA.ptr(HP.nil, 0, 0);
            }
            as = ao.elem;
            at = new FB((((an.flag | am.flag) >>> 0))).ro();
            at = (at | (((as.Kind() >>> 0)))) >>> 0;
            if (!EX(as)) {
              $s = -1;
              return new FA.ptr(as, (ar).$get(), at);
            }
            au = AL(as);
            AO(as, au, ar);
            $s = -1;
            return new FA.ptr(as, au, (at | 128) >>> 0);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.MapIndex
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.MapIndex = function(am) {
      return this.$val.MapIndex(am);
    };
    FA.ptr.prototype.MapKeys = function() {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            am = this;
            new FB(am.flag).mustBe(21);
            an = (am.typ.kindType);
            ao = an.key;
            ap = (new FB(am.flag).ro() | ((ao.Kind() >>> 0))) >>> 0;
            aq = $clone(am, FA).pointer();
            ar = 0;
            if (!(aq === 0)) {
              ar = BA(aq);
            }
            as = AX(am.typ, aq);
            at = $makeSlice(IG, ar);
            au = 0;
            au = 0;
          case 1:
            if (!(au < at.$length)) {
              $s = 2;
              continue;
            }
            av = AY(as);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              av = av.$blk();
            }
            if (av && av.$blk !== undefined) {
              break s;
            }
            aw = av;
            if (aw === 0) {
              $s = 2;
              continue;
            }
            if (EX(ao)) {
              ax = AL(ao);
              AO(ao, ax, aw);
              ((au < 0 || au >= at.$length) ? ($throwRuntimeError("index out of range"), undefined) : at.$array[at.$offset + au] = new FA.ptr(ao, ax, (ap | 128) >>> 0));
            } else {
              ((au < 0 || au >= at.$length) ? ($throwRuntimeError("index out of range"), undefined) : at.$array[at.$offset + au] = new FA.ptr(ao, (aw).$get(), ap));
            }
            AZ(as);
            au = au + (1) >> 0;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return $subslice(at, 0, au);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.MapKeys
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.MapKeys = function() {
      return this.$val.MapKeys();
    };
    FA.ptr.prototype.Method = function(am) {
      var am, an, ao;
      an = this;
      if (an.typ === HP.nil) {
        $panic(new FE.ptr("reflect.Value.Method", 0));
      }
      if (!((((an.flag & 512) >>> 0) === 0)) || ((am >>> 0)) >= ((an.typ.NumMethod() >>> 0))) {
        $panic(new $String("reflect: Method index out of range"));
      }
      if ((an.typ.Kind() === 20) && $clone(an, FA).IsNil()) {
        $panic(new $String("reflect: Method on nil interface value"));
      }
      ao = (an.flag & 160) >>> 0;
      ao = (ao | (19)) >>> 0;
      ao = (ao | ((((((am >>> 0)) << 10 >>> 0) | 512) >>> 0))) >>> 0;
      return new FA.ptr(an.typ, an.ptr, ao);
    };
    FA.prototype.Method = function(am) {
      return this.$val.Method(am);
    };
    FA.ptr.prototype.NumMethod = function() {
      var am;
      am = this;
      if (am.typ === HP.nil) {
        $panic(new FE.ptr("reflect.Value.NumMethod", 0));
      }
      if (!((((am.flag & 512) >>> 0) === 0))) {
        return 0;
      }
      return am.typ.NumMethod();
    };
    FA.prototype.NumMethod = function() {
      return this.$val.NumMethod();
    };
    FA.ptr.prototype.MethodByName = function(am) {
      var am, an, ao, ap, aq, ar, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            if (an.typ === HP.nil) {
              $panic(new FE.ptr("reflect.Value.MethodByName", 0));
            }
            if (!((((an.flag & 512) >>> 0) === 0))) {
              $s = -1;
              return new FA.ptr(HP.nil, 0, 0);
            }
            ap = an.typ.MethodByName(am);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            ao = ap;
            aq = $clone(ao[0], CR);
            ar = ao[1];
            if (!ar) {
              $s = -1;
              return new FA.ptr(HP.nil, 0, 0);
            }
            $s = -1;
            return $clone(an, FA).Method(aq.Index);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.MethodByName
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.MethodByName = function(am) {
      return this.$val.MethodByName(am);
    };
    FA.ptr.prototype.NumField = function() {
      var am, an;
      am = this;
      new FB(am.flag).mustBe(25);
      an = (am.typ.kindType);
      return an.fields.$length;
    };
    FA.prototype.NumField = function() {
      return this.$val.NumField();
    };
    FA.ptr.prototype.OverflowComplex = function(am) {
      var am, an, ao, ap;
      an = this;
      ao = new FB(an.flag).kind();
      ap = ao;
      if (ap === (15)) {
        return FO(am.$real) || FO(am.$imag);
      } else if (ap === (16)) {
        return false;
      }
      $panic(new FE.ptr("reflect.Value.OverflowComplex", new FB(an.flag).kind()));
    };
    FA.prototype.OverflowComplex = function(am) {
      return this.$val.OverflowComplex(am);
    };
    FA.ptr.prototype.OverflowFloat = function(am) {
      var am, an, ao, ap;
      an = this;
      ao = new FB(an.flag).kind();
      ap = ao;
      if (ap === (13)) {
        return FO(am);
      } else if (ap === (14)) {
        return false;
      }
      $panic(new FE.ptr("reflect.Value.OverflowFloat", new FB(an.flag).kind()));
    };
    FA.prototype.OverflowFloat = function(am) {
      return this.$val.OverflowFloat(am);
    };
    FO = function(am) {
      var am;
      if (am < 0) {
        am = -am;
      }
      return 3.4028234663852886e+38 < am && am <= 1.7976931348623157e+308;
    };
    FA.ptr.prototype.OverflowInt = function(am) {
      var am, an, ao, ap, aq, ar;
      an = this;
      ao = new FB(an.flag).kind();
      ap = ao;
      if ((ap === (2)) || (ap === (3)) || (ap === (4)) || (ap === (5)) || (ap === (6))) {
        aq = $imul(an.typ.size, 8) >>> 0;
        ar = $shiftRightInt64(($shiftLeft64(am, ((64 - aq >>> 0)))), ((64 - aq >>> 0)));
        return !((am.$high === ar.$high && am.$low === ar.$low));
      }
      $panic(new FE.ptr("reflect.Value.OverflowInt", new FB(an.flag).kind()));
    };
    FA.prototype.OverflowInt = function(am) {
      return this.$val.OverflowInt(am);
    };
    FA.ptr.prototype.OverflowUint = function(am) {
      var am, an, ao, ap, aq, ar;
      an = this;
      ao = new FB(an.flag).kind();
      ap = ao;
      if ((ap === (7)) || (ap === (12)) || (ap === (8)) || (ap === (9)) || (ap === (10)) || (ap === (11))) {
        aq = $imul(an.typ.size, 8) >>> 0;
        ar = $shiftRightUint64(($shiftLeft64(am, ((64 - aq >>> 0)))), ((64 - aq >>> 0)));
        return !((am.$high === ar.$high && am.$low === ar.$low));
      }
      $panic(new FE.ptr("reflect.Value.OverflowUint", new FB(an.flag).kind()));
    };
    FA.prototype.OverflowUint = function(am) {
      return this.$val.OverflowUint(am);
    };
    FA.ptr.prototype.Recv = function() {
      var am, an, ao, ap, aq, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            am = new FA.ptr(HP.nil, 0, 0);
            an = false;
            ao = this;
            new FB(ao.flag).mustBe(18);
            new FB(ao.flag).mustBeExported();
            aq = $clone(ao, FA).recv(false);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            ap = aq;
            am = ap[0];
            an = ap[1];
            $s = -1;
            return [am, an];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.Recv
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.Recv = function() {
      return this.$val.Recv();
    };
    FA.ptr.prototype.recv = function(am) {
      var am, an, ao, ap, aq, ar, as, at, au, av, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = new FA.ptr(HP.nil, 0, 0);
            ao = false;
            ap = this;
            aq = (ap.typ.kindType);
            if ((((aq.dir >> 0)) & 1) === 0) {
              $panic(new $String("reflect: recv on send-only channel"));
            }
            ar = aq.elem;
            an = new FA.ptr(ar, 0, ((ar.Kind() >>> 0)));
            as = 0;
            if (EX(ar)) {
              as = AL(ar);
              an.ptr = as;
              an.flag = (an.flag | (128)) >>> 0;
            } else {
              as = ((an.$ptr_ptr || (an.$ptr_ptr = new JB(function() {
                return this.$target.ptr;
              }, function($v) {
                this.$target.ptr = $v;
              }, an))));
            }
            au = BN($clone(ap, FA).pointer(), am, as);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              au = au.$blk();
            }
            if (au && au.$blk !== undefined) {
              break s;
            }
            at = au;
            av = at[0];
            ao = at[1];
            if (!av) {
              an = new FA.ptr(HP.nil, 0, 0);
            }
            $s = -1;
            return [an, ao];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.recv
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.recv = function(am) {
      return this.$val.recv(am);
    };
    FA.ptr.prototype.Send = function(am) {
      var am, an, ao, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            new FB(an.flag).mustBe(18);
            new FB(an.flag).mustBeExported();
            ao = $clone(an, FA).send($clone(am, FA), false);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            ao;
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.Send
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.Send = function(am) {
      return this.$val.Send(am);
    };
    FA.ptr.prototype.send = function(am, an) {
      var am, an, ao, ap, aq, ar, as, at, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = false;
            ap = this;
            aq = (ap.typ.kindType);
            if ((((aq.dir >> 0)) & 2) === 0) {
              $panic(new $String("reflect: send on recv-only channel"));
            }
            new FB(am.flag).mustBeExported();
            ar = $clone(am, FA).assignTo("reflect.Value.Send", aq.elem, 0);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ar = ar.$blk();
            }
            if (ar && ar.$blk !== undefined) {
              break s;
            }
            am = ar;
            as = 0;
            if (!((((am.flag & 128) >>> 0) === 0))) {
              as = am.ptr;
            } else {
              as = ((am.$ptr_ptr || (am.$ptr_ptr = new JB(function() {
                return this.$target.ptr;
              }, function($v) {
                this.$target.ptr = $v;
              }, am))));
            }
            at = BO($clone(ap, FA).pointer(), as, an);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              at = at.$blk();
            }
            if (at && at.$blk !== undefined) {
              break s;
            }
            ao = at;
            $s = -1;
            return ao;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.send
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.send = function(am, an) {
      return this.$val.send(am, an);
    };
    FA.ptr.prototype.SetBool = function(am) {
      var am, an;
      an = this;
      new FB(an.flag).mustBeAssignable();
      new FB(an.flag).mustBe(1);
      (an.ptr).$set(am);
    };
    FA.prototype.SetBool = function(am) {
      return this.$val.SetBool(am);
    };
    FA.ptr.prototype.setRunes = function(am) {
      var am, an, ao, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            new FB(an.flag).mustBeAssignable();
            new FB(an.flag).mustBe(23);
            ao = an.typ.Elem().Kind();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            if (!((ao === 5))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $panic(new $String("reflect.Value.setRunes of non-rune slice"));
          case 2:
            (an.ptr).$set(am);
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.setRunes
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.setRunes = function(am) {
      return this.$val.setRunes(am);
    };
    FA.ptr.prototype.SetComplex = function(am) {
      var am, an, ao, ap;
      an = this;
      new FB(an.flag).mustBeAssignable();
      ao = new FB(an.flag).kind();
      ap = ao;
      if (ap === (15)) {
        (an.ptr).$set((new $Complex64(am.$real, am.$imag)));
      } else if (ap === (16)) {
        (an.ptr).$set(am);
      } else {
        $panic(new FE.ptr("reflect.Value.SetComplex", new FB(an.flag).kind()));
      }
    };
    FA.prototype.SetComplex = function(am) {
      return this.$val.SetComplex(am);
    };
    FA.ptr.prototype.SetFloat = function(am) {
      var am, an, ao, ap;
      an = this;
      new FB(an.flag).mustBeAssignable();
      ao = new FB(an.flag).kind();
      ap = ao;
      if (ap === (13)) {
        (an.ptr).$set(($fround(am)));
      } else if (ap === (14)) {
        (an.ptr).$set(am);
      } else {
        $panic(new FE.ptr("reflect.Value.SetFloat", new FB(an.flag).kind()));
      }
    };
    FA.prototype.SetFloat = function(am) {
      return this.$val.SetFloat(am);
    };
    FA.ptr.prototype.SetInt = function(am) {
      var am, an, ao, ap;
      an = this;
      new FB(an.flag).mustBeAssignable();
      ao = new FB(an.flag).kind();
      ap = ao;
      if (ap === (2)) {
        (an.ptr).$set((((am.$low + ((am.$high >> 31) * 4294967296)) >> 0)));
      } else if (ap === (3)) {
        (an.ptr).$set((((am.$low + ((am.$high >> 31) * 4294967296)) << 24 >> 24)));
      } else if (ap === (4)) {
        (an.ptr).$set((((am.$low + ((am.$high >> 31) * 4294967296)) << 16 >> 16)));
      } else if (ap === (5)) {
        (an.ptr).$set((((am.$low + ((am.$high >> 31) * 4294967296)) >> 0)));
      } else if (ap === (6)) {
        (an.ptr).$set(am);
      } else {
        $panic(new FE.ptr("reflect.Value.SetInt", new FB(an.flag).kind()));
      }
    };
    FA.prototype.SetInt = function(am) {
      return this.$val.SetInt(am);
    };
    FA.ptr.prototype.SetMapIndex = function(am, an) {
      var am, an, ao, ap, aq, ar, as, at, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = this;
            new FB(ao.flag).mustBe(21);
            new FB(ao.flag).mustBeExported();
            new FB(am.flag).mustBeExported();
            ap = (ao.typ.kindType);
            aq = $clone(am, FA).assignTo("reflect.Value.SetMapIndex", ap.key, 0);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            am = aq;
            ar = 0;
            if (!((((am.flag & 128) >>> 0) === 0))) {
              ar = am.ptr;
            } else {
              ar = ((am.$ptr_ptr || (am.$ptr_ptr = new JB(function() {
                return this.$target.ptr;
              }, function($v) {
                this.$target.ptr = $v;
              }, am))));
            }
            if (an.typ === HP.nil) {
              AV(ao.typ, $clone(ao, FA).pointer(), ar);
              $s = -1;
              return;
            }
            new FB(an.flag).mustBeExported();
            as = $clone(an, FA).assignTo("reflect.Value.SetMapIndex", ap.elem, 0);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            an = as;
            at = 0;
            if (!((((an.flag & 128) >>> 0) === 0))) {
              at = an.ptr;
            } else {
              at = ((an.$ptr_ptr || (an.$ptr_ptr = new JB(function() {
                return this.$target.ptr;
              }, function($v) {
                this.$target.ptr = $v;
              }, an))));
            }
            $r = AU(ao.typ, $clone(ao, FA).pointer(), ar, at);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.SetMapIndex
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.SetMapIndex = function(am, an) {
      return this.$val.SetMapIndex(am, an);
    };
    FA.ptr.prototype.SetUint = function(am) {
      var am, an, ao, ap;
      an = this;
      new FB(an.flag).mustBeAssignable();
      ao = new FB(an.flag).kind();
      ap = ao;
      if (ap === (7)) {
        (an.ptr).$set(((am.$low >>> 0)));
      } else if (ap === (8)) {
        (an.ptr).$set(((am.$low << 24 >>> 24)));
      } else if (ap === (9)) {
        (an.ptr).$set(((am.$low << 16 >>> 16)));
      } else if (ap === (10)) {
        (an.ptr).$set(((am.$low >>> 0)));
      } else if (ap === (11)) {
        (an.ptr).$set(am);
      } else if (ap === (12)) {
        (an.ptr).$set(((am.$low >>> 0)));
      } else {
        $panic(new FE.ptr("reflect.Value.SetUint", new FB(an.flag).kind()));
      }
    };
    FA.prototype.SetUint = function(am) {
      return this.$val.SetUint(am);
    };
    FA.ptr.prototype.SetPointer = function(am) {
      var am, an;
      an = this;
      new FB(an.flag).mustBeAssignable();
      new FB(an.flag).mustBe(26);
      (an.ptr).$set(am);
    };
    FA.prototype.SetPointer = function(am) {
      return this.$val.SetPointer(am);
    };
    FA.ptr.prototype.SetString = function(am) {
      var am, an;
      an = this;
      new FB(an.flag).mustBeAssignable();
      new FB(an.flag).mustBe(24);
      (an.ptr).$set(am);
    };
    FA.prototype.SetString = function(am) {
      return this.$val.SetString(am);
    };
    FA.ptr.prototype.String = function() {
      var am, an, ao, ap, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            am = this;
            an = new FB(am.flag).kind();
            ao = an;
            if (ao === (0)) {
              $s = -1;
              return "<invalid Value>";
            } else if (ao === (24)) {
              $s = -1;
              return (am.ptr).$get();
            }
            ap = $clone(am, FA).Type().String();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return "<" + ap + " Value>";
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.String
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.String = function() {
      return this.$val.String();
    };
    FA.ptr.prototype.TryRecv = function() {
      var am, an, ao, ap, aq, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            am = new FA.ptr(HP.nil, 0, 0);
            an = false;
            ao = this;
            new FB(ao.flag).mustBe(18);
            new FB(ao.flag).mustBeExported();
            aq = $clone(ao, FA).recv(true);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            ap = aq;
            am = ap[0];
            an = ap[1];
            $s = -1;
            return [am, an];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.TryRecv
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.TryRecv = function() {
      return this.$val.TryRecv();
    };
    FA.ptr.prototype.TrySend = function(am) {
      var am, an, ao, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            new FB(an.flag).mustBe(18);
            new FB(an.flag).mustBeExported();
            ao = $clone(an, FA).send($clone(am, FA), true);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ao;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.TrySend
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.TrySend = function(am) {
      return this.$val.TrySend(am);
    };
    FA.ptr.prototype.Type = function() {
      var am, an, ao, ap, aq, ar, as, at;
      am = this;
      an = am.flag;
      if (an === 0) {
        $panic(new FE.ptr("reflect.Value.Type", 0));
      }
      if (((an & 512) >>> 0) === 0) {
        return am.typ;
      }
      ao = ((am.flag >> 0)) >> 10 >> 0;
      if (am.typ.Kind() === 20) {
        ap = (am.typ.kindType);
        if (((ao >>> 0)) >= ((ap.methods.$length >>> 0))) {
          $panic(new $String("reflect: internal error: invalid method index"));
        }
        ar = (aq = ap.methods, ((ao < 0 || ao >= aq.$length) ? ($throwRuntimeError("index out of range"), undefined) : aq.$array[aq.$offset + ao]));
        return am.typ.typeOff(ar.typ);
      }
      as = am.typ.exportedMethods();
      if (((ao >>> 0)) >= ((as.$length >>> 0))) {
        $panic(new $String("reflect: internal error: invalid method index"));
      }
      at = $clone(((ao < 0 || ao >= as.$length) ? ($throwRuntimeError("index out of range"), undefined) : as.$array[as.$offset + ao]), CF);
      return am.typ.typeOff(at.mtyp);
    };
    FA.prototype.Type = function() {
      return this.$val.Type();
    };
    FA.ptr.prototype.Uint = function() {
      var am, an, ao, ap, aq;
      am = this;
      an = new FB(am.flag).kind();
      ao = am.ptr;
      ap = an;
      if (ap === (7)) {
        return (new $Uint64(0, (ao).$get()));
      } else if (ap === (8)) {
        return (new $Uint64(0, (ao).$get()));
      } else if (ap === (9)) {
        return (new $Uint64(0, (ao).$get()));
      } else if (ap === (10)) {
        return (new $Uint64(0, (ao).$get()));
      } else if (ap === (11)) {
        return (ao).$get();
      } else if (ap === (12)) {
        return ((aq = (ao).$get(), new $Uint64(0, aq.constructor === Number ? aq : 1)));
      }
      $panic(new FE.ptr("reflect.Value.Uint", new FB(am.flag).kind()));
    };
    FA.prototype.Uint = function() {
      return this.$val.Uint();
    };
    FA.ptr.prototype.UnsafeAddr = function() {
      var am;
      am = this;
      if (am.typ === HP.nil) {
        $panic(new FE.ptr("reflect.Value.UnsafeAddr", 0));
      }
      if (((am.flag & 256) >>> 0) === 0) {
        $panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
      }
      return (am.ptr);
    };
    FA.prototype.UnsafeAddr = function() {
      return this.$val.UnsafeAddr();
    };
    FT = function(am, an, ao) {
      var am, an, ao, ap, aq, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (!($interfaceIsEqual(an, ao))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            ap = an.String();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            aq = ao.String();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            $panic(new $String(am + ": " + ap + " != " + aq));
          case 2:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FT
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    GE = function(am) {
      var am, an, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = GF(am, 0);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              an = an.$blk();
            }
            if (an && an.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return an;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GE
        };
      }
      $f.am = am;
      $f.an = an;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.MakeMap = GE;
    GF = function(am, an) {
      var am, an, ao, ap, aq, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = am.Kind();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            if (!((ao === 21))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $panic(new $String("reflect.MakeMapWithSize of non-map type"));
          case 2:
            ap = $assertType(am, HP);
            aq = AR(ap, an);
            $s = -1;
            return new FA.ptr(ap, aq, 21);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GF
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.MakeMapWithSize = GF;
    GH = function(am) {
      var am, an, ao, ap;
      if ($interfaceIsEqual(am, $ifaceNil)) {
        $panic(new $String("reflect: New(nil)"));
      }
      an = $assertType(am, HP);
      ao = AL(an);
      ap = 22;
      return new FA.ptr(an.ptrTo(), ao, ap);
    };
    $pkg.New = GH;
    FA.ptr.prototype.Convert = function(am) {
      var am, an, ao, ap, aq, ar, as, at, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            an = this;
            if (!((((an.flag & 512) >>> 0) === 0))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            ao = BG("Convert", $clone(an, FA));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            an = ao;
          case 2:
            ap = am.common();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            aq = GJ(ap, an.typ);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            ar = aq;
            if (ar === $throwNilPointerError) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            as = am.String();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            $panic(new $String("reflect.Value.Convert: value of type " + an.typ.String() + " cannot be converted to type " + as));
          case 7:
            at = ar($clone(an, FA), am);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              at = at.$blk();
            }
            if (at && at.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return at;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: FA.ptr.prototype.Convert
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    FA.prototype.Convert = function(am) {
      return this.$val.Convert(am);
    };
    GJ = function(am, an) {
      var am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        ba = $f.ba;
        bb = $f.bb;
        bc = $f.bc;
        bd = $f.bd;
        be = $f.be;
        bf = $f.bf;
        bg = $f.bg;
        bh = $f.bh;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = an.Kind();
            if ((ao === (2)) || (ao === (3)) || (ao === (4)) || (ao === (5)) || (ao === (6))) {
              $s = 2;
              continue;
            }
            if ((ao === (7)) || (ao === (8)) || (ao === (9)) || (ao === (10)) || (ao === (11)) || (ao === (12))) {
              $s = 3;
              continue;
            }
            if ((ao === (13)) || (ao === (14))) {
              $s = 4;
              continue;
            }
            if ((ao === (15)) || (ao === (16))) {
              $s = 5;
              continue;
            }
            if (ao === (24)) {
              $s = 6;
              continue;
            }
            if (ao === (23)) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 2:
            ap = am.Kind();
            if ((ap === (2)) || (ap === (3)) || (ap === (4)) || (ap === (5)) || (ap === (6)) || (ap === (7)) || (ap === (8)) || (ap === (9)) || (ap === (10)) || (ap === (11)) || (ap === (12))) {
              $s = -1;
              return GP;
            } else if ((ap === (13)) || (ap === (14))) {
              $s = -1;
              return GT;
            } else if (ap === (24)) {
              $s = -1;
              return GX;
            }
            $s = 8;
            continue;
          case 3:
            aq = am.Kind();
            if ((aq === (2)) || (aq === (3)) || (aq === (4)) || (aq === (5)) || (aq === (6)) || (aq === (7)) || (aq === (8)) || (aq === (9)) || (aq === (10)) || (aq === (11)) || (aq === (12))) {
              $s = -1;
              return GQ;
            } else if ((aq === (13)) || (aq === (14))) {
              $s = -1;
              return GU;
            } else if (aq === (24)) {
              $s = -1;
              return GY;
            }
            $s = 8;
            continue;
          case 4:
            ar = am.Kind();
            if ((ar === (2)) || (ar === (3)) || (ar === (4)) || (ar === (5)) || (ar === (6))) {
              $s = -1;
              return GR;
            } else if ((ar === (7)) || (ar === (8)) || (ar === (9)) || (ar === (10)) || (ar === (11)) || (ar === (12))) {
              $s = -1;
              return GS;
            } else if ((ar === (13)) || (ar === (14))) {
              $s = -1;
              return GV;
            }
            $s = 8;
            continue;
          case 5:
            as = am.Kind();
            if ((as === (15)) || (as === (16))) {
              $s = -1;
              return GW;
            }
            $s = 8;
            continue;
          case 6:
            if (!(am.Kind() === 23)) {
              at = false;
              $s = 11;
              continue s;
            }
            au = am.Elem().PkgPath();
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              au = au.$blk();
            }
            if (au && au.$blk !== undefined) {
              break s;
            }
            at = au === "";
          case 11:
            if (at) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            av = am.Elem().Kind();
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              av = av.$blk();
            }
            if (av && av.$blk !== undefined) {
              break s;
            }
            aw = av;
            if (aw === (8)) {
              $s = -1;
              return HA;
            } else if (aw === (5)) {
              $s = -1;
              return HC;
            }
          case 13:
          case 10:
            $s = 8;
            continue;
          case 7:
            if (!(am.Kind() === 24)) {
              ax = false;
              $s = 17;
              continue s;
            }
            ay = an.Elem().PkgPath();
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              ay = ay.$blk();
            }
            if (ay && ay.$blk !== undefined) {
              break s;
            }
            ax = ay === "";
          case 17:
            if (ax) {
              $s = 15;
              continue;
            }
            $s = 16;
            continue;
          case 15:
            az = an.Elem().Kind();
            $s = 20;
          case 20:
            if ($c) {
              $c = false;
              az = az.$blk();
            }
            if (az && az.$blk !== undefined) {
              break s;
            }
            ba = az;
            if (ba === (8)) {
              $s = -1;
              return GZ;
            } else if (ba === (5)) {
              $s = -1;
              return HB;
            }
          case 19:
          case 16:
          case 8:
          case 1:
            bb = DO(am, an, false);
            $s = 23;
          case 23:
            if ($c) {
              $c = false;
              bb = bb.$blk();
            }
            if (bb && bb.$blk !== undefined) {
              break s;
            }
            if (bb) {
              $s = 21;
              continue;
            }
            $s = 22;
            continue;
          case 21:
            $s = -1;
            return BB;
          case 22:
            if (!((am.Kind() === 22) && am.Name() === "" && (an.Kind() === 22) && an.Name() === "")) {
              bc = false;
              $s = 26;
              continue s;
            }
            bd = am.Elem().common();
            $s = 27;
          case 27:
            if ($c) {
              $c = false;
              bd = bd.$blk();
            }
            if (bd && bd.$blk !== undefined) {
              break s;
            }
            be = bd;
            bf = an.Elem().common();
            $s = 28;
          case 28:
            if ($c) {
              $c = false;
              bf = bf.$blk();
            }
            if (bf && bf.$blk !== undefined) {
              break s;
            }
            bg = bf;
            bh = DO(be, bg, false);
            $s = 29;
          case 29:
            if ($c) {
              $c = false;
              bh = bh.$blk();
            }
            if (bh && bh.$blk !== undefined) {
              break s;
            }
            bc = bh;
          case 26:
            if (bc) {
              $s = 24;
              continue;
            }
            $s = 25;
            continue;
          case 24:
            $s = -1;
            return BB;
          case 25:
            if (DL(am, an)) {
              if (an.Kind() === 20) {
                $s = -1;
                return HE;
              }
              $s = -1;
              return HD;
            }
            $s = -1;
            return $throwNilPointerError;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GJ
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.ba = ba;
      $f.bb = bb;
      $f.bc = bc;
      $f.bd = bd;
      $f.be = be;
      $f.bf = bf;
      $f.bg = bg;
      $f.bh = bh;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    GK = function(am, an, ao) {
      var am, an, ao, ap, aq, ar, as, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ap = ao.common();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            aq = ap;
            ar = AL(aq);
            as = aq.size;
            if (as === (4)) {
              (ar).$set(($fround(an)));
            } else if (as === (8)) {
              (ar).$set(an);
            }
            $s = -1;
            return new FA.ptr(aq, ar, (((am | 128) >>> 0) | ((aq.Kind() >>> 0))) >>> 0);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GK
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    GL = function(am, an, ao) {
      var am, an, ao, ap, aq, ar, as, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ap = ao.common();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            aq = ap;
            ar = AL(aq);
            as = aq.size;
            if (as === (8)) {
              (ar).$set((new $Complex64(an.$real, an.$imag)));
            } else if (as === (16)) {
              (ar).$set(an);
            }
            $s = -1;
            return new FA.ptr(aq, ar, (((am | 128) >>> 0) | ((aq.Kind() >>> 0))) >>> 0);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GL
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    GM = function(am, an, ao) {
      var am, an, ao, ap, aq, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ap = $clone(GH(ao), FA).Elem();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            aq = ap;
            $clone(aq, FA).SetString(an);
            aq.flag = (((aq.flag & ~256) >>> 0) | am) >>> 0;
            $s = -1;
            return aq;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GM
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    GN = function(am, an, ao) {
      var am, an, ao, ap, aq, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ap = $clone(GH(ao), FA).Elem();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            aq = ap;
            $r = $clone(aq, FA).SetBytes(an);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            aq.flag = (((aq.flag & ~256) >>> 0) | am) >>> 0;
            $s = -1;
            return aq;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GN
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    GO = function(am, an, ao) {
      var am, an, ao, ap, aq, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ap = $clone(GH(ao), FA).Elem();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            aq = ap;
            $r = $clone(aq, FA).setRunes(an);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            aq.flag = (((aq.flag & ~256) >>> 0) | am) >>> 0;
            $s = -1;
            return aq;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GO
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    GP = function(am, an) {
      var am, an, ao, ap, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ap = AM(new FB(am.flag).ro(), ((ao = $clone(am, FA).Int(), new $Uint64(ao.$high, ao.$low))), an);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ap;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GP
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    GQ = function(am, an) {
      var am, an, ao, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = AM(new FB(am.flag).ro(), $clone(am, FA).Uint(), an);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ao;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GQ
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    GR = function(am, an) {
      var am, an, ao, ap, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ap = AM(new FB(am.flag).ro(), ((ao = (new $Int64(0, $clone(am, FA).Float())), new $Uint64(ao.$high, ao.$low))), an);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ap;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GR
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    GS = function(am, an) {
      var am, an, ao, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = AM(new FB(am.flag).ro(), (new $Uint64(0, $clone(am, FA).Float())), an);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ao;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GS
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    GT = function(am, an) {
      var am, an, ao, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = GK(new FB(am.flag).ro(), ($flatten64($clone(am, FA).Int())), an);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ao;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GT
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    GU = function(am, an) {
      var am, an, ao, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = GK(new FB(am.flag).ro(), ($flatten64($clone(am, FA).Uint())), an);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ao;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GU
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    GV = function(am, an) {
      var am, an, ao, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = GK(new FB(am.flag).ro(), $clone(am, FA).Float(), an);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ao;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GV
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    GW = function(am, an) {
      var am, an, ao, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = GL(new FB(am.flag).ro(), $clone(am, FA).Complex(), an);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ao;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GW
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    GX = function(am, an) {
      var am, an, ao, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = GM(new FB(am.flag).ro(), ($encodeRune($clone(am, FA).Int().$low)), an);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ao;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GX
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    GY = function(am, an) {
      var am, an, ao, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = GM(new FB(am.flag).ro(), ($encodeRune($clone(am, FA).Uint().$low)), an);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ao;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GY
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    GZ = function(am, an) {
      var am, an, ao, ap, aq, ar, as, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = new FB(am.flag).ro();
            ap = $clone(am, FA).Bytes();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            aq = ($bytesToString(ap));
            ar = an;
            as = GM(ao, aq, ar);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return as;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GZ
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    HA = function(am, an) {
      var am, an, ao, ap, aq, ar, as, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = new FB(am.flag).ro();
            ap = $clone(am, FA).String();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            aq = (new IQ($stringToBytes(ap)));
            ar = an;
            as = GN(ao, aq, ar);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return as;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: HA
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    HB = function(am, an) {
      var am, an, ao, ap, aq, ar, as, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = new FB(am.flag).ro();
            ap = $clone(am, FA).runes();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            aq = ($runesToString(ap));
            ar = an;
            as = GM(ao, aq, ar);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return as;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: HB
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    HC = function(am, an) {
      var am, an, ao, ap, aq, ar, as, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = new FB(am.flag).ro();
            ap = $clone(am, FA).String();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            aq = (new JD($stringToRunes(ap)));
            ar = an;
            as = GO(ao, aq, ar);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return as;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: HC
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    HD = function(am, an) {
      var am, an, ao, ap, aq, ar, as, at, au, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            ao = an.common();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            ap = AL(ao);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            aq = ap;
            ar = BD($clone(am, FA), false);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              ar = ar.$blk();
            }
            if (ar && ar.$blk !== undefined) {
              break s;
            }
            as = ar;
            at = an.NumMethod();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              at = at.$blk();
            }
            if (at && at.$blk !== undefined) {
              break s;
            }
            if (at === 0) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            (aq).$set(as);
            $s = 6;
            continue;
          case 5:
            BE($assertType(an, HP), as, aq);
          case 6:
            au = an.common();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              au = au.$blk();
            }
            if (au && au.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return new FA.ptr(au, aq, (((new FB(am.flag).ro() | 128) >>> 0) | 20) >>> 0);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: HD
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    HE = function(am, an) {
      var am, an, ao, ap, aq, ar, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if ($clone(am, FA).IsNil()) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            ao = AK(an);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            ap = ao;
            ap.flag = (ap.flag | (new FB(am.flag).ro())) >>> 0;
            $s = -1;
            return ap;
          case 2:
            aq = $clone(am, FA).Elem();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            ar = HD($clone(aq, FA), an);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              ar = ar.$blk();
            }
            if (ar && ar.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ar;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: HE
        };
      }
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    IC.methods = [{
      prop: "methods",
      name: "methods",
      pkg: "reflect",
      typ: $funcType([], [HZ], false)
    }, {
      prop: "exportedMethods",
      name: "exportedMethods",
      pkg: "reflect",
      typ: $funcType([], [HZ], false)
    }];
    JE.methods = [{
      prop: "in$",
      name: "in",
      pkg: "reflect",
      typ: $funcType([], [HQ], false)
    }, {
      prop: "out",
      name: "out",
      pkg: "reflect",
      typ: $funcType([], [HQ], false)
    }];
    Q.methods = [{
      prop: "name",
      name: "name",
      pkg: "reflect",
      typ: $funcType([], [$String], false)
    }, {
      prop: "tag",
      name: "tag",
      pkg: "reflect",
      typ: $funcType([], [$String], false)
    }, {
      prop: "pkgPath",
      name: "pkgPath",
      pkg: "reflect",
      typ: $funcType([], [$String], false)
    }, {
      prop: "isExported",
      name: "isExported",
      pkg: "reflect",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "data",
      name: "data",
      pkg: "reflect",
      typ: $funcType([$Int, $String], [HY], false)
    }, {
      prop: "nameLen",
      name: "nameLen",
      pkg: "reflect",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "tagLen",
      name: "tagLen",
      pkg: "reflect",
      typ: $funcType([], [$Int], false)
    }];
    CB.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    HP.methods = [{
      prop: "uncommon",
      name: "uncommon",
      pkg: "reflect",
      typ: $funcType([], [IC], false)
    }, {
      prop: "nameOff",
      name: "nameOff",
      pkg: "reflect",
      typ: $funcType([DA], [Q], false)
    }, {
      prop: "typeOff",
      name: "typeOff",
      pkg: "reflect",
      typ: $funcType([DB], [HP], false)
    }, {
      prop: "ptrTo",
      name: "ptrTo",
      pkg: "reflect",
      typ: $funcType([], [HP], false)
    }, {
      prop: "pointers",
      name: "pointers",
      pkg: "reflect",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Comparable",
      name: "Comparable",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Method",
      name: "Method",
      pkg: "",
      typ: $funcType([$Int], [CR], false)
    }, {
      prop: "textOff",
      name: "textOff",
      pkg: "reflect",
      typ: $funcType([DC], [$UnsafePointer], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Size",
      name: "Size",
      pkg: "",
      typ: $funcType([], [$Uintptr], false)
    }, {
      prop: "Bits",
      name: "Bits",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Align",
      name: "Align",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "FieldAlign",
      name: "FieldAlign",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Kind",
      name: "Kind",
      pkg: "",
      typ: $funcType([], [CB], false)
    }, {
      prop: "common",
      name: "common",
      pkg: "reflect",
      typ: $funcType([], [HP], false)
    }, {
      prop: "exportedMethods",
      name: "exportedMethods",
      pkg: "reflect",
      typ: $funcType([], [HZ], false)
    }, {
      prop: "NumMethod",
      name: "NumMethod",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "MethodByName",
      name: "MethodByName",
      pkg: "",
      typ: $funcType([$String], [CR, $Bool], false)
    }, {
      prop: "PkgPath",
      name: "PkgPath",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Name",
      name: "Name",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "ChanDir",
      name: "ChanDir",
      pkg: "",
      typ: $funcType([], [CG], false)
    }, {
      prop: "IsVariadic",
      name: "IsVariadic",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Elem",
      name: "Elem",
      pkg: "",
      typ: $funcType([], [CA], false)
    }, {
      prop: "Field",
      name: "Field",
      pkg: "",
      typ: $funcType([$Int], [DF], false)
    }, {
      prop: "FieldByIndex",
      name: "FieldByIndex",
      pkg: "",
      typ: $funcType([IN], [DF], false)
    }, {
      prop: "FieldByName",
      name: "FieldByName",
      pkg: "",
      typ: $funcType([$String], [DF, $Bool], false)
    }, {
      prop: "FieldByNameFunc",
      name: "FieldByNameFunc",
      pkg: "",
      typ: $funcType([JG], [DF, $Bool], false)
    }, {
      prop: "In",
      name: "In",
      pkg: "",
      typ: $funcType([$Int], [CA], false)
    }, {
      prop: "Key",
      name: "Key",
      pkg: "",
      typ: $funcType([], [CA], false)
    }, {
      prop: "Len",
      name: "Len",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "NumField",
      name: "NumField",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "NumIn",
      name: "NumIn",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "NumOut",
      name: "NumOut",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Out",
      name: "Out",
      pkg: "",
      typ: $funcType([$Int], [CA], false)
    }, {
      prop: "Implements",
      name: "Implements",
      pkg: "",
      typ: $funcType([CA], [$Bool], false)
    }, {
      prop: "AssignableTo",
      name: "AssignableTo",
      pkg: "",
      typ: $funcType([CA], [$Bool], false)
    }, {
      prop: "ConvertibleTo",
      name: "ConvertibleTo",
      pkg: "",
      typ: $funcType([CA], [$Bool], false)
    }];
    CG.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    IL.methods = [{
      prop: "Method",
      name: "Method",
      pkg: "",
      typ: $funcType([$Int], [CR], false)
    }, {
      prop: "NumMethod",
      name: "NumMethod",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "MethodByName",
      name: "MethodByName",
      pkg: "",
      typ: $funcType([$String], [CR, $Bool], false)
    }];
    JJ.methods = [{
      prop: "offset",
      name: "offset",
      pkg: "reflect",
      typ: $funcType([], [$Uintptr], false)
    }, {
      prop: "embedded",
      name: "embedded",
      pkg: "reflect",
      typ: $funcType([], [$Bool], false)
    }];
    IP.methods = [{
      prop: "Field",
      name: "Field",
      pkg: "",
      typ: $funcType([$Int], [DF], false)
    }, {
      prop: "FieldByIndex",
      name: "FieldByIndex",
      pkg: "",
      typ: $funcType([IN], [DF], false)
    }, {
      prop: "FieldByNameFunc",
      name: "FieldByNameFunc",
      pkg: "",
      typ: $funcType([JG], [DF, $Bool], false)
    }, {
      prop: "FieldByName",
      name: "FieldByName",
      pkg: "",
      typ: $funcType([$String], [DF, $Bool], false)
    }];
    DG.methods = [{
      prop: "Get",
      name: "Get",
      pkg: "",
      typ: $funcType([$String], [$String], false)
    }, {
      prop: "Lookup",
      name: "Lookup",
      pkg: "",
      typ: $funcType([$String], [$String, $Bool], false)
    }];
    FA.methods = [{
      prop: "object",
      name: "object",
      pkg: "reflect",
      typ: $funcType([], [HU], false)
    }, {
      prop: "assignTo",
      name: "assignTo",
      pkg: "reflect",
      typ: $funcType([$String, HP, $UnsafePointer], [FA], false)
    }, {
      prop: "Cap",
      name: "Cap",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Elem",
      name: "Elem",
      pkg: "",
      typ: $funcType([], [FA], false)
    }, {
      prop: "Field",
      name: "Field",
      pkg: "",
      typ: $funcType([$Int], [FA], false)
    }, {
      prop: "Index",
      name: "Index",
      pkg: "",
      typ: $funcType([$Int], [FA], false)
    }, {
      prop: "InterfaceData",
      name: "InterfaceData",
      pkg: "",
      typ: $funcType([], [JQ], false)
    }, {
      prop: "IsNil",
      name: "IsNil",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Len",
      name: "Len",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Pointer",
      name: "Pointer",
      pkg: "",
      typ: $funcType([], [$Uintptr], false)
    }, {
      prop: "Set",
      name: "Set",
      pkg: "",
      typ: $funcType([FA], [], false)
    }, {
      prop: "SetBytes",
      name: "SetBytes",
      pkg: "",
      typ: $funcType([IQ], [], false)
    }, {
      prop: "SetCap",
      name: "SetCap",
      pkg: "",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "SetLen",
      name: "SetLen",
      pkg: "",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "Slice",
      name: "Slice",
      pkg: "",
      typ: $funcType([$Int, $Int], [FA], false)
    }, {
      prop: "Slice3",
      name: "Slice3",
      pkg: "",
      typ: $funcType([$Int, $Int, $Int], [FA], false)
    }, {
      prop: "Close",
      name: "Close",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "call",
      name: "call",
      pkg: "reflect",
      typ: $funcType([$String, IG], [IG], false)
    }, {
      prop: "pointer",
      name: "pointer",
      pkg: "reflect",
      typ: $funcType([], [$UnsafePointer], false)
    }, {
      prop: "Addr",
      name: "Addr",
      pkg: "",
      typ: $funcType([], [FA], false)
    }, {
      prop: "Bool",
      name: "Bool",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Bytes",
      name: "Bytes",
      pkg: "",
      typ: $funcType([], [IQ], false)
    }, {
      prop: "runes",
      name: "runes",
      pkg: "reflect",
      typ: $funcType([], [JD], false)
    }, {
      prop: "CanAddr",
      name: "CanAddr",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "CanSet",
      name: "CanSet",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Call",
      name: "Call",
      pkg: "",
      typ: $funcType([IG], [IG], false)
    }, {
      prop: "CallSlice",
      name: "CallSlice",
      pkg: "",
      typ: $funcType([IG], [IG], false)
    }, {
      prop: "Complex",
      name: "Complex",
      pkg: "",
      typ: $funcType([], [$Complex128], false)
    }, {
      prop: "FieldByIndex",
      name: "FieldByIndex",
      pkg: "",
      typ: $funcType([IN], [FA], false)
    }, {
      prop: "FieldByName",
      name: "FieldByName",
      pkg: "",
      typ: $funcType([$String], [FA], false)
    }, {
      prop: "FieldByNameFunc",
      name: "FieldByNameFunc",
      pkg: "",
      typ: $funcType([JG], [FA], false)
    }, {
      prop: "Float",
      name: "Float",
      pkg: "",
      typ: $funcType([], [$Float64], false)
    }, {
      prop: "Int",
      name: "Int",
      pkg: "",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "CanInterface",
      name: "CanInterface",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Interface",
      name: "Interface",
      pkg: "",
      typ: $funcType([], [$emptyInterface], false)
    }, {
      prop: "IsValid",
      name: "IsValid",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Kind",
      name: "Kind",
      pkg: "",
      typ: $funcType([], [CB], false)
    }, {
      prop: "MapIndex",
      name: "MapIndex",
      pkg: "",
      typ: $funcType([FA], [FA], false)
    }, {
      prop: "MapKeys",
      name: "MapKeys",
      pkg: "",
      typ: $funcType([], [IG], false)
    }, {
      prop: "Method",
      name: "Method",
      pkg: "",
      typ: $funcType([$Int], [FA], false)
    }, {
      prop: "NumMethod",
      name: "NumMethod",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "MethodByName",
      name: "MethodByName",
      pkg: "",
      typ: $funcType([$String], [FA], false)
    }, {
      prop: "NumField",
      name: "NumField",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "OverflowComplex",
      name: "OverflowComplex",
      pkg: "",
      typ: $funcType([$Complex128], [$Bool], false)
    }, {
      prop: "OverflowFloat",
      name: "OverflowFloat",
      pkg: "",
      typ: $funcType([$Float64], [$Bool], false)
    }, {
      prop: "OverflowInt",
      name: "OverflowInt",
      pkg: "",
      typ: $funcType([$Int64], [$Bool], false)
    }, {
      prop: "OverflowUint",
      name: "OverflowUint",
      pkg: "",
      typ: $funcType([$Uint64], [$Bool], false)
    }, {
      prop: "Recv",
      name: "Recv",
      pkg: "",
      typ: $funcType([], [FA, $Bool], false)
    }, {
      prop: "recv",
      name: "recv",
      pkg: "reflect",
      typ: $funcType([$Bool], [FA, $Bool], false)
    }, {
      prop: "Send",
      name: "Send",
      pkg: "",
      typ: $funcType([FA], [], false)
    }, {
      prop: "send",
      name: "send",
      pkg: "reflect",
      typ: $funcType([FA, $Bool], [$Bool], false)
    }, {
      prop: "SetBool",
      name: "SetBool",
      pkg: "",
      typ: $funcType([$Bool], [], false)
    }, {
      prop: "setRunes",
      name: "setRunes",
      pkg: "reflect",
      typ: $funcType([JD], [], false)
    }, {
      prop: "SetComplex",
      name: "SetComplex",
      pkg: "",
      typ: $funcType([$Complex128], [], false)
    }, {
      prop: "SetFloat",
      name: "SetFloat",
      pkg: "",
      typ: $funcType([$Float64], [], false)
    }, {
      prop: "SetInt",
      name: "SetInt",
      pkg: "",
      typ: $funcType([$Int64], [], false)
    }, {
      prop: "SetMapIndex",
      name: "SetMapIndex",
      pkg: "",
      typ: $funcType([FA, FA], [], false)
    }, {
      prop: "SetUint",
      name: "SetUint",
      pkg: "",
      typ: $funcType([$Uint64], [], false)
    }, {
      prop: "SetPointer",
      name: "SetPointer",
      pkg: "",
      typ: $funcType([$UnsafePointer], [], false)
    }, {
      prop: "SetString",
      name: "SetString",
      pkg: "",
      typ: $funcType([$String], [], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "TryRecv",
      name: "TryRecv",
      pkg: "",
      typ: $funcType([], [FA, $Bool], false)
    }, {
      prop: "TrySend",
      name: "TrySend",
      pkg: "",
      typ: $funcType([FA], [$Bool], false)
    }, {
      prop: "Type",
      name: "Type",
      pkg: "",
      typ: $funcType([], [CA], false)
    }, {
      prop: "Uint",
      name: "Uint",
      pkg: "",
      typ: $funcType([], [$Uint64], false)
    }, {
      prop: "UnsafeAddr",
      name: "UnsafeAddr",
      pkg: "",
      typ: $funcType([], [$Uintptr], false)
    }, {
      prop: "Convert",
      name: "Convert",
      pkg: "",
      typ: $funcType([CA], [FA], false)
    }];
    FB.methods = [{
      prop: "kind",
      name: "kind",
      pkg: "reflect",
      typ: $funcType([], [CB], false)
    }, {
      prop: "ro",
      name: "ro",
      pkg: "reflect",
      typ: $funcType([], [FB], false)
    }, {
      prop: "mustBe",
      name: "mustBe",
      pkg: "reflect",
      typ: $funcType([CB], [], false)
    }, {
      prop: "mustBeExported",
      name: "mustBeExported",
      pkg: "reflect",
      typ: $funcType([], [], false)
    }, {
      prop: "mustBeAssignable",
      name: "mustBeAssignable",
      pkg: "reflect",
      typ: $funcType([], [], false)
    }];
    JR.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    N.init("reflect", [{
      prop: "pkgPath",
      name: "pkgPath",
      embedded: false,
      exported: false,
      typ: DA,
      tag: ""
    }, {
      prop: "mcount",
      name: "mcount",
      embedded: false,
      exported: false,
      typ: $Uint16,
      tag: ""
    }, {
      prop: "xcount",
      name: "xcount",
      embedded: false,
      exported: false,
      typ: $Uint16,
      tag: ""
    }, {
      prop: "moff",
      name: "moff",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "_methods",
      name: "_methods",
      embedded: false,
      exported: false,
      typ: HZ,
      tag: ""
    }]);
    P.init("reflect", [{
      prop: "rtype",
      name: "rtype",
      embedded: true,
      exported: false,
      typ: CD,
      tag: "reflect:\"func\""
    }, {
      prop: "inCount",
      name: "inCount",
      embedded: false,
      exported: false,
      typ: $Uint16,
      tag: ""
    }, {
      prop: "outCount",
      name: "outCount",
      embedded: false,
      exported: false,
      typ: $Uint16,
      tag: ""
    }, {
      prop: "_in",
      name: "_in",
      embedded: false,
      exported: false,
      typ: HQ,
      tag: ""
    }, {
      prop: "_out",
      name: "_out",
      embedded: false,
      exported: false,
      typ: HQ,
      tag: ""
    }]);
    Q.init("reflect", [{
      prop: "bytes",
      name: "bytes",
      embedded: false,
      exported: false,
      typ: HY,
      tag: ""
    }]);
    R.init("reflect", [{
      prop: "name",
      name: "name",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "tag",
      name: "tag",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "exported",
      name: "exported",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    AW.init("reflect", [{
      prop: "t",
      name: "t",
      embedded: false,
      exported: false,
      typ: CA,
      tag: ""
    }, {
      prop: "m",
      name: "m",
      embedded: false,
      exported: false,
      typ: HU,
      tag: ""
    }, {
      prop: "keys",
      name: "keys",
      embedded: false,
      exported: false,
      typ: HU,
      tag: ""
    }, {
      prop: "i",
      name: "i",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }]);
    CA.init([{
      prop: "Align",
      name: "Align",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "AssignableTo",
      name: "AssignableTo",
      pkg: "",
      typ: $funcType([CA], [$Bool], false)
    }, {
      prop: "Bits",
      name: "Bits",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "ChanDir",
      name: "ChanDir",
      pkg: "",
      typ: $funcType([], [CG], false)
    }, {
      prop: "Comparable",
      name: "Comparable",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "ConvertibleTo",
      name: "ConvertibleTo",
      pkg: "",
      typ: $funcType([CA], [$Bool], false)
    }, {
      prop: "Elem",
      name: "Elem",
      pkg: "",
      typ: $funcType([], [CA], false)
    }, {
      prop: "Field",
      name: "Field",
      pkg: "",
      typ: $funcType([$Int], [DF], false)
    }, {
      prop: "FieldAlign",
      name: "FieldAlign",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "FieldByIndex",
      name: "FieldByIndex",
      pkg: "",
      typ: $funcType([IN], [DF], false)
    }, {
      prop: "FieldByName",
      name: "FieldByName",
      pkg: "",
      typ: $funcType([$String], [DF, $Bool], false)
    }, {
      prop: "FieldByNameFunc",
      name: "FieldByNameFunc",
      pkg: "",
      typ: $funcType([JG], [DF, $Bool], false)
    }, {
      prop: "Implements",
      name: "Implements",
      pkg: "",
      typ: $funcType([CA], [$Bool], false)
    }, {
      prop: "In",
      name: "In",
      pkg: "",
      typ: $funcType([$Int], [CA], false)
    }, {
      prop: "IsVariadic",
      name: "IsVariadic",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Key",
      name: "Key",
      pkg: "",
      typ: $funcType([], [CA], false)
    }, {
      prop: "Kind",
      name: "Kind",
      pkg: "",
      typ: $funcType([], [CB], false)
    }, {
      prop: "Len",
      name: "Len",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Method",
      name: "Method",
      pkg: "",
      typ: $funcType([$Int], [CR], false)
    }, {
      prop: "MethodByName",
      name: "MethodByName",
      pkg: "",
      typ: $funcType([$String], [CR, $Bool], false)
    }, {
      prop: "Name",
      name: "Name",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "NumField",
      name: "NumField",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "NumIn",
      name: "NumIn",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "NumMethod",
      name: "NumMethod",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "NumOut",
      name: "NumOut",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Out",
      name: "Out",
      pkg: "",
      typ: $funcType([$Int], [CA], false)
    }, {
      prop: "PkgPath",
      name: "PkgPath",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Size",
      name: "Size",
      pkg: "",
      typ: $funcType([], [$Uintptr], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "common",
      name: "common",
      pkg: "reflect",
      typ: $funcType([], [HP], false)
    }, {
      prop: "uncommon",
      name: "uncommon",
      pkg: "reflect",
      typ: $funcType([], [IC], false)
    }]);
    CD.init("reflect", [{
      prop: "size",
      name: "size",
      embedded: false,
      exported: false,
      typ: $Uintptr,
      tag: ""
    }, {
      prop: "ptrdata",
      name: "ptrdata",
      embedded: false,
      exported: false,
      typ: $Uintptr,
      tag: ""
    }, {
      prop: "hash",
      name: "hash",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "tflag",
      name: "tflag",
      embedded: false,
      exported: false,
      typ: CC,
      tag: ""
    }, {
      prop: "align",
      name: "align",
      embedded: false,
      exported: false,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "fieldAlign",
      name: "fieldAlign",
      embedded: false,
      exported: false,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "kind",
      name: "kind",
      embedded: false,
      exported: false,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "alg",
      name: "alg",
      embedded: false,
      exported: false,
      typ: HX,
      tag: ""
    }, {
      prop: "gcdata",
      name: "gcdata",
      embedded: false,
      exported: false,
      typ: HY,
      tag: ""
    }, {
      prop: "str",
      name: "str",
      embedded: false,
      exported: false,
      typ: DA,
      tag: ""
    }, {
      prop: "ptrToThis",
      name: "ptrToThis",
      embedded: false,
      exported: false,
      typ: DB,
      tag: ""
    }]);
    CE.init("reflect", [{
      prop: "hash",
      name: "hash",
      embedded: false,
      exported: false,
      typ: JH,
      tag: ""
    }, {
      prop: "equal",
      name: "equal",
      embedded: false,
      exported: false,
      typ: JI,
      tag: ""
    }]);
    CF.init("reflect", [{
      prop: "name",
      name: "name",
      embedded: false,
      exported: false,
      typ: DA,
      tag: ""
    }, {
      prop: "mtyp",
      name: "mtyp",
      embedded: false,
      exported: false,
      typ: DB,
      tag: ""
    }, {
      prop: "ifn",
      name: "ifn",
      embedded: false,
      exported: false,
      typ: DC,
      tag: ""
    }, {
      prop: "tfn",
      name: "tfn",
      embedded: false,
      exported: false,
      typ: DC,
      tag: ""
    }]);
    CH.init("reflect", [{
      prop: "rtype",
      name: "rtype",
      embedded: true,
      exported: false,
      typ: CD,
      tag: ""
    }, {
      prop: "elem",
      name: "elem",
      embedded: false,
      exported: false,
      typ: HP,
      tag: ""
    }, {
      prop: "slice",
      name: "slice",
      embedded: false,
      exported: false,
      typ: HP,
      tag: ""
    }, {
      prop: "len",
      name: "len",
      embedded: false,
      exported: false,
      typ: $Uintptr,
      tag: ""
    }]);
    CI.init("reflect", [{
      prop: "rtype",
      name: "rtype",
      embedded: true,
      exported: false,
      typ: CD,
      tag: ""
    }, {
      prop: "elem",
      name: "elem",
      embedded: false,
      exported: false,
      typ: HP,
      tag: ""
    }, {
      prop: "dir",
      name: "dir",
      embedded: false,
      exported: false,
      typ: $Uintptr,
      tag: ""
    }]);
    CJ.init("reflect", [{
      prop: "name",
      name: "name",
      embedded: false,
      exported: false,
      typ: DA,
      tag: ""
    }, {
      prop: "typ",
      name: "typ",
      embedded: false,
      exported: false,
      typ: DB,
      tag: ""
    }]);
    CK.init("reflect", [{
      prop: "rtype",
      name: "rtype",
      embedded: true,
      exported: false,
      typ: CD,
      tag: ""
    }, {
      prop: "pkgPath",
      name: "pkgPath",
      embedded: false,
      exported: false,
      typ: Q,
      tag: ""
    }, {
      prop: "methods",
      name: "methods",
      embedded: false,
      exported: false,
      typ: IA,
      tag: ""
    }]);
    CL.init("reflect", [{
      prop: "rtype",
      name: "rtype",
      embedded: true,
      exported: false,
      typ: CD,
      tag: ""
    }, {
      prop: "key",
      name: "key",
      embedded: false,
      exported: false,
      typ: HP,
      tag: ""
    }, {
      prop: "elem",
      name: "elem",
      embedded: false,
      exported: false,
      typ: HP,
      tag: ""
    }, {
      prop: "bucket",
      name: "bucket",
      embedded: false,
      exported: false,
      typ: HP,
      tag: ""
    }, {
      prop: "keysize",
      name: "keysize",
      embedded: false,
      exported: false,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "indirectkey",
      name: "indirectkey",
      embedded: false,
      exported: false,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "valuesize",
      name: "valuesize",
      embedded: false,
      exported: false,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "indirectvalue",
      name: "indirectvalue",
      embedded: false,
      exported: false,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "bucketsize",
      name: "bucketsize",
      embedded: false,
      exported: false,
      typ: $Uint16,
      tag: ""
    }, {
      prop: "reflexivekey",
      name: "reflexivekey",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "needkeyupdate",
      name: "needkeyupdate",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    CM.init("reflect", [{
      prop: "rtype",
      name: "rtype",
      embedded: true,
      exported: false,
      typ: CD,
      tag: ""
    }, {
      prop: "elem",
      name: "elem",
      embedded: false,
      exported: false,
      typ: HP,
      tag: ""
    }]);
    CN.init("reflect", [{
      prop: "rtype",
      name: "rtype",
      embedded: true,
      exported: false,
      typ: CD,
      tag: ""
    }, {
      prop: "elem",
      name: "elem",
      embedded: false,
      exported: false,
      typ: HP,
      tag: ""
    }]);
    CO.init("reflect", [{
      prop: "name",
      name: "name",
      embedded: false,
      exported: false,
      typ: Q,
      tag: ""
    }, {
      prop: "typ",
      name: "typ",
      embedded: false,
      exported: false,
      typ: HP,
      tag: ""
    }, {
      prop: "offsetEmbed",
      name: "offsetEmbed",
      embedded: false,
      exported: false,
      typ: $Uintptr,
      tag: ""
    }]);
    CP.init("reflect", [{
      prop: "rtype",
      name: "rtype",
      embedded: true,
      exported: false,
      typ: CD,
      tag: ""
    }, {
      prop: "pkgPath",
      name: "pkgPath",
      embedded: false,
      exported: false,
      typ: Q,
      tag: ""
    }, {
      prop: "fields",
      name: "fields",
      embedded: false,
      exported: false,
      typ: IB,
      tag: ""
    }]);
    CR.init("", [{
      prop: "Name",
      name: "Name",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "PkgPath",
      name: "PkgPath",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Type",
      name: "Type",
      embedded: false,
      exported: true,
      typ: CA,
      tag: ""
    }, {
      prop: "Func",
      name: "Func",
      embedded: false,
      exported: true,
      typ: FA,
      tag: ""
    }, {
      prop: "Index",
      name: "Index",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: ""
    }]);
    DF.init("", [{
      prop: "Name",
      name: "Name",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "PkgPath",
      name: "PkgPath",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Type",
      name: "Type",
      embedded: false,
      exported: true,
      typ: CA,
      tag: ""
    }, {
      prop: "Tag",
      name: "Tag",
      embedded: false,
      exported: true,
      typ: DG,
      tag: ""
    }, {
      prop: "Offset",
      name: "Offset",
      embedded: false,
      exported: true,
      typ: $Uintptr,
      tag: ""
    }, {
      prop: "Index",
      name: "Index",
      embedded: false,
      exported: true,
      typ: IN,
      tag: ""
    }, {
      prop: "Anonymous",
      name: "Anonymous",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: ""
    }]);
    DH.init("reflect", [{
      prop: "typ",
      name: "typ",
      embedded: false,
      exported: false,
      typ: IP,
      tag: ""
    }, {
      prop: "index",
      name: "index",
      embedded: false,
      exported: false,
      typ: IN,
      tag: ""
    }]);
    FA.init("reflect", [{
      prop: "typ",
      name: "typ",
      embedded: false,
      exported: false,
      typ: HP,
      tag: ""
    }, {
      prop: "ptr",
      name: "ptr",
      embedded: false,
      exported: false,
      typ: $UnsafePointer,
      tag: ""
    }, {
      prop: "flag",
      name: "flag",
      embedded: true,
      exported: false,
      typ: FB,
      tag: ""
    }]);
    FE.init("", [{
      prop: "Method",
      name: "Method",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Kind",
      name: "Kind",
      embedded: false,
      exported: true,
      typ: CB,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = H.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = F.$init();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = G.$init();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            U = HO.nil;
            W = HQ.nil;
            I = false;
            O = {};
            S = {};
            BH = $assertType($internalize($call, $emptyInterface), HV);
            BM = $assertType($internalize($select, $emptyInterface), HV);
            BI = L($jsObjectPtr);
            CS = new HW(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
            FN = $assertType(AD(new $Uint8(0)), HP);
            $r = J();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["encoding/binary"] = (function() {
    var $pkg = {},
      $init, A, B, C, D, E, F, G, N, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, U, H, K, L, P;
    A = $packages["errors"];
    B = $packages["io"];
    C = $packages["math"];
    D = $packages["reflect"];
    E = $pkg.ByteOrder = $newType(8, $kindInterface, "binary.ByteOrder", true, "encoding/binary", true, null);
    F = $pkg.littleEndian = $newType(0, $kindStruct, "binary.littleEndian", true, "encoding/binary", false, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    G = $pkg.bigEndian = $newType(0, $kindStruct, "binary.bigEndian", true, "encoding/binary", false, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    N = $pkg.decoder = $newType(0, $kindStruct, "binary.decoder", true, "encoding/binary", false, function(order_, buf_, offset_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.order = $ifaceNil;
        this.buf = Y.nil;
        this.offset = 0;
        return;
      }
      this.order = order_;
      this.buf = buf_;
      this.offset = offset_;
    });
    X = $arrayType($Uint8, 8);
    Y = $sliceType($Uint8);
    Z = $ptrType($Bool);
    AA = $ptrType($Int8);
    AB = $ptrType($Uint8);
    AC = $ptrType($Int16);
    AD = $ptrType($Uint16);
    AE = $ptrType($Int32);
    AF = $ptrType($Uint32);
    AG = $ptrType($Int64);
    AH = $ptrType($Uint64);
    AI = $sliceType($Bool);
    AJ = $sliceType($Int8);
    AK = $sliceType($Int16);
    AL = $sliceType($Uint16);
    AM = $sliceType($Int32);
    AN = $sliceType($Uint32);
    AO = $sliceType($Int64);
    AP = $sliceType($Uint64);
    AQ = $ptrType(N);
    F.ptr.prototype.Uint16 = function(a) {
      var a;
      $unused((1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]));
      return ((((0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) << 16 >>> 16)) | ((((1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) << 16 >>> 16)) << 8 << 16 >>> 16)) >>> 0;
    };
    F.prototype.Uint16 = function(a) {
      return this.$val.Uint16(a);
    };
    F.ptr.prototype.PutUint16 = function(a, b) {
      var a, b;
      $unused((1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]));
      (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = ((b << 24 >>> 24)));
      (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = (((b >>> 8 << 16 >>> 16) << 24 >>> 24)));
    };
    F.prototype.PutUint16 = function(a, b) {
      return this.$val.PutUint16(a, b);
    };
    F.ptr.prototype.Uint32 = function(a) {
      var a;
      $unused((3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]));
      return ((((((((0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) >>> 0)) | ((((1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]) >>> 0)) << 24 >>> 0)) >>> 0;
    };
    F.prototype.Uint32 = function(a) {
      return this.$val.Uint32(a);
    };
    F.ptr.prototype.PutUint32 = function(a, b) {
      var a, b;
      $unused((3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]));
      (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = ((b << 24 >>> 24)));
      (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = (((b >>> 8 >>> 0) << 24 >>> 24)));
      (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = (((b >>> 16 >>> 0) << 24 >>> 24)));
      (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3] = (((b >>> 24 >>> 0) << 24 >>> 24)));
    };
    F.prototype.PutUint32 = function(a, b) {
      return this.$val.PutUint32(a, b);
    };
    F.ptr.prototype.Uint64 = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o;
      $unused((7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]));
      return (b = (c = (d = (e = (f = (g = (h = (new $Uint64(0, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]))), i = $shiftLeft64((new $Uint64(0, (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]))), 8), new $Uint64(h.$high | i.$high, (h.$low | i.$low) >>> 0)), j = $shiftLeft64((new $Uint64(0, (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]))), 16), new $Uint64(g.$high | j.$high, (g.$low | j.$low) >>> 0)), k = $shiftLeft64((new $Uint64(0, (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]))), 24), new $Uint64(f.$high | k.$high, (f.$low | k.$low) >>> 0)), l = $shiftLeft64((new $Uint64(0, (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4]))), 32), new $Uint64(e.$high | l.$high, (e.$low | l.$low) >>> 0)), m = $shiftLeft64((new $Uint64(0, (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5]))), 40), new $Uint64(d.$high | m.$high, (d.$low | m.$low) >>> 0)), n = $shiftLeft64((new $Uint64(0, (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6]))), 48), new $Uint64(c.$high | n.$high, (c.$low | n.$low) >>> 0)), o = $shiftLeft64((new $Uint64(0, (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]))), 56), new $Uint64(b.$high | o.$high, (b.$low | o.$low) >>> 0));
    };
    F.prototype.Uint64 = function(a) {
      return this.$val.Uint64(a);
    };
    F.ptr.prototype.PutUint64 = function(a, b) {
      var a, b;
      $unused((7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]));
      (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = ((b.$low << 24 >>> 24)));
      (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = (($shiftRightUint64(b, 8).$low << 24 >>> 24)));
      (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = (($shiftRightUint64(b, 16).$low << 24 >>> 24)));
      (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3] = (($shiftRightUint64(b, 24).$low << 24 >>> 24)));
      (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4] = (($shiftRightUint64(b, 32).$low << 24 >>> 24)));
      (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5] = (($shiftRightUint64(b, 40).$low << 24 >>> 24)));
      (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6] = (($shiftRightUint64(b, 48).$low << 24 >>> 24)));
      (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7] = (($shiftRightUint64(b, 56).$low << 24 >>> 24)));
    };
    F.prototype.PutUint64 = function(a, b) {
      return this.$val.PutUint64(a, b);
    };
    F.ptr.prototype.String = function() {
      return "LittleEndian";
    };
    F.prototype.String = function() {
      return this.$val.String();
    };
    F.ptr.prototype.GoString = function() {
      return "binary.LittleEndian";
    };
    F.prototype.GoString = function() {
      return this.$val.GoString();
    };
    G.ptr.prototype.Uint16 = function(a) {
      var a;
      $unused((1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]));
      return ((((1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) << 16 >>> 16)) | ((((0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) << 16 >>> 16)) << 8 << 16 >>> 16)) >>> 0;
    };
    G.prototype.Uint16 = function(a) {
      return this.$val.Uint16(a);
    };
    G.ptr.prototype.PutUint16 = function(a, b) {
      var a, b;
      $unused((1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]));
      (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = (((b >>> 8 << 16 >>> 16) << 24 >>> 24)));
      (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = ((b << 24 >>> 24)));
    };
    G.prototype.PutUint16 = function(a, b) {
      return this.$val.PutUint16(a, b);
    };
    G.ptr.prototype.Uint32 = function(a) {
      var a;
      $unused((3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]));
      return ((((((((3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]) >>> 0)) | ((((2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) >>> 0)) << 24 >>> 0)) >>> 0;
    };
    G.prototype.Uint32 = function(a) {
      return this.$val.Uint32(a);
    };
    G.ptr.prototype.PutUint32 = function(a, b) {
      var a, b;
      $unused((3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]));
      (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = (((b >>> 24 >>> 0) << 24 >>> 24)));
      (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = (((b >>> 16 >>> 0) << 24 >>> 24)));
      (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = (((b >>> 8 >>> 0) << 24 >>> 24)));
      (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3] = ((b << 24 >>> 24)));
    };
    G.prototype.PutUint32 = function(a, b) {
      return this.$val.PutUint32(a, b);
    };
    G.ptr.prototype.Uint64 = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o;
      $unused((7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]));
      return (b = (c = (d = (e = (f = (g = (h = (new $Uint64(0, (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]))), i = $shiftLeft64((new $Uint64(0, (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6]))), 8), new $Uint64(h.$high | i.$high, (h.$low | i.$low) >>> 0)), j = $shiftLeft64((new $Uint64(0, (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5]))), 16), new $Uint64(g.$high | j.$high, (g.$low | j.$low) >>> 0)), k = $shiftLeft64((new $Uint64(0, (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4]))), 24), new $Uint64(f.$high | k.$high, (f.$low | k.$low) >>> 0)), l = $shiftLeft64((new $Uint64(0, (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]))), 32), new $Uint64(e.$high | l.$high, (e.$low | l.$low) >>> 0)), m = $shiftLeft64((new $Uint64(0, (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]))), 40), new $Uint64(d.$high | m.$high, (d.$low | m.$low) >>> 0)), n = $shiftLeft64((new $Uint64(0, (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]))), 48), new $Uint64(c.$high | n.$high, (c.$low | n.$low) >>> 0)), o = $shiftLeft64((new $Uint64(0, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]))), 56), new $Uint64(b.$high | o.$high, (b.$low | o.$low) >>> 0));
    };
    G.prototype.Uint64 = function(a) {
      return this.$val.Uint64(a);
    };
    G.ptr.prototype.PutUint64 = function(a, b) {
      var a, b;
      $unused((7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]));
      (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = (($shiftRightUint64(b, 56).$low << 24 >>> 24)));
      (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = (($shiftRightUint64(b, 48).$low << 24 >>> 24)));
      (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = (($shiftRightUint64(b, 40).$low << 24 >>> 24)));
      (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3] = (($shiftRightUint64(b, 32).$low << 24 >>> 24)));
      (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4] = (($shiftRightUint64(b, 24).$low << 24 >>> 24)));
      (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5] = (($shiftRightUint64(b, 16).$low << 24 >>> 24)));
      (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6] = (($shiftRightUint64(b, 8).$low << 24 >>> 24)));
      (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7] = ((b.$low << 24 >>> 24)));
    };
    G.prototype.PutUint64 = function(a, b) {
      return this.$val.PutUint64(a, b);
    };
    G.ptr.prototype.String = function() {
      return "BigEndian";
    };
    G.prototype.String = function() {
      return this.$val.String();
    };
    G.ptr.prototype.GoString = function() {
      return "binary.BigEndian";
    };
    G.prototype.GoString = function() {
      return this.$val.GoString();
    };
    H = function(a, b, c) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, b, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, bq, br, bs, bt, bu, bv, bw, bx, by, bz, c, ca, cb, cc, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        b = $f.b;
        ba = $f.ba;
        bb = $f.bb;
        bc = $f.bc;
        bd = $f.bd;
        be = $f.be;
        bf = $f.bf;
        bg = $f.bg;
        bh = $f.bh;
        bi = $f.bi;
        bj = $f.bj;
        bk = $f.bk;
        bl = $f.bl;
        bm = $f.bm;
        bn = $f.bn;
        bo = $f.bo;
        bp = $f.bp;
        bq = $f.bq;
        br = $f.br;
        bs = $f.bs;
        bt = $f.bt;
        bu = $f.bu;
        bv = $f.bv;
        bw = $f.bw;
        bx = $f.bx;
        by = $f.by;
        bz = $f.bz;
        c = $f.c;
        ca = $f.ca;
        cb = $f.cb;
        cc = $f.cc;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = P(c);
            if (!((d === 0))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            e = X.zero();
            f = Y.nil;
            if (d > 8) {
              f = $makeSlice(Y, d);
            } else {
              f = $subslice(new Y(e), 0, d);
            }
            h = B.ReadFull(a, f);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = h;
            i = g[1];
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              $s = -1;
              return i;
            }
            j = c;
            if ($assertType(j, Z, true)[1]) {
              $s = 4;
              continue;
            }
            if ($assertType(j, AA, true)[1]) {
              $s = 5;
              continue;
            }
            if ($assertType(j, AB, true)[1]) {
              $s = 6;
              continue;
            }
            if ($assertType(j, AC, true)[1]) {
              $s = 7;
              continue;
            }
            if ($assertType(j, AD, true)[1]) {
              $s = 8;
              continue;
            }
            if ($assertType(j, AE, true)[1]) {
              $s = 9;
              continue;
            }
            if ($assertType(j, AF, true)[1]) {
              $s = 10;
              continue;
            }
            if ($assertType(j, AG, true)[1]) {
              $s = 11;
              continue;
            }
            if ($assertType(j, AH, true)[1]) {
              $s = 12;
              continue;
            }
            if ($assertType(j, AI, true)[1]) {
              $s = 13;
              continue;
            }
            if ($assertType(j, AJ, true)[1]) {
              $s = 14;
              continue;
            }
            if ($assertType(j, Y, true)[1]) {
              $s = 15;
              continue;
            }
            if ($assertType(j, AK, true)[1]) {
              $s = 16;
              continue;
            }
            if ($assertType(j, AL, true)[1]) {
              $s = 17;
              continue;
            }
            if ($assertType(j, AM, true)[1]) {
              $s = 18;
              continue;
            }
            if ($assertType(j, AN, true)[1]) {
              $s = 19;
              continue;
            }
            if ($assertType(j, AO, true)[1]) {
              $s = 20;
              continue;
            }
            if ($assertType(j, AP, true)[1]) {
              $s = 21;
              continue;
            }
            $s = 22;
            continue;
          case 4:
            k = j.$val;
            k.$set(!((e[0] === 0)));
            $s = 22;
            continue;
          case 5:
            l = j.$val;
            l.$set(((e[0] << 24 >> 24)));
            $s = 22;
            continue;
          case 6:
            m = j.$val;
            m.$set(e[0]);
            $s = 22;
            continue;
          case 7:
            n = j.$val;
            ac = b.Uint16(f);
            $s = 23;
          case 23:
            if ($c) {
              $c = false;
              ac = ac.$blk();
            }
            if (ac && ac.$blk !== undefined) {
              break s;
            }
            n.$set(((ac << 16 >> 16)));
            $s = 22;
            continue;
          case 8:
            o = j.$val;
            ad = b.Uint16(f);
            $s = 24;
          case 24:
            if ($c) {
              $c = false;
              ad = ad.$blk();
            }
            if (ad && ad.$blk !== undefined) {
              break s;
            }
            o.$set(ad);
            $s = 22;
            continue;
          case 9:
            p = j.$val;
            ae = b.Uint32(f);
            $s = 25;
          case 25:
            if ($c) {
              $c = false;
              ae = ae.$blk();
            }
            if (ae && ae.$blk !== undefined) {
              break s;
            }
            p.$set(((ae >> 0)));
            $s = 22;
            continue;
          case 10:
            q = j.$val;
            af = b.Uint32(f);
            $s = 26;
          case 26:
            if ($c) {
              $c = false;
              af = af.$blk();
            }
            if (af && af.$blk !== undefined) {
              break s;
            }
            q.$set(af);
            $s = 22;
            continue;
          case 11:
            r = j.$val;
            ah = b.Uint64(f);
            $s = 27;
          case 27:
            if ($c) {
              $c = false;
              ah = ah.$blk();
            }
            if (ah && ah.$blk !== undefined) {
              break s;
            }
            r.$set(((ag = ah, new $Int64(ag.$high, ag.$low))));
            $s = 22;
            continue;
          case 12:
            s = j.$val;
            ai = b.Uint64(f);
            $s = 28;
          case 28:
            if ($c) {
              $c = false;
              ai = ai.$blk();
            }
            if (ai && ai.$blk !== undefined) {
              break s;
            }
            s.$set(ai);
            $s = 22;
            continue;
          case 13:
            t = j.$val;
            aj = f;
            ak = 0;
            while (true) {
              if (!(ak < aj.$length)) {
                break;
              }
              al = ak;
              am = ((ak < 0 || ak >= aj.$length) ? ($throwRuntimeError("index out of range"), undefined) : aj.$array[aj.$offset + ak]);
              ((al < 0 || al >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + al] = !((am === 0)));
              ak++;
            }
            $s = 22;
            continue;
          case 14:
            u = j.$val;
            an = f;
            ao = 0;
            while (true) {
              if (!(ao < an.$length)) {
                break;
              }
              ap = ao;
              aq = ((ao < 0 || ao >= an.$length) ? ($throwRuntimeError("index out of range"), undefined) : an.$array[an.$offset + ao]);
              ((ap < 0 || ap >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + ap] = ((aq << 24 >> 24)));
              ao++;
            }
            $s = 22;
            continue;
          case 15:
            v = j.$val;
            $copySlice(v, f);
            $s = 22;
            continue;
          case 16:
            w = j.$val;
            ar = w;
            as = 0;
          case 29:
            if (!(as < ar.$length)) {
              $s = 30;
              continue;
            }
            at = as;
            au = b.Uint16($subslice(f, ($imul(2, at))));
            $s = 31;
          case 31:
            if ($c) {
              $c = false;
              au = au.$blk();
            }
            if (au && au.$blk !== undefined) {
              break s;
            }((at < 0 || at >= w.$length) ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + at] = ((au << 16 >> 16)));
            as++;
            $s = 29;
            continue;
          case 30:
            $s = 22;
            continue;
          case 17:
            x = j.$val;
            av = x;
            aw = 0;
          case 32:
            if (!(aw < av.$length)) {
              $s = 33;
              continue;
            }
            ax = aw;
            ay = b.Uint16($subslice(f, ($imul(2, ax))));
            $s = 34;
          case 34:
            if ($c) {
              $c = false;
              ay = ay.$blk();
            }
            if (ay && ay.$blk !== undefined) {
              break s;
            }((ax < 0 || ax >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + ax] = ay);
            aw++;
            $s = 32;
            continue;
          case 33:
            $s = 22;
            continue;
          case 18:
            y = j.$val;
            az = y;
            ba = 0;
          case 35:
            if (!(ba < az.$length)) {
              $s = 36;
              continue;
            }
            bb = ba;
            bc = b.Uint32($subslice(f, ($imul(4, bb))));
            $s = 37;
          case 37:
            if ($c) {
              $c = false;
              bc = bc.$blk();
            }
            if (bc && bc.$blk !== undefined) {
              break s;
            }((bb < 0 || bb >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + bb] = ((bc >> 0)));
            ba++;
            $s = 35;
            continue;
          case 36:
            $s = 22;
            continue;
          case 19:
            z = j.$val;
            bd = z;
            be = 0;
          case 38:
            if (!(be < bd.$length)) {
              $s = 39;
              continue;
            }
            bf = be;
            bg = b.Uint32($subslice(f, ($imul(4, bf))));
            $s = 40;
          case 40:
            if ($c) {
              $c = false;
              bg = bg.$blk();
            }
            if (bg && bg.$blk !== undefined) {
              break s;
            }((bf < 0 || bf >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + bf] = bg);
            be++;
            $s = 38;
            continue;
          case 39:
            $s = 22;
            continue;
          case 20:
            aa = j.$val;
            bh = aa;
            bi = 0;
          case 41:
            if (!(bi < bh.$length)) {
              $s = 42;
              continue;
            }
            bj = bi;
            bl = b.Uint64($subslice(f, ($imul(8, bj))));
            $s = 43;
          case 43:
            if ($c) {
              $c = false;
              bl = bl.$blk();
            }
            if (bl && bl.$blk !== undefined) {
              break s;
            }((bj < 0 || bj >= aa.$length) ? ($throwRuntimeError("index out of range"), undefined) : aa.$array[aa.$offset + bj] = ((bk = bl, new $Int64(bk.$high, bk.$low))));
            bi++;
            $s = 41;
            continue;
          case 42:
            $s = 22;
            continue;
          case 21:
            ab = j.$val;
            bm = ab;
            bn = 0;
          case 44:
            if (!(bn < bm.$length)) {
              $s = 45;
              continue;
            }
            bo = bn;
            bp = b.Uint64($subslice(f, ($imul(8, bo))));
            $s = 46;
          case 46:
            if ($c) {
              $c = false;
              bp = bp.$blk();
            }
            if (bp && bp.$blk !== undefined) {
              break s;
            }((bo < 0 || bo >= ab.$length) ? ($throwRuntimeError("index out of range"), undefined) : ab.$array[ab.$offset + bo] = bp);
            bn++;
            $s = 44;
            continue;
          case 45:
          case 22:
            $s = -1;
            return $ifaceNil;
          case 2:
            bq = D.ValueOf(c);
            $s = 47;
          case 47:
            if ($c) {
              $c = false;
              bq = bq.$blk();
            }
            if (bq && bq.$blk !== undefined) {
              break s;
            }
            br = bq;
            bs = -1;
            bt = $clone(br, D.Value).Kind();
            if (bt === (22)) {
              $s = 49;
              continue;
            }
            if (bt === (23)) {
              $s = 50;
              continue;
            }
            $s = 51;
            continue;
          case 49:
            bu = $clone(br, D.Value).Elem();
            $s = 52;
          case 52:
            if ($c) {
              $c = false;
              bu = bu.$blk();
            }
            if (bu && bu.$blk !== undefined) {
              break s;
            }
            br = bu;
            bv = K($clone(br, D.Value));
            $s = 53;
          case 53:
            if ($c) {
              $c = false;
              bv = bv.$blk();
            }
            if (bv && bv.$blk !== undefined) {
              break s;
            }
            bs = bv;
            $s = 51;
            continue;
          case 50:
            bw = K($clone(br, D.Value));
            $s = 54;
          case 54:
            if ($c) {
              $c = false;
              bw = bw.$blk();
            }
            if (bw && bw.$blk !== undefined) {
              break s;
            }
            bs = bw;
          case 51:
          case 48:
            if (bs < 0) {
              $s = 55;
              continue;
            }
            $s = 56;
            continue;
          case 55:
            bx = D.TypeOf(c).String();
            $s = 57;
          case 57:
            if ($c) {
              $c = false;
              bx = bx.$blk();
            }
            if (bx && bx.$blk !== undefined) {
              break s;
            }
            by = A.New("binary.Read: invalid type " + bx);
            $s = 58;
          case 58:
            if ($c) {
              $c = false;
              by = by.$blk();
            }
            if (by && by.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return by;
          case 56:
            bz = new N.ptr(b, $makeSlice(Y, bs), 0);
            cb = B.ReadFull(a, bz.buf);
            $s = 59;
          case 59:
            if ($c) {
              $c = false;
              cb = cb.$blk();
            }
            if (cb && cb.$blk !== undefined) {
              break s;
            }
            ca = cb;
            cc = ca[1];
            if (!($interfaceIsEqual(cc, $ifaceNil))) {
              $s = -1;
              return cc;
            }
            $r = bz.value($clone(br, D.Value));
            $s = 60;
          case 60:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: H
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.b = b;
      $f.ba = ba;
      $f.bb = bb;
      $f.bc = bc;
      $f.bd = bd;
      $f.be = be;
      $f.bf = bf;
      $f.bg = bg;
      $f.bh = bh;
      $f.bi = bi;
      $f.bj = bj;
      $f.bk = bk;
      $f.bl = bl;
      $f.bm = bm;
      $f.bn = bn;
      $f.bo = bo;
      $f.bp = bp;
      $f.bq = bq;
      $f.br = br;
      $f.bs = bs;
      $f.bt = bt;
      $f.bu = bu;
      $f.bv = bv;
      $f.bw = bw;
      $f.bx = bx;
      $f.by = by;
      $f.bz = bz;
      $f.c = c;
      $f.ca = ca;
      $f.cb = cb;
      $f.cc = cc;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Read = H;
    K = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if ($clone(a, D.Value).Kind() === 23) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            b = $clone(a, D.Value).Type().Elem();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = L(b);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
            if (d >= 0) {
              $s = -1;
              return $imul(d, $clone(a, D.Value).Len());
            }
            $s = -1;
            return -1;
          case 2:
            e = L($clone(a, D.Value).Type());
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: K
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    L = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = a.Kind();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            if (c === (17)) {
              $s = 3;
              continue;
            }
            if (c === (25)) {
              $s = 4;
              continue;
            }
            if ((c === (1)) || (c === (8)) || (c === (9)) || (c === (10)) || (c === (11)) || (c === (3)) || (c === (4)) || (c === (5)) || (c === (6)) || (c === (13)) || (c === (14)) || (c === (15)) || (c === (16))) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 3:
            d = a.Elem();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = L(d);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            if (f >= 0) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            g = a.Len();
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return $imul(f, g);
          case 10:
            $s = 6;
            continue;
          case 4:
            h = 0;
            i = 0;
            k = a.NumField();
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            l = i;
            m = j;
          case 13:
            if (!(l < m)) {
              $s = 14;
              continue;
            }
            n = a.Field(l);
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            o = L(n.Type);
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            p = o;
            if (p < 0) {
              $s = -1;
              return -1;
            }
            h = h + (p) >> 0;
            l = l + (1) >> 0;
            $s = 13;
            continue;
          case 14:
            $s = -1;
            return h;
          case 5:
            q = a.Size();
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ((q >> 0));
          case 6:
          case 1:
            $s = -1;
            return -1;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: L
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    N.ptr.prototype.bool = function() {
      var a, b, c, d;
      a = this;
      d = (b = a.buf, c = a.offset, ((c < 0 || c >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + c]));
      a.offset = a.offset + (1) >> 0;
      return !((d === 0));
    };
    N.prototype.bool = function() {
      return this.$val.bool();
    };
    N.ptr.prototype.uint8 = function() {
      var a, b, c, d;
      a = this;
      d = (b = a.buf, c = a.offset, ((c < 0 || c >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + c]));
      a.offset = a.offset + (1) >> 0;
      return d;
    };
    N.prototype.uint8 = function() {
      return this.$val.uint8();
    };
    N.ptr.prototype.uint16 = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.order.Uint16($subslice(a.buf, a.offset, (a.offset + 2 >> 0)));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            a.offset = a.offset + (2) >> 0;
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: N.ptr.prototype.uint16
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    N.prototype.uint16 = function() {
      return this.$val.uint16();
    };
    N.ptr.prototype.uint32 = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.order.Uint32($subslice(a.buf, a.offset, (a.offset + 4 >> 0)));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            a.offset = a.offset + (4) >> 0;
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: N.ptr.prototype.uint32
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    N.prototype.uint32 = function() {
      return this.$val.uint32();
    };
    N.ptr.prototype.uint64 = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.order.Uint64($subslice(a.buf, a.offset, (a.offset + 8 >> 0)));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            a.offset = a.offset + (8) >> 0;
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: N.ptr.prototype.uint64
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    N.prototype.uint64 = function() {
      return this.$val.uint64();
    };
    N.ptr.prototype.int8 = function() {
      var a;
      a = this;
      return ((a.uint8() << 24 >> 24));
    };
    N.prototype.int8 = function() {
      return this.$val.int8();
    };
    N.ptr.prototype.int16 = function() {
      var a, b, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.uint16();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ((b << 16 >> 16));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: N.ptr.prototype.int16
        };
      }
      $f.a = a;
      $f.b = b;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    N.prototype.int16 = function() {
      return this.$val.int16();
    };
    N.ptr.prototype.int32 = function() {
      var a, b, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.uint32();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ((b >> 0));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: N.ptr.prototype.int32
        };
      }
      $f.a = a;
      $f.b = b;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    N.prototype.int32 = function() {
      return this.$val.int32();
    };
    N.ptr.prototype.int64 = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            c = a.uint64();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ((b = c, new $Int64(b.$high, b.$low)));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: N.ptr.prototype.int64
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    N.prototype.int64 = function() {
      return this.$val.int64();
    };
    N.ptr.prototype.value = function(a) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = $clone(a, D.Value).Kind();
            if (c === (17)) {
              $s = 2;
              continue;
            }
            if (c === (25)) {
              $s = 3;
              continue;
            }
            if (c === (23)) {
              $s = 4;
              continue;
            }
            if (c === (1)) {
              $s = 5;
              continue;
            }
            if (c === (3)) {
              $s = 6;
              continue;
            }
            if (c === (4)) {
              $s = 7;
              continue;
            }
            if (c === (5)) {
              $s = 8;
              continue;
            }
            if (c === (6)) {
              $s = 9;
              continue;
            }
            if (c === (8)) {
              $s = 10;
              continue;
            }
            if (c === (9)) {
              $s = 11;
              continue;
            }
            if (c === (10)) {
              $s = 12;
              continue;
            }
            if (c === (11)) {
              $s = 13;
              continue;
            }
            if (c === (13)) {
              $s = 14;
              continue;
            }
            if (c === (14)) {
              $s = 15;
              continue;
            }
            if (c === (15)) {
              $s = 16;
              continue;
            }
            if (c === (16)) {
              $s = 17;
              continue;
            }
            $s = 18;
            continue;
          case 2:
            d = $clone(a, D.Value).Len();
            e = 0;
          case 19:
            if (!(e < d)) {
              $s = 20;
              continue;
            }
            f = $clone(a, D.Value).Index(e);
            $s = 21;
          case 21:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $r = b.value($clone(f, D.Value));
            $s = 22;
          case 22:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            e = e + (1) >> 0;
            $s = 19;
            continue;
          case 20:
            $s = 18;
            continue;
          case 3:
            g = $clone(a, D.Value).Type();
            h = $clone(a, D.Value).NumField();
            i = 0;
          case 23:
            if (!(i < h)) {
              $s = 24;
              continue;
            }
            j = $clone(a, D.Value).Field(i);
            $s = 25;
          case 25:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            k = j;
            if ($clone(k, D.Value).CanSet()) {
              l = true;
              $s = 29;
              continue s;
            }
            m = g.Field(i);
            $s = 30;
          case 30:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            l = !(m.Name === "_");
          case 29:
            if (l) {
              $s = 26;
              continue;
            }
            $s = 27;
            continue;
          case 26:
            $r = b.value($clone(k, D.Value));
            $s = 31;
          case 31:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 28;
            continue;
          case 27:
            $r = b.skip($clone(k, D.Value));
            $s = 32;
          case 32:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 28:
            i = i + (1) >> 0;
            $s = 23;
            continue;
          case 24:
            $s = 18;
            continue;
          case 4:
            n = $clone(a, D.Value).Len();
            o = 0;
          case 33:
            if (!(o < n)) {
              $s = 34;
              continue;
            }
            p = $clone(a, D.Value).Index(o);
            $s = 35;
          case 35:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            $r = b.value($clone(p, D.Value));
            $s = 36;
          case 36:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            o = o + (1) >> 0;
            $s = 33;
            continue;
          case 34:
            $s = 18;
            continue;
          case 5:
            $clone(a, D.Value).SetBool(b.bool());
            $s = 18;
            continue;
          case 6:
            $clone(a, D.Value).SetInt((new $Int64(0, b.int8())));
            $s = 18;
            continue;
          case 7:
            q = b.int16();
            $s = 37;
          case 37:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            $r = $clone(a, D.Value).SetInt((new $Int64(0, q)));
            $s = 38;
          case 38:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 18;
            continue;
          case 8:
            r = b.int32();
            $s = 39;
          case 39:
            if ($c) {
              $c = false;
              r = r.$blk();
            }
            if (r && r.$blk !== undefined) {
              break s;
            }
            $r = $clone(a, D.Value).SetInt((new $Int64(0, r)));
            $s = 40;
          case 40:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 18;
            continue;
          case 9:
            s = b.int64();
            $s = 41;
          case 41:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            $r = $clone(a, D.Value).SetInt(s);
            $s = 42;
          case 42:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 18;
            continue;
          case 10:
            $clone(a, D.Value).SetUint((new $Uint64(0, b.uint8())));
            $s = 18;
            continue;
          case 11:
            t = b.uint16();
            $s = 43;
          case 43:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            $r = $clone(a, D.Value).SetUint((new $Uint64(0, t)));
            $s = 44;
          case 44:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 18;
            continue;
          case 12:
            u = b.uint32();
            $s = 45;
          case 45:
            if ($c) {
              $c = false;
              u = u.$blk();
            }
            if (u && u.$blk !== undefined) {
              break s;
            }
            $r = $clone(a, D.Value).SetUint((new $Uint64(0, u)));
            $s = 46;
          case 46:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 18;
            continue;
          case 13:
            v = b.uint64();
            $s = 47;
          case 47:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            $r = $clone(a, D.Value).SetUint(v);
            $s = 48;
          case 48:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 18;
            continue;
          case 14:
            w = b.uint32();
            $s = 49;
          case 49:
            if ($c) {
              $c = false;
              w = w.$blk();
            }
            if (w && w.$blk !== undefined) {
              break s;
            }
            x = C.Float32frombits(w);
            $s = 50;
          case 50:
            if ($c) {
              $c = false;
              x = x.$blk();
            }
            if (x && x.$blk !== undefined) {
              break s;
            }
            $r = $clone(a, D.Value).SetFloat((x));
            $s = 51;
          case 51:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 18;
            continue;
          case 15:
            y = b.uint64();
            $s = 52;
          case 52:
            if ($c) {
              $c = false;
              y = y.$blk();
            }
            if (y && y.$blk !== undefined) {
              break s;
            }
            z = C.Float64frombits(y);
            $s = 53;
          case 53:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            $r = $clone(a, D.Value).SetFloat(z);
            $s = 54;
          case 54:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 18;
            continue;
          case 16:
            aa = b.uint32();
            $s = 55;
          case 55:
            if ($c) {
              $c = false;
              aa = aa.$blk();
            }
            if (aa && aa.$blk !== undefined) {
              break s;
            }
            ab = C.Float32frombits(aa);
            $s = 56;
          case 56:
            if ($c) {
              $c = false;
              ab = ab.$blk();
            }
            if (ab && ab.$blk !== undefined) {
              break s;
            }
            ac = (ab);
            ad = b.uint32();
            $s = 57;
          case 57:
            if ($c) {
              $c = false;
              ad = ad.$blk();
            }
            if (ad && ad.$blk !== undefined) {
              break s;
            }
            ae = C.Float32frombits(ad);
            $s = 58;
          case 58:
            if ($c) {
              $c = false;
              ae = ae.$blk();
            }
            if (ae && ae.$blk !== undefined) {
              break s;
            }
            af = (ae);
            $r = $clone(a, D.Value).SetComplex(new $Complex128(ac, af));
            $s = 59;
          case 59:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 18;
            continue;
          case 17:
            ag = b.uint64();
            $s = 60;
          case 60:
            if ($c) {
              $c = false;
              ag = ag.$blk();
            }
            if (ag && ag.$blk !== undefined) {
              break s;
            }
            ah = C.Float64frombits(ag);
            $s = 61;
          case 61:
            if ($c) {
              $c = false;
              ah = ah.$blk();
            }
            if (ah && ah.$blk !== undefined) {
              break s;
            }
            ai = ah;
            aj = b.uint64();
            $s = 62;
          case 62:
            if ($c) {
              $c = false;
              aj = aj.$blk();
            }
            if (aj && aj.$blk !== undefined) {
              break s;
            }
            ak = C.Float64frombits(aj);
            $s = 63;
          case 63:
            if ($c) {
              $c = false;
              ak = ak.$blk();
            }
            if (ak && ak.$blk !== undefined) {
              break s;
            }
            al = ak;
            $r = $clone(a, D.Value).SetComplex(new $Complex128(ai, al));
            $s = 64;
          case 64:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 18:
          case 1:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: N.ptr.prototype.value
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    N.prototype.value = function(a) {
      return this.$val.value(a);
    };
    N.ptr.prototype.skip = function(a) {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = K($clone(a, D.Value));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            b.offset = b.offset + (c) >> 0;
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: N.ptr.prototype.skip
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    N.prototype.skip = function(a) {
      return this.$val.skip(a);
    };
    P = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o;
      b = a;
      if ($assertType(b, $Bool, true)[1] || $assertType(b, $Int8, true)[1] || $assertType(b, $Uint8, true)[1] || $assertType(b, Z, true)[1] || $assertType(b, AA, true)[1] || $assertType(b, AB, true)[1]) {
        c = b;
        return 1;
      } else if ($assertType(b, AI, true)[1]) {
        d = b.$val;
        return d.$length;
      } else if ($assertType(b, AJ, true)[1]) {
        e = b.$val;
        return e.$length;
      } else if ($assertType(b, Y, true)[1]) {
        f = b.$val;
        return f.$length;
      } else if ($assertType(b, $Int16, true)[1] || $assertType(b, $Uint16, true)[1] || $assertType(b, AC, true)[1] || $assertType(b, AD, true)[1]) {
        g = b;
        return 2;
      } else if ($assertType(b, AK, true)[1]) {
        h = b.$val;
        return $imul(2, h.$length);
      } else if ($assertType(b, AL, true)[1]) {
        i = b.$val;
        return $imul(2, i.$length);
      } else if ($assertType(b, $Int32, true)[1] || $assertType(b, $Uint32, true)[1] || $assertType(b, AE, true)[1] || $assertType(b, AF, true)[1]) {
        j = b;
        return 4;
      } else if ($assertType(b, AM, true)[1]) {
        k = b.$val;
        return $imul(4, k.$length);
      } else if ($assertType(b, AN, true)[1]) {
        l = b.$val;
        return $imul(4, l.$length);
      } else if ($assertType(b, $Int64, true)[1] || $assertType(b, $Uint64, true)[1] || $assertType(b, AG, true)[1] || $assertType(b, AH, true)[1]) {
        m = b;
        return 8;
      } else if ($assertType(b, AO, true)[1]) {
        n = b.$val;
        return $imul(8, n.$length);
      } else if ($assertType(b, AP, true)[1]) {
        o = b.$val;
        return $imul(8, o.$length);
      }
      return 0;
    };
    F.methods = [{
      prop: "Uint16",
      name: "Uint16",
      pkg: "",
      typ: $funcType([Y], [$Uint16], false)
    }, {
      prop: "PutUint16",
      name: "PutUint16",
      pkg: "",
      typ: $funcType([Y, $Uint16], [], false)
    }, {
      prop: "Uint32",
      name: "Uint32",
      pkg: "",
      typ: $funcType([Y], [$Uint32], false)
    }, {
      prop: "PutUint32",
      name: "PutUint32",
      pkg: "",
      typ: $funcType([Y, $Uint32], [], false)
    }, {
      prop: "Uint64",
      name: "Uint64",
      pkg: "",
      typ: $funcType([Y], [$Uint64], false)
    }, {
      prop: "PutUint64",
      name: "PutUint64",
      pkg: "",
      typ: $funcType([Y, $Uint64], [], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "GoString",
      name: "GoString",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    G.methods = [{
      prop: "Uint16",
      name: "Uint16",
      pkg: "",
      typ: $funcType([Y], [$Uint16], false)
    }, {
      prop: "PutUint16",
      name: "PutUint16",
      pkg: "",
      typ: $funcType([Y, $Uint16], [], false)
    }, {
      prop: "Uint32",
      name: "Uint32",
      pkg: "",
      typ: $funcType([Y], [$Uint32], false)
    }, {
      prop: "PutUint32",
      name: "PutUint32",
      pkg: "",
      typ: $funcType([Y, $Uint32], [], false)
    }, {
      prop: "Uint64",
      name: "Uint64",
      pkg: "",
      typ: $funcType([Y], [$Uint64], false)
    }, {
      prop: "PutUint64",
      name: "PutUint64",
      pkg: "",
      typ: $funcType([Y, $Uint64], [], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "GoString",
      name: "GoString",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    AQ.methods = [{
      prop: "bool",
      name: "bool",
      pkg: "encoding/binary",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "uint8",
      name: "uint8",
      pkg: "encoding/binary",
      typ: $funcType([], [$Uint8], false)
    }, {
      prop: "uint16",
      name: "uint16",
      pkg: "encoding/binary",
      typ: $funcType([], [$Uint16], false)
    }, {
      prop: "uint32",
      name: "uint32",
      pkg: "encoding/binary",
      typ: $funcType([], [$Uint32], false)
    }, {
      prop: "uint64",
      name: "uint64",
      pkg: "encoding/binary",
      typ: $funcType([], [$Uint64], false)
    }, {
      prop: "int8",
      name: "int8",
      pkg: "encoding/binary",
      typ: $funcType([], [$Int8], false)
    }, {
      prop: "int16",
      name: "int16",
      pkg: "encoding/binary",
      typ: $funcType([], [$Int16], false)
    }, {
      prop: "int32",
      name: "int32",
      pkg: "encoding/binary",
      typ: $funcType([], [$Int32], false)
    }, {
      prop: "int64",
      name: "int64",
      pkg: "encoding/binary",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "value",
      name: "value",
      pkg: "encoding/binary",
      typ: $funcType([D.Value], [], false)
    }, {
      prop: "skip",
      name: "skip",
      pkg: "encoding/binary",
      typ: $funcType([D.Value], [], false)
    }];
    E.init([{
      prop: "PutUint16",
      name: "PutUint16",
      pkg: "",
      typ: $funcType([Y, $Uint16], [], false)
    }, {
      prop: "PutUint32",
      name: "PutUint32",
      pkg: "",
      typ: $funcType([Y, $Uint32], [], false)
    }, {
      prop: "PutUint64",
      name: "PutUint64",
      pkg: "",
      typ: $funcType([Y, $Uint64], [], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Uint16",
      name: "Uint16",
      pkg: "",
      typ: $funcType([Y], [$Uint16], false)
    }, {
      prop: "Uint32",
      name: "Uint32",
      pkg: "",
      typ: $funcType([Y], [$Uint32], false)
    }, {
      prop: "Uint64",
      name: "Uint64",
      pkg: "",
      typ: $funcType([Y], [$Uint64], false)
    }]);
    F.init("", []);
    G.init("", []);
    N.init("encoding/binary", [{
      prop: "order",
      name: "order",
      embedded: false,
      exported: false,
      typ: E,
      tag: ""
    }, {
      prop: "buf",
      name: "buf",
      embedded: false,
      exported: false,
      typ: Y,
      tag: ""
    }, {
      prop: "offset",
      name: "offset",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $pkg.LittleEndian = new F.ptr();
            $pkg.BigEndian = new G.ptr();
            U = A.New("binary: varint overflows a 64-bit integer");
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["encoding/base64"] = (function() {
    var $pkg = {},
      $init, A, B, C, D, F, H, L, M, N, O, P, Q, R, T, E, G;
    A = $packages["encoding/binary"];
    B = $packages["io"];
    C = $packages["strconv"];
    D = $pkg.Encoding = $newType(0, $kindStruct, "base64.Encoding", true, "encoding/base64", true, function(encode_, decodeMap_, padChar_, strict_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.encode = L.zero();
        this.decodeMap = M.zero();
        this.padChar = 0;
        this.strict = false;
        return;
      }
      this.encode = encode_;
      this.decodeMap = decodeMap_;
      this.padChar = padChar_;
      this.strict = strict_;
    });
    F = $pkg.encoder = $newType(0, $kindStruct, "base64.encoder", true, "encoding/base64", false, function(err_, enc_, w_, buf_, nbuf_, out_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.err = $ifaceNil;
        this.enc = O.nil;
        this.w = $ifaceNil;
        this.buf = P.zero();
        this.nbuf = 0;
        this.out = Q.zero();
        return;
      }
      this.err = err_;
      this.enc = enc_;
      this.w = w_;
      this.buf = buf_;
      this.nbuf = nbuf_;
      this.out = out_;
    });
    H = $pkg.CorruptInputError = $newType(8, $kindInt64, "base64.CorruptInputError", true, "encoding/base64", true, null);
    L = $arrayType($Uint8, 64);
    M = $arrayType($Uint8, 256);
    N = $sliceType($Uint8);
    O = $ptrType(D);
    P = $arrayType($Uint8, 3);
    Q = $arrayType($Uint8, 1024);
    R = $arrayType($Uint8, 4);
    T = $ptrType(F);
    E = function(a) {
      var a, b, c, d, e, f, g, h;
      if (!((a.length === 64))) {
        $panic(new $String("encoding alphabet is not 64-bytes long"));
      }
      b = 0;
      while (true) {
        if (!(b < a.length)) {
          break;
        }
        if ((a.charCodeAt(b) === 10) || (a.charCodeAt(b) === 13)) {
          $panic(new $String("encoding alphabet contains newline character"));
        }
        b = b + (1) >> 0;
      }
      c = new D.ptr(L.zero(), M.zero(), 0, false);
      c.padChar = 61;
      $copyString(new N(c.encode), a);
      d = 0;
      while (true) {
        if (!(d < 256)) {
          break;
        }(e = c.decodeMap, ((d < 0 || d >= e.length) ? ($throwRuntimeError("index out of range"), undefined) : e[d] = 255));
        d = d + (1) >> 0;
      }
      f = 0;
      while (true) {
        if (!(f < a.length)) {
          break;
        }(g = c.decodeMap, h = a.charCodeAt(f), ((h < 0 || h >= g.length) ? ($throwRuntimeError("index out of range"), undefined) : g[h] = ((f << 24 >>> 24))));
        f = f + (1) >> 0;
      }
      return c;
    };
    $pkg.NewEncoding = E;
    D.ptr.prototype.WithPadding = function(a) {
      var a, b, c, d;
      b = this;
      if ((a === 13) || (a === 10) || a > 255) {
        $panic(new $String("invalid padding"));
      }
      c = 0;
      while (true) {
        if (!(c < 64)) {
          break;
        }
        if ((((d = b.encode, ((c < 0 || c >= d.length) ? ($throwRuntimeError("index out of range"), undefined) : d[c])) >> 0)) === a) {
          $panic(new $String("padding contained in alphabet"));
        }
        c = c + (1) >> 0;
      }
      b.padChar = a;
      return b;
    };
    D.prototype.WithPadding = function(a) {
      return this.$val.WithPadding(a);
    };
    D.ptr.prototype.Strict = function() {
      var a;
      a = this;
      a.strict = true;
      return a;
    };
    D.prototype.Strict = function() {
      return this.$val.Strict();
    };
    D.ptr.prototype.Encode = function(a, b) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      c = this;
      if (b.$length === 0) {
        return;
      }
      d = 0;
      e = 0;
      f = d;
      g = e;
      i = $imul(((h = b.$length / 3, (h === h && h !== 1 / 0 && h !== -1 / 0) ? h >> 0 : $throwRuntimeError("integer divide by zero"))), 3);
      while (true) {
        if (!(g < i)) {
          break;
        }
        m = (((((((j = g + 0 >> 0, ((j < 0 || j >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + j])) >>> 0)) << 16 >>> 0) | ((((k = g + 1 >> 0, ((k < 0 || k >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + k])) >>> 0)) << 8 >>> 0)) >>> 0) | (((l = g + 2 >> 0, ((l < 0 || l >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + l])) >>> 0))) >>> 0;
        (p = f + 0 >> 0, ((p < 0 || p >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + p] = (n = c.encode, o = ((m >>> 18 >>> 0) & 63) >>> 0, ((o < 0 || o >= n.length) ? ($throwRuntimeError("index out of range"), undefined) : n[o]))));
        (s = f + 1 >> 0, ((s < 0 || s >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + s] = (q = c.encode, r = ((m >>> 12 >>> 0) & 63) >>> 0, ((r < 0 || r >= q.length) ? ($throwRuntimeError("index out of range"), undefined) : q[r]))));
        (v = f + 2 >> 0, ((v < 0 || v >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + v] = (t = c.encode, u = ((m >>> 6 >>> 0) & 63) >>> 0, ((u < 0 || u >= t.length) ? ($throwRuntimeError("index out of range"), undefined) : t[u]))));
        (y = f + 3 >> 0, ((y < 0 || y >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + y] = (w = c.encode, x = (m & 63) >>> 0, ((x < 0 || x >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x]))));
        g = g + (3) >> 0;
        f = f + (4) >> 0;
      }
      z = b.$length - g >> 0;
      if (z === 0) {
        return;
      }
      ab = (((aa = g + 0 >> 0, ((aa < 0 || aa >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + aa])) >>> 0)) << 16 >>> 0;
      if (z === 2) {
        ab = (ab | (((((ac = g + 1 >> 0, ((ac < 0 || ac >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + ac])) >>> 0)) << 8 >>> 0))) >>> 0;
      }(af = f + 0 >> 0, ((af < 0 || af >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + af] = (ad = c.encode, ae = ((ab >>> 18 >>> 0) & 63) >>> 0, ((ae < 0 || ae >= ad.length) ? ($throwRuntimeError("index out of range"), undefined) : ad[ae]))));
      (ai = f + 1 >> 0, ((ai < 0 || ai >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + ai] = (ag = c.encode, ah = ((ab >>> 12 >>> 0) & 63) >>> 0, ((ah < 0 || ah >= ag.length) ? ($throwRuntimeError("index out of range"), undefined) : ag[ah]))));
      aj = z;
      if (aj === (2)) {
        (am = f + 2 >> 0, ((am < 0 || am >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + am] = (ak = c.encode, al = ((ab >>> 6 >>> 0) & 63) >>> 0, ((al < 0 || al >= ak.length) ? ($throwRuntimeError("index out of range"), undefined) : ak[al]))));
        if (!((c.padChar === -1))) {
          (an = f + 3 >> 0, ((an < 0 || an >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + an] = ((c.padChar << 24 >>> 24))));
        }
      } else if (aj === (1)) {
        if (!((c.padChar === -1))) {
          (ao = f + 2 >> 0, ((ao < 0 || ao >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + ao] = ((c.padChar << 24 >>> 24))));
          (ap = f + 3 >> 0, ((ap < 0 || ap >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + ap] = ((c.padChar << 24 >>> 24))));
        }
      }
    };
    D.prototype.Encode = function(a, b) {
      return this.$val.Encode(a, b);
    };
    D.ptr.prototype.EncodeToString = function(a) {
      var a, b, c;
      b = this;
      c = $makeSlice(N, b.EncodedLen(a.$length));
      b.Encode(c, a);
      return ($bytesToString(c));
    };
    D.prototype.EncodeToString = function(a) {
      return this.$val.EncodeToString(a);
    };
    F.ptr.prototype.Write = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = 0;
            c = $ifaceNil;
            d = this;
            if (!($interfaceIsEqual(d.err, $ifaceNil))) {
              e = 0;
              f = d.err;
              b = e;
              c = f;
              $s = -1;
              return [b, c];
            }
            if (d.nbuf > 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            g = 0;
            g = 0;
            while (true) {
              if (!(g < a.$length && d.nbuf < 3)) {
                break;
              }(h = d.buf, i = d.nbuf, ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i] = ((g < 0 || g >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + g])));
              d.nbuf = d.nbuf + (1) >> 0;
              g = g + (1) >> 0;
            }
            b = b + (g) >> 0;
            a = $subslice(a, g);
            if (d.nbuf < 3) {
              $s = -1;
              return [b, c];
            }
            d.enc.Encode(new N(d.out), new N(d.buf));
            k = d.w.Write($subslice(new N(d.out), 0, 4));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            d.err = j[1];
            if (!($interfaceIsEqual(d.err, $ifaceNil))) {
              l = b;
              m = d.err;
              b = l;
              c = m;
              $s = -1;
              return [b, c];
            }
            d.nbuf = 0;
          case 2:
          case 4:
            if (!(a.$length >= 3)) {
              $s = 5;
              continue;
            }
            n = 768;
            if (n > a.$length) {
              n = a.$length;
              n = n - ((o = n % 3, o === o ? o : $throwRuntimeError("integer divide by zero"))) >> 0;
            }
            d.enc.Encode(new N(d.out), $subslice(a, 0, n));
            r = d.w.Write($subslice(new N(d.out), 0, ($imul((q = n / 3, (q === q && q !== 1 / 0 && q !== -1 / 0) ? q >> 0 : $throwRuntimeError("integer divide by zero")), 4))));
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              r = r.$blk();
            }
            if (r && r.$blk !== undefined) {
              break s;
            }
            p = r;
            d.err = p[1];
            if (!($interfaceIsEqual(d.err, $ifaceNil))) {
              s = b;
              t = d.err;
              b = s;
              c = t;
              $s = -1;
              return [b, c];
            }
            b = b + (n) >> 0;
            a = $subslice(a, n);
            $s = 4;
            continue;
          case 5:
            u = 0;
            while (true) {
              if (!(u < a.$length)) {
                break;
              }(v = d.buf, ((u < 0 || u >= v.length) ? ($throwRuntimeError("index out of range"), undefined) : v[u] = ((u < 0 || u >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + u])));
              u = u + (1) >> 0;
            }
            d.nbuf = a.$length;
            b = b + (a.$length) >> 0;
            $s = -1;
            return [b, c];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: F.ptr.prototype.Write
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    F.prototype.Write = function(a) {
      return this.$val.Write(a);
    };
    F.ptr.prototype.Close = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            if ($interfaceIsEqual(a.err, $ifaceNil) && a.nbuf > 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            a.enc.Encode(new N(a.out), $subslice(new N(a.buf), 0, a.nbuf));
            c = a.w.Write($subslice(new N(a.out), 0, a.enc.EncodedLen(a.nbuf)));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            b = c;
            a.err = b[1];
            a.nbuf = 0;
          case 2:
            $s = -1;
            return a.err;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: F.ptr.prototype.Close
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    F.prototype.Close = function() {
      return this.$val.Close();
    };
    G = function(a, b) {
      var a, b;
      return new F.ptr($ifaceNil, a, b, P.zero(), 0, Q.zero());
    };
    $pkg.NewEncoder = G;
    D.ptr.prototype.EncodedLen = function(a) {
      var a, b, c, d;
      b = this;
      if (b.padChar === -1) {
        return (c = ((($imul(a, 8)) + 5 >> 0)) / 6, (c === c && c !== 1 / 0 && c !== -1 / 0) ? c >> 0 : $throwRuntimeError("integer divide by zero"));
      }
      return $imul((d = ((a + 2 >> 0)) / 3, (d === d && d !== 1 / 0 && d !== -1 / 0) ? d >> 0 : $throwRuntimeError("integer divide by zero")), 4);
    };
    D.prototype.EncodedLen = function(a) {
      return this.$val.EncodedLen(a);
    };
    H.prototype.Error = function() {
      var a;
      a = this;
      return "illegal base64 data at input byte " + C.FormatInt((new $Int64(a.$high, a.$low)), 10);
    };
    $ptrType(H).prototype.Error = function() {
      return this.$get().Error();
    };
    D.ptr.prototype.decodeQuantum = function(a, b, c) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, b, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      d = 0;
      e = 0;
      f = $ifaceNil;
      g = this;
      h = R.zero();
      i = 3;
      j = 4;
      k = i;
      l = j;
      m = 0;
      while (true) {
        if (!(m < 4)) {
          break;
        }
        if (b.$length === c) {
          if ((m === 0)) {
            n = c;
            o = 0;
            p = $ifaceNil;
            d = n;
            e = o;
            f = p;
            return [d, e, f];
          } else if (((m === 1)) || (!((g.padChar === -1)))) {
            q = c;
            r = 0;
            s = (new H(0, (c - m >> 0)));
            d = q;
            e = r;
            f = s;
            return [d, e, f];
          }
          t = m - 1 >> 0;
          u = m;
          k = t;
          l = u;
          break;
        }
        v = ((c < 0 || c >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + c]);
        c = c + (1) >> 0;
        x = (w = g.decodeMap, ((v < 0 || v >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[v]));
        if (!((x === 255))) {
          ((m < 0 || m >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[m] = x);
          m = m + (1) >> 0;
          continue;
        }
        if ((v === 10) || (v === 13)) {
          m = m - (1) >> 0;
          m = m + (1) >> 0;
          continue;
        }
        if (!((((v >> 0)) === g.padChar))) {
          y = c;
          z = 0;
          aa = (new H(0, (c - 1 >> 0)));
          d = y;
          e = z;
          f = aa;
          return [d, e, f];
        }
        ab = m;
        if ((ab === (0)) || (ab === (1))) {
          ac = c;
          ad = 0;
          ae = (new H(0, (c - 1 >> 0)));
          d = ac;
          e = ad;
          f = ae;
          return [d, e, f];
        } else if (ab === (2)) {
          while (true) {
            if (!(c < b.$length && ((((c < 0 || c >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + c]) === 10) || (((c < 0 || c >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + c]) === 13)))) {
              break;
            }
            c = c + (1) >> 0;
          }
          if (c === b.$length) {
            af = c;
            ag = 0;
            ah = (new H(0, b.$length));
            d = af;
            e = ag;
            f = ah;
            return [d, e, f];
          }
          if (!((((((c < 0 || c >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + c]) >> 0)) === g.padChar))) {
            ai = c;
            aj = 0;
            ak = (new H(0, (c - 1 >> 0)));
            d = ai;
            e = aj;
            f = ak;
            return [d, e, f];
          }
          c = c + (1) >> 0;
        }
        while (true) {
          if (!(c < b.$length && ((((c < 0 || c >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + c]) === 10) || (((c < 0 || c >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + c]) === 13)))) {
            break;
          }
          c = c + (1) >> 0;
        }
        if (c < b.$length) {
          f = (new H(0, c));
        }
        al = 3;
        am = m;
        k = al;
        l = am;
        break;
      }
      an = ((((((((h[0] >>> 0)) << 18 >>> 0) | (((h[1] >>> 0)) << 12 >>> 0)) >>> 0) | (((h[2] >>> 0)) << 6 >>> 0)) >>> 0) | ((h[3] >>> 0))) >>> 0;
      ao = (((an >>> 0 >>> 0) << 24 >>> 24));
      ap = (((an >>> 8 >>> 0) << 24 >>> 24));
      aq = (((an >>> 16 >>> 0) << 24 >>> 24));
      h[2] = ao;
      h[1] = ap;
      h[0] = aq;
      ar = l;
      if (ar === (4)) {
        (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = h[2]);
        h[2] = 0;
        (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = h[1]);
        if (g.strict && !((h[2] === 0))) {
          as = c;
          at = 0;
          au = (new H(0, (c - 1 >> 0)));
          d = as;
          e = at;
          f = au;
          return [d, e, f];
        }
        h[1] = 0;
        (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = h[0]);
        if (g.strict && (!((h[1] === 0)) || !((h[2] === 0)))) {
          av = c;
          aw = 0;
          ax = (new H(0, (c - 2 >> 0)));
          d = av;
          e = aw;
          f = ax;
          return [d, e, f];
        }
      } else if (ar === (3)) {
        (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = h[1]);
        if (g.strict && !((h[2] === 0))) {
          ay = c;
          az = 0;
          ba = (new H(0, (c - 1 >> 0)));
          d = ay;
          e = az;
          f = ba;
          return [d, e, f];
        }
        h[1] = 0;
        (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = h[0]);
        if (g.strict && (!((h[1] === 0)) || !((h[2] === 0)))) {
          bb = c;
          bc = 0;
          bd = (new H(0, (c - 2 >> 0)));
          d = bb;
          e = bc;
          f = bd;
          return [d, e, f];
        }
      } else if (ar === (2)) {
        (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = h[0]);
        if (g.strict && (!((h[1] === 0)) || !((h[2] === 0)))) {
          be = c;
          bf = 0;
          bg = (new H(0, (c - 2 >> 0)));
          d = be;
          e = bf;
          f = bg;
          return [d, e, f];
        }
      }
      a = $subslice(a, k);
      bh = c;
      bi = l - 1 >> 0;
      bj = f;
      d = bh;
      e = bi;
      f = bj;
      return [d, e, f];
    };
    D.prototype.decodeQuantum = function(a, b, c) {
      return this.$val.decodeQuantum(a, b, c);
    };
    D.ptr.prototype.DecodeString = function(a) {
      var a, b, c, d, e, f;
      b = this;
      c = $makeSlice(N, b.DecodedLen(a.length));
      d = b.Decode(c, (new N($stringToBytes(a))));
      e = d[0];
      f = d[1];
      return [$subslice(c, 0, e), f];
    };
    D.prototype.DecodeString = function(a) {
      return this.$val.DecodeString(a);
    };
    D.ptr.prototype.Decode = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      c = 0;
      d = $ifaceNil;
      e = this;
      if (b.$length === 0) {
        f = 0;
        g = $ifaceNil;
        c = f;
        d = g;
        return [c, d];
      }
      h = 0;
      i = b.$length;
      j = a.$length;
      while (true) {
        if (!(false && (i - h >> 0) >= 8 && (j - c >> 0) >= 8)) {
          break;
        }
        k = e.decode64($subslice(a, c), $subslice(b, h));
        if (k) {
          c = c + (6) >> 0;
          h = h + (8) >> 0;
        } else {
          l = 0;
          m = e.decodeQuantum($subslice(a, c), b, h);
          h = m[0];
          l = m[1];
          d = m[2];
          c = c + (l) >> 0;
          if (!($interfaceIsEqual(d, $ifaceNil))) {
            n = c;
            o = d;
            c = n;
            d = o;
            return [c, d];
          }
        }
      }
      while (true) {
        if (!((i - h >> 0) >= 4 && (j - c >> 0) >= 4)) {
          break;
        }
        p = e.decode32($subslice(a, c), $subslice(b, h));
        if (p) {
          c = c + (3) >> 0;
          h = h + (4) >> 0;
        } else {
          q = 0;
          r = e.decodeQuantum($subslice(a, c), b, h);
          h = r[0];
          q = r[1];
          d = r[2];
          c = c + (q) >> 0;
          if (!($interfaceIsEqual(d, $ifaceNil))) {
            s = c;
            t = d;
            c = s;
            d = t;
            return [c, d];
          }
        }
      }
      while (true) {
        if (!(h < b.$length)) {
          break;
        }
        u = 0;
        v = e.decodeQuantum($subslice(a, c), b, h);
        h = v[0];
        u = v[1];
        d = v[2];
        c = c + (u) >> 0;
        if (!($interfaceIsEqual(d, $ifaceNil))) {
          w = c;
          x = d;
          c = w;
          d = x;
          return [c, d];
        }
      }
      y = c;
      z = d;
      c = y;
      d = z;
      return [c, d];
    };
    D.prototype.Decode = function(a, b) {
      return this.$val.Decode(a, b);
    };
    D.ptr.prototype.decode32 = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o;
      c = this;
      d = 0;
      e = 0;
      f = d;
      g = e;
      g = (((h = c.decodeMap, i = (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]), ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i])) >>> 0));
      if (g === 255) {
        return false;
      }
      f = (f | ((g << 26 >>> 0))) >>> 0;
      g = (((j = c.decodeMap, k = (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]), ((k < 0 || k >= j.length) ? ($throwRuntimeError("index out of range"), undefined) : j[k])) >>> 0));
      if (g === 255) {
        return false;
      }
      f = (f | ((g << 20 >>> 0))) >>> 0;
      g = (((l = c.decodeMap, m = (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]), ((m < 0 || m >= l.length) ? ($throwRuntimeError("index out of range"), undefined) : l[m])) >>> 0));
      if (g === 255) {
        return false;
      }
      f = (f | ((g << 14 >>> 0))) >>> 0;
      g = (((n = c.decodeMap, o = (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]), ((o < 0 || o >= n.length) ? ($throwRuntimeError("index out of range"), undefined) : n[o])) >>> 0));
      if (g === 255) {
        return false;
      }
      f = (f | ((g << 8 >>> 0))) >>> 0;
      $clone(A.BigEndian, A.bigEndian).PutUint32(a, f);
      return true;
    };
    D.prototype.decode32 = function(a, b) {
      return this.$val.decode32(a, b);
    };
    D.ptr.prototype.decode64 = function(a, b) {
      var a, aa, ab, ac, ad, ae, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      c = this;
      d = new $Uint64(0, 0);
      e = new $Uint64(0, 0);
      f = d;
      g = e;
      g = (new $Uint64(0, (h = c.decodeMap, i = (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]), ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i]))));
      if ((g.$high === 0 && g.$low === 255)) {
        return false;
      }
      f = (j = $shiftLeft64(g, 58), new $Uint64(f.$high | j.$high, (f.$low | j.$low) >>> 0));
      g = (new $Uint64(0, (k = c.decodeMap, l = (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]), ((l < 0 || l >= k.length) ? ($throwRuntimeError("index out of range"), undefined) : k[l]))));
      if ((g.$high === 0 && g.$low === 255)) {
        return false;
      }
      f = (m = $shiftLeft64(g, 52), new $Uint64(f.$high | m.$high, (f.$low | m.$low) >>> 0));
      g = (new $Uint64(0, (n = c.decodeMap, o = (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]), ((o < 0 || o >= n.length) ? ($throwRuntimeError("index out of range"), undefined) : n[o]))));
      if ((g.$high === 0 && g.$low === 255)) {
        return false;
      }
      f = (p = $shiftLeft64(g, 46), new $Uint64(f.$high | p.$high, (f.$low | p.$low) >>> 0));
      g = (new $Uint64(0, (q = c.decodeMap, r = (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]), ((r < 0 || r >= q.length) ? ($throwRuntimeError("index out of range"), undefined) : q[r]))));
      if ((g.$high === 0 && g.$low === 255)) {
        return false;
      }
      f = (s = $shiftLeft64(g, 40), new $Uint64(f.$high | s.$high, (f.$low | s.$low) >>> 0));
      g = (new $Uint64(0, (t = c.decodeMap, u = (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]), ((u < 0 || u >= t.length) ? ($throwRuntimeError("index out of range"), undefined) : t[u]))));
      if ((g.$high === 0 && g.$low === 255)) {
        return false;
      }
      f = (v = $shiftLeft64(g, 34), new $Uint64(f.$high | v.$high, (f.$low | v.$low) >>> 0));
      g = (new $Uint64(0, (w = c.decodeMap, x = (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]), ((x < 0 || x >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x]))));
      if ((g.$high === 0 && g.$low === 255)) {
        return false;
      }
      f = (y = $shiftLeft64(g, 28), new $Uint64(f.$high | y.$high, (f.$low | y.$low) >>> 0));
      g = (new $Uint64(0, (z = c.decodeMap, aa = (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]), ((aa < 0 || aa >= z.length) ? ($throwRuntimeError("index out of range"), undefined) : z[aa]))));
      if ((g.$high === 0 && g.$low === 255)) {
        return false;
      }
      f = (ab = $shiftLeft64(g, 22), new $Uint64(f.$high | ab.$high, (f.$low | ab.$low) >>> 0));
      g = (new $Uint64(0, (ac = c.decodeMap, ad = (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]), ((ad < 0 || ad >= ac.length) ? ($throwRuntimeError("index out of range"), undefined) : ac[ad]))));
      if ((g.$high === 0 && g.$low === 255)) {
        return false;
      }
      f = (ae = $shiftLeft64(g, 16), new $Uint64(f.$high | ae.$high, (f.$low | ae.$low) >>> 0));
      $clone(A.BigEndian, A.bigEndian).PutUint64(a, f);
      return true;
    };
    D.prototype.decode64 = function(a, b) {
      return this.$val.decode64(a, b);
    };
    D.ptr.prototype.DecodedLen = function(a) {
      var a, b, c, d;
      b = this;
      if (b.padChar === -1) {
        return (c = ($imul(a, 6)) / 8, (c === c && c !== 1 / 0 && c !== -1 / 0) ? c >> 0 : $throwRuntimeError("integer divide by zero"));
      }
      return $imul((d = a / 4, (d === d && d !== 1 / 0 && d !== -1 / 0) ? d >> 0 : $throwRuntimeError("integer divide by zero")), 3);
    };
    D.prototype.DecodedLen = function(a) {
      return this.$val.DecodedLen(a);
    };
    D.methods = [{
      prop: "WithPadding",
      name: "WithPadding",
      pkg: "",
      typ: $funcType([$Int32], [O], false)
    }, {
      prop: "Strict",
      name: "Strict",
      pkg: "",
      typ: $funcType([], [O], false)
    }];
    O.methods = [{
      prop: "Encode",
      name: "Encode",
      pkg: "",
      typ: $funcType([N, N], [], false)
    }, {
      prop: "EncodeToString",
      name: "EncodeToString",
      pkg: "",
      typ: $funcType([N], [$String], false)
    }, {
      prop: "EncodedLen",
      name: "EncodedLen",
      pkg: "",
      typ: $funcType([$Int], [$Int], false)
    }, {
      prop: "decodeQuantum",
      name: "decodeQuantum",
      pkg: "encoding/base64",
      typ: $funcType([N, N, $Int], [$Int, $Int, $error], false)
    }, {
      prop: "DecodeString",
      name: "DecodeString",
      pkg: "",
      typ: $funcType([$String], [N, $error], false)
    }, {
      prop: "Decode",
      name: "Decode",
      pkg: "",
      typ: $funcType([N, N], [$Int, $error], false)
    }, {
      prop: "decode32",
      name: "decode32",
      pkg: "encoding/base64",
      typ: $funcType([N, N], [$Bool], false)
    }, {
      prop: "decode64",
      name: "decode64",
      pkg: "encoding/base64",
      typ: $funcType([N, N], [$Bool], false)
    }, {
      prop: "DecodedLen",
      name: "DecodedLen",
      pkg: "",
      typ: $funcType([$Int], [$Int], false)
    }];
    T.methods = [{
      prop: "Write",
      name: "Write",
      pkg: "",
      typ: $funcType([N], [$Int, $error], false)
    }, {
      prop: "Close",
      name: "Close",
      pkg: "",
      typ: $funcType([], [$error], false)
    }];
    H.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    D.init("encoding/base64", [{
      prop: "encode",
      name: "encode",
      embedded: false,
      exported: false,
      typ: L,
      tag: ""
    }, {
      prop: "decodeMap",
      name: "decodeMap",
      embedded: false,
      exported: false,
      typ: M,
      tag: ""
    }, {
      prop: "padChar",
      name: "padChar",
      embedded: false,
      exported: false,
      typ: $Int32,
      tag: ""
    }, {
      prop: "strict",
      name: "strict",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    F.init("encoding/base64", [{
      prop: "err",
      name: "err",
      embedded: false,
      exported: false,
      typ: $error,
      tag: ""
    }, {
      prop: "enc",
      name: "enc",
      embedded: false,
      exported: false,
      typ: O,
      tag: ""
    }, {
      prop: "w",
      name: "w",
      embedded: false,
      exported: false,
      typ: B.Writer,
      tag: ""
    }, {
      prop: "buf",
      name: "buf",
      embedded: false,
      exported: false,
      typ: P,
      tag: ""
    }, {
      prop: "nbuf",
      name: "nbuf",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "out",
      name: "out",
      embedded: false,
      exported: false,
      typ: Q,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $pkg.StdEncoding = E("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
            $pkg.URLEncoding = E("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_");
            $pkg.RawStdEncoding = $clone($pkg.StdEncoding, D).WithPadding(-1);
            $pkg.RawURLEncoding = $clone($pkg.URLEncoding, D).WithPadding(-1);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["syscall"] = (function() {
    var $pkg = {},
      $init, D, A, E, B, C, EP, FK, FL, FT, FU, FV, FW, LJ, LP, LY, LZ, MA, MB, MC, MD, ME, MF, MG, MH, MI, MJ, NE, NG, NN, NP, NQ, OB, OC, OE, OF, OG, OQ, OU, OV, OW, OY, PC, PD, PE, PO, PP, PQ, PR, PS, PT, PU, PV, PW, QA, F, G, Q, R, S, BA, CI, CJ, EL, FM, FN, FO, GP, NM, GU, H, I, J, L, M, N, T, U, V, Z, AT, AU, AV, AW, BO, BP, CE, CF, CK, DH, DI, DQ, DT, DU, EC, EE, ER, ES, ET, FP, FR, FS, GB, GC, GD, GE, GF, GG, GH, GJ, GZ, HE, HH, HJ, HK, HL, HM, HR, IC, ID, IG, II, IJ, IM, IO, IP, IQ, JJ, JU, JV, JW, KB, KZ, LA, LB;
    D = $packages["errors"];
    A = $packages["github.com/gopherjs/gopherjs/js"];
    E = $packages["internal/race"];
    B = $packages["runtime"];
    C = $packages["sync"];
    EP = $pkg.SockaddrDatalink = $newType(0, $kindStruct, "syscall.SockaddrDatalink", true, "syscall", true, function(Len_, Family_, Index_, Type_, Nlen_, Alen_, Slen_, Data_, raw_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Len = 0;
        this.Family = 0;
        this.Index = 0;
        this.Type = 0;
        this.Nlen = 0;
        this.Alen = 0;
        this.Slen = 0;
        this.Data = OC.zero();
        this.raw = new MB.ptr(0, 0, 0, 0, 0, 0, 0, OC.zero());
        return;
      }
      this.Len = Len_;
      this.Family = Family_;
      this.Index = Index_;
      this.Type = Type_;
      this.Nlen = Nlen_;
      this.Alen = Alen_;
      this.Slen = Slen_;
      this.Data = Data_;
      this.raw = raw_;
    });
    FK = $pkg.mmapper = $newType(0, $kindStruct, "syscall.mmapper", true, "syscall", false, function(Mutex_, active_, mmap_, munmap_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Mutex = new C.Mutex.ptr(0, 0);
        this.active = false;
        this.mmap = $throwNilPointerError;
        this.munmap = $throwNilPointerError;
        return;
      }
      this.Mutex = Mutex_;
      this.active = active_;
      this.mmap = mmap_;
      this.munmap = munmap_;
    });
    FL = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", true, "syscall", true, null);
    FT = $pkg.Sockaddr = $newType(8, $kindInterface, "syscall.Sockaddr", true, "syscall", true, null);
    FU = $pkg.SockaddrInet4 = $newType(0, $kindStruct, "syscall.SockaddrInet4", true, "syscall", true, function(Port_, Addr_, raw_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Port = 0;
        this.Addr = NQ.zero();
        this.raw = new LY.ptr(0, 0, 0, NQ.zero(), OG.zero());
        return;
      }
      this.Port = Port_;
      this.Addr = Addr_;
      this.raw = raw_;
    });
    FV = $pkg.SockaddrInet6 = $newType(0, $kindStruct, "syscall.SockaddrInet6", true, "syscall", true, function(Port_, ZoneId_, Addr_, raw_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Port = 0;
        this.ZoneId = 0;
        this.Addr = NP.zero();
        this.raw = new LZ.ptr(0, 0, 0, 0, NP.zero(), 0);
        return;
      }
      this.Port = Port_;
      this.ZoneId = ZoneId_;
      this.Addr = Addr_;
      this.raw = raw_;
    });
    FW = $pkg.SockaddrUnix = $newType(0, $kindStruct, "syscall.SockaddrUnix", true, "syscall", true, function(Name_, raw_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Name = "";
        this.raw = new MA.ptr(0, 0, OV.zero());
        return;
      }
      this.Name = Name_;
      this.raw = raw_;
    });
    LJ = $pkg.Timespec = $newType(0, $kindStruct, "syscall.Timespec", true, "syscall", true, function(Sec_, Nsec_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Sec = new $Int64(0, 0);
        this.Nsec = new $Int64(0, 0);
        return;
      }
      this.Sec = Sec_;
      this.Nsec = Nsec_;
    });
    LP = $pkg.Stat_t = $newType(0, $kindStruct, "syscall.Stat_t", true, "syscall", true, function(Dev_, Mode_, Nlink_, Ino_, Uid_, Gid_, Rdev_, Pad_cgo_0_, Atimespec_, Mtimespec_, Ctimespec_, Birthtimespec_, Size_, Blocks_, Blksize_, Flags_, Gen_, Lspare_, Qspare_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Dev = 0;
        this.Mode = 0;
        this.Nlink = 0;
        this.Ino = new $Uint64(0, 0);
        this.Uid = 0;
        this.Gid = 0;
        this.Rdev = 0;
        this.Pad_cgo_0 = NQ.zero();
        this.Atimespec = new LJ.ptr(new $Int64(0, 0), new $Int64(0, 0));
        this.Mtimespec = new LJ.ptr(new $Int64(0, 0), new $Int64(0, 0));
        this.Ctimespec = new LJ.ptr(new $Int64(0, 0), new $Int64(0, 0));
        this.Birthtimespec = new LJ.ptr(new $Int64(0, 0), new $Int64(0, 0));
        this.Size = new $Int64(0, 0);
        this.Blocks = new $Int64(0, 0);
        this.Blksize = 0;
        this.Flags = 0;
        this.Gen = 0;
        this.Lspare = 0;
        this.Qspare = PW.zero();
        return;
      }
      this.Dev = Dev_;
      this.Mode = Mode_;
      this.Nlink = Nlink_;
      this.Ino = Ino_;
      this.Uid = Uid_;
      this.Gid = Gid_;
      this.Rdev = Rdev_;
      this.Pad_cgo_0 = Pad_cgo_0_;
      this.Atimespec = Atimespec_;
      this.Mtimespec = Mtimespec_;
      this.Ctimespec = Ctimespec_;
      this.Birthtimespec = Birthtimespec_;
      this.Size = Size_;
      this.Blocks = Blocks_;
      this.Blksize = Blksize_;
      this.Flags = Flags_;
      this.Gen = Gen_;
      this.Lspare = Lspare_;
      this.Qspare = Qspare_;
    });
    LY = $pkg.RawSockaddrInet4 = $newType(0, $kindStruct, "syscall.RawSockaddrInet4", true, "syscall", true, function(Len_, Family_, Port_, Addr_, Zero_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Len = 0;
        this.Family = 0;
        this.Port = 0;
        this.Addr = NQ.zero();
        this.Zero = OG.zero();
        return;
      }
      this.Len = Len_;
      this.Family = Family_;
      this.Port = Port_;
      this.Addr = Addr_;
      this.Zero = Zero_;
    });
    LZ = $pkg.RawSockaddrInet6 = $newType(0, $kindStruct, "syscall.RawSockaddrInet6", true, "syscall", true, function(Len_, Family_, Port_, Flowinfo_, Addr_, Scope_id_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Len = 0;
        this.Family = 0;
        this.Port = 0;
        this.Flowinfo = 0;
        this.Addr = NP.zero();
        this.Scope_id = 0;
        return;
      }
      this.Len = Len_;
      this.Family = Family_;
      this.Port = Port_;
      this.Flowinfo = Flowinfo_;
      this.Addr = Addr_;
      this.Scope_id = Scope_id_;
    });
    MA = $pkg.RawSockaddrUnix = $newType(0, $kindStruct, "syscall.RawSockaddrUnix", true, "syscall", true, function(Len_, Family_, Path_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Len = 0;
        this.Family = 0;
        this.Path = OV.zero();
        return;
      }
      this.Len = Len_;
      this.Family = Family_;
      this.Path = Path_;
    });
    MB = $pkg.RawSockaddrDatalink = $newType(0, $kindStruct, "syscall.RawSockaddrDatalink", true, "syscall", true, function(Len_, Family_, Index_, Type_, Nlen_, Alen_, Slen_, Data_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Len = 0;
        this.Family = 0;
        this.Index = 0;
        this.Type = 0;
        this.Nlen = 0;
        this.Alen = 0;
        this.Slen = 0;
        this.Data = OC.zero();
        return;
      }
      this.Len = Len_;
      this.Family = Family_;
      this.Index = Index_;
      this.Type = Type_;
      this.Nlen = Nlen_;
      this.Alen = Alen_;
      this.Slen = Slen_;
      this.Data = Data_;
    });
    MC = $pkg.RawSockaddr = $newType(0, $kindStruct, "syscall.RawSockaddr", true, "syscall", true, function(Len_, Family_, Data_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Len = 0;
        this.Family = 0;
        this.Data = OE.zero();
        return;
      }
      this.Len = Len_;
      this.Family = Family_;
      this.Data = Data_;
    });
    MD = $pkg.RawSockaddrAny = $newType(0, $kindStruct, "syscall.RawSockaddrAny", true, "syscall", true, function(Addr_, Pad_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Addr = new MC.ptr(0, 0, OE.zero());
        this.Pad = OF.zero();
        return;
      }
      this.Addr = Addr_;
      this.Pad = Pad_;
    });
    ME = $pkg._Socklen = $newType(4, $kindUint32, "syscall._Socklen", true, "syscall", false, null);
    MF = $pkg.Linger = $newType(0, $kindStruct, "syscall.Linger", true, "syscall", true, function(Onoff_, Linger_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Onoff = 0;
        this.Linger = 0;
        return;
      }
      this.Onoff = Onoff_;
      this.Linger = Linger_;
    });
    MG = $pkg.Iovec = $newType(0, $kindStruct, "syscall.Iovec", true, "syscall", true, function(Base_, Len_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Base = NN.nil;
        this.Len = new $Uint64(0, 0);
        return;
      }
      this.Base = Base_;
      this.Len = Len_;
    });
    MH = $pkg.IPMreq = $newType(0, $kindStruct, "syscall.IPMreq", true, "syscall", true, function(Multiaddr_, Interface_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Multiaddr = NQ.zero();
        this.Interface = NQ.zero();
        return;
      }
      this.Multiaddr = Multiaddr_;
      this.Interface = Interface_;
    });
    MI = $pkg.IPv6Mreq = $newType(0, $kindStruct, "syscall.IPv6Mreq", true, "syscall", true, function(Multiaddr_, Interface_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Multiaddr = NP.zero();
        this.Interface = 0;
        return;
      }
      this.Multiaddr = Multiaddr_;
      this.Interface = Interface_;
    });
    MJ = $pkg.Msghdr = $newType(0, $kindStruct, "syscall.Msghdr", true, "syscall", true, function(Name_, Namelen_, Pad_cgo_0_, Iov_, Iovlen_, Pad_cgo_1_, Control_, Controllen_, Flags_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Name = NN.nil;
        this.Namelen = 0;
        this.Pad_cgo_0 = NQ.zero();
        this.Iov = OY.nil;
        this.Iovlen = 0;
        this.Pad_cgo_1 = NQ.zero();
        this.Control = NN.nil;
        this.Controllen = 0;
        this.Flags = 0;
        return;
      }
      this.Name = Name_;
      this.Namelen = Namelen_;
      this.Pad_cgo_0 = Pad_cgo_0_;
      this.Iov = Iov_;
      this.Iovlen = Iovlen_;
      this.Pad_cgo_1 = Pad_cgo_1_;
      this.Control = Control_;
      this.Controllen = Controllen_;
      this.Flags = Flags_;
    });
    NE = $sliceType($Uint8);
    NG = $sliceType($String);
    NN = $ptrType($Uint8);
    NP = $arrayType($Uint8, 16);
    NQ = $arrayType($Uint8, 4);
    OB = $ptrType(EP);
    OC = $arrayType($Int8, 12);
    OE = $arrayType($Int8, 14);
    OF = $arrayType($Int8, 92);
    OG = $arrayType($Int8, 8);
    OQ = $arrayType($Uint8, 32);
    OU = $ptrType($Uint16);
    OV = $arrayType($Int8, 104);
    OW = $ptrType(ME);
    OY = $ptrType(MG);
    PC = $structType("syscall", [{
      prop: "addr",
      name: "addr",
      embedded: false,
      exported: false,
      typ: $Uintptr,
      tag: ""
    }, {
      prop: "len",
      name: "len",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "cap",
      name: "cap",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }]);
    PD = $ptrType($Int64);
    PE = $ptrType($Int32);
    PO = $ptrType(FK);
    PP = $mapType(NN, NE);
    PQ = $funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false);
    PR = $funcType([$Uintptr, $Uintptr], [$error], false);
    PS = $ptrType(FU);
    PT = $ptrType(FV);
    PU = $ptrType(FW);
    PV = $ptrType(LJ);
    PW = $arrayType($Int64, 2);
    QA = $ptrType(MJ);
    H = function() {
      $flushConsole = (function() {
        if (!((G.$length === 0))) {
          $global.console.log($externalize(($bytesToString(G)), $String));
          G = NE.nil;
        }
      });
    };
    I = function() {
      if (!F) {
        $global.console.error($externalize("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md", $String));
      }
      F = true;
    };
    J = function(j) {
      var j, k, l;
      k = $global.goPrintToConsole;
      if (!(k === undefined)) {
        k(j);
        return;
      }
      G = $appendSlice(G, j);
      while (true) {
        l = M(G, 10);
        if (l === -1) {
          break;
        }
        $global.console.log($externalize(($bytesToString($subslice(G, 0, l))), $String));
        G = $subslice(G, (l + 1 >> 0));
      }
    };
    L = function(j) {
      var j;
      U(1, ((j >>> 0)), 0, 0);
    };
    $pkg.Exit = L;
    M = function(j, k) {
      var j, k, l, m, n, o;
      l = j;
      m = 0;
      while (true) {
        if (!(m < l.$length)) {
          break;
        }
        n = m;
        o = ((m < 0 || m >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + m]);
        if (o === k) {
          return n;
        }
        m++;
      }
      return -1;
    };
    N = function() {
      var j, k, l, m, n, o;
      j = $global.process;
      if (j === undefined) {
        return NG.nil;
      }
      k = j.env;
      l = $global.Object.keys(k);
      m = $makeSlice(NG, $parseInt(l.length));
      n = 0;
      while (true) {
        if (!(n < $parseInt(l.length))) {
          break;
        }
        o = $internalize(l[n], $String);
        ((n < 0 || n >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + n] = o + "=" + $internalize(k[$externalize(o, $String)], $String));
        n = n + (1) >> 0;
      }
      return m;
    };
    T = function(j) {
      var j, k, $deferred;
      var $err = null;
      try {
        $deferred = [];
        $deferred.index = $curGoroutine.deferStack.length;
        $curGoroutine.deferStack.push($deferred);
        $deferred.push([(function() {
          $recover();
        }), []]);
        if (Q === null) {
          if (R) {
            return null;
          }
          R = true;
          k = $global.require;
          if (k === undefined) {
            $panic(new $String(""));
          }
          Q = k($externalize("syscall", $String));
        }
        return Q[$externalize(j, $String)];
      } catch (err) {
        $err = err;
        return null;
      } finally {
        $callDeferred($deferred, $err);
      }
    };
    U = function(j, k, l, m) {
      var aa, ab, ac, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      n = 0;
      o = 0;
      p = 0;
      q = T("Syscall");
      if (!(q === null)) {
        r = q(j, k, l, m);
        s = ((($parseInt(r[0]) >> 0) >>> 0));
        t = ((($parseInt(r[1]) >> 0) >>> 0));
        u = ((($parseInt(r[2]) >> 0) >>> 0));
        n = s;
        o = t;
        p = u;
        return [n, o, p];
      }
      if ((j === 4) && ((k === 1) || (k === 2))) {
        v = l;
        w = $makeSlice(NE, $parseInt(v.length));
        w.$array = v;
        J(w);
        x = (($parseInt(v.length) >>> 0));
        y = 0;
        z = 0;
        n = x;
        o = y;
        p = z;
        return [n, o, p];
      }
      if (j === 1) {
        B.Goexit();
      }
      I();
      aa = ((S >>> 0));
      ab = 0;
      ac = 13;
      n = aa;
      o = ab;
      p = ac;
      return [n, o, p];
    };
    $pkg.Syscall = U;
    V = function(j, k, l, m, n, o, p) {
      var aa, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      q = 0;
      r = 0;
      s = 0;
      t = T("Syscall6");
      if (!(t === null)) {
        u = t(j, k, l, m, n, o, p);
        v = ((($parseInt(u[0]) >> 0) >>> 0));
        w = ((($parseInt(u[1]) >> 0) >>> 0));
        x = ((($parseInt(u[2]) >> 0) >>> 0));
        q = v;
        r = w;
        s = x;
        return [q, r, s];
      }
      if (!((j === 202))) {
        I();
      }
      y = ((S >>> 0));
      z = 0;
      aa = 13;
      q = y;
      r = z;
      s = aa;
      return [q, r, s];
    };
    $pkg.Syscall6 = V;
    Z = function(j) {
      var j, k, l, m, n, o;
      k = new($global.Uint8Array)(j.length + 1 >> 0);
      l = (new NE($stringToBytes(j)));
      m = 0;
      while (true) {
        if (!(m < l.$length)) {
          break;
        }
        n = m;
        o = ((m < 0 || m >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + m]);
        if (o === 0) {
          return [NN.nil, new FL(22)];
        }
        k[n] = o;
        m++;
      }
      k[j.length] = 0;
      return [((k)), $ifaceNil];
    };
    $pkg.BytePtrFromString = Z;
    AT = function(j, k, l) {
      var j, k, l, m, n, o, p, q, r, s, t;
      m = new $Uint64(0, 0);
      n = false;
      if (j.$length < (((k + l >>> 0) >> 0))) {
        o = new $Uint64(0, 0);
        p = false;
        m = o;
        n = p;
        return [m, n];
      }
      if (false) {
        q = AU($subslice(j, k), l);
        r = true;
        m = q;
        n = r;
        return [m, n];
      }
      s = AV($subslice(j, k), l);
      t = true;
      m = s;
      n = t;
      return [m, n];
    };
    AU = function(j, k) {
      var aa, ab, ac, ad, ae, af, ag, ah, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      l = k;
      if (l === (1)) {
        return (new $Uint64(0, (0 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 0])));
      } else if (l === (2)) {
        $unused((1 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 1]));
        return (m = (new $Uint64(0, (1 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 1]))), n = $shiftLeft64((new $Uint64(0, (0 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 0]))), 8), new $Uint64(m.$high | n.$high, (m.$low | n.$low) >>> 0));
      } else if (l === (4)) {
        $unused((3 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 3]));
        return (o = (p = (q = (new $Uint64(0, (3 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 3]))), r = $shiftLeft64((new $Uint64(0, (2 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 2]))), 8), new $Uint64(q.$high | r.$high, (q.$low | r.$low) >>> 0)), s = $shiftLeft64((new $Uint64(0, (1 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 1]))), 16), new $Uint64(p.$high | s.$high, (p.$low | s.$low) >>> 0)), t = $shiftLeft64((new $Uint64(0, (0 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 0]))), 24), new $Uint64(o.$high | t.$high, (o.$low | t.$low) >>> 0));
      } else if (l === (8)) {
        $unused((7 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 7]));
        return (u = (v = (w = (x = (y = (z = (aa = (new $Uint64(0, (7 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 7]))), ab = $shiftLeft64((new $Uint64(0, (6 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 6]))), 8), new $Uint64(aa.$high | ab.$high, (aa.$low | ab.$low) >>> 0)), ac = $shiftLeft64((new $Uint64(0, (5 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 5]))), 16), new $Uint64(z.$high | ac.$high, (z.$low | ac.$low) >>> 0)), ad = $shiftLeft64((new $Uint64(0, (4 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 4]))), 24), new $Uint64(y.$high | ad.$high, (y.$low | ad.$low) >>> 0)), ae = $shiftLeft64((new $Uint64(0, (3 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 3]))), 32), new $Uint64(x.$high | ae.$high, (x.$low | ae.$low) >>> 0)), af = $shiftLeft64((new $Uint64(0, (2 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 2]))), 40), new $Uint64(w.$high | af.$high, (w.$low | af.$low) >>> 0)), ag = $shiftLeft64((new $Uint64(0, (1 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 1]))), 48), new $Uint64(v.$high | ag.$high, (v.$low | ag.$low) >>> 0)), ah = $shiftLeft64((new $Uint64(0, (0 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 0]))), 56), new $Uint64(u.$high | ah.$high, (u.$low | ah.$low) >>> 0));
      } else {
        $panic(new $String("syscall: readInt with unsupported size"));
      }
    };
    AV = function(j, k) {
      var aa, ab, ac, ad, ae, af, ag, ah, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      l = k;
      if (l === (1)) {
        return (new $Uint64(0, (0 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 0])));
      } else if (l === (2)) {
        $unused((1 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 1]));
        return (m = (new $Uint64(0, (0 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 0]))), n = $shiftLeft64((new $Uint64(0, (1 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 1]))), 8), new $Uint64(m.$high | n.$high, (m.$low | n.$low) >>> 0));
      } else if (l === (4)) {
        $unused((3 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 3]));
        return (o = (p = (q = (new $Uint64(0, (0 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 0]))), r = $shiftLeft64((new $Uint64(0, (1 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 1]))), 8), new $Uint64(q.$high | r.$high, (q.$low | r.$low) >>> 0)), s = $shiftLeft64((new $Uint64(0, (2 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 2]))), 16), new $Uint64(p.$high | s.$high, (p.$low | s.$low) >>> 0)), t = $shiftLeft64((new $Uint64(0, (3 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 3]))), 24), new $Uint64(o.$high | t.$high, (o.$low | t.$low) >>> 0));
      } else if (l === (8)) {
        $unused((7 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 7]));
        return (u = (v = (w = (x = (y = (z = (aa = (new $Uint64(0, (0 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 0]))), ab = $shiftLeft64((new $Uint64(0, (1 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 1]))), 8), new $Uint64(aa.$high | ab.$high, (aa.$low | ab.$low) >>> 0)), ac = $shiftLeft64((new $Uint64(0, (2 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 2]))), 16), new $Uint64(z.$high | ac.$high, (z.$low | ac.$low) >>> 0)), ad = $shiftLeft64((new $Uint64(0, (3 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 3]))), 24), new $Uint64(y.$high | ad.$high, (y.$low | ad.$low) >>> 0)), ae = $shiftLeft64((new $Uint64(0, (4 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 4]))), 32), new $Uint64(x.$high | ae.$high, (x.$low | ae.$low) >>> 0)), af = $shiftLeft64((new $Uint64(0, (5 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 5]))), 40), new $Uint64(w.$high | af.$high, (w.$low | af.$low) >>> 0)), ag = $shiftLeft64((new $Uint64(0, (6 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 6]))), 48), new $Uint64(v.$high | ag.$high, (v.$low | ag.$low) >>> 0)), ah = $shiftLeft64((new $Uint64(0, (7 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 7]))), 56), new $Uint64(u.$high | ah.$high, (u.$low | ah.$low) >>> 0));
      } else {
        $panic(new $String("syscall: readInt with unsupported size"));
      }
    };
    AW = function(j, k, l) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      m = 0;
      n = 0;
      o = NG.nil;
      p = j.$length;
      n = 0;
      while (true) {
        if (!(!((k === 0)) && j.$length > 0)) {
          break;
        }
        q = ES(j);
        r = q[0];
        s = q[1];
        if (!s || (t = (new $Uint64(0, j.$length)), (r.$high > t.$high || (r.$high === t.$high && r.$low > t.$low)))) {
          u = p;
          v = n;
          w = l;
          m = u;
          n = v;
          o = w;
          return [m, n, o];
        }
        x = $subslice(j, 0, $flatten64(r));
        j = $subslice(j, $flatten64(r));
        y = ER(x);
        z = y[0];
        s = y[1];
        if (!s) {
          break;
        }
        if ((z.$high === 0 && z.$low === 0)) {
          continue;
        }
        aa = ET(x);
        ab = aa[0];
        s = aa[1];
        if (!s || (ac = new $Uint64(0 + ab.$high, 21 + ab.$low), ad = (new $Uint64(0, x.$length)), (ac.$high > ad.$high || (ac.$high === ad.$high && ac.$low > ad.$low)))) {
          break;
        }
        ae = $subslice(x, 21, $flatten64(new $Uint64(0 + ab.$high, 21 + ab.$low)));
        af = ae;
        ag = 0;
        while (true) {
          if (!(ag < af.$length)) {
            break;
          }
          ah = ag;
          ai = ((ag < 0 || ag >= af.$length) ? ($throwRuntimeError("index out of range"), undefined) : af.$array[af.$offset + ag]);
          if (ai === 0) {
            ae = $subslice(ae, 0, ah);
            break;
          }
          ag++;
        }
        if (($bytesToString(ae)) === "." || ($bytesToString(ae)) === "..") {
          continue;
        }
        k = k - (1) >> 0;
        n = n + (1) >> 0;
        l = $append(l, ($bytesToString(ae)));
      }
      aj = p - j.$length >> 0;
      ak = n;
      al = l;
      m = aj;
      n = ak;
      o = al;
      return [m, n, o];
    };
    $pkg.ParseDirent = AW;
    BO = function(j) {
      var j;
      HR(j, 2, 1);
    };
    $pkg.CloseOnExec = BO;
    BP = function(j, k) {
      var j, k, l, m, n, o;
      l = $ifaceNil;
      m = HR(j, 3, 0);
      n = m[0];
      l = m[1];
      if (!($interfaceIsEqual(l, $ifaceNil))) {
        l = l;
        return l;
      }
      if (k) {
        n = n | (4);
      } else {
        n = (n & ~(4)) >> 0;
      }
      o = HR(j, 4, n);
      l = o[1];
      l = l;
      return l;
    };
    $pkg.SetNonblock = BP;
    CE = function(j, k) {
      var j, k;
    };
    CF = function(j, k) {
      var j, k;
    };
    CK = function(j) {
      var j, k;
      k = 8;
      if (true) {
        k = 4;
      } else if (false) {
        k = 8;
      } else if (false) {
        if (CI === "amd64") {
          k = 8;
        }
      }
      if (j === 0) {
        return k;
      }
      return (((j + k >> 0) - 1 >> 0)) & (~((k - 1 >> 0)) >> 0);
    };
    DH = function(j) {
      var j;
      if (j < 0) {
        return "-" + DI(((-j >>> 0)));
      }
      return DI(((j >>> 0)));
    };
    DI = function(j) {
      var j, k, l, m, n;
      k = OQ.zero();
      l = 31;
      while (true) {
        if (!(j >= 10)) {
          break;
        }((l < 0 || l >= k.length) ? ($throwRuntimeError("index out of range"), undefined) : k[l] = ((((m = j % 10, m === m ? m : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
        l = l - (1) >> 0;
        j = (n = j / (10), (n === n && n !== 1 / 0 && n !== -1 / 0) ? n >>> 0 : $throwRuntimeError("integer divide by zero"));
      }((l < 0 || l >= k.length) ? ($throwRuntimeError("index out of range"), undefined) : k[l] = (((j + 48 >>> 0) << 24 >>> 24)));
      return ($bytesToString($subslice(new NE(k), l)));
    };
    LJ.ptr.prototype.Unix = function() {
      var j, k, l, m, n;
      j = new $Int64(0, 0);
      k = new $Int64(0, 0);
      l = this;
      m = (l.Sec);
      n = (l.Nsec);
      j = m;
      k = n;
      return [j, k];
    };
    LJ.prototype.Unix = function() {
      return this.$val.Unix();
    };
    LJ.ptr.prototype.Nano = function() {
      var j, k, l;
      j = this;
      return (k = $mul64((j.Sec), new $Int64(0, 1000000000)), l = (j.Nsec), new $Int64(k.$high + l.$high, k.$low + l.$low));
    };
    LJ.prototype.Nano = function() {
      return this.$val.Nano();
    };
    DQ = function(j, k) {
      var j, k, l, m, n, o;
      l = 0;
      m = $ifaceNil;
      n = ((new Uint8Array(8)));
      o = IQ(j, k, n);
      l = o[0];
      m = o[1];
      return [l, m];
    };
    $pkg.ReadDirent = DQ;
    FU.ptr.prototype.sockaddr = function() {
      var j, k, l, m, n, o, p, q, r;
      j = this;
      if (j.Port < 0 || j.Port > 65535) {
        return [0, 0, new FL(22)];
      }
      j.raw.Len = 16;
      j.raw.Family = 2;
      l = (((k = j.raw, (k.$ptr_Port || (k.$ptr_Port = new OU(function() {
        return this.$target.Port;
      }, function($v) {
        this.$target.Port = $v;
      }, k))))));
      l.nilCheck, l[0] = (((j.Port >> 8 >> 0) << 24 >>> 24));
      l.nilCheck, l[1] = ((j.Port << 24 >>> 24));
      m = 0;
      while (true) {
        if (!(m < 4)) {
          break;
        }(o = j.raw.Addr, ((m < 0 || m >= o.length) ? ($throwRuntimeError("index out of range"), undefined) : o[m] = (n = j.Addr, ((m < 0 || m >= n.length) ? ($throwRuntimeError("index out of range"), undefined) : n[m]))));
        m = m + (1) >> 0;
      }
      p = new Uint8Array(16);
      return [(p), ((j.raw.Len >>> 0)), $ifaceNil];
    };
    FU.prototype.sockaddr = function() {
      return this.$val.sockaddr();
    };
    FV.ptr.prototype.sockaddr = function() {
      var j, k, l, m, n, o, p, q, r;
      j = this;
      if (j.Port < 0 || j.Port > 65535) {
        return [0, 0, new FL(22)];
      }
      j.raw.Len = 28;
      j.raw.Family = 30;
      l = (((k = j.raw, (k.$ptr_Port || (k.$ptr_Port = new OU(function() {
        return this.$target.Port;
      }, function($v) {
        this.$target.Port = $v;
      }, k))))));
      l.nilCheck, l[0] = (((j.Port >> 8 >> 0) << 24 >>> 24));
      l.nilCheck, l[1] = ((j.Port << 24 >>> 24));
      j.raw.Scope_id = j.ZoneId;
      m = 0;
      while (true) {
        if (!(m < 16)) {
          break;
        }(o = j.raw.Addr, ((m < 0 || m >= o.length) ? ($throwRuntimeError("index out of range"), undefined) : o[m] = (n = j.Addr, ((m < 0 || m >= n.length) ? ($throwRuntimeError("index out of range"), undefined) : n[m]))));
        m = m + (1) >> 0;
      }
      p = new Uint8Array(28);
      return [(p), ((j.raw.Len >>> 0)), $ifaceNil];
    };
    FV.prototype.sockaddr = function() {
      return this.$val.sockaddr();
    };
    FW.ptr.prototype.sockaddr = function() {
      var j, k, l, m, n, o, p, q;
      j = this;
      k = j.Name;
      l = k.length;
      if (l >= 104 || (l === 0)) {
        return [0, 0, new FL(22)];
      }
      j.raw.Len = (((3 + l >> 0) << 24 >>> 24));
      j.raw.Family = 1;
      m = 0;
      while (true) {
        if (!(m < l)) {
          break;
        }(n = j.raw.Path, ((m < 0 || m >= n.length) ? ($throwRuntimeError("index out of range"), undefined) : n[m] = ((k.charCodeAt(m) << 24 >> 24))));
        m = m + (1) >> 0;
      }
      o = new Uint8Array(106);
      return [(o), ((j.raw.Len >>> 0)), $ifaceNil];
    };
    FW.prototype.sockaddr = function() {
      return this.$val.sockaddr();
    };
    EP.ptr.prototype.sockaddr = function() {
      var j, k, l, m, n, o, p;
      j = this;
      if (j.Index === 0) {
        return [0, 0, new FL(22)];
      }
      j.raw.Len = j.Len;
      j.raw.Family = 18;
      j.raw.Index = j.Index;
      j.raw.Type = j.Type;
      j.raw.Nlen = j.Nlen;
      j.raw.Alen = j.Alen;
      j.raw.Slen = j.Slen;
      k = 0;
      while (true) {
        if (!(k < 12)) {
          break;
        }(m = j.raw.Data, ((k < 0 || k >= m.length) ? ($throwRuntimeError("index out of range"), undefined) : m[k] = (l = j.Data, ((k < 0 || k >= l.length) ? ($throwRuntimeError("index out of range"), undefined) : l[k]))));
        k = k + (1) >> 0;
      }
      n = new Uint8Array(20);
      return [(n), 20, $ifaceNil];
    };
    EP.prototype.sockaddr = function() {
      return this.$val.sockaddr();
    };
    DT = function(j) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      k = j.Addr.Family;
      if (k === (18)) {
        o = new Uint8Array(108);
        r = ((l = (o), m = new MB.ptr(0, 0, 0, 0, 0, 0, 0, OC.zero()), n = new DataView(l.buffer, l.byteOffset), m.Len = n.getUint8(0, true), m.Family = n.getUint8(1, true), m.Index = n.getUint16(2, true), m.Type = n.getUint8(4, true), m.Nlen = n.getUint8(5, true), m.Alen = n.getUint8(6, true), m.Slen = n.getUint8(7, true), m.Data = new($nativeArray($kindInt8))(l.buffer, $min(l.byteOffset + 8, l.buffer.byteLength)), m));
        p = j, q = new DataView(o.buffer, o.byteOffset), p.Addr.Len = q.getUint8(0, true), p.Addr.Family = q.getUint8(1, true), p.Addr.Data = new($nativeArray($kindInt8))(o.buffer, $min(o.byteOffset + 2, o.buffer.byteLength)), p.Pad = new($nativeArray($kindInt8))(o.buffer, $min(o.byteOffset + 16, o.buffer.byteLength));
        s = new EP.ptr(0, 0, 0, 0, 0, 0, 0, OC.zero(), new MB.ptr(0, 0, 0, 0, 0, 0, 0, OC.zero()));
        s.Len = r.Len;
        s.Family = r.Family;
        s.Index = r.Index;
        s.Type = r.Type;
        s.Nlen = r.Nlen;
        s.Alen = r.Alen;
        s.Slen = r.Slen;
        t = 0;
        while (true) {
          if (!(t < 12)) {
            break;
          }(v = s.Data, ((t < 0 || t >= v.length) ? ($throwRuntimeError("index out of range"), undefined) : v[t] = (u = r.Data, ((t < 0 || t >= u.length) ? ($throwRuntimeError("index out of range"), undefined) : u[t]))));
          t = t + (1) >> 0;
        }
        return [s, $ifaceNil];
      } else if (k === (1)) {
        z = new Uint8Array(108);
        ac = ((w = (z), x = new MA.ptr(0, 0, OV.zero()), y = new DataView(w.buffer, w.byteOffset), x.Len = y.getUint8(0, true), x.Family = y.getUint8(1, true), x.Path = new($nativeArray($kindInt8))(w.buffer, $min(w.byteOffset + 2, w.buffer.byteLength)), x));
        aa = j, ab = new DataView(z.buffer, z.byteOffset), aa.Addr.Len = ab.getUint8(0, true), aa.Addr.Family = ab.getUint8(1, true), aa.Addr.Data = new($nativeArray($kindInt8))(z.buffer, $min(z.byteOffset + 2, z.buffer.byteLength)), aa.Pad = new($nativeArray($kindInt8))(z.buffer, $min(z.byteOffset + 16, z.buffer.byteLength));
        if (ac.Len < 2 || ac.Len > 106) {
          return [$ifaceNil, new FL(22)];
        }
        ad = new FW.ptr("", new MA.ptr(0, 0, OV.zero()));
        ae = ((ac.Len >> 0)) - 2 >> 0;
        af = 0;
        while (true) {
          if (!(af < ae)) {
            break;
          }
          if ((ag = ac.Path, ((af < 0 || af >= ag.length) ? ($throwRuntimeError("index out of range"), undefined) : ag[af])) === 0) {
            ae = af;
            break;
          }
          af = af + (1) >> 0;
        }
        ah = $subslice(new NE((($sliceToArray(new NE(ac.Path))))), 0, ae);
        ad.Name = ($bytesToString(ah));
        return [ad, $ifaceNil];
      } else if (k === (2)) {
        al = new Uint8Array(108);
        ao = ((ai = (al), aj = new LY.ptr(0, 0, 0, NQ.zero(), OG.zero()), ak = new DataView(ai.buffer, ai.byteOffset), aj.Len = ak.getUint8(0, true), aj.Family = ak.getUint8(1, true), aj.Port = ak.getUint16(2, true), aj.Addr = new($nativeArray($kindUint8))(ai.buffer, $min(ai.byteOffset + 4, ai.buffer.byteLength)), aj.Zero = new($nativeArray($kindInt8))(ai.buffer, $min(ai.byteOffset + 8, ai.buffer.byteLength)), aj));
        am = j, an = new DataView(al.buffer, al.byteOffset), am.Addr.Len = an.getUint8(0, true), am.Addr.Family = an.getUint8(1, true), am.Addr.Data = new($nativeArray($kindInt8))(al.buffer, $min(al.byteOffset + 2, al.buffer.byteLength)), am.Pad = new($nativeArray($kindInt8))(al.buffer, $min(al.byteOffset + 16, al.buffer.byteLength));
        ap = new FU.ptr(0, NQ.zero(), new LY.ptr(0, 0, 0, NQ.zero(), OG.zero()));
        aq = (((ao.$ptr_Port || (ao.$ptr_Port = new OU(function() {
          return this.$target.Port;
        }, function($v) {
          this.$target.Port = $v;
        }, ao)))));
        ap.Port = ((((aq.nilCheck, aq[0]) >> 0)) << 8 >> 0) + (((aq.nilCheck, aq[1]) >> 0)) >> 0;
        ar = 0;
        while (true) {
          if (!(ar < 4)) {
            break;
          }(at = ap.Addr, ((ar < 0 || ar >= at.length) ? ($throwRuntimeError("index out of range"), undefined) : at[ar] = (as = ao.Addr, ((ar < 0 || ar >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[ar]))));
          ar = ar + (1) >> 0;
        }
        return [ap, $ifaceNil];
      } else if (k === (30)) {
        ax = new Uint8Array(108);
        ba = ((au = (ax), av = new LZ.ptr(0, 0, 0, 0, NP.zero(), 0), aw = new DataView(au.buffer, au.byteOffset), av.Len = aw.getUint8(0, true), av.Family = aw.getUint8(1, true), av.Port = aw.getUint16(2, true), av.Flowinfo = aw.getUint32(4, true), av.Addr = new($nativeArray($kindUint8))(au.buffer, $min(au.byteOffset + 8, au.buffer.byteLength)), av.Scope_id = aw.getUint32(24, true), av));
        ay = j, az = new DataView(ax.buffer, ax.byteOffset), ay.Addr.Len = az.getUint8(0, true), ay.Addr.Family = az.getUint8(1, true), ay.Addr.Data = new($nativeArray($kindInt8))(ax.buffer, $min(ax.byteOffset + 2, ax.buffer.byteLength)), ay.Pad = new($nativeArray($kindInt8))(ax.buffer, $min(ax.byteOffset + 16, ax.buffer.byteLength));
        bb = new FV.ptr(0, 0, NP.zero(), new LZ.ptr(0, 0, 0, 0, NP.zero(), 0));
        bc = (((ba.$ptr_Port || (ba.$ptr_Port = new OU(function() {
          return this.$target.Port;
        }, function($v) {
          this.$target.Port = $v;
        }, ba)))));
        bb.Port = ((((bc.nilCheck, bc[0]) >> 0)) << 8 >> 0) + (((bc.nilCheck, bc[1]) >> 0)) >> 0;
        bb.ZoneId = ba.Scope_id;
        bd = 0;
        while (true) {
          if (!(bd < 16)) {
            break;
          }(bf = bb.Addr, ((bd < 0 || bd >= bf.length) ? ($throwRuntimeError("index out of range"), undefined) : bf[bd] = (be = ba.Addr, ((bd < 0 || bd >= be.length) ? ($throwRuntimeError("index out of range"), undefined) : be[bd]))));
          bd = bd + (1) >> 0;
        }
        return [bb, $ifaceNil];
      }
      return [$ifaceNil, new FL(47)];
    };
    DU = function(j) {
      var j, k, l, m, n, o, p, q, r, s, t, u;
      k = 0;
      l = $ifaceNil;
      m = $ifaceNil;
      n = new MD.ptr(new MC.ptr(0, 0, OE.zero()), OF.zero());
      o = 108;
      p = GZ(j, n, (q || (q = new OW(function() {
        return o;
      }, function($v) {
        o = $v;
      }))));
      k = p[0];
      m = p[1];
      if (!($interfaceIsEqual(m, $ifaceNil))) {
        return [k, l, m];
      }
      if (true && (o === 0)) {
        IC(k);
        r = 0;
        s = $ifaceNil;
        t = new FL(53);
        k = r;
        l = s;
        m = t;
        return [k, l, m];
      }
      u = DT(n);
      l = u[0];
      m = u[1];
      if (!($interfaceIsEqual(m, $ifaceNil))) {
        IC(k);
        k = 0;
      }
      return [k, l, m];
    };
    $pkg.Accept = DU;
    EC = function(j, k, l, m) {
      var aa, ab, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      n = 0;
      o = 0;
      p = 0;
      q = $ifaceNil;
      r = $ifaceNil;
      s = new MJ.ptr(NN.nil, 0, NQ.zero(), OY.nil, 0, NQ.zero(), NN.nil, 0, 0);
      t = new MD.ptr(new MC.ptr(0, 0, OE.zero()), OF.zero());
      u = new Uint8Array(108);
      s.Name = ((u));
      v = t, w = new DataView(u.buffer, u.byteOffset), v.Addr.Len = w.getUint8(0, true), v.Addr.Family = w.getUint8(1, true), v.Addr.Data = new($nativeArray($kindInt8))(u.buffer, $min(u.byteOffset + 2, u.buffer.byteLength)), v.Pad = new($nativeArray($kindInt8))(u.buffer, $min(u.byteOffset + 16, u.buffer.byteLength));
      s.Namelen = 108;
      x = new MG.ptr(NN.nil, new $Uint64(0, 0));
      if (k.$length > 0) {
        x.Base = (($sliceToArray(k)));
        x.SetLen(k.$length);
      }
      y = 0;
      if (l.$length > 0) {
        if (k.$length === 0) {
          x.Base = (z || (z = new NN(function() {
            return y;
          }, function($v) {
            y = $v;
          })));
          x.SetLen(1);
        }
        s.Control = (($sliceToArray(l)));
        s.SetControllen(l.$length);
      }
      s.Iov = x;
      s.Iovlen = 1;
      aa = HL(j, s, m);
      n = aa[0];
      r = aa[1];
      if (!($interfaceIsEqual(r, $ifaceNil))) {
        return [n, o, p, q, r];
      }
      o = ((s.Controllen >> 0));
      p = ((s.Flags >> 0));
      if (!((t.Addr.Family === 0))) {
        ab = DT(t);
        q = ab[0];
        r = ab[1];
      }
      return [n, o, p, q, r];
    };
    $pkg.Recvmsg = EC;
    EE = function(j, k, l, m, n) {
      var aa, ab, ac, ad, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            o = [o];
            p = [p];
            q = [q];
            r = 0;
            s = $ifaceNil;
            t = 0;
            u = 0;
            if (!($interfaceIsEqual(m, $ifaceNil))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            w = m.sockaddr();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              w = w.$blk();
            }
            if (w && w.$blk !== undefined) {
              break s;
            }
            v = w;
            t = v[0];
            u = v[1];
            s = v[2];
            if (!($interfaceIsEqual(s, $ifaceNil))) {
              x = 0;
              y = s;
              r = x;
              s = y;
              $s = -1;
              return [r, s];
            }
          case 2:
            q[0] = new MJ.ptr(NN.nil, 0, NQ.zero(), OY.nil, 0, NQ.zero(), NN.nil, 0, 0);
            q[0].Name = ((t));
            q[0].Namelen = ((u >>> 0));
            p[0] = new MG.ptr(NN.nil, new $Uint64(0, 0));
            if (k.$length > 0) {
              p[0].Base = (($sliceToArray(k)));
              p[0].SetLen(k.$length);
            }
            o[0] = 0;
            if (l.$length > 0) {
              if (k.$length === 0) {
                p[0].Base = (o.$ptr || (o.$ptr = new NN(function() {
                  return this.$target[0];
                }, function($v) {
                  this.$target[0] = $v;
                }, o)));
                p[0].SetLen(1);
              }
              q[0].Control = (($sliceToArray(l)));
              q[0].SetControllen(l.$length);
            }
            q[0].Iov = p[0];
            q[0].Iovlen = 1;
            z = HM(j, q[0], n);
            r = z[0];
            s = z[1];
            if (!($interfaceIsEqual(s, $ifaceNil))) {
              aa = 0;
              ab = s;
              r = aa;
              s = ab;
              $s = -1;
              return [r, s];
            }
            if (l.$length > 0 && (k.$length === 0)) {
              r = 0;
            }
            ac = r;
            ad = $ifaceNil;
            r = ac;
            s = ad;
            $s = -1;
            return [r, s];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: EE
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.SendmsgN = EE;
    ER = function(j) {
      var j;
      return AT(j, 0, 8);
    };
    ES = function(j) {
      var j;
      return AT(j, 16, 2);
    };
    ET = function(j) {
      var j;
      return AT(j, 18, 2);
    };
    MG.ptr.prototype.SetLen = function(j) {
      var j, k;
      k = this;
      k.Len = (new $Uint64(0, j));
    };
    MG.prototype.SetLen = function(j) {
      return this.$val.SetLen(j);
    };
    MJ.ptr.prototype.SetControllen = function(j) {
      var j, k;
      k = this;
      k.Controllen = ((j >>> 0));
    };
    MJ.prototype.SetControllen = function(j) {
      return this.$val.SetControllen(j);
    };
    FK.ptr.prototype.Mmap = function(j, k, l, m, n) {
      var aa, ab, ac, ad, ae, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              o = [o];
              p = NE.nil;
              q = $ifaceNil;
              r = this;
              if (l <= 0) {
                s = NE.nil;
                t = new FL(22);
                p = s;
                q = t;
                $s = -1;
                return [p, q];
              }
              v = r.mmap(0, ((l >>> 0)), m, n, j, k);
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                v = v.$blk();
              }
              if (v && v.$blk !== undefined) {
                break s;
              }
              u = v;
              w = u[0];
              x = u[1];
              if (!($interfaceIsEqual(x, $ifaceNil))) {
                y = NE.nil;
                z = x;
                p = y;
                q = z;
                $s = -1;
                return [p, q];
              }
              o[0] = new PC.ptr(w, l, l);
              aa = o[0];
              ab = $indexPtr(aa.$array, aa.$offset + (aa.$capacity - 1 >> 0), NN);
              $r = r.Mutex.Lock();
              $s = 2;
            case 2:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              $deferred.push([$methodVal(r.Mutex, "Unlock"), []]);
              ac = ab;
              (r.active || $throwRuntimeError("assignment to entry in nil map"))[NN.keyFor(ac)] = {
                k: ac,
                v: aa
              };
              ad = aa;
              ae = $ifaceNil;
              p = ad;
              q = ae;
              $s = -1;
              return [p, q];
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
      } finally {
        $callDeferred($deferred, $err);
        if (!$curGoroutine.asleep) {
          return [p, q];
        }
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: FK.ptr.prototype.Mmap
            };
          }
          $f.aa = aa;
          $f.ab = ab;
          $f.ac = ac;
          $f.ad = ad;
          $f.ae = ae;
          $f.j = j;
          $f.k = k;
          $f.l = l;
          $f.m = m;
          $f.n = n;
          $f.o = o;
          $f.p = p;
          $f.q = q;
          $f.r = r;
          $f.s = s;
          $f.t = t;
          $f.u = u;
          $f.v = v;
          $f.w = w;
          $f.x = x;
          $f.y = y;
          $f.z = z;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    FK.prototype.Mmap = function(j, k, l, m, n) {
      return this.$val.Mmap(j, k, l, m, n);
    };
    FK.ptr.prototype.Munmap = function(j) {
      var j, k, l, m, n, o, p, q, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              k = $ifaceNil;
              l = this;
              if ((j.$length === 0) || !((j.$length === j.$capacity))) {
                k = new FL(22);
                $s = -1;
                return k;
              }
              m = $indexPtr(j.$array, j.$offset + (j.$capacity - 1 >> 0), NN);
              $r = l.Mutex.Lock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              $deferred.push([$methodVal(l.Mutex, "Unlock"), []]);
              o = (n = l.active[NN.keyFor(m)], n !== undefined ? n.v : NE.nil);
              if (o === NE.nil || !($indexPtr(o.$array, o.$offset + 0, NN) === $indexPtr(j.$array, j.$offset + 0, NN))) {
                k = new FL(22);
                $s = -1;
                return k;
              }
              p = l.munmap((($sliceToArray(o))), ((o.$length >>> 0)));
              $s = 2;
            case 2:
              if ($c) {
                $c = false;
                p = p.$blk();
              }
              if (p && p.$blk !== undefined) {
                break s;
              }
              q = p;
              if (!($interfaceIsEqual(q, $ifaceNil))) {
                k = q;
                $s = -1;
                return k;
              }
              delete l.active[NN.keyFor(m)];
              k = $ifaceNil;
              $s = -1;
              return k;
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
      } finally {
        $callDeferred($deferred, $err);
        if (!$curGoroutine.asleep) {
          return k;
        }
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: FK.ptr.prototype.Munmap
            };
          }
          $f.j = j;
          $f.k = k;
          $f.l = l;
          $f.m = m;
          $f.n = n;
          $f.o = o;
          $f.p = p;
          $f.q = q;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    FK.prototype.Munmap = function(j) {
      return this.$val.Munmap(j);
    };
    FL.prototype.Error = function() {
      var j, k;
      j = this.$val;
      if (0 <= ((j >> 0)) && ((j >> 0)) < 106) {
        k = ((j < 0 || j >= GU.length) ? ($throwRuntimeError("index out of range"), undefined) : GU[j]);
        if (!(k === "")) {
          return k;
        }
      }
      return "errno " + DH(((j >> 0)));
    };
    $ptrType(FL).prototype.Error = function() {
      return new FL(this.$get()).Error();
    };
    FL.prototype.Temporary = function() {
      var j;
      j = this.$val;
      return (j === 4) || (j === 24) || new FL(j).Timeout();
    };
    $ptrType(FL).prototype.Temporary = function() {
      return new FL(this.$get()).Temporary();
    };
    FL.prototype.Timeout = function() {
      var j;
      j = this.$val;
      return (j === 35) || (j === 35) || (j === 60);
    };
    $ptrType(FL).prototype.Timeout = function() {
      return new FL(this.$get()).Timeout();
    };
    FP = function(j) {
      var j, k;
      k = j;
      if (k === (0)) {
        return $ifaceNil;
      } else if (k === (35)) {
        return FM;
      } else if (k === (22)) {
        return FN;
      } else if (k === (2)) {
        return FO;
      }
      return new FL(j);
    };
    FR = function(j, k) {
      var j, k, l, m, n;
      l = 0;
      m = $ifaceNil;
      n = JW(j, k);
      l = n[0];
      m = n[1];
      if (false) {
        if (l > 0) {
          E.WriteRange(($sliceToArray(k)), l);
        }
        if ($interfaceIsEqual(m, $ifaceNil)) {
          E.Acquire(((NM || (NM = new PD(function() {
            return GP;
          }, function($v) {
            GP = $v;
          })))));
        }
      }
      if (false && l > 0) {
        CF(($sliceToArray(k)), l);
      }
      return [l, m];
    };
    $pkg.Read = FR;
    FS = function(j, k) {
      var j, k, l, m, n;
      l = 0;
      m = $ifaceNil;
      if (false) {
        E.ReleaseMerge(((NM || (NM = new PD(function() {
          return GP;
        }, function($v) {
          GP = $v;
        })))));
      }
      n = KZ(j, k);
      l = n[0];
      m = n[1];
      if (false && l > 0) {
        E.ReadRange(($sliceToArray(k)), l);
      }
      if (false && l > 0) {
        CE(($sliceToArray(k)), l);
      }
      return [l, m];
    };
    $pkg.Write = FS;
    GB = function(j, k, l) {
      var j, k, l, m, n, o, p, q, r, s, t;
      m = 0;
      n = $ifaceNil;
      o = $ifaceNil;
      p = new MD.ptr(new MC.ptr(0, 0, OE.zero()), OF.zero());
      q = 108;
      r = HJ(j, k, l, p, (s || (s = new OW(function() {
        return q;
      }, function($v) {
        q = $v;
      }))));
      m = r[0];
      o = r[1];
      if (!($interfaceIsEqual(o, $ifaceNil))) {
        return [m, n, o];
      }
      if (!((p.Addr.Family === 0))) {
        t = DT(p);
        n = t[0];
        o = t[1];
      }
      return [m, n, o];
    };
    $pkg.Recvfrom = GB;
    GC = function(j, k, l, m) {
      var j, k, l, m, n, o, p, q, r, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            n = $ifaceNil;
            p = m.sockaddr();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            o = p;
            q = o[0];
            r = o[1];
            n = o[2];
            if (!($interfaceIsEqual(n, $ifaceNil))) {
              n = n;
              $s = -1;
              return n;
            }
            n = HK(j, k, l, q, r);
            $s = -1;
            return n;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: GC
        };
      }
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Sendto = GC;
    GD = function(j, k, l, m) {
      var j, k, l, m, n, o;
      n = $ifaceNil;
      n = HE(j, k, l, ((o || (o = new NN(function() {
        return m;
      }, function($v) {
        m = $v;
      })))), 1);
      return n;
    };
    $pkg.SetsockoptByte = GD;
    GE = function(j, k, l, m) {
      var j, k, l, m, n, o, p;
      n = $ifaceNil;
      o = ((m >> 0));
      n = HE(j, k, l, ((p || (p = new PE(function() {
        return o;
      }, function($v) {
        o = $v;
      })))), 4);
      return n;
    };
    $pkg.SetsockoptInt = GE;
    GF = function(j, k, l, m) {
      var j, k, l, m, n;
      n = $ifaceNil;
      n = HE(j, k, l, ($sliceToArray(new NE(m))), 4);
      return n;
    };
    $pkg.SetsockoptInet4Addr = GF;
    GG = function(j, k, l, m) {
      var j, k, l, m, n, o, p, q;
      n = $ifaceNil;
      o = new Uint8Array(8);
      n = HE(j, k, l, (o), 8);
      p = m, q = new DataView(o.buffer, o.byteOffset), p.Multiaddr = new($nativeArray($kindUint8))(o.buffer, $min(o.byteOffset + 0, o.buffer.byteLength)), p.Interface = new($nativeArray($kindUint8))(o.buffer, $min(o.byteOffset + 4, o.buffer.byteLength));
      return n;
    };
    $pkg.SetsockoptIPMreq = GG;
    GH = function(j, k, l, m) {
      var j, k, l, m, n, o, p, q;
      n = $ifaceNil;
      o = new Uint8Array(20);
      n = HE(j, k, l, (o), 20);
      p = m, q = new DataView(o.buffer, o.byteOffset), p.Multiaddr = new($nativeArray($kindUint8))(o.buffer, $min(o.byteOffset + 0, o.buffer.byteLength)), p.Interface = q.getUint32(16, true);
      return n;
    };
    $pkg.SetsockoptIPv6Mreq = GH;
    GJ = function(j, k, l, m) {
      var j, k, l, m, n, o, p, q;
      n = $ifaceNil;
      o = new Uint8Array(8);
      n = HE(j, k, l, (o), 8);
      p = m, q = new DataView(o.buffer, o.byteOffset), p.Onoff = q.getInt32(0, true), p.Linger = q.getInt32(4, true);
      return n;
    };
    $pkg.SetsockoptLinger = GJ;
    GZ = function(j, k, l) {
      var j, k, l, m, n, o, p, q, r, s, t;
      m = 0;
      n = $ifaceNil;
      p = new Uint8Array(108);
      o = U(30, ((j >>> 0)), ((p)), ((l)));
      q = k, r = new DataView(p.buffer, p.byteOffset), q.Addr.Len = r.getUint8(0, true), q.Addr.Family = r.getUint8(1, true), q.Addr.Data = new($nativeArray($kindInt8))(p.buffer, $min(p.byteOffset + 2, p.buffer.byteLength)), q.Pad = new($nativeArray($kindInt8))(p.buffer, $min(p.byteOffset + 16, p.buffer.byteLength));
      s = o[0];
      t = o[2];
      m = ((s >> 0));
      if (!((t === 0))) {
        n = FP(t);
      }
      return [m, n];
    };
    HE = function(j, k, l, m, n) {
      var j, k, l, m, n, o, p, q;
      o = $ifaceNil;
      p = V(105, ((j >>> 0)), ((k >>> 0)), ((l >>> 0)), (m), (n), 0);
      q = p[2];
      if (!((q === 0))) {
        o = FP(q);
      }
      return o;
    };
    HH = function(j, k) {
      var j, k, l, m, n;
      l = $ifaceNil;
      m = U(134, ((j >>> 0)), ((k >>> 0)), 0);
      n = m[2];
      if (!((n === 0))) {
        l = FP(n);
      }
      return l;
    };
    $pkg.Shutdown = HH;
    HJ = function(j, k, l, m, n) {
      var j, k, l, m, n, o, p, q, r, s, t, u, v, w;
      o = 0;
      p = $ifaceNil;
      q = 0;
      if (k.$length > 0) {
        q = ($sliceToArray(k));
      } else {
        q = (new Uint8Array(0));
      }
      s = new Uint8Array(108);
      r = V(29, ((j >>> 0)), (q), ((k.$length >>> 0)), ((l >>> 0)), ((s)), ((n)));
      t = m, u = new DataView(s.buffer, s.byteOffset), t.Addr.Len = u.getUint8(0, true), t.Addr.Family = u.getUint8(1, true), t.Addr.Data = new($nativeArray($kindInt8))(s.buffer, $min(s.byteOffset + 2, s.buffer.byteLength)), t.Pad = new($nativeArray($kindInt8))(s.buffer, $min(s.byteOffset + 16, s.buffer.byteLength));
      v = r[0];
      w = r[2];
      o = ((v >> 0));
      if (!((w === 0))) {
        p = FP(w);
      }
      return [o, p];
    };
    HK = function(j, k, l, m, n) {
      var j, k, l, m, n, o, p, q, r;
      o = $ifaceNil;
      p = 0;
      if (k.$length > 0) {
        p = ($sliceToArray(k));
      } else {
        p = (new Uint8Array(0));
      }
      q = V(133, ((j >>> 0)), (p), ((k.$length >>> 0)), ((l >>> 0)), (m), ((n >>> 0)));
      r = q[2];
      if (!((r === 0))) {
        o = FP(r);
      }
      return o;
    };
    HL = function(j, k, l) {
      var j, k, l, m, n, o, p, q, r, s, t;
      m = 0;
      n = $ifaceNil;
      p = new Uint8Array(36);
      o = U(27, ((j >>> 0)), ((p)), ((l >>> 0)));
      q = k, r = new DataView(p.buffer, p.byteOffset), q.Namelen = r.getUint32(4, true), q.Pad_cgo_0 = new($nativeArray($kindUint8))(p.buffer, $min(p.byteOffset + 8, p.buffer.byteLength)), q.Iovlen = r.getInt32(16, true), q.Pad_cgo_1 = new($nativeArray($kindUint8))(p.buffer, $min(p.byteOffset + 20, p.buffer.byteLength)), q.Controllen = r.getUint32(28, true), q.Flags = r.getInt32(32, true);
      s = o[0];
      t = o[2];
      m = ((s >> 0));
      if (!((t === 0))) {
        n = FP(t);
      }
      return [m, n];
    };
    HM = function(j, k, l) {
      var j, k, l, m, n, o, p, q, r, s, t;
      m = 0;
      n = $ifaceNil;
      p = new Uint8Array(36);
      o = U(28, ((j >>> 0)), ((p)), ((l >>> 0)));
      q = k, r = new DataView(p.buffer, p.byteOffset), q.Namelen = r.getUint32(4, true), q.Pad_cgo_0 = new($nativeArray($kindUint8))(p.buffer, $min(p.byteOffset + 8, p.buffer.byteLength)), q.Iovlen = r.getInt32(16, true), q.Pad_cgo_1 = new($nativeArray($kindUint8))(p.buffer, $min(p.byteOffset + 20, p.buffer.byteLength)), q.Controllen = r.getUint32(28, true), q.Flags = r.getInt32(32, true);
      s = o[0];
      t = o[2];
      m = ((s >> 0));
      if (!((t === 0))) {
        n = FP(t);
      }
      return [m, n];
    };
    HR = function(j, k, l) {
      var j, k, l, m, n, o, p, q;
      m = 0;
      n = $ifaceNil;
      o = U(92, ((j >>> 0)), ((k >>> 0)), ((l >>> 0)));
      p = o[0];
      q = o[2];
      m = ((p >> 0));
      if (!((q === 0))) {
        n = FP(q);
      }
      return [m, n];
    };
    IC = function(j) {
      var j, k, l, m;
      k = $ifaceNil;
      l = U(6, ((j >>> 0)), 0, 0);
      m = l[2];
      if (!((m === 0))) {
        k = FP(m);
      }
      return k;
    };
    $pkg.Close = IC;
    ID = function(j) {
      var j, k, l, m, n, o;
      k = 0;
      l = $ifaceNil;
      m = U(41, ((j >>> 0)), 0, 0);
      n = m[0];
      o = m[2];
      k = ((n >> 0));
      if (!((o === 0))) {
        l = FP(o);
      }
      return [k, l];
    };
    $pkg.Dup = ID;
    IG = function(j) {
      var j, k, l, m;
      k = $ifaceNil;
      l = U(13, ((j >>> 0)), 0, 0);
      m = l[2];
      if (!((m === 0))) {
        k = FP(m);
      }
      return k;
    };
    $pkg.Fchdir = IG;
    II = function(j, k) {
      var j, k, l, m, n;
      l = $ifaceNil;
      m = U(124, ((j >>> 0)), ((k >>> 0)), 0);
      n = m[2];
      if (!((n === 0))) {
        l = FP(n);
      }
      return l;
    };
    $pkg.Fchmod = II;
    IJ = function(j, k, l) {
      var j, k, l, m, n, o;
      m = $ifaceNil;
      n = U(123, ((j >>> 0)), ((k >>> 0)), ((l >>> 0)));
      o = n[2];
      if (!((o === 0))) {
        m = FP(o);
      }
      return m;
    };
    $pkg.Fchown = IJ;
    IM = function(j, k) {
      var j, k, l, m, n, o, p, q;
      l = $ifaceNil;
      n = new Uint8Array(144);
      m = U(339, ((j >>> 0)), ((n)), 0);
      o = k, p = new DataView(n.buffer, n.byteOffset), o.Dev = p.getInt32(0, true), o.Mode = p.getUint16(4, true), o.Nlink = p.getUint16(6, true), o.Ino = new $Uint64(p.getUint32(12, true), p.getUint32(8, true)), o.Uid = p.getUint32(16, true), o.Gid = p.getUint32(20, true), o.Rdev = p.getInt32(24, true), o.Pad_cgo_0 = new($nativeArray($kindUint8))(n.buffer, $min(n.byteOffset + 28, n.buffer.byteLength)), o.Atimespec.Sec = new $Int64(p.getUint32(36, true), p.getUint32(32, true)), o.Atimespec.Nsec = new $Int64(p.getUint32(44, true), p.getUint32(40, true)), o.Mtimespec.Sec = new $Int64(p.getUint32(52, true), p.getUint32(48, true)), o.Mtimespec.Nsec = new $Int64(p.getUint32(60, true), p.getUint32(56, true)), o.Ctimespec.Sec = new $Int64(p.getUint32(68, true), p.getUint32(64, true)), o.Ctimespec.Nsec = new $Int64(p.getUint32(76, true), p.getUint32(72, true)), o.Birthtimespec.Sec = new $Int64(p.getUint32(84, true), p.getUint32(80, true)), o.Birthtimespec.Nsec = new $Int64(p.getUint32(92, true), p.getUint32(88, true)), o.Size = new $Int64(p.getUint32(100, true), p.getUint32(96, true)), o.Blocks = new $Int64(p.getUint32(108, true), p.getUint32(104, true)), o.Blksize = p.getInt32(112, true), o.Flags = p.getUint32(116, true), o.Gen = p.getUint32(120, true), o.Lspare = p.getInt32(124, true), o.Qspare = new($nativeArray($kindInt64))(n.buffer, $min(n.byteOffset + 128, n.buffer.byteLength));
      q = m[2];
      if (!((q === 0))) {
        l = FP(q);
      }
      return l;
    };
    $pkg.Fstat = IM;
    IO = function(j) {
      var j, k, l, m;
      k = $ifaceNil;
      l = U(95, ((j >>> 0)), 0, 0);
      m = l[2];
      if (!((m === 0))) {
        k = FP(m);
      }
      return k;
    };
    $pkg.Fsync = IO;
    IP = function(j, k) {
      var j, k, l, m, n;
      l = $ifaceNil;
      m = U(201, ((j >>> 0)), ((k.$low >>> 0)), 0);
      n = m[2];
      if (!((n === 0))) {
        l = FP(n);
      }
      return l;
    };
    $pkg.Ftruncate = IP;
    IQ = function(j, k, l) {
      var j, k, l, m, n, o, p, q, r;
      m = 0;
      n = $ifaceNil;
      o = 0;
      if (k.$length > 0) {
        o = ($sliceToArray(k));
      } else {
        o = (new Uint8Array(0));
      }
      p = V(344, ((j >>> 0)), (o), ((k.$length >>> 0)), ((l)), 0, 0);
      q = p[0];
      r = p[2];
      m = ((q >> 0));
      if (!((r === 0))) {
        n = FP(r);
      }
      return [m, n];
    };
    $pkg.Getdirentries = IQ;
    JJ = function(j, k) {
      var j, k, l, m, n, o, p, q, r, s;
      l = $ifaceNil;
      m = NN.nil;
      n = Z(j);
      m = n[0];
      l = n[1];
      if (!($interfaceIsEqual(l, $ifaceNil))) {
        return l;
      }
      p = new Uint8Array(144);
      o = U(340, ((m)), ((p)), 0);
      q = k, r = new DataView(p.buffer, p.byteOffset), q.Dev = r.getInt32(0, true), q.Mode = r.getUint16(4, true), q.Nlink = r.getUint16(6, true), q.Ino = new $Uint64(r.getUint32(12, true), r.getUint32(8, true)), q.Uid = r.getUint32(16, true), q.Gid = r.getUint32(20, true), q.Rdev = r.getInt32(24, true), q.Pad_cgo_0 = new($nativeArray($kindUint8))(p.buffer, $min(p.byteOffset + 28, p.buffer.byteLength)), q.Atimespec.Sec = new $Int64(r.getUint32(36, true), r.getUint32(32, true)), q.Atimespec.Nsec = new $Int64(r.getUint32(44, true), r.getUint32(40, true)), q.Mtimespec.Sec = new $Int64(r.getUint32(52, true), r.getUint32(48, true)), q.Mtimespec.Nsec = new $Int64(r.getUint32(60, true), r.getUint32(56, true)), q.Ctimespec.Sec = new $Int64(r.getUint32(68, true), r.getUint32(64, true)), q.Ctimespec.Nsec = new $Int64(r.getUint32(76, true), r.getUint32(72, true)), q.Birthtimespec.Sec = new $Int64(r.getUint32(84, true), r.getUint32(80, true)), q.Birthtimespec.Nsec = new $Int64(r.getUint32(92, true), r.getUint32(88, true)), q.Size = new $Int64(r.getUint32(100, true), r.getUint32(96, true)), q.Blocks = new $Int64(r.getUint32(108, true), r.getUint32(104, true)), q.Blksize = r.getInt32(112, true), q.Flags = r.getUint32(116, true), q.Gen = r.getUint32(120, true), q.Lspare = r.getInt32(124, true), q.Qspare = new($nativeArray($kindInt64))(p.buffer, $min(p.byteOffset + 128, p.buffer.byteLength));
      s = o[2];
      if (!((s === 0))) {
        l = FP(s);
      }
      return l;
    };
    $pkg.Lstat = JJ;
    JU = function(j, k, l) {
      var j, k, l, m, n, o, p, q, r;
      m = 0;
      n = $ifaceNil;
      o = 0;
      if (k.$length > 0) {
        o = ($sliceToArray(k));
      } else {
        o = (new Uint8Array(0));
      }
      p = V(153, ((j >>> 0)), (o), ((k.$length >>> 0)), ((l.$low >>> 0)), 0, 0);
      q = p[0];
      r = p[2];
      m = ((q >> 0));
      if (!((r === 0))) {
        n = FP(r);
      }
      return [m, n];
    };
    $pkg.Pread = JU;
    JV = function(j, k, l) {
      var j, k, l, m, n, o, p, q, r;
      m = 0;
      n = $ifaceNil;
      o = 0;
      if (k.$length > 0) {
        o = ($sliceToArray(k));
      } else {
        o = (new Uint8Array(0));
      }
      p = V(154, ((j >>> 0)), (o), ((k.$length >>> 0)), ((l.$low >>> 0)), 0, 0);
      q = p[0];
      r = p[2];
      m = ((q >> 0));
      if (!((r === 0))) {
        n = FP(r);
      }
      return [m, n];
    };
    $pkg.Pwrite = JV;
    JW = function(j, k) {
      var j, k, l, m, n, o, p, q;
      l = 0;
      m = $ifaceNil;
      n = 0;
      if (k.$length > 0) {
        n = ($sliceToArray(k));
      } else {
        n = (new Uint8Array(0));
      }
      o = U(3, ((j >>> 0)), (n), ((k.$length >>> 0)));
      p = o[0];
      q = o[2];
      l = ((p >> 0));
      if (!((q === 0))) {
        m = FP(q);
      }
      return [l, m];
    };
    KB = function(j, k, l) {
      var j, k, l, m, n, o, p, q;
      m = new $Int64(0, 0);
      n = $ifaceNil;
      o = U(199, ((j >>> 0)), ((k.$low >>> 0)), ((l >>> 0)));
      p = o[0];
      q = o[2];
      m = (new $Int64(0, p.constructor === Number ? p : 1));
      if (!((q === 0))) {
        n = FP(q);
      }
      return [m, n];
    };
    $pkg.Seek = KB;
    KZ = function(j, k) {
      var j, k, l, m, n, o, p, q;
      l = 0;
      m = $ifaceNil;
      n = 0;
      if (k.$length > 0) {
        n = ($sliceToArray(k));
      } else {
        n = (new Uint8Array(0));
      }
      o = U(4, ((j >>> 0)), (n), ((k.$length >>> 0)));
      p = o[0];
      q = o[2];
      l = ((p >> 0));
      if (!((q === 0))) {
        m = FP(q);
      }
      return [l, m];
    };
    LA = function(j, k, l, m, n, o) {
      var j, k, l, m, n, o, p, q, r, s, t;
      p = 0;
      q = $ifaceNil;
      r = V(197, (j), (k), ((l >>> 0)), ((m >>> 0)), ((n >>> 0)), ((o.$low >>> 0)));
      s = r[0];
      t = r[2];
      p = (s);
      if (!((t === 0))) {
        q = FP(t);
      }
      return [p, q];
    };
    LB = function(j, k) {
      var j, k, l, m, n;
      l = $ifaceNil;
      m = U(73, (j), (k), 0);
      n = m[2];
      if (!((n === 0))) {
        l = FP(n);
      }
      return l;
    };
    OB.methods = [{
      prop: "sockaddr",
      name: "sockaddr",
      pkg: "syscall",
      typ: $funcType([], [$UnsafePointer, ME, $error], false)
    }];
    PO.methods = [{
      prop: "Mmap",
      name: "Mmap",
      pkg: "",
      typ: $funcType([$Int, $Int64, $Int, $Int, $Int], [NE, $error], false)
    }, {
      prop: "Munmap",
      name: "Munmap",
      pkg: "",
      typ: $funcType([NE], [$error], false)
    }];
    FL.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Temporary",
      name: "Temporary",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Timeout",
      name: "Timeout",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }];
    PS.methods = [{
      prop: "sockaddr",
      name: "sockaddr",
      pkg: "syscall",
      typ: $funcType([], [$UnsafePointer, ME, $error], false)
    }];
    PT.methods = [{
      prop: "sockaddr",
      name: "sockaddr",
      pkg: "syscall",
      typ: $funcType([], [$UnsafePointer, ME, $error], false)
    }];
    PU.methods = [{
      prop: "sockaddr",
      name: "sockaddr",
      pkg: "syscall",
      typ: $funcType([], [$UnsafePointer, ME, $error], false)
    }];
    PV.methods = [{
      prop: "Unix",
      name: "Unix",
      pkg: "",
      typ: $funcType([], [$Int64, $Int64], false)
    }, {
      prop: "Nano",
      name: "Nano",
      pkg: "",
      typ: $funcType([], [$Int64], false)
    }];
    OY.methods = [{
      prop: "SetLen",
      name: "SetLen",
      pkg: "",
      typ: $funcType([$Int], [], false)
    }];
    QA.methods = [{
      prop: "SetControllen",
      name: "SetControllen",
      pkg: "",
      typ: $funcType([$Int], [], false)
    }];
    EP.init("syscall", [{
      prop: "Len",
      name: "Len",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Family",
      name: "Family",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Index",
      name: "Index",
      embedded: false,
      exported: true,
      typ: $Uint16,
      tag: ""
    }, {
      prop: "Type",
      name: "Type",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Nlen",
      name: "Nlen",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Alen",
      name: "Alen",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Slen",
      name: "Slen",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Data",
      name: "Data",
      embedded: false,
      exported: true,
      typ: OC,
      tag: ""
    }, {
      prop: "raw",
      name: "raw",
      embedded: false,
      exported: false,
      typ: MB,
      tag: ""
    }]);
    FK.init("syscall", [{
      prop: "Mutex",
      name: "Mutex",
      embedded: true,
      exported: true,
      typ: C.Mutex,
      tag: ""
    }, {
      prop: "active",
      name: "active",
      embedded: false,
      exported: false,
      typ: PP,
      tag: ""
    }, {
      prop: "mmap",
      name: "mmap",
      embedded: false,
      exported: false,
      typ: PQ,
      tag: ""
    }, {
      prop: "munmap",
      name: "munmap",
      embedded: false,
      exported: false,
      typ: PR,
      tag: ""
    }]);
    FT.init([{
      prop: "sockaddr",
      name: "sockaddr",
      pkg: "syscall",
      typ: $funcType([], [$UnsafePointer, ME, $error], false)
    }]);
    FU.init("syscall", [{
      prop: "Port",
      name: "Port",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: ""
    }, {
      prop: "Addr",
      name: "Addr",
      embedded: false,
      exported: true,
      typ: NQ,
      tag: ""
    }, {
      prop: "raw",
      name: "raw",
      embedded: false,
      exported: false,
      typ: LY,
      tag: ""
    }]);
    FV.init("syscall", [{
      prop: "Port",
      name: "Port",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: ""
    }, {
      prop: "ZoneId",
      name: "ZoneId",
      embedded: false,
      exported: true,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "Addr",
      name: "Addr",
      embedded: false,
      exported: true,
      typ: NP,
      tag: ""
    }, {
      prop: "raw",
      name: "raw",
      embedded: false,
      exported: false,
      typ: LZ,
      tag: ""
    }]);
    FW.init("syscall", [{
      prop: "Name",
      name: "Name",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "raw",
      name: "raw",
      embedded: false,
      exported: false,
      typ: MA,
      tag: ""
    }]);
    LJ.init("", [{
      prop: "Sec",
      name: "Sec",
      embedded: false,
      exported: true,
      typ: $Int64,
      tag: ""
    }, {
      prop: "Nsec",
      name: "Nsec",
      embedded: false,
      exported: true,
      typ: $Int64,
      tag: ""
    }]);
    LP.init("", [{
      prop: "Dev",
      name: "Dev",
      embedded: false,
      exported: true,
      typ: $Int32,
      tag: ""
    }, {
      prop: "Mode",
      name: "Mode",
      embedded: false,
      exported: true,
      typ: $Uint16,
      tag: ""
    }, {
      prop: "Nlink",
      name: "Nlink",
      embedded: false,
      exported: true,
      typ: $Uint16,
      tag: ""
    }, {
      prop: "Ino",
      name: "Ino",
      embedded: false,
      exported: true,
      typ: $Uint64,
      tag: ""
    }, {
      prop: "Uid",
      name: "Uid",
      embedded: false,
      exported: true,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "Gid",
      name: "Gid",
      embedded: false,
      exported: true,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "Rdev",
      name: "Rdev",
      embedded: false,
      exported: true,
      typ: $Int32,
      tag: ""
    }, {
      prop: "Pad_cgo_0",
      name: "Pad_cgo_0",
      embedded: false,
      exported: true,
      typ: NQ,
      tag: ""
    }, {
      prop: "Atimespec",
      name: "Atimespec",
      embedded: false,
      exported: true,
      typ: LJ,
      tag: ""
    }, {
      prop: "Mtimespec",
      name: "Mtimespec",
      embedded: false,
      exported: true,
      typ: LJ,
      tag: ""
    }, {
      prop: "Ctimespec",
      name: "Ctimespec",
      embedded: false,
      exported: true,
      typ: LJ,
      tag: ""
    }, {
      prop: "Birthtimespec",
      name: "Birthtimespec",
      embedded: false,
      exported: true,
      typ: LJ,
      tag: ""
    }, {
      prop: "Size",
      name: "Size",
      embedded: false,
      exported: true,
      typ: $Int64,
      tag: ""
    }, {
      prop: "Blocks",
      name: "Blocks",
      embedded: false,
      exported: true,
      typ: $Int64,
      tag: ""
    }, {
      prop: "Blksize",
      name: "Blksize",
      embedded: false,
      exported: true,
      typ: $Int32,
      tag: ""
    }, {
      prop: "Flags",
      name: "Flags",
      embedded: false,
      exported: true,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "Gen",
      name: "Gen",
      embedded: false,
      exported: true,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "Lspare",
      name: "Lspare",
      embedded: false,
      exported: true,
      typ: $Int32,
      tag: ""
    }, {
      prop: "Qspare",
      name: "Qspare",
      embedded: false,
      exported: true,
      typ: PW,
      tag: ""
    }]);
    LY.init("", [{
      prop: "Len",
      name: "Len",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Family",
      name: "Family",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Port",
      name: "Port",
      embedded: false,
      exported: true,
      typ: $Uint16,
      tag: ""
    }, {
      prop: "Addr",
      name: "Addr",
      embedded: false,
      exported: true,
      typ: NQ,
      tag: ""
    }, {
      prop: "Zero",
      name: "Zero",
      embedded: false,
      exported: true,
      typ: OG,
      tag: ""
    }]);
    LZ.init("", [{
      prop: "Len",
      name: "Len",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Family",
      name: "Family",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Port",
      name: "Port",
      embedded: false,
      exported: true,
      typ: $Uint16,
      tag: ""
    }, {
      prop: "Flowinfo",
      name: "Flowinfo",
      embedded: false,
      exported: true,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "Addr",
      name: "Addr",
      embedded: false,
      exported: true,
      typ: NP,
      tag: ""
    }, {
      prop: "Scope_id",
      name: "Scope_id",
      embedded: false,
      exported: true,
      typ: $Uint32,
      tag: ""
    }]);
    MA.init("", [{
      prop: "Len",
      name: "Len",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Family",
      name: "Family",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Path",
      name: "Path",
      embedded: false,
      exported: true,
      typ: OV,
      tag: ""
    }]);
    MB.init("", [{
      prop: "Len",
      name: "Len",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Family",
      name: "Family",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Index",
      name: "Index",
      embedded: false,
      exported: true,
      typ: $Uint16,
      tag: ""
    }, {
      prop: "Type",
      name: "Type",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Nlen",
      name: "Nlen",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Alen",
      name: "Alen",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Slen",
      name: "Slen",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Data",
      name: "Data",
      embedded: false,
      exported: true,
      typ: OC,
      tag: ""
    }]);
    MC.init("", [{
      prop: "Len",
      name: "Len",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Family",
      name: "Family",
      embedded: false,
      exported: true,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "Data",
      name: "Data",
      embedded: false,
      exported: true,
      typ: OE,
      tag: ""
    }]);
    MD.init("", [{
      prop: "Addr",
      name: "Addr",
      embedded: false,
      exported: true,
      typ: MC,
      tag: ""
    }, {
      prop: "Pad",
      name: "Pad",
      embedded: false,
      exported: true,
      typ: OF,
      tag: ""
    }]);
    MF.init("", [{
      prop: "Onoff",
      name: "Onoff",
      embedded: false,
      exported: true,
      typ: $Int32,
      tag: ""
    }, {
      prop: "Linger",
      name: "Linger",
      embedded: false,
      exported: true,
      typ: $Int32,
      tag: ""
    }]);
    MG.init("", [{
      prop: "Base",
      name: "Base",
      embedded: false,
      exported: true,
      typ: NN,
      tag: ""
    }, {
      prop: "Len",
      name: "Len",
      embedded: false,
      exported: true,
      typ: $Uint64,
      tag: ""
    }]);
    MH.init("", [{
      prop: "Multiaddr",
      name: "Multiaddr",
      embedded: false,
      exported: true,
      typ: NQ,
      tag: ""
    }, {
      prop: "Interface",
      name: "Interface",
      embedded: false,
      exported: true,
      typ: NQ,
      tag: ""
    }]);
    MI.init("", [{
      prop: "Multiaddr",
      name: "Multiaddr",
      embedded: false,
      exported: true,
      typ: NP,
      tag: ""
    }, {
      prop: "Interface",
      name: "Interface",
      embedded: false,
      exported: true,
      typ: $Uint32,
      tag: ""
    }]);
    MJ.init("", [{
      prop: "Name",
      name: "Name",
      embedded: false,
      exported: true,
      typ: NN,
      tag: ""
    }, {
      prop: "Namelen",
      name: "Namelen",
      embedded: false,
      exported: true,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "Pad_cgo_0",
      name: "Pad_cgo_0",
      embedded: false,
      exported: true,
      typ: NQ,
      tag: ""
    }, {
      prop: "Iov",
      name: "Iov",
      embedded: false,
      exported: true,
      typ: OY,
      tag: ""
    }, {
      prop: "Iovlen",
      name: "Iovlen",
      embedded: false,
      exported: true,
      typ: $Int32,
      tag: ""
    }, {
      prop: "Pad_cgo_1",
      name: "Pad_cgo_1",
      embedded: false,
      exported: true,
      typ: NQ,
      tag: ""
    }, {
      prop: "Control",
      name: "Control",
      embedded: false,
      exported: true,
      typ: NN,
      tag: ""
    }, {
      prop: "Controllen",
      name: "Controllen",
      embedded: false,
      exported: true,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "Flags",
      name: "Flags",
      embedded: false,
      exported: true,
      typ: $Int32,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = D.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            G = NE.nil;
            Q = null;
            $pkg.ForkLock = new C.RWMutex.ptr(new C.Mutex.ptr(0, 0), 0, 0, 0, 0);
            CI = "";
            GP = new $Int64(0, 0);
            F = false;
            R = false;
            S = -1;
            BA = N();
            $pkg.Stdin = 0;
            $pkg.Stdout = 1;
            $pkg.Stderr = 2;
            FM = new FL(35);
            FN = new FL(22);
            FO = new FL(2);
            GU = $toNativeArray($kindString, ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "device not configured", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource deadlock avoided", "cannot allocate memory", "permission denied", "bad address", "block device required", "resource busy", "file exists", "cross-device link", "operation not supported by device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "result too large", "resource temporarily unavailable", "operation now in progress", "operation already in progress", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol family", "address already in use", "can't assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "socket is already connected", "socket is not connected", "can't send after socket shutdown", "too many references: can't splice", "operation timed out", "connection refused", "too many levels of symbolic links", "file name too long", "host is down", "no route to host", "directory not empty", "too many processes", "too many users", "disc quota exceeded", "stale NFS file handle", "too many levels of remote in path", "RPC struct is bad", "RPC version wrong", "RPC prog. not avail", "program version wrong", "bad procedure for program", "no locks available", "function not implemented", "inappropriate file type or format", "authentication error", "need authenticator", "device power is off", "device error", "value too large to be stored in data type", "bad executable (or shared library)", "bad CPU type in executable", "shared library version mismatch", "malformed Mach-o file", "operation canceled", "identifier removed", "no message of desired type", "illegal byte sequence", "attribute not found", "bad message", "EMULTIHOP (Reserved)", "no message available on STREAM", "ENOLINK (Reserved)", "no STREAM resources", "not a STREAM", "protocol error", "STREAM ioctl timeout", "operation not supported on socket", "policy not found", "state not recoverable", "previous owner died"]);
            EL = new FK.ptr(new C.Mutex.ptr(0, 0), {}, LA, LB);
            CJ = CK(0);
            H();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
    var $pkg = {},
      $init, A, B, D, E, F, G, H, I, J, L, M, N, O, P, Q;
    A = $pkg.Map = $newType(0, $kindStruct, "nosync.Map", true, "github.com/gopherjs/gopherjs/nosync", true, function(m_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.m = false;
        return;
      }
      this.m = m_;
    });
    B = $pkg.Mutex = $newType(0, $kindStruct, "nosync.Mutex", true, "github.com/gopherjs/gopherjs/nosync", true, function(locked_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.locked = false;
        return;
      }
      this.locked = locked_;
    });
    D = $pkg.WaitGroup = $newType(0, $kindStruct, "nosync.WaitGroup", true, "github.com/gopherjs/gopherjs/nosync", true, function(counter_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.counter = 0;
        return;
      }
      this.counter = counter_;
    });
    E = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", true, "github.com/gopherjs/gopherjs/nosync", true, function(doing_, done_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.doing = false;
        this.done = false;
        return;
      }
      this.doing = doing_;
      this.done = done_;
    });
    F = $pkg.Pool = $newType(0, $kindStruct, "nosync.Pool", true, "github.com/gopherjs/gopherjs/nosync", true, function(store_, New_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.store = O.nil;
        this.New = $throwNilPointerError;
        return;
      }
      this.store = store_;
      this.New = New_;
    });
    G = $funcType([$emptyInterface, $emptyInterface], [$Bool], false);
    H = $ptrType(A);
    I = $mapType($emptyInterface, $emptyInterface);
    J = $ptrType(B);
    L = $ptrType(D);
    M = $funcType([], [], false);
    N = $ptrType(E);
    O = $sliceType($emptyInterface);
    P = $ptrType(F);
    Q = $funcType([], [$emptyInterface], false);
    A.ptr.prototype.Load = function(a) {
      var a, b, c, d, e, f, g, h;
      b = $ifaceNil;
      c = false;
      d = this;
      e = (f = d.m[$emptyInterface.keyFor(a)], f !== undefined ? [f.v, true] : [$ifaceNil, false]);
      b = e[0];
      c = e[1];
      g = b;
      h = c;
      b = g;
      c = h;
      return [b, c];
    };
    A.prototype.Load = function(a) {
      return this.$val.Load(a);
    };
    A.ptr.prototype.Store = function(a, b) {
      var a, b, c, d;
      c = this;
      if (c.m === false) {
        c.m = {};
      }
      d = a;
      (c.m || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(d)] = {
        k: d,
        v: b
      };
    };
    A.prototype.Store = function(a, b) {
      return this.$val.Store(a, b);
    };
    A.ptr.prototype.LoadOrStore = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n;
      c = $ifaceNil;
      d = false;
      e = this;
      f = (g = e.m[$emptyInterface.keyFor(a)], g !== undefined ? [g.v, true] : [$ifaceNil, false]);
      h = f[0];
      i = f[1];
      if (i) {
        j = h;
        k = true;
        c = j;
        d = k;
        return [c, d];
      }
      if (e.m === false) {
        e.m = {};
      }
      l = a;
      (e.m || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(l)] = {
        k: l,
        v: b
      };
      m = b;
      n = false;
      c = m;
      d = n;
      return [c, d];
    };
    A.prototype.LoadOrStore = function(a, b) {
      return this.$val.LoadOrStore(a, b);
    };
    A.ptr.prototype.Delete = function(a) {
      var a, b;
      b = this;
      if (b.m === false) {
        return;
      }
      delete b.m[$emptyInterface.keyFor(a)];
    };
    A.prototype.Delete = function(a) {
      return this.$val.Delete(a);
    };
    A.ptr.prototype.Range = function(a) {
      var a, b, c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = b.m;
            d = 0;
            e = $keys(c);
          case 1:
            if (!(d < e.length)) {
              $s = 2;
              continue;
            }
            f = c[e[d]];
            if (f === undefined) {
              d++;
              $s = 1;
              continue;
            }
            g = f.k;
            h = f.v;
            i = a(g, h);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            if (!i) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            $s = 2;
            continue;
          case 4:
            d++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: A.ptr.prototype.Range
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    A.prototype.Range = function(a) {
      return this.$val.Range(a);
    };
    B.ptr.prototype.Lock = function() {
      var a;
      a = this;
      if (a.locked) {
        $panic(new $String("nosync: mutex is already locked"));
      }
      a.locked = true;
    };
    B.prototype.Lock = function() {
      return this.$val.Lock();
    };
    B.ptr.prototype.Unlock = function() {
      var a;
      a = this;
      if (!a.locked) {
        $panic(new $String("nosync: unlock of unlocked mutex"));
      }
      a.locked = false;
    };
    B.prototype.Unlock = function() {
      return this.$val.Unlock();
    };
    D.ptr.prototype.Add = function(a) {
      var a, b;
      b = this;
      b.counter = b.counter + (a) >> 0;
      if (b.counter < 0) {
        $panic(new $String("sync: negative WaitGroup counter"));
      }
    };
    D.prototype.Add = function(a) {
      return this.$val.Add(a);
    };
    D.ptr.prototype.Done = function() {
      var a;
      a = this;
      a.Add(-1);
    };
    D.prototype.Done = function() {
      return this.$val.Done();
    };
    D.ptr.prototype.Wait = function() {
      var a;
      a = this;
      if (!((a.counter === 0))) {
        $panic(new $String("sync: WaitGroup counter not zero"));
      }
    };
    D.prototype.Wait = function() {
      return this.$val.Wait();
    };
    E.ptr.prototype.Do = function(a) {
      var a, b, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              b = [b];
              b[0] = this;
              if (b[0].done) {
                $s = -1;
                return;
              }
              if (b[0].doing) {
                $panic(new $String("nosync: Do called within f"));
              }
              b[0].doing = true;
              $deferred.push([(function(b) {
                return function() {
                  b[0].doing = false;
                  b[0].done = true;
                };
              })(b), []]);
              $r = a();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              $s = -1;
              return;
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: E.ptr.prototype.Do
            };
          }
          $f.a = a;
          $f.b = b;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    E.prototype.Do = function(a) {
      return this.$val.Do(a);
    };
    F.ptr.prototype.Get = function() {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            if (a.store.$length === 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            if (!(a.New === $throwNilPointerError)) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            b = a.New();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return b;
          case 4:
            $s = -1;
            return $ifaceNil;
          case 2:
            e = (c = a.store, d = a.store.$length - 1 >> 0, ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]));
            a.store = $subslice(a.store, 0, (a.store.$length - 1 >> 0));
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: F.ptr.prototype.Get
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    F.prototype.Get = function() {
      return this.$val.Get();
    };
    F.ptr.prototype.Put = function(a) {
      var a, b;
      b = this;
      if ($interfaceIsEqual(a, $ifaceNil)) {
        return;
      }
      b.store = $append(b.store, a);
    };
    F.prototype.Put = function(a) {
      return this.$val.Put(a);
    };
    H.methods = [{
      prop: "Load",
      name: "Load",
      pkg: "",
      typ: $funcType([$emptyInterface], [$emptyInterface, $Bool], false)
    }, {
      prop: "Store",
      name: "Store",
      pkg: "",
      typ: $funcType([$emptyInterface, $emptyInterface], [], false)
    }, {
      prop: "LoadOrStore",
      name: "LoadOrStore",
      pkg: "",
      typ: $funcType([$emptyInterface, $emptyInterface], [$emptyInterface, $Bool], false)
    }, {
      prop: "Delete",
      name: "Delete",
      pkg: "",
      typ: $funcType([$emptyInterface], [], false)
    }, {
      prop: "Range",
      name: "Range",
      pkg: "",
      typ: $funcType([G], [], false)
    }];
    J.methods = [{
      prop: "Lock",
      name: "Lock",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "Unlock",
      name: "Unlock",
      pkg: "",
      typ: $funcType([], [], false)
    }];
    L.methods = [{
      prop: "Add",
      name: "Add",
      pkg: "",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "Done",
      name: "Done",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "Wait",
      name: "Wait",
      pkg: "",
      typ: $funcType([], [], false)
    }];
    N.methods = [{
      prop: "Do",
      name: "Do",
      pkg: "",
      typ: $funcType([M], [], false)
    }];
    P.methods = [{
      prop: "Get",
      name: "Get",
      pkg: "",
      typ: $funcType([], [$emptyInterface], false)
    }, {
      prop: "Put",
      name: "Put",
      pkg: "",
      typ: $funcType([$emptyInterface], [], false)
    }];
    A.init("github.com/gopherjs/gopherjs/nosync", [{
      prop: "m",
      name: "m",
      embedded: false,
      exported: false,
      typ: I,
      tag: ""
    }]);
    B.init("github.com/gopherjs/gopherjs/nosync", [{
      prop: "locked",
      name: "locked",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    D.init("github.com/gopherjs/gopherjs/nosync", [{
      prop: "counter",
      name: "counter",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }]);
    E.init("github.com/gopherjs/gopherjs/nosync", [{
      prop: "doing",
      name: "doing",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "done",
      name: "done",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    F.init("github.com/gopherjs/gopherjs/nosync", [{
      prop: "store",
      name: "store",
      embedded: false,
      exported: false,
      typ: O,
      tag: ""
    }, {
      prop: "New",
      name: "New",
      embedded: false,
      exported: true,
      typ: Q,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["time"] = (function() {
    var $pkg = {},
      $init, C, B, E, A, D, AE, BL, BM, BO, BS, CI, CJ, CK, DJ, DK, DL, DN, DP, DQ, DR, DS, DT, DW, EB, EF, O, Q, T, U, V, W, AA, AD, AR, BN, BP, BZ, CL, DH, CM, DI, CN, CP, CX, F, H, I, J, P, R, S, X, Y, Z, AB, AC, AF, AG, AH, AI, AJ, AK, AM, AN, AO, AP, AQ, AS, BQ, BR, BT, BU, BV, BY, CA, CB, CC, CD, CE, CF, CG, CH, CO;
    C = $packages["errors"];
    B = $packages["github.com/gopherjs/gopherjs/js"];
    E = $packages["github.com/gopherjs/gopherjs/nosync"];
    A = $packages["runtime"];
    D = $packages["syscall"];
    AE = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", true, "time", true, function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Layout = "";
        this.Value = "";
        this.LayoutElem = "";
        this.ValueElem = "";
        this.Message = "";
        return;
      }
      this.Layout = Layout_;
      this.Value = Value_;
      this.LayoutElem = LayoutElem_;
      this.ValueElem = ValueElem_;
      this.Message = Message_;
    });
    BL = $pkg.Time = $newType(0, $kindStruct, "time.Time", true, "time", true, function(wall_, ext_, loc_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.wall = new $Uint64(0, 0);
        this.ext = new $Int64(0, 0);
        this.loc = DT.nil;
        return;
      }
      this.wall = wall_;
      this.ext = ext_;
      this.loc = loc_;
    });
    BM = $pkg.Month = $newType(4, $kindInt, "time.Month", true, "time", true, null);
    BO = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", true, "time", true, null);
    BS = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", true, "time", true, null);
    CI = $pkg.Location = $newType(0, $kindStruct, "time.Location", true, "time", true, function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.name = "";
        this.zone = DJ.nil;
        this.tx = DK.nil;
        this.cacheStart = new $Int64(0, 0);
        this.cacheEnd = new $Int64(0, 0);
        this.cacheZone = DL.nil;
        return;
      }
      this.name = name_;
      this.zone = zone_;
      this.tx = tx_;
      this.cacheStart = cacheStart_;
      this.cacheEnd = cacheEnd_;
      this.cacheZone = cacheZone_;
    });
    CJ = $pkg.zone = $newType(0, $kindStruct, "time.zone", true, "time", false, function(name_, offset_, isDST_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.name = "";
        this.offset = 0;
        this.isDST = false;
        return;
      }
      this.name = name_;
      this.offset = offset_;
      this.isDST = isDST_;
    });
    CK = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", true, "time", false, function(when_, index_, isstd_, isutc_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.when = new $Int64(0, 0);
        this.index = 0;
        this.isstd = false;
        this.isutc = false;
        return;
      }
      this.when = when_;
      this.index = index_;
      this.isstd = isstd_;
      this.isutc = isutc_;
    });
    DJ = $sliceType(CJ);
    DK = $sliceType(CK);
    DL = $ptrType(CJ);
    DN = $sliceType($String);
    DP = $arrayType($Uint8, 20);
    DQ = $sliceType($Uint8);
    DR = $arrayType($Uint8, 9);
    DS = $arrayType($Uint8, 64);
    DT = $ptrType(CI);
    DW = $arrayType($Uint8, 32);
    EB = $ptrType(AE);
    EF = $ptrType(BL);
    F = function() {
      $unused(CD(new $Int64(0, 0), new $Int64(0, 0)));
    };
    H = function() {
      var g, h, i, j;
      g = new($global.Date)();
      h = $internalize(g, $String);
      i = P(h, 40);
      j = P(h, 41);
      if ((i === -1) || (j === -1)) {
        CM.name = "UTC";
        return;
      }
      CM.name = $substring(h, (i + 1 >> 0), j);
      CM.zone = new DJ([new CJ.ptr(CM.name, $imul(($parseInt(g.getTimezoneOffset()) >> 0), -60), false)]);
    };
    I = function() {
      return $mul64($internalize(new($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
    };
    J = function() {
      var g, h, i, j, k, l, m, n;
      g = new $Int64(0, 0);
      h = 0;
      i = new $Int64(0, 0);
      j = I();
      k = $div64(j, new $Int64(0, 1000000000), false);
      l = (((m = $div64(j, new $Int64(0, 1000000000), true), m.$low + ((m.$high >> 31) * 4294967296)) >> 0));
      n = j;
      g = k;
      h = l;
      i = n;
      return [g, h, i];
    };
    P = function(g, h) {
      var g, h;
      return $parseInt(g.indexOf($global.String.fromCharCode(h))) >> 0;
    };
    R = function(g) {
      var g, h;
      if (g.length === 0) {
        return false;
      }
      h = g.charCodeAt(0);
      return 97 <= h && h <= 122;
    };
    S = function(g) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, bq, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, cd, ce, cf, cg, ch, ci, cj, ck, cl, cm, cn, co, cp, cq, cr, cs, ct, cu, cv, cw, cx, cy, cz, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      h = "";
      i = 0;
      j = "";
      k = 0;
      while (true) {
        if (!(k < g.length)) {
          break;
        }
        l = ((g.charCodeAt(k) >> 0));
        m = l;
        if (m === (74)) {
          if (g.length >= (k + 3 >> 0) && $substring(g, k, (k + 3 >> 0)) === "Jan") {
            if (g.length >= (k + 7 >> 0) && $substring(g, k, (k + 7 >> 0)) === "January") {
              n = $substring(g, 0, k);
              o = 257;
              p = $substring(g, (k + 7 >> 0));
              h = n;
              i = o;
              j = p;
              return [h, i, j];
            }
            if (!R($substring(g, (k + 3 >> 0)))) {
              q = $substring(g, 0, k);
              r = 258;
              s = $substring(g, (k + 3 >> 0));
              h = q;
              i = r;
              j = s;
              return [h, i, j];
            }
          }
        } else if (m === (77)) {
          if (g.length >= (k + 3 >> 0)) {
            if ($substring(g, k, (k + 3 >> 0)) === "Mon") {
              if (g.length >= (k + 6 >> 0) && $substring(g, k, (k + 6 >> 0)) === "Monday") {
                t = $substring(g, 0, k);
                u = 261;
                v = $substring(g, (k + 6 >> 0));
                h = t;
                i = u;
                j = v;
                return [h, i, j];
              }
              if (!R($substring(g, (k + 3 >> 0)))) {
                w = $substring(g, 0, k);
                x = 262;
                y = $substring(g, (k + 3 >> 0));
                h = w;
                i = x;
                j = y;
                return [h, i, j];
              }
            }
            if ($substring(g, k, (k + 3 >> 0)) === "MST") {
              z = $substring(g, 0, k);
              aa = 21;
              ab = $substring(g, (k + 3 >> 0));
              h = z;
              i = aa;
              j = ab;
              return [h, i, j];
            }
          }
        } else if (m === (48)) {
          if (g.length >= (k + 2 >> 0) && 49 <= g.charCodeAt((k + 1 >> 0)) && g.charCodeAt((k + 1 >> 0)) <= 54) {
            ac = $substring(g, 0, k);
            ad = (ae = g.charCodeAt((k + 1 >> 0)) - 49 << 24 >>> 24, ((ae < 0 || ae >= Q.length) ? ($throwRuntimeError("index out of range"), undefined) : Q[ae]));
            af = $substring(g, (k + 2 >> 0));
            h = ac;
            i = ad;
            j = af;
            return [h, i, j];
          }
        } else if (m === (49)) {
          if (g.length >= (k + 2 >> 0) && (g.charCodeAt((k + 1 >> 0)) === 53)) {
            ag = $substring(g, 0, k);
            ah = 522;
            ai = $substring(g, (k + 2 >> 0));
            h = ag;
            i = ah;
            j = ai;
            return [h, i, j];
          }
          aj = $substring(g, 0, k);
          ak = 259;
          al = $substring(g, (k + 1 >> 0));
          h = aj;
          i = ak;
          j = al;
          return [h, i, j];
        } else if (m === (50)) {
          if (g.length >= (k + 4 >> 0) && $substring(g, k, (k + 4 >> 0)) === "2006") {
            am = $substring(g, 0, k);
            an = 273;
            ao = $substring(g, (k + 4 >> 0));
            h = am;
            i = an;
            j = ao;
            return [h, i, j];
          }
          ap = $substring(g, 0, k);
          aq = 263;
          ar = $substring(g, (k + 1 >> 0));
          h = ap;
          i = aq;
          j = ar;
          return [h, i, j];
        } else if (m === (95)) {
          if (g.length >= (k + 2 >> 0) && (g.charCodeAt((k + 1 >> 0)) === 50)) {
            if (g.length >= (k + 5 >> 0) && $substring(g, (k + 1 >> 0), (k + 5 >> 0)) === "2006") {
              as = $substring(g, 0, (k + 1 >> 0));
              at = 273;
              au = $substring(g, (k + 5 >> 0));
              h = as;
              i = at;
              j = au;
              return [h, i, j];
            }
            av = $substring(g, 0, k);
            aw = 264;
            ax = $substring(g, (k + 2 >> 0));
            h = av;
            i = aw;
            j = ax;
            return [h, i, j];
          }
        } else if (m === (51)) {
          ay = $substring(g, 0, k);
          az = 523;
          ba = $substring(g, (k + 1 >> 0));
          h = ay;
          i = az;
          j = ba;
          return [h, i, j];
        } else if (m === (52)) {
          bb = $substring(g, 0, k);
          bc = 525;
          bd = $substring(g, (k + 1 >> 0));
          h = bb;
          i = bc;
          j = bd;
          return [h, i, j];
        } else if (m === (53)) {
          be = $substring(g, 0, k);
          bf = 527;
          bg = $substring(g, (k + 1 >> 0));
          h = be;
          i = bf;
          j = bg;
          return [h, i, j];
        } else if (m === (80)) {
          if (g.length >= (k + 2 >> 0) && (g.charCodeAt((k + 1 >> 0)) === 77)) {
            bh = $substring(g, 0, k);
            bi = 531;
            bj = $substring(g, (k + 2 >> 0));
            h = bh;
            i = bi;
            j = bj;
            return [h, i, j];
          }
        } else if (m === (112)) {
          if (g.length >= (k + 2 >> 0) && (g.charCodeAt((k + 1 >> 0)) === 109)) {
            bk = $substring(g, 0, k);
            bl = 532;
            bm = $substring(g, (k + 2 >> 0));
            h = bk;
            i = bl;
            j = bm;
            return [h, i, j];
          }
        } else if (m === (45)) {
          if (g.length >= (k + 7 >> 0) && $substring(g, k, (k + 7 >> 0)) === "-070000") {
            bn = $substring(g, 0, k);
            bo = 28;
            bp = $substring(g, (k + 7 >> 0));
            h = bn;
            i = bo;
            j = bp;
            return [h, i, j];
          }
          if (g.length >= (k + 9 >> 0) && $substring(g, k, (k + 9 >> 0)) === "-07:00:00") {
            bq = $substring(g, 0, k);
            br = 31;
            bs = $substring(g, (k + 9 >> 0));
            h = bq;
            i = br;
            j = bs;
            return [h, i, j];
          }
          if (g.length >= (k + 5 >> 0) && $substring(g, k, (k + 5 >> 0)) === "-0700") {
            bt = $substring(g, 0, k);
            bu = 27;
            bv = $substring(g, (k + 5 >> 0));
            h = bt;
            i = bu;
            j = bv;
            return [h, i, j];
          }
          if (g.length >= (k + 6 >> 0) && $substring(g, k, (k + 6 >> 0)) === "-07:00") {
            bw = $substring(g, 0, k);
            bx = 30;
            by = $substring(g, (k + 6 >> 0));
            h = bw;
            i = bx;
            j = by;
            return [h, i, j];
          }
          if (g.length >= (k + 3 >> 0) && $substring(g, k, (k + 3 >> 0)) === "-07") {
            bz = $substring(g, 0, k);
            ca = 29;
            cb = $substring(g, (k + 3 >> 0));
            h = bz;
            i = ca;
            j = cb;
            return [h, i, j];
          }
        } else if (m === (90)) {
          if (g.length >= (k + 7 >> 0) && $substring(g, k, (k + 7 >> 0)) === "Z070000") {
            cc = $substring(g, 0, k);
            cd = 23;
            ce = $substring(g, (k + 7 >> 0));
            h = cc;
            i = cd;
            j = ce;
            return [h, i, j];
          }
          if (g.length >= (k + 9 >> 0) && $substring(g, k, (k + 9 >> 0)) === "Z07:00:00") {
            cf = $substring(g, 0, k);
            cg = 26;
            ch = $substring(g, (k + 9 >> 0));
            h = cf;
            i = cg;
            j = ch;
            return [h, i, j];
          }
          if (g.length >= (k + 5 >> 0) && $substring(g, k, (k + 5 >> 0)) === "Z0700") {
            ci = $substring(g, 0, k);
            cj = 22;
            ck = $substring(g, (k + 5 >> 0));
            h = ci;
            i = cj;
            j = ck;
            return [h, i, j];
          }
          if (g.length >= (k + 6 >> 0) && $substring(g, k, (k + 6 >> 0)) === "Z07:00") {
            cl = $substring(g, 0, k);
            cm = 25;
            cn = $substring(g, (k + 6 >> 0));
            h = cl;
            i = cm;
            j = cn;
            return [h, i, j];
          }
          if (g.length >= (k + 3 >> 0) && $substring(g, k, (k + 3 >> 0)) === "Z07") {
            co = $substring(g, 0, k);
            cp = 24;
            cq = $substring(g, (k + 3 >> 0));
            h = co;
            i = cp;
            j = cq;
            return [h, i, j];
          }
        } else if (m === (46)) {
          if ((k + 1 >> 0) < g.length && ((g.charCodeAt((k + 1 >> 0)) === 48) || (g.charCodeAt((k + 1 >> 0)) === 57))) {
            cr = g.charCodeAt((k + 1 >> 0));
            cs = k + 1 >> 0;
            while (true) {
              if (!(cs < g.length && (g.charCodeAt(cs) === cr))) {
                break;
              }
              cs = cs + (1) >> 0;
            }
            if (!AG(g, cs)) {
              ct = 32;
              if (g.charCodeAt((k + 1 >> 0)) === 57) {
                ct = 33;
              }
              ct = ct | ((((cs - ((k + 1 >> 0)) >> 0)) << 16 >> 0));
              cu = $substring(g, 0, k);
              cv = ct;
              cw = $substring(g, cs);
              h = cu;
              i = cv;
              j = cw;
              return [h, i, j];
            }
          }
        }
        k = k + (1) >> 0;
      }
      cx = g;
      cy = 0;
      cz = "";
      h = cx;
      i = cy;
      j = cz;
      return [h, i, j];
    };
    X = function(g, h) {
      var g, h, i, j, k;
      i = 0;
      while (true) {
        if (!(i < g.length)) {
          break;
        }
        j = g.charCodeAt(i);
        k = h.charCodeAt(i);
        if (!((j === k))) {
          j = (j | (32)) >>> 0;
          k = (k | (32)) >>> 0;
          if (!((j === k)) || j < 97 || j > 122) {
            return false;
          }
        }
        i = i + (1) >> 0;
      }
      return true;
    };
    Y = function(g, h) {
      var g, h, i, j, k, l;
      i = g;
      j = 0;
      while (true) {
        if (!(j < i.$length)) {
          break;
        }
        k = j;
        l = ((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j]);
        if (h.length >= l.length && X($substring(h, 0, l.length), l)) {
          return [k, $substring(h, l.length), $ifaceNil];
        }
        j++;
      }
      return [-1, h, AD];
    };
    Z = function(g, h, i) {
      var g, h, i, j, k, l, m, n, o;
      j = ((h >>> 0));
      if (h < 0) {
        g = $append(g, 45);
        j = ((-h >>> 0));
      }
      k = DP.zero();
      l = 20;
      while (true) {
        if (!(j >= 10)) {
          break;
        }
        l = l - (1) >> 0;
        n = (m = j / 10, (m === m && m !== 1 / 0 && m !== -1 / 0) ? m >>> 0 : $throwRuntimeError("integer divide by zero"));
        ((l < 0 || l >= k.length) ? ($throwRuntimeError("index out of range"), undefined) : k[l] = ((((48 + j >>> 0) - (n * 10 >>> 0) >>> 0) << 24 >>> 24)));
        j = n;
      }
      l = l - (1) >> 0;
      ((l < 0 || l >= k.length) ? ($throwRuntimeError("index out of range"), undefined) : k[l] = (((48 + j >>> 0) << 24 >>> 24)));
      o = 20 - l >> 0;
      while (true) {
        if (!(o < i)) {
          break;
        }
        g = $append(g, 48);
        o = o + (1) >> 0;
      }
      return $appendSlice(g, $subslice(new DQ(k), l));
    };
    AB = function(g) {
      var g, h, i, j, k, l, m, n, o, p, q;
      h = 0;
      i = $ifaceNil;
      j = false;
      if (!(g === "") && ((g.charCodeAt(0) === 45) || (g.charCodeAt(0) === 43))) {
        j = g.charCodeAt(0) === 45;
        g = $substring(g, 1);
      }
      k = AS(g);
      l = k[0];
      m = k[1];
      i = k[2];
      h = (((l.$low + ((l.$high >> 31) * 4294967296)) >> 0));
      if (!($interfaceIsEqual(i, $ifaceNil)) || !(m === "")) {
        n = 0;
        o = AA;
        h = n;
        i = o;
        return [h, i];
      }
      if (j) {
        h = -h;
      }
      p = h;
      q = $ifaceNil;
      h = p;
      i = q;
      return [h, i];
    };
    AC = function(g, h, i, j) {
      var g, h, i, j, k, l, m, n, o, p;
      k = h;
      l = DR.zero();
      m = 9;
      while (true) {
        if (!(m > 0)) {
          break;
        }
        m = m - (1) >> 0;
        ((m < 0 || m >= l.length) ? ($throwRuntimeError("index out of range"), undefined) : l[m] = ((((n = k % 10, n === n ? n : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
        k = (o = k / (10), (o === o && o !== 1 / 0 && o !== -1 / 0) ? o >>> 0 : $throwRuntimeError("integer divide by zero"));
      }
      if (i > 9) {
        i = 9;
      }
      if (j) {
        while (true) {
          if (!(i > 0 && ((p = i - 1 >> 0, ((p < 0 || p >= l.length) ? ($throwRuntimeError("index out of range"), undefined) : l[p])) === 48))) {
            break;
          }
          i = i - (1) >> 0;
        }
        if (i === 0) {
          return g;
        }
      }
      g = $append(g, 46);
      return $appendSlice(g, $subslice(new DQ(l), 0, i));
    };
    BL.ptr.prototype.String = function() {
      var g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = $clone(g, BL).Format("2006-01-02 15:04:05.999999999 -0700 MST");
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            i = h;
            if (!((j = (k = g.wall, new $Uint64(k.$high & 2147483648, (k.$low & 0) >>> 0)), (j.$high === 0 && j.$low === 0)))) {
              m = ((l = g.ext, new $Uint64(l.$high, l.$low)));
              n = 43;
              if ((o = g.ext, (o.$high < 0 || (o.$high === 0 && o.$low < 0)))) {
                n = 45;
                m = new $Uint64(-m.$high, -m.$low);
              }
              p = $div64(m, new $Uint64(0, 1000000000), false);
              q = $div64(m, new $Uint64(0, 1000000000), true);
              r = p;
              m = q;
              s = $div64(r, new $Uint64(0, 1000000000), false);
              t = $div64(r, new $Uint64(0, 1000000000), true);
              u = s;
              r = t;
              v = DQ.nil;
              v = $appendSlice(v, " m=");
              v = $append(v, n);
              w = 0;
              if (!((u.$high === 0 && u.$low === 0))) {
                v = Z(v, ((u.$low >> 0)), 0);
                w = 9;
              }
              v = Z(v, ((r.$low >> 0)), w);
              v = $append(v, 46);
              v = Z(v, ((m.$low >> 0)), 9);
              i = i + (($bytesToString(v)));
            }
            $s = -1;
            return i;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.String
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.String = function() {
      return this.$val.String();
    };
    BL.ptr.prototype.Format = function(g) {
      var g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = this;
            i = DQ.nil;
            j = g.length + 10 >> 0;
            if (j < 64) {
              k = DS.zero();
              i = $subslice(new DQ(k), 0, 0);
            } else {
              i = $makeSlice(DQ, 0, j);
            }
            l = $clone(h, BL).AppendFormat(i, g);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            i = l;
            $s = -1;
            return ($bytesToString(i));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Format
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Format = function(g) {
      return this.$val.Format(g);
    };
    BL.ptr.prototype.AppendFormat = function(g, h) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            i = this;
            k = $clone(i, BL).locabs();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            l = j[0];
            m = j[1];
            n = j[2];
            o = -1;
            p = 0;
            q = 0;
            r = -1;
            s = 0;
            t = 0;
            while (true) {
              if (!(!(h === ""))) {
                break;
              }
              u = S(h);
              v = u[0];
              w = u[1];
              x = u[2];
              if (!(v === "")) {
                g = $appendSlice(g, v);
              }
              if (w === 0) {
                break;
              }
              h = x;
              if (o < 0 && !(((w & 256) === 0))) {
                y = BY(n, true);
                o = y[0];
                p = y[1];
                q = y[2];
              }
              if (r < 0 && !(((w & 512) === 0))) {
                z = BR(n);
                r = z[0];
                s = z[1];
                t = z[2];
              }
              switch (0) {
                default:
                  aa = w & 65535;
                  if (aa === (274)) {
                    ab = o;
                    if (ab < 0) {
                      ab = -ab;
                    }
                    g = Z(g, (ac = ab % 100, ac === ac ? ac : $throwRuntimeError("integer divide by zero")), 2);
                  } else if (aa === (273)) {
                    g = Z(g, o, 4);
                  } else if (aa === (258)) {
                    g = $appendSlice(g, $substring(new BM(p).String(), 0, 3));
                  } else if (aa === (257)) {
                    ad = new BM(p).String();
                    g = $appendSlice(g, ad);
                  } else if (aa === (259)) {
                    g = Z(g, ((p >> 0)), 0);
                  } else if (aa === (260)) {
                    g = Z(g, ((p >> 0)), 2);
                  } else if (aa === (262)) {
                    g = $appendSlice(g, $substring(new BO(BQ(n)).String(), 0, 3));
                  } else if (aa === (261)) {
                    ae = new BO(BQ(n)).String();
                    g = $appendSlice(g, ae);
                  } else if (aa === (263)) {
                    g = Z(g, q, 0);
                  } else if (aa === (264)) {
                    if (q < 10) {
                      g = $append(g, 32);
                    }
                    g = Z(g, q, 0);
                  } else if (aa === (265)) {
                    g = Z(g, q, 2);
                  } else if (aa === (522)) {
                    g = Z(g, r, 2);
                  } else if (aa === (523)) {
                    ag = (af = r % 12, af === af ? af : $throwRuntimeError("integer divide by zero"));
                    if (ag === 0) {
                      ag = 12;
                    }
                    g = Z(g, ag, 0);
                  } else if (aa === (524)) {
                    ai = (ah = r % 12, ah === ah ? ah : $throwRuntimeError("integer divide by zero"));
                    if (ai === 0) {
                      ai = 12;
                    }
                    g = Z(g, ai, 2);
                  } else if (aa === (525)) {
                    g = Z(g, s, 0);
                  } else if (aa === (526)) {
                    g = Z(g, s, 2);
                  } else if (aa === (527)) {
                    g = Z(g, t, 0);
                  } else if (aa === (528)) {
                    g = Z(g, t, 2);
                  } else if (aa === (531)) {
                    if (r >= 12) {
                      g = $appendSlice(g, "PM");
                    } else {
                      g = $appendSlice(g, "AM");
                    }
                  } else if (aa === (532)) {
                    if (r >= 12) {
                      g = $appendSlice(g, "pm");
                    } else {
                      g = $appendSlice(g, "am");
                    }
                  } else if ((aa === (22)) || (aa === (25)) || (aa === (23)) || (aa === (24)) || (aa === (26)) || (aa === (27)) || (aa === (30)) || (aa === (28)) || (aa === (29)) || (aa === (31))) {
                    if ((m === 0) && ((w === 22) || (w === 25) || (w === 23) || (w === 24) || (w === 26))) {
                      g = $append(g, 90);
                      break;
                    }
                    ak = (aj = m / 60, (aj === aj && aj !== 1 / 0 && aj !== -1 / 0) ? aj >> 0 : $throwRuntimeError("integer divide by zero"));
                    al = m;
                    if (ak < 0) {
                      g = $append(g, 45);
                      ak = -ak;
                      al = -al;
                    } else {
                      g = $append(g, 43);
                    }
                    g = Z(g, (am = ak / 60, (am === am && am !== 1 / 0 && am !== -1 / 0) ? am >> 0 : $throwRuntimeError("integer divide by zero")), 2);
                    if ((w === 25) || (w === 30) || (w === 26) || (w === 31)) {
                      g = $append(g, 58);
                    }
                    if (!((w === 29)) && !((w === 24))) {
                      g = Z(g, (an = ak % 60, an === an ? an : $throwRuntimeError("integer divide by zero")), 2);
                    }
                    if ((w === 23) || (w === 28) || (w === 31) || (w === 26)) {
                      if ((w === 31) || (w === 26)) {
                        g = $append(g, 58);
                      }
                      g = Z(g, (ao = al % 60, ao === ao ? ao : $throwRuntimeError("integer divide by zero")), 2);
                    }
                  } else if (aa === (21)) {
                    if (!(l === "")) {
                      g = $appendSlice(g, l);
                      break;
                    }
                    aq = (ap = m / 60, (ap === ap && ap !== 1 / 0 && ap !== -1 / 0) ? ap >> 0 : $throwRuntimeError("integer divide by zero"));
                    if (aq < 0) {
                      g = $append(g, 45);
                      aq = -aq;
                    } else {
                      g = $append(g, 43);
                    }
                    g = Z(g, (ar = aq / 60, (ar === ar && ar !== 1 / 0 && ar !== -1 / 0) ? ar >> 0 : $throwRuntimeError("integer divide by zero")), 2);
                    g = Z(g, (as = aq % 60, as === as ? as : $throwRuntimeError("integer divide by zero")), 2);
                  } else if ((aa === (32)) || (aa === (33))) {
                    g = AC(g, (($clone(i, BL).Nanosecond() >>> 0)), w >> 16 >> 0, (w & 65535) === 33);
                  }
              }
            }
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.AppendFormat
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.AppendFormat = function(g, h) {
      return this.$val.AppendFormat(g, h);
    };
    AF = function(g) {
      var g;
      return "\"" + g + "\"";
    };
    AE.ptr.prototype.Error = function() {
      var g;
      g = this;
      if (g.Message === "") {
        return "parsing time " + AF(g.Value) + " as " + AF(g.Layout) + ": cannot parse " + AF(g.ValueElem) + " as " + AF(g.LayoutElem);
      }
      return "parsing time " + AF(g.Value) + g.Message;
    };
    AE.prototype.Error = function() {
      return this.$val.Error();
    };
    AG = function(g, h) {
      var g, h, i;
      if (g.length <= h) {
        return false;
      }
      i = g.charCodeAt(h);
      return 48 <= i && i <= 57;
    };
    AH = function(g, h) {
      var g, h;
      if (!AG(g, 0)) {
        return [0, g, AD];
      }
      if (!AG(g, 1)) {
        if (h) {
          return [0, g, AD];
        }
        return [(((g.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), $substring(g, 1), $ifaceNil];
      }
      return [($imul((((g.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), 10)) + (((g.charCodeAt(1) - 48 << 24 >>> 24) >> 0)) >> 0, $substring(g, 2), $ifaceNil];
    };
    AI = function(g) {
      var g;
      while (true) {
        if (!(g.length > 0 && (g.charCodeAt(0) === 32))) {
          break;
        }
        g = $substring(g, 1);
      }
      return g;
    };
    AJ = function(g, h) {
      var g, h;
      while (true) {
        if (!(h.length > 0)) {
          break;
        }
        if (h.charCodeAt(0) === 32) {
          if (g.length > 0 && !((g.charCodeAt(0) === 32))) {
            return [g, AD];
          }
          h = AI(h);
          g = AI(g);
          continue;
        }
        if ((g.length === 0) || !((g.charCodeAt(0) === h.charCodeAt(0)))) {
          return [g, AD];
        }
        h = $substring(h, 1);
        g = $substring(g, 1);
      }
      return [g, $ifaceNil];
    };
    AK = function(g, h) {
      var g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            i = AM(g, h, $pkg.UTC, $pkg.Local);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return i;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AK
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Parse = AK;
    AM = function(g, h, i, j) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, bq, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, cd, ce, cf, cg, ch, ci, cj, ck, cl, cm, cn, co, cp, cq, cr, cs, ct, cu, cv, cw, cx, cy, cz, da, db, dc, dd, de, df, dg, dh, di, dj, dk, dl, dm, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, dz, ea, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        ba = $f.ba;
        bb = $f.bb;
        bc = $f.bc;
        bd = $f.bd;
        be = $f.be;
        bf = $f.bf;
        bg = $f.bg;
        bh = $f.bh;
        bi = $f.bi;
        bj = $f.bj;
        bk = $f.bk;
        bl = $f.bl;
        bm = $f.bm;
        bn = $f.bn;
        bo = $f.bo;
        bp = $f.bp;
        bq = $f.bq;
        br = $f.br;
        bs = $f.bs;
        bt = $f.bt;
        bu = $f.bu;
        bv = $f.bv;
        bw = $f.bw;
        bx = $f.bx;
        by = $f.by;
        bz = $f.bz;
        ca = $f.ca;
        cb = $f.cb;
        cc = $f.cc;
        cd = $f.cd;
        ce = $f.ce;
        cf = $f.cf;
        cg = $f.cg;
        ch = $f.ch;
        ci = $f.ci;
        cj = $f.cj;
        ck = $f.ck;
        cl = $f.cl;
        cm = $f.cm;
        cn = $f.cn;
        co = $f.co;
        cp = $f.cp;
        cq = $f.cq;
        cr = $f.cr;
        cs = $f.cs;
        ct = $f.ct;
        cu = $f.cu;
        cv = $f.cv;
        cw = $f.cw;
        cx = $f.cx;
        cy = $f.cy;
        cz = $f.cz;
        da = $f.da;
        db = $f.db;
        dc = $f.dc;
        dd = $f.dd;
        de = $f.de;
        df = $f.df;
        dg = $f.dg;
        dh = $f.dh;
        di = $f.di;
        dj = $f.dj;
        dk = $f.dk;
        dl = $f.dl;
        dm = $f.dm;
        dn = $f.dn;
        dp = $f.dp;
        dq = $f.dq;
        dr = $f.dr;
        ds = $f.ds;
        dt = $f.dt;
        du = $f.du;
        dv = $f.dv;
        dw = $f.dw;
        dx = $f.dx;
        dy = $f.dy;
        dz = $f.dz;
        ea = $f.ea;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            k = g;
            l = h;
            m = k;
            n = l;
            o = "";
            p = false;
            q = false;
            r = 0;
            s = 1;
            t = 1;
            u = 0;
            v = 0;
            w = 0;
            x = 0;
            y = DT.nil;
            z = -1;
            aa = "";
            while (true) {
              ab = $ifaceNil;
              ac = S(g);
              ad = ac[0];
              ae = ac[1];
              af = ac[2];
              ag = $substring(g, ad.length, (g.length - af.length >> 0));
              ah = AJ(h, ad);
              h = ah[0];
              ab = ah[1];
              if (!($interfaceIsEqual(ab, $ifaceNil))) {
                $s = -1;
                return [new BL.ptr(new $Uint64(0, 0), new $Int64(0, 0), DT.nil), new AE.ptr(m, n, ad, h, "")];
              }
              if (ae === 0) {
                if (!((h.length === 0))) {
                  $s = -1;
                  return [new BL.ptr(new $Uint64(0, 0), new $Int64(0, 0), DT.nil), new AE.ptr(m, n, "", h, ": extra text: " + h)];
                }
                break;
              }
              g = af;
              ai = "";
              switch (0) {
                default:
                  aj = ae & 65535;
                  if (aj === (274)) {
                    if (h.length < 2) {
                      ab = AD;
                      break;
                    }
                    ak = $substring(h, 0, 2);
                    al = $substring(h, 2);
                    ai = ak;
                    h = al;
                    am = AB(ai);
                    r = am[0];
                    ab = am[1];
                    if (r >= 69) {
                      r = r + (1900) >> 0;
                    } else {
                      r = r + (2000) >> 0;
                    }
                  } else if (aj === (273)) {
                    if (h.length < 4 || !AG(h, 0)) {
                      ab = AD;
                      break;
                    }
                    an = $substring(h, 0, 4);
                    ao = $substring(h, 4);
                    ai = an;
                    h = ao;
                    ap = AB(ai);
                    r = ap[0];
                    ab = ap[1];
                  } else if (aj === (258)) {
                    aq = Y(V, h);
                    s = aq[0];
                    h = aq[1];
                    ab = aq[2];
                    s = s + (1) >> 0;
                  } else if (aj === (257)) {
                    ar = Y(W, h);
                    s = ar[0];
                    h = ar[1];
                    ab = ar[2];
                    s = s + (1) >> 0;
                  } else if ((aj === (259)) || (aj === (260))) {
                    as = AH(h, ae === 260);
                    s = as[0];
                    h = as[1];
                    ab = as[2];
                    if (s <= 0 || 12 < s) {
                      o = "month";
                    }
                  } else if (aj === (262)) {
                    at = Y(U, h);
                    h = at[1];
                    ab = at[2];
                  } else if (aj === (261)) {
                    au = Y(T, h);
                    h = au[1];
                    ab = au[2];
                  } else if ((aj === (263)) || (aj === (264)) || (aj === (265))) {
                    if ((ae === 264) && h.length > 0 && (h.charCodeAt(0) === 32)) {
                      h = $substring(h, 1);
                    }
                    av = AH(h, ae === 265);
                    t = av[0];
                    h = av[1];
                    ab = av[2];
                    if (t < 0) {
                      o = "day";
                    }
                  } else if (aj === (522)) {
                    aw = AH(h, false);
                    u = aw[0];
                    h = aw[1];
                    ab = aw[2];
                    if (u < 0 || 24 <= u) {
                      o = "hour";
                    }
                  } else if ((aj === (523)) || (aj === (524))) {
                    ax = AH(h, ae === 524);
                    u = ax[0];
                    h = ax[1];
                    ab = ax[2];
                    if (u < 0 || 12 < u) {
                      o = "hour";
                    }
                  } else if ((aj === (525)) || (aj === (526))) {
                    ay = AH(h, ae === 526);
                    v = ay[0];
                    h = ay[1];
                    ab = ay[2];
                    if (v < 0 || 60 <= v) {
                      o = "minute";
                    }
                  } else if ((aj === (527)) || (aj === (528))) {
                    az = AH(h, ae === 528);
                    w = az[0];
                    h = az[1];
                    ab = az[2];
                    if (w < 0 || 60 <= w) {
                      o = "second";
                      break;
                    }
                    if (h.length >= 2 && (h.charCodeAt(0) === 46) && AG(h, 1)) {
                      ba = S(g);
                      ae = ba[1];
                      ae = ae & (65535);
                      if ((ae === 32) || (ae === 33)) {
                        break;
                      }
                      bb = 2;
                      while (true) {
                        if (!(bb < h.length && AG(h, bb))) {
                          break;
                        }
                        bb = bb + (1) >> 0;
                      }
                      bc = AQ(h, bb);
                      x = bc[0];
                      o = bc[1];
                      ab = bc[2];
                      h = $substring(h, bb);
                    }
                  } else if (aj === (531)) {
                    if (h.length < 2) {
                      ab = AD;
                      break;
                    }
                    bd = $substring(h, 0, 2);
                    be = $substring(h, 2);
                    ai = bd;
                    h = be;
                    bf = ai;
                    if (bf === ("PM")) {
                      q = true;
                    } else if (bf === ("AM")) {
                      p = true;
                    } else {
                      ab = AD;
                    }
                  } else if (aj === (532)) {
                    if (h.length < 2) {
                      ab = AD;
                      break;
                    }
                    bg = $substring(h, 0, 2);
                    bh = $substring(h, 2);
                    ai = bg;
                    h = bh;
                    bi = ai;
                    if (bi === ("pm")) {
                      q = true;
                    } else if (bi === ("am")) {
                      p = true;
                    } else {
                      ab = AD;
                    }
                  } else if ((aj === (22)) || (aj === (25)) || (aj === (23)) || (aj === (24)) || (aj === (26)) || (aj === (27)) || (aj === (29)) || (aj === (30)) || (aj === (28)) || (aj === (31))) {
                    if (((ae === 22) || (ae === 24) || (ae === 25)) && h.length >= 1 && (h.charCodeAt(0) === 90)) {
                      h = $substring(h, 1);
                      y = $pkg.UTC;
                      break;
                    }
                    bj = "";
                    bk = "";
                    bl = "";
                    bm = "";
                    bn = bj;
                    bo = bk;
                    bp = bl;
                    bq = bm;
                    if ((ae === 25) || (ae === 30)) {
                      if (h.length < 6) {
                        ab = AD;
                        break;
                      }
                      if (!((h.charCodeAt(3) === 58))) {
                        ab = AD;
                        break;
                      }
                      br = $substring(h, 0, 1);
                      bs = $substring(h, 1, 3);
                      bt = $substring(h, 4, 6);
                      bu = "00";
                      bv = $substring(h, 6);
                      bn = br;
                      bo = bs;
                      bp = bt;
                      bq = bu;
                      h = bv;
                    } else if ((ae === 29) || (ae === 24)) {
                      if (h.length < 3) {
                        ab = AD;
                        break;
                      }
                      bw = $substring(h, 0, 1);
                      bx = $substring(h, 1, 3);
                      by = "00";
                      bz = "00";
                      ca = $substring(h, 3);
                      bn = bw;
                      bo = bx;
                      bp = by;
                      bq = bz;
                      h = ca;
                    } else if ((ae === 26) || (ae === 31)) {
                      if (h.length < 9) {
                        ab = AD;
                        break;
                      }
                      if (!((h.charCodeAt(3) === 58)) || !((h.charCodeAt(6) === 58))) {
                        ab = AD;
                        break;
                      }
                      cb = $substring(h, 0, 1);
                      cc = $substring(h, 1, 3);
                      cd = $substring(h, 4, 6);
                      ce = $substring(h, 7, 9);
                      cf = $substring(h, 9);
                      bn = cb;
                      bo = cc;
                      bp = cd;
                      bq = ce;
                      h = cf;
                    } else if ((ae === 23) || (ae === 28)) {
                      if (h.length < 7) {
                        ab = AD;
                        break;
                      }
                      cg = $substring(h, 0, 1);
                      ch = $substring(h, 1, 3);
                      ci = $substring(h, 3, 5);
                      cj = $substring(h, 5, 7);
                      ck = $substring(h, 7);
                      bn = cg;
                      bo = ch;
                      bp = ci;
                      bq = cj;
                      h = ck;
                    } else {
                      if (h.length < 5) {
                        ab = AD;
                        break;
                      }
                      cl = $substring(h, 0, 1);
                      cm = $substring(h, 1, 3);
                      cn = $substring(h, 3, 5);
                      co = "00";
                      cp = $substring(h, 5);
                      bn = cl;
                      bo = cm;
                      bp = cn;
                      bq = co;
                      h = cp;
                    }
                    cq = 0;
                    cr = 0;
                    cs = 0;
                    ct = cq;
                    cu = cr;
                    cv = cs;
                    cw = AB(bo);
                    ct = cw[0];
                    ab = cw[1];
                    if ($interfaceIsEqual(ab, $ifaceNil)) {
                      cx = AB(bp);
                      cu = cx[0];
                      ab = cx[1];
                    }
                    if ($interfaceIsEqual(ab, $ifaceNil)) {
                      cy = AB(bq);
                      cv = cy[0];
                      ab = cy[1];
                    }
                    z = ($imul(((($imul(ct, 60)) + cu >> 0)), 60)) + cv >> 0;
                    cz = bn.charCodeAt(0);
                    if (cz === (43)) {} else if (cz === (45)) {
                      z = -z;
                    } else {
                      ab = AD;
                    }
                  } else if (aj === (21)) {
                    if (h.length >= 3 && $substring(h, 0, 3) === "UTC") {
                      y = $pkg.UTC;
                      h = $substring(h, 3);
                      break;
                    }
                    da = AN(h);
                    db = da[0];
                    dc = da[1];
                    if (!dc) {
                      ab = AD;
                      break;
                    }
                    dd = $substring(h, 0, db);
                    de = $substring(h, db);
                    aa = dd;
                    h = de;
                  } else if (aj === (32)) {
                    df = 1 + ((ae >> 16 >> 0)) >> 0;
                    if (h.length < df) {
                      ab = AD;
                      break;
                    }
                    dg = AQ(h, df);
                    x = dg[0];
                    o = dg[1];
                    ab = dg[2];
                    h = $substring(h, df);
                  } else if (aj === (33)) {
                    if (h.length < 2 || !((h.charCodeAt(0) === 46)) || h.charCodeAt(1) < 48 || 57 < h.charCodeAt(1)) {
                      break;
                    }
                    dh = 0;
                    while (true) {
                      if (!(dh < 9 && (dh + 1 >> 0) < h.length && 48 <= h.charCodeAt((dh + 1 >> 0)) && h.charCodeAt((dh + 1 >> 0)) <= 57)) {
                        break;
                      }
                      dh = dh + (1) >> 0;
                    }
                    di = AQ(h, 1 + dh >> 0);
                    x = di[0];
                    o = di[1];
                    ab = di[2];
                    h = $substring(h, (1 + dh >> 0));
                  }
              }
              if (!(o === "")) {
                $s = -1;
                return [new BL.ptr(new $Uint64(0, 0), new $Int64(0, 0), DT.nil), new AE.ptr(m, n, ag, h, ": " + o + " out of range")];
              }
              if (!($interfaceIsEqual(ab, $ifaceNil))) {
                $s = -1;
                return [new BL.ptr(new $Uint64(0, 0), new $Int64(0, 0), DT.nil), new AE.ptr(m, n, ag, h, "")];
              }
            }
            if (q && u < 12) {
              u = u + (12) >> 0;
            } else if (p && (u === 12)) {
              u = 0;
            }
            if (t < 1 || t > CA(((s >> 0)), r)) {
              $s = -1;
              return [new BL.ptr(new $Uint64(0, 0), new $Int64(0, 0), DT.nil), new AE.ptr(m, n, "", h, ": day out of range")];
            }
            if (!(y === DT.nil)) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            dj = CG(r, ((s >> 0)), t, u, v, w, x, y);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              dj = dj.$blk();
            }
            if (dj && dj.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [dj, $ifaceNil];
          case 2:
            if (!((z === -1))) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            dk = CG(r, ((s >> 0)), t, u, v, w, x, $pkg.UTC);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              dk = dk.$blk();
            }
            if (dk && dk.$blk !== undefined) {
              break s;
            }
            dl = $clone(dk, BL);
            dl.addSec((dm = (new $Int64(0, z)), new $Int64(-dm.$high, -dm.$low)));
            dp = j.lookup(dl.unixSec());
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              dp = dp.$blk();
            }
            if (dp && dp.$blk !== undefined) {
              break s;
            }
            dn = dp;
            dq = dn[0];
            dr = dn[1];
            if ((dr === z) && (aa === "" || dq === aa)) {
              dl.setLoc(j);
              $s = -1;
              return [dl, $ifaceNil];
            }
            dl.setLoc(CO(aa, z));
            $s = -1;
            return [dl, $ifaceNil];
          case 5:
            if (!(aa === "")) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            ds = CG(r, ((s >> 0)), t, u, v, w, x, $pkg.UTC);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              ds = ds.$blk();
            }
            if (ds && ds.$blk !== undefined) {
              break s;
            }
            dt = $clone(ds, BL);
            dv = j.lookupName(aa, dt.unixSec());
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              dv = dv.$blk();
            }
            if (dv && dv.$blk !== undefined) {
              break s;
            }
            du = dv;
            dw = du[0];
            dx = du[1];
            if (dx) {
              dt.addSec((dy = (new $Int64(0, dw)), new $Int64(-dy.$high, -dy.$low)));
              dt.setLoc(j);
              $s = -1;
              return [dt, $ifaceNil];
            }
            if (aa.length > 3 && $substring(aa, 0, 3) === "GMT") {
              dz = AB($substring(aa, 3));
              dw = dz[0];
              dw = $imul(dw, (3600));
            }
            dt.setLoc(CO(aa, dw));
            $s = -1;
            return [dt, $ifaceNil];
          case 9:
            ea = CG(r, ((s >> 0)), t, u, v, w, x, i);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              ea = ea.$blk();
            }
            if (ea && ea.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [ea, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AM
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.ba = ba;
      $f.bb = bb;
      $f.bc = bc;
      $f.bd = bd;
      $f.be = be;
      $f.bf = bf;
      $f.bg = bg;
      $f.bh = bh;
      $f.bi = bi;
      $f.bj = bj;
      $f.bk = bk;
      $f.bl = bl;
      $f.bm = bm;
      $f.bn = bn;
      $f.bo = bo;
      $f.bp = bp;
      $f.bq = bq;
      $f.br = br;
      $f.bs = bs;
      $f.bt = bt;
      $f.bu = bu;
      $f.bv = bv;
      $f.bw = bw;
      $f.bx = bx;
      $f.by = by;
      $f.bz = bz;
      $f.ca = ca;
      $f.cb = cb;
      $f.cc = cc;
      $f.cd = cd;
      $f.ce = ce;
      $f.cf = cf;
      $f.cg = cg;
      $f.ch = ch;
      $f.ci = ci;
      $f.cj = cj;
      $f.ck = ck;
      $f.cl = cl;
      $f.cm = cm;
      $f.cn = cn;
      $f.co = co;
      $f.cp = cp;
      $f.cq = cq;
      $f.cr = cr;
      $f.cs = cs;
      $f.ct = ct;
      $f.cu = cu;
      $f.cv = cv;
      $f.cw = cw;
      $f.cx = cx;
      $f.cy = cy;
      $f.cz = cz;
      $f.da = da;
      $f.db = db;
      $f.dc = dc;
      $f.dd = dd;
      $f.de = de;
      $f.df = df;
      $f.dg = dg;
      $f.dh = dh;
      $f.di = di;
      $f.dj = dj;
      $f.dk = dk;
      $f.dl = dl;
      $f.dm = dm;
      $f.dn = dn;
      $f.dp = dp;
      $f.dq = dq;
      $f.dr = dr;
      $f.ds = ds;
      $f.dt = dt;
      $f.du = du;
      $f.dv = dv;
      $f.dw = dw;
      $f.dx = dx;
      $f.dy = dy;
      $f.dz = dz;
      $f.ea = ea;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN = function(g) {
      var aa, ab, ac, ad, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      h = 0;
      i = false;
      if (g.length < 3) {
        j = 0;
        k = false;
        h = j;
        i = k;
        return [h, i];
      }
      if (g.length >= 4 && ($substring(g, 0, 4) === "ChST" || $substring(g, 0, 4) === "MeST")) {
        l = 4;
        m = true;
        h = l;
        i = m;
        return [h, i];
      }
      if ($substring(g, 0, 3) === "GMT") {
        h = AO(g);
        n = h;
        o = true;
        h = n;
        i = o;
        return [h, i];
      }
      if ((g.charCodeAt(0) === 43) || (g.charCodeAt(0) === 45)) {
        h = AP(g);
        p = h;
        q = true;
        h = p;
        i = q;
        return [h, i];
      }
      r = 0;
      r = 0;
      while (true) {
        if (!(r < 6)) {
          break;
        }
        if (r >= g.length) {
          break;
        }
        s = g.charCodeAt(r);
        if (s < 65 || 90 < s) {
          break;
        }
        r = r + (1) >> 0;
      }
      t = r;
      if ((t === (0)) || (t === (1)) || (t === (2)) || (t === (6))) {
        u = 0;
        v = false;
        h = u;
        i = v;
        return [h, i];
      } else if (t === (5)) {
        if (g.charCodeAt(4) === 84) {
          w = 5;
          x = true;
          h = w;
          i = x;
          return [h, i];
        }
      } else if (t === (4)) {
        if ((g.charCodeAt(3) === 84) || $substring(g, 0, 4) === "WITA") {
          y = 4;
          z = true;
          h = y;
          i = z;
          return [h, i];
        }
      } else if (t === (3)) {
        aa = 3;
        ab = true;
        h = aa;
        i = ab;
        return [h, i];
      }
      ac = 0;
      ad = false;
      h = ac;
      i = ad;
      return [h, i];
    };
    AO = function(g) {
      var g;
      g = $substring(g, 3);
      if (g.length === 0) {
        return 3;
      }
      return 3 + AP(g) >> 0;
    };
    AP = function(g) {
      var g, h, i, j, k, l;
      h = g.charCodeAt(0);
      if (!((h === 45)) && !((h === 43))) {
        return 0;
      }
      i = AS($substring(g, 1));
      j = i[0];
      k = i[1];
      l = i[2];
      if (!($interfaceIsEqual(l, $ifaceNil))) {
        return 0;
      }
      if (h === 45) {
        j = new $Int64(-j.$high, -j.$low);
      }
      if ((j.$high === 0 && j.$low === 0) || (j.$high < -1 || (j.$high === -1 && j.$low < 4294967282)) || (0 < j.$high || (0 === j.$high && 12 < j.$low))) {
        return 0;
      }
      return g.length - k.length >> 0;
    };
    AQ = function(g, h) {
      var g, h, i, j, k, l, m, n;
      i = 0;
      j = "";
      k = $ifaceNil;
      if (!((g.charCodeAt(0) === 46))) {
        k = AD;
        return [i, j, k];
      }
      l = AB($substring(g, 1, h));
      i = l[0];
      k = l[1];
      if (!($interfaceIsEqual(k, $ifaceNil))) {
        return [i, j, k];
      }
      if (i < 0 || 1000000000 <= i) {
        j = "fractional second";
        return [i, j, k];
      }
      m = 10 - h >> 0;
      n = 0;
      while (true) {
        if (!(n < m)) {
          break;
        }
        i = $imul(i, (10));
        n = n + (1) >> 0;
      }
      return [i, j, k];
    };
    AS = function(g) {
      var g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x;
      h = new $Int64(0, 0);
      i = "";
      j = $ifaceNil;
      k = 0;
      while (true) {
        if (!(k < g.length)) {
          break;
        }
        l = g.charCodeAt(k);
        if (l < 48 || l > 57) {
          break;
        }
        if ((h.$high > 214748364 || (h.$high === 214748364 && h.$low > 3435973836))) {
          m = new $Int64(0, 0);
          n = "";
          o = AR;
          h = m;
          i = n;
          j = o;
          return [h, i, j];
        }
        h = (p = (q = $mul64(h, new $Int64(0, 10)), r = (new $Int64(0, l)), new $Int64(q.$high + r.$high, q.$low + r.$low)), new $Int64(p.$high - 0, p.$low - 48));
        if ((h.$high < 0 || (h.$high === 0 && h.$low < 0))) {
          s = new $Int64(0, 0);
          t = "";
          u = AR;
          h = s;
          i = t;
          j = u;
          return [h, i, j];
        }
        k = k + (1) >> 0;
      }
      v = h;
      w = $substring(g, k);
      x = $ifaceNil;
      h = v;
      i = w;
      j = x;
      return [h, i, j];
    };
    BL.ptr.prototype.nsec = function() {
      var g, h;
      g = this;
      return (((h = g.wall, new $Uint64(h.$high & 0, (h.$low & 1073741823) >>> 0)).$low >> 0));
    };
    BL.prototype.nsec = function() {
      return this.$val.nsec();
    };
    BL.ptr.prototype.sec = function() {
      var g, h, i, j, k;
      g = this;
      if (!((h = (i = g.wall, new $Uint64(i.$high & 2147483648, (i.$low & 0) >>> 0)), (h.$high === 0 && h.$low === 0)))) {
        return (j = ((k = $shiftRightUint64($shiftLeft64(g.wall, 1), 31), new $Int64(k.$high, k.$low))), new $Int64(13 + j.$high, 3618733952 + j.$low));
      }
      return g.ext;
    };
    BL.prototype.sec = function() {
      return this.$val.sec();
    };
    BL.ptr.prototype.unixSec = function() {
      var g, h;
      g = this;
      return (h = g.sec(), new $Int64(h.$high + -15, h.$low + 2288912640));
    };
    BL.prototype.unixSec = function() {
      return this.$val.unixSec();
    };
    BL.ptr.prototype.addSec = function(g) {
      var g, h, i, j, k, l, m, n, o, p, q, r, s;
      h = this;
      if (!((i = (j = h.wall, new $Uint64(j.$high & 2147483648, (j.$low & 0) >>> 0)), (i.$high === 0 && i.$low === 0)))) {
        l = ((k = $shiftRightUint64($shiftLeft64(h.wall, 1), 31), new $Int64(k.$high, k.$low)));
        m = new $Int64(l.$high + g.$high, l.$low + g.$low);
        if ((0 < m.$high || (0 === m.$high && 0 <= m.$low)) && (m.$high < 1 || (m.$high === 1 && m.$low <= 4294967295))) {
          h.wall = (n = (o = (p = h.wall, new $Uint64(p.$high & 0, (p.$low & 1073741823) >>> 0)), q = $shiftLeft64((new $Uint64(m.$high, m.$low)), 30), new $Uint64(o.$high | q.$high, (o.$low | q.$low) >>> 0)), new $Uint64(n.$high | 2147483648, (n.$low | 0) >>> 0));
          return;
        }
        h.stripMono();
      }
      h.ext = (r = h.ext, s = g, new $Int64(r.$high + s.$high, r.$low + s.$low));
    };
    BL.prototype.addSec = function(g) {
      return this.$val.addSec(g);
    };
    BL.ptr.prototype.setLoc = function(g) {
      var g, h;
      h = this;
      if (g === CL) {
        g = DT.nil;
      }
      h.stripMono();
      h.loc = g;
    };
    BL.prototype.setLoc = function(g) {
      return this.$val.setLoc(g);
    };
    BL.ptr.prototype.stripMono = function() {
      var g, h, i, j, k;
      g = this;
      if (!((h = (i = g.wall, new $Uint64(i.$high & 2147483648, (i.$low & 0) >>> 0)), (h.$high === 0 && h.$low === 0)))) {
        g.ext = g.sec();
        g.wall = (j = g.wall, k = new $Uint64(0, 1073741823), new $Uint64(j.$high & k.$high, (j.$low & k.$low) >>> 0));
      }
    };
    BL.prototype.stripMono = function() {
      return this.$val.stripMono();
    };
    BL.ptr.prototype.After = function(g) {
      var g, h, i, j, k, l, m, n, o, p;
      h = this;
      if (!((i = (j = (k = h.wall, l = g.wall, new $Uint64(k.$high & l.$high, (k.$low & l.$low) >>> 0)), new $Uint64(j.$high & 2147483648, (j.$low & 0) >>> 0)), (i.$high === 0 && i.$low === 0)))) {
        return (m = h.ext, n = g.ext, (m.$high > n.$high || (m.$high === n.$high && m.$low > n.$low)));
      }
      o = h.sec();
      p = g.sec();
      return (o.$high > p.$high || (o.$high === p.$high && o.$low > p.$low)) || (o.$high === p.$high && o.$low === p.$low) && h.nsec() > g.nsec();
    };
    BL.prototype.After = function(g) {
      return this.$val.After(g);
    };
    BL.ptr.prototype.Before = function(g) {
      var g, h, i, j, k, l, m, n, o, p, q, r;
      h = this;
      if (!((i = (j = (k = h.wall, l = g.wall, new $Uint64(k.$high & l.$high, (k.$low & l.$low) >>> 0)), new $Uint64(j.$high & 2147483648, (j.$low & 0) >>> 0)), (i.$high === 0 && i.$low === 0)))) {
        return (m = h.ext, n = g.ext, (m.$high < n.$high || (m.$high === n.$high && m.$low < n.$low)));
      }
      return (o = h.sec(), p = g.sec(), (o.$high < p.$high || (o.$high === p.$high && o.$low < p.$low))) || (q = h.sec(), r = g.sec(), (q.$high === r.$high && q.$low === r.$low)) && h.nsec() < g.nsec();
    };
    BL.prototype.Before = function(g) {
      return this.$val.Before(g);
    };
    BL.ptr.prototype.Equal = function(g) {
      var g, h, i, j, k, l, m, n, o, p;
      h = this;
      if (!((i = (j = (k = h.wall, l = g.wall, new $Uint64(k.$high & l.$high, (k.$low & l.$low) >>> 0)), new $Uint64(j.$high & 2147483648, (j.$low & 0) >>> 0)), (i.$high === 0 && i.$low === 0)))) {
        return (m = h.ext, n = g.ext, (m.$high === n.$high && m.$low === n.$low));
      }
      return (o = h.sec(), p = g.sec(), (o.$high === p.$high && o.$low === p.$low)) && (h.nsec() === g.nsec());
    };
    BL.prototype.Equal = function(g) {
      return this.$val.Equal(g);
    };
    BM.prototype.String = function() {
      var g, h, i, j;
      g = this.$val;
      if (1 <= g && g <= 12) {
        return (h = g - 1 >> 0, ((h < 0 || h >= BN.length) ? ($throwRuntimeError("index out of range"), undefined) : BN[h]));
      }
      i = $makeSlice(DQ, 20);
      j = BU(i, (new $Uint64(0, g)));
      return "%!Month(" + ($bytesToString($subslice(i, j))) + ")";
    };
    $ptrType(BM).prototype.String = function() {
      return new BM(this.$get()).String();
    };
    BO.prototype.String = function() {
      var g, h, i;
      g = this.$val;
      if (0 <= g && g <= 6) {
        return ((g < 0 || g >= BP.length) ? ($throwRuntimeError("index out of range"), undefined) : BP[g]);
      }
      h = $makeSlice(DQ, 20);
      i = BU(h, (new $Uint64(0, g)));
      return "%!Weekday(" + ($bytesToString($subslice(h, i))) + ")";
    };
    $ptrType(BO).prototype.String = function() {
      return new BO(this.$get()).String();
    };
    BL.ptr.prototype.IsZero = function() {
      var g, h;
      g = this;
      return (h = g.sec(), (h.$high === 0 && h.$low === 0)) && (g.nsec() === 0);
    };
    BL.prototype.IsZero = function() {
      return this.$val.IsZero();
    };
    BL.ptr.prototype.abs = function() {
      var g, h, i, j, k, l, m, n, o, p, q, r, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = g.loc;
            if (h === DT.nil || h === CM) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            i = h.get();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
          case 2:
            j = g.unixSec();
            if (!(h === CL)) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            if (!(h.cacheZone === DL.nil) && (k = h.cacheStart, (k.$high < j.$high || (k.$high === j.$high && k.$low <= j.$low))) && (l = h.cacheEnd, (j.$high < l.$high || (j.$high === l.$high && j.$low < l.$low)))) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            j = (m = (new $Int64(0, h.cacheZone.offset)), new $Int64(j.$high + m.$high, j.$low + m.$low));
            $s = 8;
            continue;
          case 7:
            o = h.lookup(j);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            n = o;
            p = n[1];
            j = (q = (new $Int64(0, p)), new $Int64(j.$high + q.$high, j.$low + q.$low));
          case 8:
          case 5:
            $s = -1;
            return ((r = new $Int64(j.$high + 2147483646, j.$low + 450480384), new $Uint64(r.$high, r.$low)));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.abs
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.abs = function() {
      return this.$val.abs();
    };
    BL.ptr.prototype.locabs = function() {
      var g, h, i, j, k, l, m, n, o, p, q, r, s, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = "";
            h = 0;
            i = new $Uint64(0, 0);
            j = this;
            k = j.loc;
            if (k === DT.nil || k === CM) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            l = k.get();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            k = l;
          case 2:
            m = j.unixSec();
            if (!(k === CL)) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            if (!(k.cacheZone === DL.nil) && (n = k.cacheStart, (n.$high < m.$high || (n.$high === m.$high && n.$low <= m.$low))) && (o = k.cacheEnd, (m.$high < o.$high || (m.$high === o.$high && m.$low < o.$low)))) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            g = k.cacheZone.name;
            h = k.cacheZone.offset;
            $s = 9;
            continue;
          case 8:
            q = k.lookup(m);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            p = q;
            g = p[0];
            h = p[1];
          case 9:
            m = (r = (new $Int64(0, h)), new $Int64(m.$high + r.$high, m.$low + r.$low));
            $s = 6;
            continue;
          case 5:
            g = "UTC";
          case 6:
            i = ((s = new $Int64(m.$high + 2147483646, m.$low + 450480384), new $Uint64(s.$high, s.$low)));
            $s = -1;
            return [g, h, i];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.locabs
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.locabs = function() {
      return this.$val.locabs();
    };
    BL.ptr.prototype.Date = function() {
      var g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = 0;
            h = 0;
            i = 0;
            j = this;
            l = $clone(j, BL).date(true);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            k = l;
            g = k[0];
            h = k[1];
            i = k[2];
            $s = -1;
            return [g, h, i];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Date
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Date = function() {
      return this.$val.Date();
    };
    BL.ptr.prototype.Year = function() {
      var g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            i = $clone(g, BL).date(false);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            j = h[0];
            $s = -1;
            return j;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Year
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Year = function() {
      return this.$val.Year();
    };
    BL.ptr.prototype.Month = function() {
      var g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            i = $clone(g, BL).date(true);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            j = h[1];
            $s = -1;
            return j;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Month
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Month = function() {
      return this.$val.Month();
    };
    BL.ptr.prototype.Day = function() {
      var g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            i = $clone(g, BL).date(true);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            j = h[2];
            $s = -1;
            return j;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Day
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Day = function() {
      return this.$val.Day();
    };
    BL.ptr.prototype.Weekday = function() {
      var g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = $clone(g, BL).abs();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            i = BQ(h);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return i;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Weekday
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Weekday = function() {
      return this.$val.Weekday();
    };
    BQ = function(g) {
      var g, h, i;
      h = $div64((new $Uint64(g.$high + 0, g.$low + 86400)), new $Uint64(0, 604800), true);
      return (((i = ((h.$low >> 0)) / 86400, (i === i && i !== 1 / 0 && i !== -1 / 0) ? i >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
    };
    BL.ptr.prototype.ISOWeek = function() {
      var g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = 0;
            h = 0;
            i = this;
            k = $clone(i, BL).date(true);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            g = j[0];
            l = j[1];
            m = j[2];
            n = j[3];
            p = $clone(i, BL).Weekday();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            q = (o = (((p + 6 >> 0) >> 0)) % 7, o === o ? o : $throwRuntimeError("integer divide by zero"));
            h = (r = (((n - q >> 0) + 7 >> 0)) / 7, (r === r && r !== 1 / 0 && r !== -1 / 0) ? r >> 0 : $throwRuntimeError("integer divide by zero"));
            t = (s = (((q - n >> 0) + 371 >> 0)) % 7, s === s ? s : $throwRuntimeError("integer divide by zero"));
            if (1 <= t && t <= 3) {
              h = h + (1) >> 0;
            }
            if (h === 0) {
              g = g - (1) >> 0;
              h = 52;
              if ((t === 4) || ((t === 5) && CE(g))) {
                h = h + (1) >> 0;
              }
            }
            if ((l === 12) && m >= 29 && q < 3) {
              v = (u = (((q + 31 >> 0) - m >> 0)) % 7, u === u ? u : $throwRuntimeError("integer divide by zero"));
              if (0 <= v && v <= 2) {
                g = g + (1) >> 0;
                h = 1;
              }
            }
            $s = -1;
            return [g, h];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.ISOWeek
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.ISOWeek = function() {
      return this.$val.ISOWeek();
    };
    BL.ptr.prototype.Clock = function() {
      var g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = 0;
            h = 0;
            i = 0;
            j = this;
            l = $clone(j, BL).abs();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            m = BR(l);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            k = m;
            g = k[0];
            h = k[1];
            i = k[2];
            $s = -1;
            return [g, h, i];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Clock
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Clock = function() {
      return this.$val.Clock();
    };
    BR = function(g) {
      var g, h, i, j, k, l;
      h = 0;
      i = 0;
      j = 0;
      j = (($div64(g, new $Uint64(0, 86400), true).$low >> 0));
      h = (k = j / 3600, (k === k && k !== 1 / 0 && k !== -1 / 0) ? k >> 0 : $throwRuntimeError("integer divide by zero"));
      j = j - (($imul(h, 3600))) >> 0;
      i = (l = j / 60, (l === l && l !== 1 / 0 && l !== -1 / 0) ? l >> 0 : $throwRuntimeError("integer divide by zero"));
      j = j - (($imul(i, 60))) >> 0;
      return [h, i, j];
    };
    BL.ptr.prototype.Hour = function() {
      var g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            i = $clone(g, BL).abs();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return (h = (($div64(i, new $Uint64(0, 86400), true).$low >> 0)) / 3600, (h === h && h !== 1 / 0 && h !== -1 / 0) ? h >> 0 : $throwRuntimeError("integer divide by zero"));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Hour
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Hour = function() {
      return this.$val.Hour();
    };
    BL.ptr.prototype.Minute = function() {
      var g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            i = $clone(g, BL).abs();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return (h = (($div64(i, new $Uint64(0, 3600), true).$low >> 0)) / 60, (h === h && h !== 1 / 0 && h !== -1 / 0) ? h >> 0 : $throwRuntimeError("integer divide by zero"));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Minute
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Minute = function() {
      return this.$val.Minute();
    };
    BL.ptr.prototype.Second = function() {
      var g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = $clone(g, BL).abs();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return (($div64(h, new $Uint64(0, 60), true).$low >> 0));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Second
        };
      }
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Second = function() {
      return this.$val.Second();
    };
    BL.ptr.prototype.Nanosecond = function() {
      var g;
      g = this;
      return ((g.nsec() >> 0));
    };
    BL.prototype.Nanosecond = function() {
      return this.$val.Nanosecond();
    };
    BL.ptr.prototype.YearDay = function() {
      var g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            i = $clone(g, BL).date(false);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            j = h[3];
            $s = -1;
            return j + 1 >> 0;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.YearDay
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.YearDay = function() {
      return this.$val.YearDay();
    };
    BS.prototype.String = function() {
      var g, h, i, j, k, l, m, n;
      g = this;
      h = DW.zero();
      i = 32;
      j = (new $Uint64(g.$high, g.$low));
      k = (g.$high < 0 || (g.$high === 0 && g.$low < 0));
      if (k) {
        j = new $Uint64(-j.$high, -j.$low);
      }
      if ((j.$high < 0 || (j.$high === 0 && j.$low < 1000000000))) {
        l = 0;
        i = i - (1) >> 0;
        ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i] = 115);
        i = i - (1) >> 0;
        if ((j.$high === 0 && j.$low === 0)) {
          return "0s";
        } else if ((j.$high < 0 || (j.$high === 0 && j.$low < 1000))) {
          l = 0;
          ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i] = 110);
        } else if ((j.$high < 0 || (j.$high === 0 && j.$low < 1000000))) {
          l = 3;
          i = i - (1) >> 0;
          $copyString($subslice(new DQ(h), i), "\xC2\xB5");
        } else {
          l = 6;
          ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i] = 109);
        }
        m = BT($subslice(new DQ(h), 0, i), j, l);
        i = m[0];
        j = m[1];
        i = BU($subslice(new DQ(h), 0, i), j);
      } else {
        i = i - (1) >> 0;
        ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i] = 115);
        n = BT($subslice(new DQ(h), 0, i), j, 9);
        i = n[0];
        j = n[1];
        i = BU($subslice(new DQ(h), 0, i), $div64(j, new $Uint64(0, 60), true));
        j = $div64(j, (new $Uint64(0, 60)), false);
        if ((j.$high > 0 || (j.$high === 0 && j.$low > 0))) {
          i = i - (1) >> 0;
          ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i] = 109);
          i = BU($subslice(new DQ(h), 0, i), $div64(j, new $Uint64(0, 60), true));
          j = $div64(j, (new $Uint64(0, 60)), false);
          if ((j.$high > 0 || (j.$high === 0 && j.$low > 0))) {
            i = i - (1) >> 0;
            ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i] = 104);
            i = BU($subslice(new DQ(h), 0, i), j);
          }
        }
      }
      if (k) {
        i = i - (1) >> 0;
        ((i < 0 || i >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[i] = 45);
      }
      return ($bytesToString($subslice(new DQ(h), i)));
    };
    $ptrType(BS).prototype.String = function() {
      return this.$get().String();
    };
    BT = function(g, h, i) {
      var g, h, i, j, k, l, m, n, o, p, q;
      j = 0;
      k = new $Uint64(0, 0);
      l = g.$length;
      m = false;
      n = 0;
      while (true) {
        if (!(n < i)) {
          break;
        }
        o = $div64(h, new $Uint64(0, 10), true);
        m = m || !((o.$high === 0 && o.$low === 0));
        if (m) {
          l = l - (1) >> 0;
          ((l < 0 || l >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + l] = (((o.$low << 24 >>> 24)) + 48 << 24 >>> 24));
        }
        h = $div64(h, (new $Uint64(0, 10)), false);
        n = n + (1) >> 0;
      }
      if (m) {
        l = l - (1) >> 0;
        ((l < 0 || l >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + l] = 46);
      }
      p = l;
      q = h;
      j = p;
      k = q;
      return [j, k];
    };
    BU = function(g, h) {
      var g, h, i;
      i = g.$length;
      if ((h.$high === 0 && h.$low === 0)) {
        i = i - (1) >> 0;
        ((i < 0 || i >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + i] = 48);
      } else {
        while (true) {
          if (!((h.$high > 0 || (h.$high === 0 && h.$low > 0)))) {
            break;
          }
          i = i - (1) >> 0;
          ((i < 0 || i >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + i] = ((($div64(h, new $Uint64(0, 10), true).$low << 24 >>> 24)) + 48 << 24 >>> 24));
          h = $div64(h, (new $Uint64(0, 10)), false);
        }
      }
      return i;
    };
    BS.prototype.Nanoseconds = function() {
      var g;
      g = this;
      return (new $Int64(g.$high, g.$low));
    };
    $ptrType(BS).prototype.Nanoseconds = function() {
      return this.$get().Nanoseconds();
    };
    BS.prototype.Seconds = function() {
      var g, h, i;
      g = this;
      h = $div64(g, new BS(0, 1000000000), false);
      i = $div64(g, new BS(0, 1000000000), true);
      return ($flatten64(h)) + ($flatten64(i)) / 1e+09;
    };
    $ptrType(BS).prototype.Seconds = function() {
      return this.$get().Seconds();
    };
    BS.prototype.Minutes = function() {
      var g, h, i;
      g = this;
      h = $div64(g, new BS(13, 4165425152), false);
      i = $div64(g, new BS(13, 4165425152), true);
      return ($flatten64(h)) + ($flatten64(i)) / 6e+10;
    };
    $ptrType(BS).prototype.Minutes = function() {
      return this.$get().Minutes();
    };
    BS.prototype.Hours = function() {
      var g, h, i;
      g = this;
      h = $div64(g, new BS(838, 817405952), false);
      i = $div64(g, new BS(838, 817405952), true);
      return ($flatten64(h)) + ($flatten64(i)) / 3.6e+12;
    };
    $ptrType(BS).prototype.Hours = function() {
      return this.$get().Hours();
    };
    BS.prototype.Truncate = function(g) {
      var g, h, i;
      h = this;
      if ((g.$high < 0 || (g.$high === 0 && g.$low <= 0))) {
        return h;
      }
      return (i = $div64(h, g, true), new BS(h.$high - i.$high, h.$low - i.$low));
    };
    $ptrType(BS).prototype.Truncate = function(g) {
      return this.$get().Truncate(g);
    };
    BV = function(g, h) {
      var g, h, i, j, k, l;
      return (i = (j = (new $Uint64(g.$high, g.$low)), k = (new $Uint64(g.$high, g.$low)), new $Uint64(j.$high + k.$high, j.$low + k.$low)), l = (new $Uint64(h.$high, h.$low)), (i.$high < l.$high || (i.$high === l.$high && i.$low < l.$low)));
    };
    BS.prototype.Round = function(g) {
      var g, h, i, j, k, l, m;
      h = this;
      if ((g.$high < 0 || (g.$high === 0 && g.$low <= 0))) {
        return h;
      }
      i = $div64(h, g, true);
      if ((h.$high < 0 || (h.$high === 0 && h.$low < 0))) {
        i = new BS(-i.$high, -i.$low);
        if (BV(i, g)) {
          return new BS(h.$high + i.$high, h.$low + i.$low);
        }
        k = (j = new BS(h.$high - g.$high, h.$low - g.$low), new BS(j.$high + i.$high, j.$low + i.$low));
        if ((k.$high < h.$high || (k.$high === h.$high && k.$low < h.$low))) {
          return k;
        }
        return new BS(-2147483648, 0);
      }
      if (BV(i, g)) {
        return new BS(h.$high - i.$high, h.$low - i.$low);
      }
      m = (l = new BS(h.$high + g.$high, h.$low + g.$low), new BS(l.$high - i.$high, l.$low - i.$low));
      if ((m.$high > h.$high || (m.$high === h.$high && m.$low > h.$low))) {
        return m;
      }
      return new BS(2147483647, 4294967295);
    };
    $ptrType(BS).prototype.Round = function(g) {
      return this.$get().Round(g);
    };
    BL.ptr.prototype.Add = function(g) {
      var g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x;
      h = this;
      j = ((i = $div64(g, new BS(0, 1000000000), false), new $Int64(i.$high, i.$low)));
      l = h.nsec() + (((k = $div64(g, new BS(0, 1000000000), true), k.$low + ((k.$high >> 31) * 4294967296)) >> 0)) >> 0;
      if (l >= 1000000000) {
        j = (m = new $Int64(0, 1), new $Int64(j.$high + m.$high, j.$low + m.$low));
        l = l - (1000000000) >> 0;
      } else if (l < 0) {
        j = (n = new $Int64(0, 1), new $Int64(j.$high - n.$high, j.$low - n.$low));
        l = l + (1000000000) >> 0;
      }
      h.wall = (o = (p = h.wall, new $Uint64(p.$high & ~0, (p.$low & ~1073741823) >>> 0)), q = (new $Uint64(0, l)), new $Uint64(o.$high | q.$high, (o.$low | q.$low) >>> 0));
      h.addSec(j);
      if (!((r = (s = h.wall, new $Uint64(s.$high & 2147483648, (s.$low & 0) >>> 0)), (r.$high === 0 && r.$low === 0)))) {
        v = (t = h.ext, u = (new $Int64(g.$high, g.$low)), new $Int64(t.$high + u.$high, t.$low + u.$low));
        if ((g.$high < 0 || (g.$high === 0 && g.$low < 0)) && (w = h.ext, (v.$high > w.$high || (v.$high === w.$high && v.$low > w.$low))) || (g.$high > 0 || (g.$high === 0 && g.$low > 0)) && (x = h.ext, (v.$high < x.$high || (v.$high === x.$high && v.$low < x.$low)))) {
          h.stripMono();
        } else {
          h.ext = v;
        }
      }
      return h;
    };
    BL.prototype.Add = function(g) {
      return this.$val.Add(g);
    };
    BL.ptr.prototype.Sub = function(g) {
      var g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v;
      h = this;
      if (!((i = (j = (k = h.wall, l = g.wall, new $Uint64(k.$high & l.$high, (k.$low & l.$low) >>> 0)), new $Uint64(j.$high & 2147483648, (j.$low & 0) >>> 0)), (i.$high === 0 && i.$low === 0)))) {
        m = h.ext;
        n = g.ext;
        p = ((o = new $Int64(m.$high - n.$high, m.$low - n.$low), new BS(o.$high, o.$low)));
        if ((p.$high < 0 || (p.$high === 0 && p.$low < 0)) && (m.$high > n.$high || (m.$high === n.$high && m.$low > n.$low))) {
          return new BS(2147483647, 4294967295);
        }
        if ((p.$high > 0 || (p.$high === 0 && p.$low > 0)) && (m.$high < n.$high || (m.$high === n.$high && m.$low < n.$low))) {
          return new BS(-2147483648, 0);
        }
        return p;
      }
      v = (q = $mul64(((r = (s = h.sec(), t = g.sec(), new $Int64(s.$high - t.$high, s.$low - t.$low)), new BS(r.$high, r.$low))), new BS(0, 1000000000)), u = (new BS(0, (h.nsec() - g.nsec() >> 0))), new BS(q.$high + u.$high, q.$low + u.$low));
      if ($clone($clone(g, BL).Add(v), BL).Equal($clone(h, BL))) {
        return v;
      } else if ($clone(h, BL).Before($clone(g, BL))) {
        return new BS(-2147483648, 0);
      } else {
        return new BS(2147483647, 4294967295);
      }
    };
    BL.prototype.Sub = function(g) {
      return this.$val.Sub(g);
    };
    BL.ptr.prototype.AddDate = function(g, h, i) {
      var g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            j = this;
            l = $clone(j, BL).Date();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            k = l;
            m = k[0];
            n = k[1];
            o = k[2];
            q = $clone(j, BL).Clock();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            p = q;
            r = p[0];
            s = p[1];
            t = p[2];
            u = CG(m + g >> 0, n + ((h >> 0)) >> 0, o + i >> 0, r, s, t, ((j.nsec() >> 0)), $clone(j, BL).Location());
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              u = u.$blk();
            }
            if (u && u.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return u;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.AddDate
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.AddDate = function(g, h, i) {
      return this.$val.AddDate(g, h, i);
    };
    BL.ptr.prototype.date = function(g) {
      var g, h, i, j, k, l, m, n, o, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = 0;
            i = 0;
            j = 0;
            k = 0;
            l = this;
            n = $clone(l, BL).abs();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            o = BY(n, g);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            m = o;
            h = m[0];
            i = m[1];
            j = m[2];
            k = m[3];
            $s = -1;
            return [h, i, j, k];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.date
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.date = function(g) {
      return this.$val.date(g);
    };
    BY = function(g, h) {
      var aa, ab, ac, ad, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      i = 0;
      j = 0;
      k = 0;
      l = 0;
      m = $div64(g, new $Uint64(0, 86400), false);
      n = $div64(m, new $Uint64(0, 146097), false);
      o = $mul64(new $Uint64(0, 400), n);
      m = (p = $mul64(new $Uint64(0, 146097), n), new $Uint64(m.$high - p.$high, m.$low - p.$low));
      n = $div64(m, new $Uint64(0, 36524), false);
      n = (q = $shiftRightUint64(n, 2), new $Uint64(n.$high - q.$high, n.$low - q.$low));
      o = (r = $mul64(new $Uint64(0, 100), n), new $Uint64(o.$high + r.$high, o.$low + r.$low));
      m = (s = $mul64(new $Uint64(0, 36524), n), new $Uint64(m.$high - s.$high, m.$low - s.$low));
      n = $div64(m, new $Uint64(0, 1461), false);
      o = (t = $mul64(new $Uint64(0, 4), n), new $Uint64(o.$high + t.$high, o.$low + t.$low));
      m = (u = $mul64(new $Uint64(0, 1461), n), new $Uint64(m.$high - u.$high, m.$low - u.$low));
      n = $div64(m, new $Uint64(0, 365), false);
      n = (v = $shiftRightUint64(n, 2), new $Uint64(n.$high - v.$high, n.$low - v.$low));
      o = (w = n, new $Uint64(o.$high + w.$high, o.$low + w.$low));
      m = (x = $mul64(new $Uint64(0, 365), n), new $Uint64(m.$high - x.$high, m.$low - x.$low));
      i = (((y = (z = (new $Int64(o.$high, o.$low)), new $Int64(z.$high + -69, z.$low + 4075721025)), y.$low + ((y.$high >> 31) * 4294967296)) >> 0));
      l = ((m.$low >> 0));
      if (!h) {
        return [i, j, k, l];
      }
      k = l;
      if (CE(i)) {
        if (k > 59) {
          k = k - (1) >> 0;
        } else if ((k === 59)) {
          j = 2;
          k = 29;
          return [i, j, k, l];
        }
      }
      j = (((aa = k / 31, (aa === aa && aa !== 1 / 0 && aa !== -1 / 0) ? aa >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
      ac = (((ab = j + 1 >> 0, ((ab < 0 || ab >= BZ.length) ? ($throwRuntimeError("index out of range"), undefined) : BZ[ab])) >> 0));
      ad = 0;
      if (k >= ac) {
        j = j + (1) >> 0;
        ad = ac;
      } else {
        ad = ((((j < 0 || j >= BZ.length) ? ($throwRuntimeError("index out of range"), undefined) : BZ[j]) >> 0));
      }
      j = j + (1) >> 0;
      k = (k - ad >> 0) + 1 >> 0;
      return [i, j, k, l];
    };
    CA = function(g, h) {
      var g, h, i;
      if ((g === 2) && CE(h)) {
        return 29;
      }
      return (((((g < 0 || g >= BZ.length) ? ($throwRuntimeError("index out of range"), undefined) : BZ[g]) - (i = g - 1 >> 0, ((i < 0 || i >= BZ.length) ? ($throwRuntimeError("index out of range"), undefined) : BZ[i])) >> 0) >> 0));
    };
    CB = function() {
      var g, h, i, j, k, l, m, n, o;
      g = J();
      h = g[0];
      i = g[1];
      j = g[2];
      h = (k = new $Int64(0, 2682288000), new $Int64(h.$high + k.$high, h.$low + k.$low));
      if (!((l = $shiftRightUint64((new $Uint64(h.$high, h.$low)), 33), (l.$high === 0 && l.$low === 0)))) {
        return new BL.ptr((new $Uint64(0, i)), new $Int64(h.$high + 13, h.$low + 3618733952), $pkg.Local);
      }
      return new BL.ptr((m = (n = $shiftLeft64((new $Uint64(h.$high, h.$low)), 30), new $Uint64(2147483648 | n.$high, (0 | n.$low) >>> 0)), o = (new $Uint64(0, i)), new $Uint64(m.$high | o.$high, (m.$low | o.$low) >>> 0)), j, $pkg.Local);
    };
    $pkg.Now = CB;
    CC = function(g, h) {
      var g, h;
      return new BL.ptr((new $Uint64(0, h)), new $Int64(g.$high + 14, g.$low + 2006054656), $pkg.Local);
    };
    BL.ptr.prototype.UTC = function() {
      var g;
      g = this;
      g.setLoc(CL);
      return g;
    };
    BL.prototype.UTC = function() {
      return this.$val.UTC();
    };
    BL.ptr.prototype.Local = function() {
      var g;
      g = this;
      g.setLoc($pkg.Local);
      return g;
    };
    BL.prototype.Local = function() {
      return this.$val.Local();
    };
    BL.ptr.prototype.In = function(g) {
      var g, h;
      h = this;
      if (g === DT.nil) {
        $panic(new $String("time: missing Location in call to Time.In"));
      }
      h.setLoc(g);
      return h;
    };
    BL.prototype.In = function(g) {
      return this.$val.In(g);
    };
    BL.ptr.prototype.Location = function() {
      var g, h;
      g = this;
      h = g.loc;
      if (h === DT.nil) {
        h = $pkg.UTC;
      }
      return h;
    };
    BL.prototype.Location = function() {
      return this.$val.Location();
    };
    BL.ptr.prototype.Zone = function() {
      var g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = "";
            h = 0;
            i = this;
            k = i.loc.lookup(i.unixSec());
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            g = j[0];
            h = j[1];
            $s = -1;
            return [g, h];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Zone
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Zone = function() {
      return this.$val.Zone();
    };
    BL.ptr.prototype.Unix = function() {
      var g;
      g = this;
      return g.unixSec();
    };
    BL.prototype.Unix = function() {
      return this.$val.Unix();
    };
    BL.ptr.prototype.UnixNano = function() {
      var g, h, i;
      g = this;
      return (h = $mul64((g.unixSec()), new $Int64(0, 1000000000)), i = (new $Int64(0, g.nsec())), new $Int64(h.$high + i.$high, h.$low + i.$low));
    };
    BL.prototype.UnixNano = function() {
      return this.$val.UnixNano();
    };
    BL.ptr.prototype.MarshalBinary = function() {
      var g, h, i, j, k, l, m, n, o, p, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = 0;
            if ($clone(g, BL).Location() === $pkg.UTC) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            h = -1;
            $s = 3;
            continue;
          case 2:
            j = $clone(g, BL).Zone();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            i = j;
            k = i[1];
            if (!(((l = k % 60, l === l ? l : $throwRuntimeError("integer divide by zero")) === 0))) {
              $s = -1;
              return [DQ.nil, C.New("Time.MarshalBinary: zone offset has fractional minute")];
            }
            k = (m = k / (60), (m === m && m !== 1 / 0 && m !== -1 / 0) ? m >> 0 : $throwRuntimeError("integer divide by zero"));
            if (k < -32768 || (k === -1) || k > 32767) {
              $s = -1;
              return [DQ.nil, C.New("Time.MarshalBinary: unexpected zone offset")];
            }
            h = ((k << 16 >> 16));
          case 3:
            n = g.sec();
            o = g.nsec();
            p = new DQ([1, (($shiftRightInt64(n, 56).$low << 24 >>> 24)), (($shiftRightInt64(n, 48).$low << 24 >>> 24)), (($shiftRightInt64(n, 40).$low << 24 >>> 24)), (($shiftRightInt64(n, 32).$low << 24 >>> 24)), (($shiftRightInt64(n, 24).$low << 24 >>> 24)), (($shiftRightInt64(n, 16).$low << 24 >>> 24)), (($shiftRightInt64(n, 8).$low << 24 >>> 24)), ((n.$low << 24 >>> 24)), (((o >> 24 >> 0) << 24 >>> 24)), (((o >> 16 >> 0) << 24 >>> 24)), (((o >> 8 >> 0) << 24 >>> 24)), ((o << 24 >>> 24)), (((h >> 8 << 16 >> 16) << 24 >>> 24)), ((h << 24 >>> 24))]);
            $s = -1;
            return [p, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.MarshalBinary
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.MarshalBinary = function() {
      return this.$val.MarshalBinary();
    };
    BL.ptr.prototype.UnmarshalBinary = function(g) {
      var aa, ab, ac, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = this;
            i = g;
            if (i.$length === 0) {
              $s = -1;
              return C.New("Time.UnmarshalBinary: no data");
            }
            if (!(((0 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 0]) === 1))) {
              $s = -1;
              return C.New("Time.UnmarshalBinary: unsupported version");
            }
            if (!((i.$length === 15))) {
              $s = -1;
              return C.New("Time.UnmarshalBinary: invalid length");
            }
            i = $subslice(i, 1);
            x = (j = (k = (l = (m = (n = (o = (p = (new $Int64(0, (7 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 7]))), q = $shiftLeft64((new $Int64(0, (6 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 6]))), 8), new $Int64(p.$high | q.$high, (p.$low | q.$low) >>> 0)), r = $shiftLeft64((new $Int64(0, (5 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 5]))), 16), new $Int64(o.$high | r.$high, (o.$low | r.$low) >>> 0)), s = $shiftLeft64((new $Int64(0, (4 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 4]))), 24), new $Int64(n.$high | s.$high, (n.$low | s.$low) >>> 0)), t = $shiftLeft64((new $Int64(0, (3 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 3]))), 32), new $Int64(m.$high | t.$high, (m.$low | t.$low) >>> 0)), u = $shiftLeft64((new $Int64(0, (2 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 2]))), 40), new $Int64(l.$high | u.$high, (l.$low | u.$low) >>> 0)), v = $shiftLeft64((new $Int64(0, (1 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 1]))), 48), new $Int64(k.$high | v.$high, (k.$low | v.$low) >>> 0)), w = $shiftLeft64((new $Int64(0, (0 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 0]))), 56), new $Int64(j.$high | w.$high, (j.$low | w.$low) >>> 0));
            i = $subslice(i, 8);
            y = (((((3 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 3]) >> 0)) | ((((2 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 2]) >> 0)) << 8 >> 0)) | ((((1 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 1]) >> 0)) << 16 >> 0)) | ((((0 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 0]) >> 0)) << 24 >> 0);
            i = $subslice(i, 4);
            z = $imul(((((((1 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 1]) << 16 >> 16)) | ((((0 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 0]) << 16 >> 16)) << 8 << 16 >> 16)) >> 0)), 60);
            BL.copy(h, new BL.ptr(new $Uint64(0, 0), new $Int64(0, 0), DT.nil));
            h.wall = (new $Uint64(0, y));
            h.ext = x;
            if (z === -60) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            h.setLoc(CL);
            $s = 3;
            continue;
          case 2:
            ab = $pkg.Local.lookup(h.unixSec());
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              ab = ab.$blk();
            }
            if (ab && ab.$blk !== undefined) {
              break s;
            }
            aa = ab;
            ac = aa[1];
            if (z === ac) {
              h.setLoc($pkg.Local);
            } else {
              h.setLoc(CO("", z));
            }
          case 3:
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.UnmarshalBinary
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.UnmarshalBinary = function(g) {
      return this.$val.UnmarshalBinary(g);
    };
    BL.ptr.prototype.GobEncode = function() {
      var g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = $clone(g, BL).MarshalBinary();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return h;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.GobEncode
        };
      }
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.GobEncode = function() {
      return this.$val.GobEncode();
    };
    BL.ptr.prototype.GobDecode = function(g) {
      var g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = this;
            i = h.UnmarshalBinary(g);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return i;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.GobDecode
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.GobDecode = function(g) {
      return this.$val.GobDecode(g);
    };
    BL.ptr.prototype.MarshalJSON = function() {
      var g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = $clone(g, BL).Year();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            i = h;
            if (i < 0 || i >= 10000) {
              $s = -1;
              return [DQ.nil, C.New("Time.MarshalJSON: year outside of range [0,9999]")];
            }
            j = $makeSlice(DQ, 0, 37);
            j = $append(j, 34);
            k = $clone(g, BL).AppendFormat(j, "2006-01-02T15:04:05.999999999Z07:00");
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            j = $append(j, 34);
            $s = -1;
            return [j, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.MarshalJSON
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.MarshalJSON = function() {
      return this.$val.MarshalJSON();
    };
    BL.ptr.prototype.UnmarshalJSON = function(g) {
      var g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = this;
            if (($bytesToString(g)) === "null") {
              $s = -1;
              return $ifaceNil;
            }
            i = $ifaceNil;
            k = AK("\"2006-01-02T15:04:05Z07:00\"", ($bytesToString(g)));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            BL.copy(h, j[0]);
            i = j[1];
            $s = -1;
            return i;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.UnmarshalJSON
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.UnmarshalJSON = function(g) {
      return this.$val.UnmarshalJSON(g);
    };
    BL.ptr.prototype.MarshalText = function() {
      var g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = $clone(g, BL).Year();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            i = h;
            if (i < 0 || i >= 10000) {
              $s = -1;
              return [DQ.nil, C.New("Time.MarshalText: year outside of range [0,9999]")];
            }
            j = $makeSlice(DQ, 0, 35);
            k = $clone(g, BL).AppendFormat(j, "2006-01-02T15:04:05.999999999Z07:00");
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [k, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.MarshalText
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.MarshalText = function() {
      return this.$val.MarshalText();
    };
    BL.ptr.prototype.UnmarshalText = function(g) {
      var g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = this;
            i = $ifaceNil;
            k = AK("2006-01-02T15:04:05Z07:00", ($bytesToString(g)));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            BL.copy(h, j[0]);
            i = j[1];
            $s = -1;
            return i;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.UnmarshalText
        };
      }
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.UnmarshalText = function(g) {
      return this.$val.UnmarshalText(g);
    };
    CD = function(g, h) {
      var g, h, i, j, k, l, m;
      if ((h.$high < 0 || (h.$high === 0 && h.$low < 0)) || (h.$high > 0 || (h.$high === 0 && h.$low >= 1000000000))) {
        i = $div64(h, new $Int64(0, 1000000000), false);
        g = (j = i, new $Int64(g.$high + j.$high, g.$low + j.$low));
        h = (k = $mul64(i, new $Int64(0, 1000000000)), new $Int64(h.$high - k.$high, h.$low - k.$low));
        if ((h.$high < 0 || (h.$high === 0 && h.$low < 0))) {
          h = (l = new $Int64(0, 1000000000), new $Int64(h.$high + l.$high, h.$low + l.$low));
          g = (m = new $Int64(0, 1), new $Int64(g.$high - m.$high, g.$low - m.$low));
        }
      }
      return CC(g, (((h.$low + ((h.$high >> 31) * 4294967296)) >> 0)));
    };
    $pkg.Unix = CD;
    CE = function(g) {
      var g, h, i, j;
      return ((h = g % 4, h === h ? h : $throwRuntimeError("integer divide by zero")) === 0) && (!(((i = g % 100, i === i ? i : $throwRuntimeError("integer divide by zero")) === 0)) || ((j = g % 400, j === j ? j : $throwRuntimeError("integer divide by zero")) === 0));
    };
    CF = function(g, h, i) {
      var g, h, i, j, k, l, m, n, o, p, q;
      j = 0;
      k = 0;
      if (h < 0) {
        m = (l = ((-h - 1 >> 0)) / i, (l === l && l !== 1 / 0 && l !== -1 / 0) ? l >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
        g = g - (m) >> 0;
        h = h + (($imul(m, i))) >> 0;
      }
      if (h >= i) {
        o = (n = h / i, (n === n && n !== 1 / 0 && n !== -1 / 0) ? n >> 0 : $throwRuntimeError("integer divide by zero"));
        g = g + (o) >> 0;
        h = h - (($imul(o, i))) >> 0;
      }
      p = g;
      q = h;
      j = p;
      k = q;
      return [j, k];
    };
    CG = function(g, h, i, j, k, l, m, n) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (n === DT.nil) {
              $panic(new $String("time: missing Location in call to Date"));
            }
            o = ((h >> 0)) - 1 >> 0;
            p = CF(g, o, 12);
            g = p[0];
            o = p[1];
            h = ((o >> 0)) + 1 >> 0;
            q = CF(l, m, 1000000000);
            l = q[0];
            m = q[1];
            r = CF(k, l, 60);
            k = r[0];
            l = r[1];
            s = CF(j, k, 60);
            j = s[0];
            k = s[1];
            t = CF(i, j, 24);
            i = t[0];
            j = t[1];
            w = ((u = (v = (new $Int64(0, g)), new $Int64(v.$high - -69, v.$low - 4075721025)), new $Uint64(u.$high, u.$low)));
            x = $div64(w, new $Uint64(0, 400), false);
            w = (y = $mul64(new $Uint64(0, 400), x), new $Uint64(w.$high - y.$high, w.$low - y.$low));
            z = $mul64(new $Uint64(0, 146097), x);
            x = $div64(w, new $Uint64(0, 100), false);
            w = (aa = $mul64(new $Uint64(0, 100), x), new $Uint64(w.$high - aa.$high, w.$low - aa.$low));
            z = (ab = $mul64(new $Uint64(0, 36524), x), new $Uint64(z.$high + ab.$high, z.$low + ab.$low));
            x = $div64(w, new $Uint64(0, 4), false);
            w = (ac = $mul64(new $Uint64(0, 4), x), new $Uint64(w.$high - ac.$high, w.$low - ac.$low));
            z = (ad = $mul64(new $Uint64(0, 1461), x), new $Uint64(z.$high + ad.$high, z.$low + ad.$low));
            x = w;
            z = (ae = $mul64(new $Uint64(0, 365), x), new $Uint64(z.$high + ae.$high, z.$low + ae.$low));
            z = (af = (new $Uint64(0, (ag = h - 1 >> 0, ((ag < 0 || ag >= BZ.length) ? ($throwRuntimeError("index out of range"), undefined) : BZ[ag])))), new $Uint64(z.$high + af.$high, z.$low + af.$low));
            if (CE(g) && h >= 3) {
              z = (ah = new $Uint64(0, 1), new $Uint64(z.$high + ah.$high, z.$low + ah.$low));
            }
            z = (ai = (new $Uint64(0, (i - 1 >> 0))), new $Uint64(z.$high + ai.$high, z.$low + ai.$low));
            aj = $mul64(z, new $Uint64(0, 86400));
            aj = (ak = (new $Uint64(0, ((($imul(j, 3600)) + ($imul(k, 60)) >> 0) + l >> 0))), new $Uint64(aj.$high + ak.$high, aj.$low + ak.$low));
            am = (al = (new $Int64(aj.$high, aj.$low)), new $Int64(al.$high + -2147483647, al.$low + 3844486912));
            ao = n.lookup(am);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            an = ao;
            ap = an[1];
            aq = an[2];
            ar = an[3];
            if (!((ap === 0))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            at = (as = (new $Int64(0, ap)), new $Int64(am.$high - as.$high, am.$low - as.$low));
            if ((at.$high < aq.$high || (at.$high === aq.$high && at.$low < aq.$low))) {
              $s = 5;
              continue;
            }
            if ((at.$high > ar.$high || (at.$high === ar.$high && at.$low >= ar.$low))) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 5:
            av = n.lookup(new $Int64(aq.$high - 0, aq.$low - 1));
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              av = av.$blk();
            }
            if (av && av.$blk !== undefined) {
              break s;
            }
            au = av;
            ap = au[1];
            $s = 7;
            continue;
          case 6:
            ax = n.lookup(ar);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              ax = ax.$blk();
            }
            if (ax && ax.$blk !== undefined) {
              break s;
            }
            aw = ax;
            ap = aw[1];
          case 7:
          case 4:
            am = (ay = (new $Int64(0, ap)), new $Int64(am.$high - ay.$high, am.$low - ay.$low));
          case 3:
            az = $clone(CC(am, ((m >> 0))), BL);
            az.setLoc(n);
            $s = -1;
            return az;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CG
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Date = CG;
    BL.ptr.prototype.Truncate = function(g) {
      var g, h, i, j;
      h = this;
      h.stripMono();
      if ((g.$high < 0 || (g.$high === 0 && g.$low <= 0))) {
        return h;
      }
      i = CH($clone(h, BL), g);
      j = i[1];
      return $clone(h, BL).Add(new BS(-j.$high, -j.$low));
    };
    BL.prototype.Truncate = function(g) {
      return this.$val.Truncate(g);
    };
    BL.ptr.prototype.Round = function(g) {
      var g, h, i, j;
      h = this;
      h.stripMono();
      if ((g.$high < 0 || (g.$high === 0 && g.$low <= 0))) {
        return h;
      }
      i = CH($clone(h, BL), g);
      j = i[1];
      if (BV(j, g)) {
        return $clone(h, BL).Add(new BS(-j.$high, -j.$low));
      }
      return $clone(h, BL).Add(new BS(g.$high - j.$high, g.$low - j.$low));
    };
    BL.prototype.Round = function(g) {
      return this.$val.Round(g);
    };
    CH = function(g, h) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      i = 0;
      j = new BS(0, 0);
      k = false;
      l = g.nsec();
      m = g.sec();
      if ((m.$high < 0 || (m.$high === 0 && m.$low < 0))) {
        k = true;
        m = new $Int64(-m.$high, -m.$low);
        l = -l;
        if (l < 0) {
          l = l + (1000000000) >> 0;
          m = (n = new $Int64(0, 1), new $Int64(m.$high - n.$high, m.$low - n.$low));
        }
      }
      if ((h.$high < 0 || (h.$high === 0 && h.$low < 1000000000)) && (o = $div64(new BS(0, 1000000000), (new BS(h.$high + h.$high, h.$low + h.$low)), true), (o.$high === 0 && o.$low === 0))) {
        i = (((q = l / (((h.$low + ((h.$high >> 31) * 4294967296)) >> 0)), (q === q && q !== 1 / 0 && q !== -1 / 0) ? q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) & 1;
        j = (new BS(0, (r = l % (((h.$low + ((h.$high >> 31) * 4294967296)) >> 0)), r === r ? r : $throwRuntimeError("integer divide by zero"))));
      } else if ((p = $div64(h, new BS(0, 1000000000), true), (p.$high === 0 && p.$low === 0))) {
        t = ((s = $div64(h, new BS(0, 1000000000), false), new $Int64(s.$high, s.$low)));
        i = (((u = $div64(m, t, false), u.$low + ((u.$high >> 31) * 4294967296)) >> 0)) & 1;
        j = (v = $mul64(((w = $div64(m, t, true), new BS(w.$high, w.$low))), new BS(0, 1000000000)), x = (new BS(0, l)), new BS(v.$high + x.$high, v.$low + x.$low));
      } else {
        y = (new $Uint64(m.$high, m.$low));
        z = $mul64(($shiftRightUint64(y, 32)), new $Uint64(0, 1000000000));
        aa = $shiftRightUint64(z, 32);
        ab = $shiftLeft64(z, 32);
        z = $mul64((new $Uint64(y.$high & 0, (y.$low & 4294967295) >>> 0)), new $Uint64(0, 1000000000));
        ac = ab;
        ad = new $Uint64(ab.$high + z.$high, ab.$low + z.$low);
        ae = ac;
        ab = ad;
        if ((ab.$high < ae.$high || (ab.$high === ae.$high && ab.$low < ae.$low))) {
          aa = (af = new $Uint64(0, 1), new $Uint64(aa.$high + af.$high, aa.$low + af.$low));
        }
        ag = ab;
        ah = (ai = (new $Uint64(0, l)), new $Uint64(ab.$high + ai.$high, ab.$low + ai.$low));
        ae = ag;
        ab = ah;
        if ((ab.$high < ae.$high || (ab.$high === ae.$high && ab.$low < ae.$low))) {
          aa = (aj = new $Uint64(0, 1), new $Uint64(aa.$high + aj.$high, aa.$low + aj.$low));
        }
        ak = (new $Uint64(h.$high, h.$low));
        while (true) {
          if (!(!((al = $shiftRightUint64(ak, 63), (al.$high === 0 && al.$low === 1))))) {
            break;
          }
          ak = $shiftLeft64(ak, (1));
        }
        am = new $Uint64(0, 0);
        while (true) {
          i = 0;
          if ((aa.$high > ak.$high || (aa.$high === ak.$high && aa.$low > ak.$low)) || (aa.$high === ak.$high && aa.$low === ak.$low) && (ab.$high > am.$high || (ab.$high === am.$high && ab.$low >= am.$low))) {
            i = 1;
            an = ab;
            ao = new $Uint64(ab.$high - am.$high, ab.$low - am.$low);
            ae = an;
            ab = ao;
            if ((ab.$high > ae.$high || (ab.$high === ae.$high && ab.$low > ae.$low))) {
              aa = (ap = new $Uint64(0, 1), new $Uint64(aa.$high - ap.$high, aa.$low - ap.$low));
            }
            aa = (aq = ak, new $Uint64(aa.$high - aq.$high, aa.$low - aq.$low));
          }
          if ((ak.$high === 0 && ak.$low === 0) && (ar = (new $Uint64(h.$high, h.$low)), (am.$high === ar.$high && am.$low === ar.$low))) {
            break;
          }
          am = $shiftRightUint64(am, (1));
          am = (as = $shiftLeft64((new $Uint64(ak.$high & 0, (ak.$low & 1) >>> 0)), 63), new $Uint64(am.$high | as.$high, (am.$low | as.$low) >>> 0));
          ak = $shiftRightUint64(ak, (1));
        }
        j = (new BS(ab.$high, ab.$low));
      }
      if (k && !((j.$high === 0 && j.$low === 0))) {
        i = (i ^ (1)) >> 0;
        j = new BS(h.$high - j.$high, h.$low - j.$low);
      }
      return [i, j];
    };
    CI.ptr.prototype.get = function() {
      var g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if (g === DT.nil) {
              $s = -1;
              return CL;
            }
            if (g === CM) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = CN.Do(H);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CI.ptr.prototype.get
        };
      }
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CI.prototype.get = function() {
      return this.$val.get();
    };
    CI.ptr.prototype.String = function() {
      var g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = g.get();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return h.name;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CI.ptr.prototype.String
        };
      }
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CI.prototype.String = function() {
      return this.$val.String();
    };
    CO = function(g, h) {
      var g, h, i, j;
      i = new CI.ptr(g, new DJ([new CJ.ptr(g, h, false)]), new DK([new CK.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), DL.nil);
      i.cacheZone = (j = i.zone, (0 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 0]));
      return i;
    };
    $pkg.FixedZone = CO;
    CI.ptr.prototype.lookup = function(g) {
      var aa, ab, ac, ad, ae, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = "";
            i = 0;
            j = new $Int64(0, 0);
            k = new $Int64(0, 0);
            l = this;
            m = l.get();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            l = m;
            if (l.zone.$length === 0) {
              h = "UTC";
              i = 0;
              j = new $Int64(-2147483648, 0);
              k = new $Int64(2147483647, 4294967295);
              $s = -1;
              return [h, i, j, k];
            }
            n = l.cacheZone;
            if (!(n === DL.nil) && (o = l.cacheStart, (o.$high < g.$high || (o.$high === g.$high && o.$low <= g.$low))) && (p = l.cacheEnd, (g.$high < p.$high || (g.$high === p.$high && g.$low < p.$low)))) {
              h = n.name;
              i = n.offset;
              j = l.cacheStart;
              k = l.cacheEnd;
              $s = -1;
              return [h, i, j, k];
            }
            if ((l.tx.$length === 0) || (q = (r = l.tx, (0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0])).when, (g.$high < q.$high || (g.$high === q.$high && g.$low < q.$low)))) {
              u = (s = l.zone, t = l.lookupFirstZone(), ((t < 0 || t >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + t]));
              h = u.name;
              i = u.offset;
              j = new $Int64(-2147483648, 0);
              if (l.tx.$length > 0) {
                k = (v = l.tx, (0 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 0])).when;
              } else {
                k = new $Int64(2147483647, 4294967295);
              }
              $s = -1;
              return [h, i, j, k];
            }
            w = l.tx;
            k = new $Int64(2147483647, 4294967295);
            x = 0;
            y = w.$length;
            while (true) {
              if (!((y - x >> 0) > 1)) {
                break;
              }
              aa = x + (z = ((y - x >> 0)) / 2, (z === z && z !== 1 / 0 && z !== -1 / 0) ? z >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
              ab = ((aa < 0 || aa >= w.$length) ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + aa]).when;
              if ((g.$high < ab.$high || (g.$high === ab.$high && g.$low < ab.$low))) {
                k = ab;
                y = aa;
              } else {
                x = aa;
              }
            }
            ae = (ac = l.zone, ad = ((x < 0 || x >= w.$length) ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + x]).index, ((ad < 0 || ad >= ac.$length) ? ($throwRuntimeError("index out of range"), undefined) : ac.$array[ac.$offset + ad]));
            h = ae.name;
            i = ae.offset;
            j = ((x < 0 || x >= w.$length) ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + x]).when;
            $s = -1;
            return [h, i, j, k];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CI.ptr.prototype.lookup
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CI.prototype.lookup = function(g) {
      return this.$val.lookup(g);
    };
    CI.ptr.prototype.lookupFirstZone = function() {
      var g, h, i, j, k, l, m, n, o, p, q;
      g = this;
      if (!g.firstZoneUsed()) {
        return 0;
      }
      if (g.tx.$length > 0 && (h = g.zone, i = (j = g.tx, (0 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 0])).index, ((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i])).isDST) {
        l = (((k = g.tx, (0 >= k.$length ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + 0])).index >> 0)) - 1 >> 0;
        while (true) {
          if (!(l >= 0)) {
            break;
          }
          if (!(m = g.zone, ((l < 0 || l >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + l])).isDST) {
            return l;
          }
          l = l - (1) >> 0;
        }
      }
      n = g.zone;
      o = 0;
      while (true) {
        if (!(o < n.$length)) {
          break;
        }
        p = o;
        if (!(q = g.zone, ((p < 0 || p >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + p])).isDST) {
          return p;
        }
        o++;
      }
      return 0;
    };
    CI.prototype.lookupFirstZone = function() {
      return this.$val.lookupFirstZone();
    };
    CI.ptr.prototype.firstZoneUsed = function() {
      var g, h, i, j;
      g = this;
      h = g.tx;
      i = 0;
      while (true) {
        if (!(i < h.$length)) {
          break;
        }
        j = $clone(((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i]), CK);
        if (j.index === 0) {
          return true;
        }
        i++;
      }
      return false;
    };
    CI.prototype.firstZoneUsed = function() {
      return this.$val.firstZoneUsed();
    };
    CI.ptr.prototype.lookupName = function(g, h) {
      var aa, ab, ac, ad, ae, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            i = 0;
            j = false;
            k = this;
            l = k.get();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            k = l;
            m = k.zone;
            n = 0;
          case 2:
            if (!(n < m.$length)) {
              $s = 3;
              continue;
            }
            o = n;
            q = (p = k.zone, ((o < 0 || o >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + o]));
            if (q.name === g) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            t = k.lookup((s = (new $Int64(0, q.offset)), new $Int64(h.$high - s.$high, h.$low - s.$low)));
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            r = t;
            u = r[0];
            v = r[1];
            if (u === q.name) {
              w = v;
              x = true;
              i = w;
              j = x;
              $s = -1;
              return [i, j];
            }
          case 5:
            n++;
            $s = 2;
            continue;
          case 3:
            y = k.zone;
            z = 0;
            while (true) {
              if (!(z < y.$length)) {
                break;
              }
              aa = z;
              ac = (ab = k.zone, ((aa < 0 || aa >= ab.$length) ? ($throwRuntimeError("index out of range"), undefined) : ab.$array[ab.$offset + aa]));
              if (ac.name === g) {
                ad = ac.offset;
                ae = true;
                i = ad;
                j = ae;
                $s = -1;
                return [i, j];
              }
              z++;
            }
            $s = -1;
            return [i, j];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CI.ptr.prototype.lookupName
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CI.prototype.lookupName = function(g, h) {
      return this.$val.lookupName(g, h);
    };
    EB.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    BL.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Format",
      name: "Format",
      pkg: "",
      typ: $funcType([$String], [$String], false)
    }, {
      prop: "AppendFormat",
      name: "AppendFormat",
      pkg: "",
      typ: $funcType([DQ, $String], [DQ], false)
    }, {
      prop: "After",
      name: "After",
      pkg: "",
      typ: $funcType([BL], [$Bool], false)
    }, {
      prop: "Before",
      name: "Before",
      pkg: "",
      typ: $funcType([BL], [$Bool], false)
    }, {
      prop: "Equal",
      name: "Equal",
      pkg: "",
      typ: $funcType([BL], [$Bool], false)
    }, {
      prop: "IsZero",
      name: "IsZero",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "abs",
      name: "abs",
      pkg: "time",
      typ: $funcType([], [$Uint64], false)
    }, {
      prop: "locabs",
      name: "locabs",
      pkg: "time",
      typ: $funcType([], [$String, $Int, $Uint64], false)
    }, {
      prop: "Date",
      name: "Date",
      pkg: "",
      typ: $funcType([], [$Int, BM, $Int], false)
    }, {
      prop: "Year",
      name: "Year",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Month",
      name: "Month",
      pkg: "",
      typ: $funcType([], [BM], false)
    }, {
      prop: "Day",
      name: "Day",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Weekday",
      name: "Weekday",
      pkg: "",
      typ: $funcType([], [BO], false)
    }, {
      prop: "ISOWeek",
      name: "ISOWeek",
      pkg: "",
      typ: $funcType([], [$Int, $Int], false)
    }, {
      prop: "Clock",
      name: "Clock",
      pkg: "",
      typ: $funcType([], [$Int, $Int, $Int], false)
    }, {
      prop: "Hour",
      name: "Hour",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Minute",
      name: "Minute",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Second",
      name: "Second",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Nanosecond",
      name: "Nanosecond",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "YearDay",
      name: "YearDay",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Add",
      name: "Add",
      pkg: "",
      typ: $funcType([BS], [BL], false)
    }, {
      prop: "Sub",
      name: "Sub",
      pkg: "",
      typ: $funcType([BL], [BS], false)
    }, {
      prop: "AddDate",
      name: "AddDate",
      pkg: "",
      typ: $funcType([$Int, $Int, $Int], [BL], false)
    }, {
      prop: "date",
      name: "date",
      pkg: "time",
      typ: $funcType([$Bool], [$Int, BM, $Int, $Int], false)
    }, {
      prop: "UTC",
      name: "UTC",
      pkg: "",
      typ: $funcType([], [BL], false)
    }, {
      prop: "Local",
      name: "Local",
      pkg: "",
      typ: $funcType([], [BL], false)
    }, {
      prop: "In",
      name: "In",
      pkg: "",
      typ: $funcType([DT], [BL], false)
    }, {
      prop: "Location",
      name: "Location",
      pkg: "",
      typ: $funcType([], [DT], false)
    }, {
      prop: "Zone",
      name: "Zone",
      pkg: "",
      typ: $funcType([], [$String, $Int], false)
    }, {
      prop: "Unix",
      name: "Unix",
      pkg: "",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "UnixNano",
      name: "UnixNano",
      pkg: "",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "MarshalBinary",
      name: "MarshalBinary",
      pkg: "",
      typ: $funcType([], [DQ, $error], false)
    }, {
      prop: "GobEncode",
      name: "GobEncode",
      pkg: "",
      typ: $funcType([], [DQ, $error], false)
    }, {
      prop: "MarshalJSON",
      name: "MarshalJSON",
      pkg: "",
      typ: $funcType([], [DQ, $error], false)
    }, {
      prop: "MarshalText",
      name: "MarshalText",
      pkg: "",
      typ: $funcType([], [DQ, $error], false)
    }, {
      prop: "Truncate",
      name: "Truncate",
      pkg: "",
      typ: $funcType([BS], [BL], false)
    }, {
      prop: "Round",
      name: "Round",
      pkg: "",
      typ: $funcType([BS], [BL], false)
    }];
    EF.methods = [{
      prop: "nsec",
      name: "nsec",
      pkg: "time",
      typ: $funcType([], [$Int32], false)
    }, {
      prop: "sec",
      name: "sec",
      pkg: "time",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "unixSec",
      name: "unixSec",
      pkg: "time",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "addSec",
      name: "addSec",
      pkg: "time",
      typ: $funcType([$Int64], [], false)
    }, {
      prop: "setLoc",
      name: "setLoc",
      pkg: "time",
      typ: $funcType([DT], [], false)
    }, {
      prop: "stripMono",
      name: "stripMono",
      pkg: "time",
      typ: $funcType([], [], false)
    }, {
      prop: "setMono",
      name: "setMono",
      pkg: "time",
      typ: $funcType([$Int64], [], false)
    }, {
      prop: "mono",
      name: "mono",
      pkg: "time",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "UnmarshalBinary",
      name: "UnmarshalBinary",
      pkg: "",
      typ: $funcType([DQ], [$error], false)
    }, {
      prop: "GobDecode",
      name: "GobDecode",
      pkg: "",
      typ: $funcType([DQ], [$error], false)
    }, {
      prop: "UnmarshalJSON",
      name: "UnmarshalJSON",
      pkg: "",
      typ: $funcType([DQ], [$error], false)
    }, {
      prop: "UnmarshalText",
      name: "UnmarshalText",
      pkg: "",
      typ: $funcType([DQ], [$error], false)
    }];
    BM.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    BO.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    BS.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Nanoseconds",
      name: "Nanoseconds",
      pkg: "",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "Seconds",
      name: "Seconds",
      pkg: "",
      typ: $funcType([], [$Float64], false)
    }, {
      prop: "Minutes",
      name: "Minutes",
      pkg: "",
      typ: $funcType([], [$Float64], false)
    }, {
      prop: "Hours",
      name: "Hours",
      pkg: "",
      typ: $funcType([], [$Float64], false)
    }, {
      prop: "Truncate",
      name: "Truncate",
      pkg: "",
      typ: $funcType([BS], [BS], false)
    }, {
      prop: "Round",
      name: "Round",
      pkg: "",
      typ: $funcType([BS], [BS], false)
    }];
    DT.methods = [{
      prop: "get",
      name: "get",
      pkg: "time",
      typ: $funcType([], [DT], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "lookup",
      name: "lookup",
      pkg: "time",
      typ: $funcType([$Int64], [$String, $Int, $Int64, $Int64], false)
    }, {
      prop: "lookupFirstZone",
      name: "lookupFirstZone",
      pkg: "time",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "firstZoneUsed",
      name: "firstZoneUsed",
      pkg: "time",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "lookupName",
      name: "lookupName",
      pkg: "time",
      typ: $funcType([$String, $Int64], [$Int, $Bool], false)
    }];
    AE.init("", [{
      prop: "Layout",
      name: "Layout",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Value",
      name: "Value",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "LayoutElem",
      name: "LayoutElem",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "ValueElem",
      name: "ValueElem",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Message",
      name: "Message",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }]);
    BL.init("time", [{
      prop: "wall",
      name: "wall",
      embedded: false,
      exported: false,
      typ: $Uint64,
      tag: ""
    }, {
      prop: "ext",
      name: "ext",
      embedded: false,
      exported: false,
      typ: $Int64,
      tag: ""
    }, {
      prop: "loc",
      name: "loc",
      embedded: false,
      exported: false,
      typ: DT,
      tag: ""
    }]);
    CI.init("time", [{
      prop: "name",
      name: "name",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "zone",
      name: "zone",
      embedded: false,
      exported: false,
      typ: DJ,
      tag: ""
    }, {
      prop: "tx",
      name: "tx",
      embedded: false,
      exported: false,
      typ: DK,
      tag: ""
    }, {
      prop: "cacheStart",
      name: "cacheStart",
      embedded: false,
      exported: false,
      typ: $Int64,
      tag: ""
    }, {
      prop: "cacheEnd",
      name: "cacheEnd",
      embedded: false,
      exported: false,
      typ: $Int64,
      tag: ""
    }, {
      prop: "cacheZone",
      name: "cacheZone",
      embedded: false,
      exported: false,
      typ: DL,
      tag: ""
    }]);
    CJ.init("time", [{
      prop: "name",
      name: "name",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "offset",
      name: "offset",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "isDST",
      name: "isDST",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    CK.init("time", [{
      prop: "when",
      name: "when",
      embedded: false,
      exported: false,
      typ: $Int64,
      tag: ""
    }, {
      prop: "index",
      name: "index",
      embedded: false,
      exported: false,
      typ: $Uint8,
      tag: ""
    }, {
      prop: "isstd",
      name: "isstd",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "isutc",
      name: "isutc",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = C.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            CM = new CI.ptr("", DJ.nil, DK.nil, new $Int64(0, 0), new $Int64(0, 0), DL.nil);
            CN = new E.Once.ptr(false, false);
            O = new DN([A.GOROOT() + "/lib/time/zoneinfo.zip"]);
            Q = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
            T = new DN(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
            U = new DN(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
            V = new DN(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
            W = new DN(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
            AA = C.New("time: invalid number");
            AD = C.New("bad value for field");
            AR = C.New("time: bad [0-9]*");
            BN = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
            BP = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
            BZ = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
            CL = new CI.ptr("UTC", DJ.nil, DK.nil, new $Int64(0, 0), new $Int64(0, 0), DL.nil);
            $pkg.UTC = CL;
            $pkg.Local = CM;
            CP = C.New("time: invalid location name");
            CX = C.New("malformed time zone information");
            F();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["internal/poll"] = (function() {
    var $pkg = {},
      $init, B, D, F, C, E, A, G, M, O, P, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, K, Q, U, I, J, L, N, R, S, T;
    B = $packages["errors"];
    D = $packages["io"];
    F = $packages["runtime"];
    C = $packages["sync/atomic"];
    E = $packages["syscall"];
    A = $packages["time"];
    G = $pkg.pollDesc = $newType(0, $kindStruct, "poll.pollDesc", true, "internal/poll", false, function(closing_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.closing = false;
        return;
      }
      this.closing = closing_;
    });
    M = $pkg.TimeoutError = $newType(0, $kindStruct, "poll.TimeoutError", true, "internal/poll", true, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    O = $pkg.fdMutex = $newType(0, $kindStruct, "poll.fdMutex", true, "internal/poll", false, function(state_, rsema_, wsema_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.state = new $Uint64(0, 0);
        this.rsema = 0;
        this.wsema = 0;
        return;
      }
      this.state = state_;
      this.rsema = rsema_;
      this.wsema = wsema_;
    });
    P = $pkg.FD = $newType(0, $kindStruct, "poll.FD", true, "internal/poll", true, function(fdmu_, Sysfd_, pd_, iovecs_, csema_, isBlocking_, IsStream_, ZeroReadIsEOF_, isFile_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.fdmu = new O.ptr(new $Uint64(0, 0), 0, 0);
        this.Sysfd = 0;
        this.pd = new G.ptr(false);
        this.iovecs = AC.nil;
        this.csema = 0;
        this.isBlocking = 0;
        this.IsStream = false;
        this.ZeroReadIsEOF = false;
        this.isFile = false;
        return;
      }
      this.fdmu = fdmu_;
      this.Sysfd = Sysfd_;
      this.pd = pd_;
      this.iovecs = iovecs_;
      this.csema = csema_;
      this.isBlocking = isBlocking_;
      this.IsStream = IsStream_;
      this.ZeroReadIsEOF = ZeroReadIsEOF_;
      this.isFile = isFile_;
    });
    V = $ptrType($Uint32);
    W = $chanType($Bool, false, false);
    X = $sliceType(W);
    Y = $ptrType($Uint64);
    Z = $ptrType($Int32);
    AA = $arrayType($Uint8, 4);
    AB = $sliceType(E.Iovec);
    AC = $ptrType(AB);
    AD = $ptrType($Uint8);
    AE = $ptrType(P);
    AF = $ptrType(G);
    AG = $ptrType(M);
    AH = $ptrType(O);
    AI = $sliceType($Uint8);
    AJ = $ptrType(E.Stat_t);
    AK = $funcType([$Uintptr], [], false);
    AL = $funcType([$Uintptr], [$Bool], false);
    AM = $ptrType(E.Linger);
    AN = $ptrType(E.IPMreq);
    AO = $ptrType(E.IPv6Mreq);
    AP = $sliceType(AI);
    AQ = $ptrType(AP);
    G.ptr.prototype.init = function(c) {
      var c, d;
      d = this;
      return $ifaceNil;
    };
    G.prototype.init = function(c) {
      return this.$val.init(c);
    };
    G.ptr.prototype.close = function() {
      var c;
      c = this;
    };
    G.prototype.close = function() {
      return this.$val.close();
    };
    G.ptr.prototype.evict = function() {
      var c;
      c = this;
      c.closing = true;
    };
    G.prototype.evict = function() {
      return this.$val.evict();
    };
    G.ptr.prototype.prepare = function(c, d) {
      var c, d, e;
      e = this;
      if (e.closing) {
        return L(d);
      }
      return $ifaceNil;
    };
    G.prototype.prepare = function(c, d) {
      return this.$val.prepare(c, d);
    };
    G.ptr.prototype.prepareRead = function(c) {
      var c, d;
      d = this;
      return d.prepare(114, c);
    };
    G.prototype.prepareRead = function(c) {
      return this.$val.prepareRead(c);
    };
    G.ptr.prototype.prepareWrite = function(c) {
      var c, d;
      d = this;
      return d.prepare(119, c);
    };
    G.prototype.prepareWrite = function(c) {
      return this.$val.prepareWrite(c);
    };
    G.ptr.prototype.wait = function(c, d) {
      var c, d, e;
      e = this;
      if (e.closing) {
        return L(d);
      }
      return $pkg.ErrTimeout;
    };
    G.prototype.wait = function(c, d) {
      return this.$val.wait(c, d);
    };
    G.ptr.prototype.waitRead = function(c) {
      var c, d;
      d = this;
      return d.wait(114, c);
    };
    G.prototype.waitRead = function(c) {
      return this.$val.waitRead(c);
    };
    G.ptr.prototype.waitWrite = function(c) {
      var c, d;
      d = this;
      return d.wait(119, c);
    };
    G.prototype.waitWrite = function(c) {
      return this.$val.waitWrite(c);
    };
    G.ptr.prototype.pollable = function() {
      return true;
    };
    G.prototype.pollable = function() {
      return this.$val.pollable();
    };
    P.ptr.prototype.SetDeadline = function(c) {
      var c;
      return $ifaceNil;
    };
    P.prototype.SetDeadline = function(c) {
      return this.$val.SetDeadline(c);
    };
    P.ptr.prototype.SetReadDeadline = function(c) {
      var c;
      return $ifaceNil;
    };
    P.prototype.SetReadDeadline = function(c) {
      return this.$val.SetReadDeadline(c);
    };
    P.ptr.prototype.SetWriteDeadline = function(c) {
      var c;
      return $ifaceNil;
    };
    P.prototype.SetWriteDeadline = function(c) {
      return this.$val.SetWriteDeadline(c);
    };
    I = function(c) {
      var c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (c.$get() === 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            d = new $Chan($Bool, 0);
            e = c;
            (K || $throwRuntimeError("assignment to entry in nil map"))[V.keyFor(e)] = {
              k: e,
              v: $append((f = K[V.keyFor(c)], f !== undefined ? f.v : X.nil), d)
            };
            g = $recv(d);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            g[0];
          case 2:
            c.$set(c.$get() - (1) >>> 0);
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: I
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    J = function(c) {
      var c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c.$set(c.$get() + (1) >>> 0);
            e = (d = K[V.keyFor(c)], d !== undefined ? d.v : X.nil);
            if (e.$length === 0) {
              $s = -1;
              return;
            }
            f = (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]);
            e = $subslice(e, 1);
            g = c;
            (K || $throwRuntimeError("assignment to entry in nil map"))[V.keyFor(g)] = {
              k: g,
              v: e
            };
            if (e.$length === 0) {
              delete K[V.keyFor(c)];
            }
            $r = $send(f, true);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: J
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    L = function(c) {
      var c;
      if (c) {
        return $pkg.ErrFileClosing;
      }
      return $pkg.ErrNetClosing;
    };
    M.ptr.prototype.Error = function() {
      var c;
      c = this;
      return "i/o timeout";
    };
    M.prototype.Error = function() {
      return this.$val.Error();
    };
    M.ptr.prototype.Timeout = function() {
      var c;
      c = this;
      return true;
    };
    M.prototype.Timeout = function() {
      return this.$val.Timeout();
    };
    M.ptr.prototype.Temporary = function() {
      var c;
      c = this;
      return true;
    };
    M.prototype.Temporary = function() {
      return this.$val.Temporary();
    };
    N = function(c, d) {
      var c, d, e, f, g, h, i;
      while (true) {
        if (!(c.$get().$length > 0)) {
          break;
        }
        f = (new $Int64(0, (e = c.$get(), (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0])).$length));
        if ((f.$high > d.$high || (f.$high === d.$high && f.$low > d.$low))) {
          (h = c.$get(), (0 >= h.$length ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + 0] = $subslice((g = c.$get(), (0 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 0])), $flatten64(d))));
          return;
        }
        d = (i = f, new $Int64(d.$high - i.$high, d.$low - i.$low));
        c.$set($subslice((c.$get()), 1));
      }
    };
    O.ptr.prototype.incref = function() {
      var c, d, e, f, g;
      c = this;
      while (true) {
        d = C.LoadUint64((c.$ptr_state || (c.$ptr_state = new Y(function() {
          return this.$target.state;
        }, function($v) {
          this.$target.state = $v;
        }, c))));
        if (!((e = new $Uint64(d.$high & 0, (d.$low & 1) >>> 0), (e.$high === 0 && e.$low === 0)))) {
          return false;
        }
        f = new $Uint64(d.$high + 0, d.$low + 8);
        if ((g = new $Uint64(f.$high & 0, (f.$low & 8388600) >>> 0), (g.$high === 0 && g.$low === 0))) {
          $panic(new $String("too many concurrent operations on a single file or socket (max 1048575)"));
        }
        if (C.CompareAndSwapUint64((c.$ptr_state || (c.$ptr_state = new Y(function() {
            return this.$target.state;
          }, function($v) {
            this.$target.state = $v;
          }, c))), d, f)) {
          return true;
        }
      }
    };
    O.prototype.incref = function() {
      return this.$val.incref();
    };
    O.ptr.prototype.increfAndClose = function() {
      var c, d, e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
          case 1:
            d = C.LoadUint64((c.$ptr_state || (c.$ptr_state = new Y(function() {
              return this.$target.state;
            }, function($v) {
              this.$target.state = $v;
            }, c))));
            if (!((e = new $Uint64(d.$high & 0, (d.$low & 1) >>> 0), (e.$high === 0 && e.$low === 0)))) {
              $s = -1;
              return false;
            }
            g = (f = new $Uint64(d.$high | 0, (d.$low | 1) >>> 0), new $Uint64(f.$high + 0, f.$low + 8));
            if ((h = new $Uint64(g.$high & 0, (g.$low & 8388600) >>> 0), (h.$high === 0 && h.$low === 0))) {
              $panic(new $String("too many concurrent operations on a single file or socket (max 1048575)"));
            }
            g = (i = new $Uint64(2147483647, 4286578688), new $Uint64(g.$high & ~i.$high, (g.$low & ~i.$low) >>> 0));
            if (C.CompareAndSwapUint64((c.$ptr_state || (c.$ptr_state = new Y(function() {
                return this.$target.state;
              }, function($v) {
                this.$target.state = $v;
              }, c))), d, g)) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
          case 5:
            if (!(!((j = new $Uint64(d.$high & 2047, (d.$low & 4286578688) >>> 0), (j.$high === 0 && j.$low === 0))))) {
              $s = 6;
              continue;
            }
            d = (k = new $Uint64(0, 8388608), new $Uint64(d.$high - k.$high, d.$low - k.$low));
            $r = J((c.$ptr_rsema || (c.$ptr_rsema = new V(function() {
              return this.$target.rsema;
            }, function($v) {
              this.$target.rsema = $v;
            }, c))));
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 5;
            continue;
          case 6:
          case 8:
            if (!(!((l = new $Uint64(d.$high & 2147481600, (d.$low & 0) >>> 0), (l.$high === 0 && l.$low === 0))))) {
              $s = 9;
              continue;
            }
            d = (m = new $Uint64(2048, 0), new $Uint64(d.$high - m.$high, d.$low - m.$low));
            $r = J((c.$ptr_wsema || (c.$ptr_wsema = new V(function() {
              return this.$target.wsema;
            }, function($v) {
              this.$target.wsema = $v;
            }, c))));
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 8;
            continue;
          case 9:
            $s = -1;
            return true;
          case 4:
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return false;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.increfAndClose
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.increfAndClose = function() {
      return this.$val.increfAndClose();
    };
    O.ptr.prototype.decref = function() {
      var c, d, e, f, g;
      c = this;
      while (true) {
        d = C.LoadUint64((c.$ptr_state || (c.$ptr_state = new Y(function() {
          return this.$target.state;
        }, function($v) {
          this.$target.state = $v;
        }, c))));
        if ((e = new $Uint64(d.$high & 0, (d.$low & 8388600) >>> 0), (e.$high === 0 && e.$low === 0))) {
          $panic(new $String("inconsistent poll.fdMutex"));
        }
        f = new $Uint64(d.$high - 0, d.$low - 8);
        if (C.CompareAndSwapUint64((c.$ptr_state || (c.$ptr_state = new Y(function() {
            return this.$target.state;
          }, function($v) {
            this.$target.state = $v;
          }, c))), d, f)) {
          return (g = new $Uint64(f.$high & 0, (f.$low & 8388601) >>> 0), (g.$high === 0 && g.$low === 1));
        }
      }
    };
    O.prototype.decref = function() {
      return this.$val.decref();
    };
    O.ptr.prototype.rwlock = function(c) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = new $Uint64(0, 0);
            f = new $Uint64(0, 0);
            g = new $Uint64(0, 0);
            h = e;
            i = f;
            j = g;
            k = V.nil;
            if (c) {
              h = new $Uint64(0, 2);
              i = new $Uint64(0, 8388608);
              j = new $Uint64(2047, 4286578688);
              k = (d.$ptr_rsema || (d.$ptr_rsema = new V(function() {
                return this.$target.rsema;
              }, function($v) {
                this.$target.rsema = $v;
              }, d)));
            } else {
              h = new $Uint64(0, 4);
              i = new $Uint64(2048, 0);
              j = new $Uint64(2147481600, 0);
              k = (d.$ptr_wsema || (d.$ptr_wsema = new V(function() {
                return this.$target.wsema;
              }, function($v) {
                this.$target.wsema = $v;
              }, d)));
            }
          case 1:
            l = C.LoadUint64((d.$ptr_state || (d.$ptr_state = new Y(function() {
              return this.$target.state;
            }, function($v) {
              this.$target.state = $v;
            }, d))));
            if (!((m = new $Uint64(l.$high & 0, (l.$low & 1) >>> 0), (m.$high === 0 && m.$low === 0)))) {
              $s = -1;
              return false;
            }
            n = new $Uint64(0, 0);
            if ((o = new $Uint64(l.$high & h.$high, (l.$low & h.$low) >>> 0), (o.$high === 0 && o.$low === 0))) {
              n = (p = new $Uint64(l.$high | h.$high, (l.$low | h.$low) >>> 0), new $Uint64(p.$high + 0, p.$low + 8));
              if ((q = new $Uint64(n.$high & 0, (n.$low & 8388600) >>> 0), (q.$high === 0 && q.$low === 0))) {
                $panic(new $String("too many concurrent operations on a single file or socket (max 1048575)"));
              }
            } else {
              n = new $Uint64(l.$high + i.$high, l.$low + i.$low);
              if ((r = new $Uint64(n.$high & j.$high, (n.$low & j.$low) >>> 0), (r.$high === 0 && r.$low === 0))) {
                $panic(new $String("too many concurrent operations on a single file or socket (max 1048575)"));
              }
            }
            if (C.CompareAndSwapUint64((d.$ptr_state || (d.$ptr_state = new Y(function() {
                return this.$target.state;
              }, function($v) {
                this.$target.state = $v;
              }, d))), l, n)) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            if ((s = new $Uint64(l.$high & h.$high, (l.$low & h.$low) >>> 0), (s.$high === 0 && s.$low === 0))) {
              $s = -1;
              return true;
            }
            $r = I(k);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 4:
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return false;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.rwlock
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.rwlock = function(c) {
      return this.$val.rwlock(c);
    };
    O.ptr.prototype.rwunlock = function(c) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = new $Uint64(0, 0);
            f = new $Uint64(0, 0);
            g = new $Uint64(0, 0);
            h = e;
            i = f;
            j = g;
            k = V.nil;
            if (c) {
              h = new $Uint64(0, 2);
              i = new $Uint64(0, 8388608);
              j = new $Uint64(2047, 4286578688);
              k = (d.$ptr_rsema || (d.$ptr_rsema = new V(function() {
                return this.$target.rsema;
              }, function($v) {
                this.$target.rsema = $v;
              }, d)));
            } else {
              h = new $Uint64(0, 4);
              i = new $Uint64(2048, 0);
              j = new $Uint64(2147481600, 0);
              k = (d.$ptr_wsema || (d.$ptr_wsema = new V(function() {
                return this.$target.wsema;
              }, function($v) {
                this.$target.wsema = $v;
              }, d)));
            }
          case 1:
            l = C.LoadUint64((d.$ptr_state || (d.$ptr_state = new Y(function() {
              return this.$target.state;
            }, function($v) {
              this.$target.state = $v;
            }, d))));
            if ((m = new $Uint64(l.$high & h.$high, (l.$low & h.$low) >>> 0), (m.$high === 0 && m.$low === 0)) || (n = new $Uint64(l.$high & 0, (l.$low & 8388600) >>> 0), (n.$high === 0 && n.$low === 0))) {
              $panic(new $String("inconsistent poll.fdMutex"));
            }
            p = (o = new $Uint64(l.$high & ~h.$high, (l.$low & ~h.$low) >>> 0), new $Uint64(o.$high - 0, o.$low - 8));
            if (!((q = new $Uint64(l.$high & j.$high, (l.$low & j.$low) >>> 0), (q.$high === 0 && q.$low === 0)))) {
              p = (r = i, new $Uint64(p.$high - r.$high, p.$low - r.$low));
            }
            if (C.CompareAndSwapUint64((d.$ptr_state || (d.$ptr_state = new Y(function() {
                return this.$target.state;
              }, function($v) {
                this.$target.state = $v;
              }, d))), l, p)) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            if (!((s = new $Uint64(l.$high & j.$high, (l.$low & j.$low) >>> 0), (s.$high === 0 && s.$low === 0)))) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            $r = J(k);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 6:
            $s = -1;
            return (t = new $Uint64(p.$high & 0, (p.$low & 8388601) >>> 0), (t.$high === 0 && t.$low === 1));
          case 4:
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return false;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.rwunlock
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.rwunlock = function(c) {
      return this.$val.rwunlock(c);
    };
    P.ptr.prototype.incref = function() {
      var c;
      c = this;
      if (!c.fdmu.incref()) {
        return L(c.isFile);
      }
      return $ifaceNil;
    };
    P.prototype.incref = function() {
      return this.$val.incref();
    };
    P.ptr.prototype.decref = function() {
      var c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            if (c.fdmu.decref()) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            d = c.destroy();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return d;
          case 2:
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.decref
        };
      }
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.decref = function() {
      return this.$val.decref();
    };
    P.ptr.prototype.readLock = function() {
      var c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = c.fdmu.rwlock(true);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            if (!d) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $s = -1;
            return L(c.isFile);
          case 2:
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.readLock
        };
      }
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.readLock = function() {
      return this.$val.readLock();
    };
    P.ptr.prototype.readUnlock = function() {
      var c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = c.fdmu.rwunlock(true);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            if (d) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            e = c.destroy();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            e;
          case 2:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.readUnlock
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.readUnlock = function() {
      return this.$val.readUnlock();
    };
    P.ptr.prototype.writeLock = function() {
      var c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = c.fdmu.rwlock(false);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            if (!d) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $s = -1;
            return L(c.isFile);
          case 2:
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.writeLock
        };
      }
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.writeLock = function() {
      return this.$val.writeLock();
    };
    P.ptr.prototype.writeUnlock = function() {
      var c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = c.fdmu.rwunlock(false);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            if (d) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            e = c.destroy();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            e;
          case 2:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.writeUnlock
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.writeUnlock = function() {
      return this.$val.writeUnlock();
    };
    P.ptr.prototype.eofError = function(c, d) {
      var c, d, e;
      e = this;
      if ((c === 0) && $interfaceIsEqual(d, $ifaceNil) && e.ZeroReadIsEOF) {
        return D.EOF;
      }
      return d;
    };
    P.prototype.eofError = function(c, d) {
      return this.$val.eofError(c, d);
    };
    P.ptr.prototype.Fchmod = function(c) {
      var c, d, e, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              d = this;
              e = d.incref();
              if (!($interfaceIsEqual(e, $ifaceNil))) {
                $s = -1;
                return e;
              }
              $deferred.push([$methodVal(d, "decref"), []]);
              $s = -1;
              return E.Fchmod(d.Sysfd, c);
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.Fchmod
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.Fchmod = function(c) {
      return this.$val.Fchmod(c);
    };
    P.ptr.prototype.Fchown = function(c, d) {
      var c, d, e, f, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              e = this;
              f = e.incref();
              if (!($interfaceIsEqual(f, $ifaceNil))) {
                $s = -1;
                return f;
              }
              $deferred.push([$methodVal(e, "decref"), []]);
              $s = -1;
              return E.Fchown(e.Sysfd, c, d);
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.Fchown
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.Fchown = function(c, d) {
      return this.$val.Fchown(c, d);
    };
    P.ptr.prototype.Ftruncate = function(c) {
      var c, d, e, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              d = this;
              e = d.incref();
              if (!($interfaceIsEqual(e, $ifaceNil))) {
                $s = -1;
                return e;
              }
              $deferred.push([$methodVal(d, "decref"), []]);
              $s = -1;
              return E.Ftruncate(d.Sysfd, c);
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.Ftruncate
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.Ftruncate = function(c) {
      return this.$val.Ftruncate(c);
    };
    P.ptr.prototype.Fsync = function() {
      var c, d, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              c = this;
              d = c.incref();
              if (!($interfaceIsEqual(d, $ifaceNil))) {
                $s = -1;
                return d;
              }
              $deferred.push([$methodVal(c, "decref"), []]);
              $s = -1;
              return E.Fsync(c.Sysfd);
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.Fsync
            };
          }
          $f.c = c;
          $f.d = d;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.Fsync = function() {
      return this.$val.Fsync();
    };
    P.ptr.prototype.Init = function(c, d) {
      var c, d, e, f;
      e = this;
      if (c === "file") {
        e.isFile = true;
      }
      if (!d) {
        e.isBlocking = 1;
        return $ifaceNil;
      }
      f = e.pd.init(e);
      if (!($interfaceIsEqual(f, $ifaceNil))) {
        e.isBlocking = 1;
      }
      return f;
    };
    P.prototype.Init = function(c, d) {
      return this.$val.Init(c, d);
    };
    P.ptr.prototype.destroy = function() {
      var c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            c.pd.close();
            d = $pkg.CloseFunc(c.Sysfd);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            c.Sysfd = -1;
            $r = J((c.$ptr_csema || (c.$ptr_csema = new V(function() {
              return this.$target.csema;
            }, function($v) {
              this.$target.csema = $v;
            }, c))));
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.destroy
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.destroy = function() {
      return this.$val.destroy();
    };
    P.ptr.prototype.Close = function() {
      var c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = c.fdmu.increfAndClose();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            if (!d) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $s = -1;
            return L(c.isFile);
          case 2:
            c.pd.evict();
            e = c.decref();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            if (c.isBlocking === 0) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            $r = I((c.$ptr_csema || (c.$ptr_csema = new V(function() {
              return this.$target.csema;
            }, function($v) {
              this.$target.csema = $v;
            }, c))));
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 6:
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.Close
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.Close = function() {
      return this.$val.Close();
    };
    P.ptr.prototype.Shutdown = function(c) {
      var c, d, e, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              d = this;
              e = d.incref();
              if (!($interfaceIsEqual(e, $ifaceNil))) {
                $s = -1;
                return e;
              }
              $deferred.push([$methodVal(d, "decref"), []]);
              $s = -1;
              return E.Shutdown(d.Sysfd, c);
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.Shutdown
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.Shutdown = function(c) {
      return this.$val.Shutdown(c);
    };
    P.ptr.prototype.SetBlocking = function() {
      var c, d, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              c = this;
              d = c.incref();
              if (!($interfaceIsEqual(d, $ifaceNil))) {
                $s = -1;
                return d;
              }
              $deferred.push([$methodVal(c, "decref"), []]);
              C.StoreUint32((c.$ptr_isBlocking || (c.$ptr_isBlocking = new V(function() {
                return this.$target.isBlocking;
              }, function($v) {
                this.$target.isBlocking = $v;
              }, c))), 1);
              $s = -1;
              return E.SetNonblock(c.Sysfd, false);
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.SetBlocking
            };
          }
          $f.c = c;
          $f.d = d;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.SetBlocking = function() {
      return this.$val.SetBlocking();
    };
    P.ptr.prototype.Read = function(c) {
      var c, d, e, f, g, h, i, j, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              d = this;
              e = d.readLock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                e = e.$blk();
              }
              if (e && e.$blk !== undefined) {
                break s;
              }
              f = e;
              if (!($interfaceIsEqual(f, $ifaceNil))) {
                $s = -1;
                return [0, f];
              }
              $deferred.push([$methodVal(d, "readUnlock"), []]);
              if (c.$length === 0) {
                $s = -1;
                return [0, $ifaceNil];
              }
              g = d.pd.prepareRead(d.isFile);
              if (!($interfaceIsEqual(g, $ifaceNil))) {
                $s = -1;
                return [0, g];
              }
              if (d.IsStream && c.$length > 1073741824) {
                c = $subslice(c, 0, 1073741824);
              }
              while (true) {
                h = E.Read(d.Sysfd, c);
                i = h[0];
                j = h[1];
                if (!($interfaceIsEqual(j, $ifaceNil))) {
                  i = 0;
                  if ($interfaceIsEqual(j, new E.Errno(35)) && d.pd.pollable()) {
                    j = d.pd.waitRead(d.isFile);
                    if ($interfaceIsEqual(j, $ifaceNil)) {
                      continue;
                    }
                  }
                  if (true && $interfaceIsEqual(j, new E.Errno(4))) {
                    continue;
                  }
                }
                j = d.eofError(i, j);
                $s = -1;
                return [i, j];
              }
              $s = -1;
              return [0, $ifaceNil];
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return [0, $ifaceNil];
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.Read
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.h = h;
          $f.i = i;
          $f.j = j;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.Read = function(c) {
      return this.$val.Read(c);
    };
    P.ptr.prototype.Pread = function(c, d) {
      var c, d, e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            f = e.incref();
            if (!($interfaceIsEqual(f, $ifaceNil))) {
              $s = -1;
              return [0, f];
            }
            if (e.IsStream && c.$length > 1073741824) {
              c = $subslice(c, 0, 1073741824);
            }
            g = E.Pread(e.Sysfd, c, d);
            h = g[0];
            i = g[1];
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              h = 0;
            }
            j = e.decref();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            j;
            i = e.eofError(h, i);
            $s = -1;
            return [h, i];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.Pread
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.Pread = function(c, d) {
      return this.$val.Pread(c, d);
    };
    P.ptr.prototype.ReadFrom = function(c) {
      var c, d, e, f, g, h, i, j, k, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              d = this;
              e = d.readLock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                e = e.$blk();
              }
              if (e && e.$blk !== undefined) {
                break s;
              }
              f = e;
              if (!($interfaceIsEqual(f, $ifaceNil))) {
                $s = -1;
                return [0, $ifaceNil, f];
              }
              $deferred.push([$methodVal(d, "readUnlock"), []]);
              g = d.pd.prepareRead(d.isFile);
              if (!($interfaceIsEqual(g, $ifaceNil))) {
                $s = -1;
                return [0, $ifaceNil, g];
              }
              while (true) {
                h = E.Recvfrom(d.Sysfd, c, 0);
                i = h[0];
                j = h[1];
                k = h[2];
                if (!($interfaceIsEqual(k, $ifaceNil))) {
                  i = 0;
                  if ($interfaceIsEqual(k, new E.Errno(35)) && d.pd.pollable()) {
                    k = d.pd.waitRead(d.isFile);
                    if ($interfaceIsEqual(k, $ifaceNil)) {
                      continue;
                    }
                  }
                }
                k = d.eofError(i, k);
                $s = -1;
                return [i, j, k];
              }
              $s = -1;
              return [0, $ifaceNil, $ifaceNil];
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return [0, $ifaceNil, $ifaceNil];
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.ReadFrom
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.h = h;
          $f.i = i;
          $f.j = j;
          $f.k = k;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.ReadFrom = function(c) {
      return this.$val.ReadFrom(c);
    };
    P.ptr.prototype.ReadMsg = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m, n, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              e = this;
              f = e.readLock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                f = f.$blk();
              }
              if (f && f.$blk !== undefined) {
                break s;
              }
              g = f;
              if (!($interfaceIsEqual(g, $ifaceNil))) {
                $s = -1;
                return [0, 0, 0, $ifaceNil, g];
              }
              $deferred.push([$methodVal(e, "readUnlock"), []]);
              h = e.pd.prepareRead(e.isFile);
              if (!($interfaceIsEqual(h, $ifaceNil))) {
                $s = -1;
                return [0, 0, 0, $ifaceNil, h];
              }
              while (true) {
                i = E.Recvmsg(e.Sysfd, c, d, 0);
                j = i[0];
                k = i[1];
                l = i[2];
                m = i[3];
                n = i[4];
                if (!($interfaceIsEqual(n, $ifaceNil))) {
                  if ($interfaceIsEqual(n, new E.Errno(35)) && e.pd.pollable()) {
                    n = e.pd.waitRead(e.isFile);
                    if ($interfaceIsEqual(n, $ifaceNil)) {
                      continue;
                    }
                  }
                }
                n = e.eofError(j, n);
                $s = -1;
                return [j, k, l, m, n];
              }
              $s = -1;
              return [0, 0, 0, $ifaceNil, $ifaceNil];
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return [0, 0, 0, $ifaceNil, $ifaceNil];
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.ReadMsg
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.h = h;
          $f.i = i;
          $f.j = j;
          $f.k = k;
          $f.l = l;
          $f.m = m;
          $f.n = n;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.ReadMsg = function(c, d) {
      return this.$val.ReadMsg(c, d);
    };
    P.ptr.prototype.Write = function(c) {
      var c, d, e, f, g, h, i, j, k, l, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              d = this;
              e = d.writeLock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                e = e.$blk();
              }
              if (e && e.$blk !== undefined) {
                break s;
              }
              f = e;
              if (!($interfaceIsEqual(f, $ifaceNil))) {
                $s = -1;
                return [0, f];
              }
              $deferred.push([$methodVal(d, "writeUnlock"), []]);
              g = d.pd.prepareWrite(d.isFile);
              if (!($interfaceIsEqual(g, $ifaceNil))) {
                $s = -1;
                return [0, g];
              }
              h = 0;
              while (true) {
                i = c.$length;
                if (d.IsStream && (i - h >> 0) > 1073741824) {
                  i = h + 1073741824 >> 0;
                }
                j = E.Write(d.Sysfd, $subslice(c, h, i));
                k = j[0];
                l = j[1];
                if (k > 0) {
                  h = h + (k) >> 0;
                }
                if (h === c.$length) {
                  $s = -1;
                  return [h, l];
                }
                if ($interfaceIsEqual(l, new E.Errno(35)) && d.pd.pollable()) {
                  l = d.pd.waitWrite(d.isFile);
                  if ($interfaceIsEqual(l, $ifaceNil)) {
                    continue;
                  }
                }
                if (!($interfaceIsEqual(l, $ifaceNil))) {
                  $s = -1;
                  return [h, l];
                }
                if (k === 0) {
                  $s = -1;
                  return [h, D.ErrUnexpectedEOF];
                }
              }
              $s = -1;
              return [0, $ifaceNil];
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return [0, $ifaceNil];
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.Write
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.h = h;
          $f.i = i;
          $f.j = j;
          $f.k = k;
          $f.l = l;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.Write = function(c) {
      return this.$val.Write(c);
    };
    P.ptr.prototype.Pwrite = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              e = this;
              f = e.incref();
              if (!($interfaceIsEqual(f, $ifaceNil))) {
                $s = -1;
                return [0, f];
              }
              $deferred.push([$methodVal(e, "decref"), []]);
              g = 0;
              while (true) {
                h = c.$length;
                if (e.IsStream && (h - g >> 0) > 1073741824) {
                  h = g + 1073741824 >> 0;
                }
                i = E.Pwrite(e.Sysfd, $subslice(c, g, h), (j = (new $Int64(0, g)), new $Int64(d.$high + j.$high, d.$low + j.$low)));
                k = i[0];
                l = i[1];
                if (k > 0) {
                  g = g + (k) >> 0;
                }
                if (g === c.$length) {
                  $s = -1;
                  return [g, l];
                }
                if (!($interfaceIsEqual(l, $ifaceNil))) {
                  $s = -1;
                  return [g, l];
                }
                if (k === 0) {
                  $s = -1;
                  return [g, D.ErrUnexpectedEOF];
                }
              }
              $s = -1;
              return [0, $ifaceNil];
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return [0, $ifaceNil];
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.Pwrite
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.h = h;
          $f.i = i;
          $f.j = j;
          $f.k = k;
          $f.l = l;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.Pwrite = function(c, d) {
      return this.$val.Pwrite(c, d);
    };
    P.ptr.prototype.WriteTo = function(c, d) {
      var c, d, e, f, g, h, i, j, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              e = this;
              f = e.writeLock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                f = f.$blk();
              }
              if (f && f.$blk !== undefined) {
                break s;
              }
              g = f;
              if (!($interfaceIsEqual(g, $ifaceNil))) {
                $s = -1;
                return [0, g];
              }
              $deferred.push([$methodVal(e, "writeUnlock"), []]);
              h = e.pd.prepareWrite(e.isFile);
              if (!($interfaceIsEqual(h, $ifaceNil))) {
                $s = -1;
                return [0, h];
              }
            case 2:
              i = E.Sendto(e.Sysfd, c, 0, d);
              $s = 4;
            case 4:
              if ($c) {
                $c = false;
                i = i.$blk();
              }
              if (i && i.$blk !== undefined) {
                break s;
              }
              j = i;
              if ($interfaceIsEqual(j, new E.Errno(35)) && e.pd.pollable()) {
                j = e.pd.waitWrite(e.isFile);
                if ($interfaceIsEqual(j, $ifaceNil)) {
                  $s = 2;
                  continue;
                }
              }
              if (!($interfaceIsEqual(j, $ifaceNil))) {
                $s = -1;
                return [0, j];
              }
              $s = -1;
              return [c.$length, $ifaceNil];
              $s = 2;
              continue;
            case 3:
              $s = -1;
              return [0, $ifaceNil];
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return [0, $ifaceNil];
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.WriteTo
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.h = h;
          $f.i = i;
          $f.j = j;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.WriteTo = function(c, d) {
      return this.$val.WriteTo(c, d);
    };
    P.ptr.prototype.WriteMsg = function(c, d, e) {
      var c, d, e, f, g, h, i, j, k, l, m, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              f = this;
              g = f.writeLock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                g = g.$blk();
              }
              if (g && g.$blk !== undefined) {
                break s;
              }
              h = g;
              if (!($interfaceIsEqual(h, $ifaceNil))) {
                $s = -1;
                return [0, 0, h];
              }
              $deferred.push([$methodVal(f, "writeUnlock"), []]);
              i = f.pd.prepareWrite(f.isFile);
              if (!($interfaceIsEqual(i, $ifaceNil))) {
                $s = -1;
                return [0, 0, i];
              }
            case 2:
              k = E.SendmsgN(f.Sysfd, c, d, e, 0);
              $s = 4;
            case 4:
              if ($c) {
                $c = false;
                k = k.$blk();
              }
              if (k && k.$blk !== undefined) {
                break s;
              }
              j = k;
              l = j[0];
              m = j[1];
              if ($interfaceIsEqual(m, new E.Errno(35)) && f.pd.pollable()) {
                m = f.pd.waitWrite(f.isFile);
                if ($interfaceIsEqual(m, $ifaceNil)) {
                  $s = 2;
                  continue;
                }
              }
              if (!($interfaceIsEqual(m, $ifaceNil))) {
                $s = -1;
                return [l, 0, m];
              }
              $s = -1;
              return [l, d.$length, m];
              $s = 2;
              continue;
            case 3:
              $s = -1;
              return [0, 0, $ifaceNil];
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return [0, 0, $ifaceNil];
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.WriteMsg
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.h = h;
          $f.i = i;
          $f.j = j;
          $f.k = k;
          $f.l = l;
          $f.m = m;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.WriteMsg = function(c, d, e) {
      return this.$val.WriteMsg(c, d, e);
    };
    P.ptr.prototype.Accept = function() {
      var c, d, e, f, g, h, i, j, k, l, m, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              c = this;
              d = c.readLock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                d = d.$blk();
              }
              if (d && d.$blk !== undefined) {
                break s;
              }
              e = d;
              if (!($interfaceIsEqual(e, $ifaceNil))) {
                $s = -1;
                return [-1, $ifaceNil, "", e];
              }
              $deferred.push([$methodVal(c, "readUnlock"), []]);
              f = c.pd.prepareRead(c.isFile);
              if (!($interfaceIsEqual(f, $ifaceNil))) {
                $s = -1;
                return [-1, $ifaceNil, "", f];
              }
            case 2:
              h = T(c.Sysfd);
              $s = 4;
            case 4:
              if ($c) {
                $c = false;
                h = h.$blk();
              }
              if (h && h.$blk !== undefined) {
                break s;
              }
              g = h;
              i = g[0];
              j = g[1];
              k = g[2];
              l = g[3];
              if ($interfaceIsEqual(l, $ifaceNil)) {
                $s = -1;
                return [i, j, "", l];
              }
              m = l;
              if ($interfaceIsEqual(m, new E.Errno((35)))) {
                if (c.pd.pollable()) {
                  l = c.pd.waitRead(c.isFile);
                  if ($interfaceIsEqual(l, $ifaceNil)) {
                    $s = 2;
                    continue;
                  }
                }
              } else if ($interfaceIsEqual(m, new E.Errno((53)))) {
                $s = 2;
                continue;
              }
              $s = -1;
              return [-1, $ifaceNil, k, l];
              $s = 2;
              continue;
            case 3:
              $s = -1;
              return [0, $ifaceNil, "", $ifaceNil];
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return [0, $ifaceNil, "", $ifaceNil];
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.Accept
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.h = h;
          $f.i = i;
          $f.j = j;
          $f.k = k;
          $f.l = l;
          $f.m = m;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.Accept = function() {
      return this.$val.Accept();
    };
    P.ptr.prototype.Seek = function(c, d) {
      var c, d, e, f, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              e = this;
              f = e.incref();
              if (!($interfaceIsEqual(f, $ifaceNil))) {
                $s = -1;
                return [new $Int64(0, 0), f];
              }
              $deferred.push([$methodVal(e, "decref"), []]);
              $s = -1;
              return E.Seek(e.Sysfd, c, d);
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return [new $Int64(0, 0), $ifaceNil];
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.Seek
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.Seek = function(c, d) {
      return this.$val.Seek(c, d);
    };
    P.ptr.prototype.ReadDirent = function(c) {
      var c, d, e, f, g, h, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              d = this;
              e = d.incref();
              if (!($interfaceIsEqual(e, $ifaceNil))) {
                $s = -1;
                return [0, e];
              }
              $deferred.push([$methodVal(d, "decref"), []]);
              while (true) {
                f = E.ReadDirent(d.Sysfd, c);
                g = f[0];
                h = f[1];
                if (!($interfaceIsEqual(h, $ifaceNil))) {
                  g = 0;
                  if ($interfaceIsEqual(h, new E.Errno(35)) && d.pd.pollable()) {
                    h = d.pd.waitRead(d.isFile);
                    if ($interfaceIsEqual(h, $ifaceNil)) {
                      continue;
                    }
                  }
                }
                $s = -1;
                return [g, h];
              }
              $s = -1;
              return [0, $ifaceNil];
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return [0, $ifaceNil];
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.ReadDirent
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.h = h;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.ReadDirent = function(c) {
      return this.$val.ReadDirent(c);
    };
    P.ptr.prototype.Fchdir = function() {
      var c, d, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              c = this;
              d = c.incref();
              if (!($interfaceIsEqual(d, $ifaceNil))) {
                $s = -1;
                return d;
              }
              $deferred.push([$methodVal(c, "decref"), []]);
              $s = -1;
              return E.Fchdir(c.Sysfd);
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.Fchdir
            };
          }
          $f.c = c;
          $f.d = d;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.Fchdir = function() {
      return this.$val.Fchdir();
    };
    P.ptr.prototype.Fstat = function(c) {
      var c, d, e, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              d = this;
              e = d.incref();
              if (!($interfaceIsEqual(e, $ifaceNil))) {
                $s = -1;
                return e;
              }
              $deferred.push([$methodVal(d, "decref"), []]);
              $s = -1;
              return E.Fstat(d.Sysfd, c);
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.Fstat
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.Fstat = function(c) {
      return this.$val.Fstat(c);
    };
    R = function(c) {
      var c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (C.LoadInt32((U || (U = new Z(function() {
                return Q;
              }, function($v) {
                Q = $v;
              })))) === 1) {
              d = E.Syscall(92, ((c >>> 0)), 67, 0);
              e = d[0];
              f = d[2];
              g = f;
              if (g === (0)) {
                $s = -1;
                return [((e >> 0)), "", $ifaceNil];
              } else if ((g === (22)) || (g === (78))) {
                C.StoreInt32((U || (U = new Z(function() {
                  return Q;
                }, function($v) {
                  Q = $v;
                }))), 0);
              } else {
                $s = -1;
                return [-1, "fcntl", new E.Errno(f)];
              }
            }
            h = S(c);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return h;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: R
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.DupCloseOnExec = R;
    S = function(c) {
      var c, d, e, f, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              $r = E.ForkLock.RLock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              $deferred.push([$methodVal(E.ForkLock, "RUnlock"), []]);
              d = E.Dup(c);
              e = d[0];
              f = d[1];
              if (!($interfaceIsEqual(f, $ifaceNil))) {
                $s = -1;
                return [-1, "dup", f];
              }
              E.CloseOnExec(e);
              $s = -1;
              return [e, "", $ifaceNil];
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return [0, "", $ifaceNil];
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: S
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.ptr.prototype.Dup = function() {
      var c, d, e, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              c = this;
              d = c.incref();
              if (!($interfaceIsEqual(d, $ifaceNil))) {
                $s = -1;
                return [-1, "", d];
              }
              $deferred.push([$methodVal(c, "decref"), []]);
              e = R(c.Sysfd);
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                e = e.$blk();
              }
              if (e && e.$blk !== undefined) {
                break s;
              }
              $s = -1;
              return e;
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return [0, "", $ifaceNil];
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.Dup
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.Dup = function() {
      return this.$val.Dup();
    };
    P.ptr.prototype.WaitWrite = function() {
      var c;
      c = this;
      return c.pd.waitWrite(c.isFile);
    };
    P.prototype.WaitWrite = function() {
      return this.$val.WaitWrite();
    };
    P.ptr.prototype.WriteOnce = function(c) {
      var c, d, e, f, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              d = this;
              e = d.writeLock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                e = e.$blk();
              }
              if (e && e.$blk !== undefined) {
                break s;
              }
              f = e;
              if (!($interfaceIsEqual(f, $ifaceNil))) {
                $s = -1;
                return [0, f];
              }
              $deferred.push([$methodVal(d, "writeUnlock"), []]);
              $s = -1;
              return E.Write(d.Sysfd, c);
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return [0, $ifaceNil];
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.WriteOnce
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.WriteOnce = function(c) {
      return this.$val.WriteOnce(c);
    };
    P.ptr.prototype.RawControl = function(c) {
      var c, d, e, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              d = this;
              e = d.incref();
              if (!($interfaceIsEqual(e, $ifaceNil))) {
                $s = -1;
                return e;
              }
              $deferred.push([$methodVal(d, "decref"), []]);
              $r = c(((d.Sysfd >>> 0)));
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              $s = -1;
              return $ifaceNil;
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.RawControl
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.RawControl = function(c) {
      return this.$val.RawControl(c);
    };
    P.ptr.prototype.RawRead = function(c) {
      var c, d, e, f, g, h, i, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              d = this;
              e = d.readLock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                e = e.$blk();
              }
              if (e && e.$blk !== undefined) {
                break s;
              }
              f = e;
              if (!($interfaceIsEqual(f, $ifaceNil))) {
                $s = -1;
                return f;
              }
              $deferred.push([$methodVal(d, "readUnlock"), []]);
              g = d.pd.prepareRead(d.isFile);
              if (!($interfaceIsEqual(g, $ifaceNil))) {
                $s = -1;
                return g;
              }
            case 2:
              h = c(((d.Sysfd >>> 0)));
              $s = 6;
            case 6:
              if ($c) {
                $c = false;
                h = h.$blk();
              }
              if (h && h.$blk !== undefined) {
                break s;
              }
              if (h) {
                $s = 4;
                continue;
              }
              $s = 5;
              continue;
            case 4:
              $s = -1;
              return $ifaceNil;
            case 5:
              i = d.pd.waitRead(d.isFile);
              if (!($interfaceIsEqual(i, $ifaceNil))) {
                $s = -1;
                return i;
              }
              $s = 2;
              continue;
            case 3:
              $s = -1;
              return $ifaceNil;
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.RawRead
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.h = h;
          $f.i = i;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.RawRead = function(c) {
      return this.$val.RawRead(c);
    };
    P.ptr.prototype.RawWrite = function(c) {
      var c, d, e, f, g, h, i, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              d = this;
              e = d.writeLock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                e = e.$blk();
              }
              if (e && e.$blk !== undefined) {
                break s;
              }
              f = e;
              if (!($interfaceIsEqual(f, $ifaceNil))) {
                $s = -1;
                return f;
              }
              $deferred.push([$methodVal(d, "writeUnlock"), []]);
              g = d.pd.prepareWrite(d.isFile);
              if (!($interfaceIsEqual(g, $ifaceNil))) {
                $s = -1;
                return g;
              }
            case 2:
              h = c(((d.Sysfd >>> 0)));
              $s = 6;
            case 6:
              if ($c) {
                $c = false;
                h = h.$blk();
              }
              if (h && h.$blk !== undefined) {
                break s;
              }
              if (h) {
                $s = 4;
                continue;
              }
              $s = 5;
              continue;
            case 4:
              $s = -1;
              return $ifaceNil;
            case 5:
              i = d.pd.waitWrite(d.isFile);
              if (!($interfaceIsEqual(i, $ifaceNil))) {
                $s = -1;
                return i;
              }
              $s = 2;
              continue;
            case 3:
              $s = -1;
              return $ifaceNil;
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.RawWrite
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.h = h;
          $f.i = i;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.RawWrite = function(c) {
      return this.$val.RawWrite(c);
    };
    P.ptr.prototype.SetsockoptInt = function(c, d, e) {
      var c, d, e, f, g, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              f = this;
              g = f.incref();
              if (!($interfaceIsEqual(g, $ifaceNil))) {
                $s = -1;
                return g;
              }
              $deferred.push([$methodVal(f, "decref"), []]);
              $s = -1;
              return E.SetsockoptInt(f.Sysfd, c, d, e);
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.SetsockoptInt
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.SetsockoptInt = function(c, d, e) {
      return this.$val.SetsockoptInt(c, d, e);
    };
    P.ptr.prototype.SetsockoptInet4Addr = function(c, d, e) {
      var c, d, e, f, g, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              f = this;
              g = f.incref();
              if (!($interfaceIsEqual(g, $ifaceNil))) {
                $s = -1;
                return g;
              }
              $deferred.push([$methodVal(f, "decref"), []]);
              $s = -1;
              return E.SetsockoptInet4Addr(f.Sysfd, c, d, $clone(e, AA));
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.SetsockoptInet4Addr
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.SetsockoptInet4Addr = function(c, d, e) {
      return this.$val.SetsockoptInet4Addr(c, d, e);
    };
    P.ptr.prototype.SetsockoptLinger = function(c, d, e) {
      var c, d, e, f, g, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              f = this;
              g = f.incref();
              if (!($interfaceIsEqual(g, $ifaceNil))) {
                $s = -1;
                return g;
              }
              $deferred.push([$methodVal(f, "decref"), []]);
              $s = -1;
              return E.SetsockoptLinger(f.Sysfd, c, d, e);
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.SetsockoptLinger
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.SetsockoptLinger = function(c, d, e) {
      return this.$val.SetsockoptLinger(c, d, e);
    };
    P.ptr.prototype.SetsockoptByte = function(c, d, e) {
      var c, d, e, f, g, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              f = this;
              g = f.incref();
              if (!($interfaceIsEqual(g, $ifaceNil))) {
                $s = -1;
                return g;
              }
              $deferred.push([$methodVal(f, "decref"), []]);
              $s = -1;
              return E.SetsockoptByte(f.Sysfd, c, d, e);
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.SetsockoptByte
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.SetsockoptByte = function(c, d, e) {
      return this.$val.SetsockoptByte(c, d, e);
    };
    P.ptr.prototype.SetsockoptIPMreq = function(c, d, e) {
      var c, d, e, f, g, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              f = this;
              g = f.incref();
              if (!($interfaceIsEqual(g, $ifaceNil))) {
                $s = -1;
                return g;
              }
              $deferred.push([$methodVal(f, "decref"), []]);
              $s = -1;
              return E.SetsockoptIPMreq(f.Sysfd, c, d, e);
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.SetsockoptIPMreq
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.SetsockoptIPMreq = function(c, d, e) {
      return this.$val.SetsockoptIPMreq(c, d, e);
    };
    P.ptr.prototype.SetsockoptIPv6Mreq = function(c, d, e) {
      var c, d, e, f, g, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              f = this;
              g = f.incref();
              if (!($interfaceIsEqual(g, $ifaceNil))) {
                $s = -1;
                return g;
              }
              $deferred.push([$methodVal(f, "decref"), []]);
              $s = -1;
              return E.SetsockoptIPv6Mreq(f.Sysfd, c, d, e);
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.SetsockoptIPv6Mreq
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.SetsockoptIPv6Mreq = function(c, d, e) {
      return this.$val.SetsockoptIPv6Mreq(c, d, e);
    };
    T = function(c) {
      var c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = $pkg.AcceptFunc(c);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            d = e;
            f = d[0];
            g = d[1];
            h = d[2];
            if ($interfaceIsEqual(h, $ifaceNil)) {
              E.CloseOnExec(f);
            }
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              $s = -1;
              return [-1, $ifaceNil, "accept", h];
            }
            h = E.SetNonblock(f, true);
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            i = $pkg.CloseFunc(f);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            i;
            $s = -1;
            return [-1, $ifaceNil, "setnonblock", h];
          case 3:
            $s = -1;
            return [f, g, "", $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: T
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.ptr.prototype.Writev = function(c) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              d = [d];
              e = this;
              f = e.writeLock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                f = f.$blk();
              }
              if (f && f.$blk !== undefined) {
                break s;
              }
              g = f;
              if (!($interfaceIsEqual(g, $ifaceNil))) {
                $s = -1;
                return [new $Int64(0, 0), g];
              }
              $deferred.push([$methodVal(e, "writeUnlock"), []]);
              h = e.pd.prepareWrite(e.isFile);
              if (!($interfaceIsEqual(h, $ifaceNil))) {
                $s = -1;
                return [new $Int64(0, 0), h];
              }
              d[0] = AB.nil;
              if (!(e.iovecs === AC.nil)) {
                d[0] = e.iovecs.$get();
              }
              i = 1024;
              j = new $Int64(0, 0);
              k = $ifaceNil;
            case 2:
              if (!(c.$get().$length > 0)) {
                $s = 3;
                continue;
              }
              d[0] = $subslice(d[0], 0, 0);
              l = c.$get();
              m = 0;
            case 4:
              if (!(m < l.$length)) {
                $s = 5;
                continue;
              }
              n = ((m < 0 || m >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + m]);
              if (n.$length === 0) {
                m++;
                $s = 4;
                continue;
              }
              d[0] = $append(d[0], new E.Iovec.ptr($indexPtr(n.$array, n.$offset + 0, AD), new $Uint64(0, 0)));
              if (e.IsStream && n.$length > 1073741824) {
                (o = d[0].$length - 1 >> 0, ((o < 0 || o >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + o])).SetLen(1073741824);
                $s = 5;
                continue;
              }(p = d[0].$length - 1 >> 0, ((p < 0 || p >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + p])).SetLen(n.$length);
              if (d[0].$length === i) {
                $s = 5;
                continue;
              }
              m++;
              $s = 4;
              continue;
            case 5:
              if (d[0].$length === 0) {
                $s = 3;
                continue;
              }
              e.iovecs = (d.$ptr || (d.$ptr = new AC(function() {
                return this.$target[0];
              }, function($v) {
                this.$target[0] = $v;
              }, d)));
              q = E.Syscall(121, ((e.Sysfd >>> 0)), (($sliceToArray(d[0]))), ((d[0].$length >>> 0)));
              r = q[0];
              s = q[2];
              if (r === 4294967295) {
                r = 0;
              }
              $r = $pkg.TestHookDidWritev(((r >> 0)));
              $s = 6;
            case 6:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              j = (t = (new $Int64(0, r.constructor === Number ? r : 1)), new $Int64(j.$high + t.$high, j.$low + t.$low));
              N(c, (new $Int64(0, r.constructor === Number ? r : 1)));
              if (s === 35) {
                k = e.pd.waitWrite(e.isFile);
                if ($interfaceIsEqual(k, $ifaceNil)) {
                  $s = 2;
                  continue;
                }
              } else if (!((s === 0))) {
                k = new E.Errno((s));
              }
              if (!($interfaceIsEqual(k, $ifaceNil))) {
                $s = 3;
                continue;
              }
              if ((j.$high === 0 && j.$low === 0)) {
                k = D.ErrUnexpectedEOF;
                $s = 3;
                continue;
              }
              $s = 2;
              continue;
            case 3:
              $s = -1;
              return [j, k];
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return [new $Int64(0, 0), $ifaceNil];
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.Writev
            };
          }
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.h = h;
          $f.i = i;
          $f.j = j;
          $f.k = k;
          $f.l = l;
          $f.m = m;
          $f.n = n;
          $f.o = o;
          $f.p = p;
          $f.q = q;
          $f.r = r;
          $f.s = s;
          $f.t = t;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.Writev = function(c) {
      return this.$val.Writev(c);
    };
    AF.methods = [{
      prop: "init",
      name: "init",
      pkg: "internal/poll",
      typ: $funcType([AE], [$error], false)
    }, {
      prop: "close",
      name: "close",
      pkg: "internal/poll",
      typ: $funcType([], [], false)
    }, {
      prop: "evict",
      name: "evict",
      pkg: "internal/poll",
      typ: $funcType([], [], false)
    }, {
      prop: "prepare",
      name: "prepare",
      pkg: "internal/poll",
      typ: $funcType([$Int, $Bool], [$error], false)
    }, {
      prop: "prepareRead",
      name: "prepareRead",
      pkg: "internal/poll",
      typ: $funcType([$Bool], [$error], false)
    }, {
      prop: "prepareWrite",
      name: "prepareWrite",
      pkg: "internal/poll",
      typ: $funcType([$Bool], [$error], false)
    }, {
      prop: "wait",
      name: "wait",
      pkg: "internal/poll",
      typ: $funcType([$Int, $Bool], [$error], false)
    }, {
      prop: "waitRead",
      name: "waitRead",
      pkg: "internal/poll",
      typ: $funcType([$Bool], [$error], false)
    }, {
      prop: "waitWrite",
      name: "waitWrite",
      pkg: "internal/poll",
      typ: $funcType([$Bool], [$error], false)
    }, {
      prop: "waitCanceled",
      name: "waitCanceled",
      pkg: "internal/poll",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "pollable",
      name: "pollable",
      pkg: "internal/poll",
      typ: $funcType([], [$Bool], false)
    }];
    AG.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Timeout",
      name: "Timeout",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Temporary",
      name: "Temporary",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }];
    AH.methods = [{
      prop: "incref",
      name: "incref",
      pkg: "internal/poll",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "increfAndClose",
      name: "increfAndClose",
      pkg: "internal/poll",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "decref",
      name: "decref",
      pkg: "internal/poll",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "rwlock",
      name: "rwlock",
      pkg: "internal/poll",
      typ: $funcType([$Bool], [$Bool], false)
    }, {
      prop: "rwunlock",
      name: "rwunlock",
      pkg: "internal/poll",
      typ: $funcType([$Bool], [$Bool], false)
    }];
    AE.methods = [{
      prop: "SetDeadline",
      name: "SetDeadline",
      pkg: "",
      typ: $funcType([A.Time], [$error], false)
    }, {
      prop: "SetReadDeadline",
      name: "SetReadDeadline",
      pkg: "",
      typ: $funcType([A.Time], [$error], false)
    }, {
      prop: "SetWriteDeadline",
      name: "SetWriteDeadline",
      pkg: "",
      typ: $funcType([A.Time], [$error], false)
    }, {
      prop: "incref",
      name: "incref",
      pkg: "internal/poll",
      typ: $funcType([], [$error], false)
    }, {
      prop: "decref",
      name: "decref",
      pkg: "internal/poll",
      typ: $funcType([], [$error], false)
    }, {
      prop: "readLock",
      name: "readLock",
      pkg: "internal/poll",
      typ: $funcType([], [$error], false)
    }, {
      prop: "readUnlock",
      name: "readUnlock",
      pkg: "internal/poll",
      typ: $funcType([], [], false)
    }, {
      prop: "writeLock",
      name: "writeLock",
      pkg: "internal/poll",
      typ: $funcType([], [$error], false)
    }, {
      prop: "writeUnlock",
      name: "writeUnlock",
      pkg: "internal/poll",
      typ: $funcType([], [], false)
    }, {
      prop: "eofError",
      name: "eofError",
      pkg: "internal/poll",
      typ: $funcType([$Int, $error], [$error], false)
    }, {
      prop: "Fchmod",
      name: "Fchmod",
      pkg: "",
      typ: $funcType([$Uint32], [$error], false)
    }, {
      prop: "Fchown",
      name: "Fchown",
      pkg: "",
      typ: $funcType([$Int, $Int], [$error], false)
    }, {
      prop: "Ftruncate",
      name: "Ftruncate",
      pkg: "",
      typ: $funcType([$Int64], [$error], false)
    }, {
      prop: "Fsync",
      name: "Fsync",
      pkg: "",
      typ: $funcType([], [$error], false)
    }, {
      prop: "Init",
      name: "Init",
      pkg: "",
      typ: $funcType([$String, $Bool], [$error], false)
    }, {
      prop: "destroy",
      name: "destroy",
      pkg: "internal/poll",
      typ: $funcType([], [$error], false)
    }, {
      prop: "Close",
      name: "Close",
      pkg: "",
      typ: $funcType([], [$error], false)
    }, {
      prop: "Shutdown",
      name: "Shutdown",
      pkg: "",
      typ: $funcType([$Int], [$error], false)
    }, {
      prop: "SetBlocking",
      name: "SetBlocking",
      pkg: "",
      typ: $funcType([], [$error], false)
    }, {
      prop: "Read",
      name: "Read",
      pkg: "",
      typ: $funcType([AI], [$Int, $error], false)
    }, {
      prop: "Pread",
      name: "Pread",
      pkg: "",
      typ: $funcType([AI, $Int64], [$Int, $error], false)
    }, {
      prop: "ReadFrom",
      name: "ReadFrom",
      pkg: "",
      typ: $funcType([AI], [$Int, E.Sockaddr, $error], false)
    }, {
      prop: "ReadMsg",
      name: "ReadMsg",
      pkg: "",
      typ: $funcType([AI, AI], [$Int, $Int, $Int, E.Sockaddr, $error], false)
    }, {
      prop: "Write",
      name: "Write",
      pkg: "",
      typ: $funcType([AI], [$Int, $error], false)
    }, {
      prop: "Pwrite",
      name: "Pwrite",
      pkg: "",
      typ: $funcType([AI, $Int64], [$Int, $error], false)
    }, {
      prop: "WriteTo",
      name: "WriteTo",
      pkg: "",
      typ: $funcType([AI, E.Sockaddr], [$Int, $error], false)
    }, {
      prop: "WriteMsg",
      name: "WriteMsg",
      pkg: "",
      typ: $funcType([AI, AI, E.Sockaddr], [$Int, $Int, $error], false)
    }, {
      prop: "Accept",
      name: "Accept",
      pkg: "",
      typ: $funcType([], [$Int, E.Sockaddr, $String, $error], false)
    }, {
      prop: "Seek",
      name: "Seek",
      pkg: "",
      typ: $funcType([$Int64, $Int], [$Int64, $error], false)
    }, {
      prop: "ReadDirent",
      name: "ReadDirent",
      pkg: "",
      typ: $funcType([AI], [$Int, $error], false)
    }, {
      prop: "Fchdir",
      name: "Fchdir",
      pkg: "",
      typ: $funcType([], [$error], false)
    }, {
      prop: "Fstat",
      name: "Fstat",
      pkg: "",
      typ: $funcType([AJ], [$error], false)
    }, {
      prop: "Dup",
      name: "Dup",
      pkg: "",
      typ: $funcType([], [$Int, $String, $error], false)
    }, {
      prop: "WaitWrite",
      name: "WaitWrite",
      pkg: "",
      typ: $funcType([], [$error], false)
    }, {
      prop: "WriteOnce",
      name: "WriteOnce",
      pkg: "",
      typ: $funcType([AI], [$Int, $error], false)
    }, {
      prop: "RawControl",
      name: "RawControl",
      pkg: "",
      typ: $funcType([AK], [$error], false)
    }, {
      prop: "RawRead",
      name: "RawRead",
      pkg: "",
      typ: $funcType([AL], [$error], false)
    }, {
      prop: "RawWrite",
      name: "RawWrite",
      pkg: "",
      typ: $funcType([AL], [$error], false)
    }, {
      prop: "SetsockoptInt",
      name: "SetsockoptInt",
      pkg: "",
      typ: $funcType([$Int, $Int, $Int], [$error], false)
    }, {
      prop: "SetsockoptInet4Addr",
      name: "SetsockoptInet4Addr",
      pkg: "",
      typ: $funcType([$Int, $Int, AA], [$error], false)
    }, {
      prop: "SetsockoptLinger",
      name: "SetsockoptLinger",
      pkg: "",
      typ: $funcType([$Int, $Int, AM], [$error], false)
    }, {
      prop: "SetsockoptByte",
      name: "SetsockoptByte",
      pkg: "",
      typ: $funcType([$Int, $Int, $Uint8], [$error], false)
    }, {
      prop: "SetsockoptIPMreq",
      name: "SetsockoptIPMreq",
      pkg: "",
      typ: $funcType([$Int, $Int, AN], [$error], false)
    }, {
      prop: "SetsockoptIPv6Mreq",
      name: "SetsockoptIPv6Mreq",
      pkg: "",
      typ: $funcType([$Int, $Int, AO], [$error], false)
    }, {
      prop: "Writev",
      name: "Writev",
      pkg: "",
      typ: $funcType([AQ], [$Int64, $error], false)
    }];
    G.init("internal/poll", [{
      prop: "closing",
      name: "closing",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    M.init("", []);
    O.init("internal/poll", [{
      prop: "state",
      name: "state",
      embedded: false,
      exported: false,
      typ: $Uint64,
      tag: ""
    }, {
      prop: "rsema",
      name: "rsema",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "wsema",
      name: "wsema",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }]);
    P.init("internal/poll", [{
      prop: "fdmu",
      name: "fdmu",
      embedded: false,
      exported: false,
      typ: O,
      tag: ""
    }, {
      prop: "Sysfd",
      name: "Sysfd",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: ""
    }, {
      prop: "pd",
      name: "pd",
      embedded: false,
      exported: false,
      typ: G,
      tag: ""
    }, {
      prop: "iovecs",
      name: "iovecs",
      embedded: false,
      exported: false,
      typ: AC,
      tag: ""
    }, {
      prop: "csema",
      name: "csema",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "isBlocking",
      name: "isBlocking",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "IsStream",
      name: "IsStream",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: ""
    }, {
      prop: "ZeroReadIsEOF",
      name: "ZeroReadIsEOF",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: ""
    }, {
      prop: "isFile",
      name: "isFile",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = B.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = F.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            K = {};
            $pkg.ErrNetClosing = B.New("use of closed network connection");
            $pkg.ErrFileClosing = B.New("use of closed file");
            $pkg.ErrNoDeadline = B.New("file type does not support deadline");
            $pkg.ErrTimeout = new M.ptr();
            $pkg.TestHookDidWritev = (function(c) {
              var c;
            });
            Q = 1;
            $pkg.CloseFunc = E.Close;
            $pkg.AcceptFunc = E.Accept;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["internal/syscall/unix"] = (function() {
    var $pkg = {},
      $init, A, B;
    A = $packages["syscall"];
    B = function(b) {
      var b, c, d, e, f;
      c = false;
      d = $ifaceNil;
      e = false;
      f = $ifaceNil;
      c = e;
      d = f;
      return [c, d];
    };
    $pkg.IsNonblock = B;
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["internal/testlog"] = (function() {
    var $pkg = {},
      $init, A, B, I, C, E, H;
    A = $packages["sync/atomic"];
    B = $pkg.Interface = $newType(8, $kindInterface, "testlog.Interface", true, "internal/testlog", true, null);
    I = $ptrType(B);
    E = function() {
      var a;
      a = C.Load();
      if ($interfaceIsEqual(a, $ifaceNil)) {
        return $ifaceNil;
      }
      return $assertType(a, I).$get();
    };
    $pkg.Logger = E;
    H = function(a) {
      var a, b, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = E();
            if (!($interfaceIsEqual(b, $ifaceNil))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = b.Stat(a);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: H
        };
      }
      $f.a = a;
      $f.b = b;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Stat = H;
    B.init([{
      prop: "Chdir",
      name: "Chdir",
      pkg: "",
      typ: $funcType([$String], [], false)
    }, {
      prop: "Getenv",
      name: "Getenv",
      pkg: "",
      typ: $funcType([$String], [], false)
    }, {
      prop: "Open",
      name: "Open",
      pkg: "",
      typ: $funcType([$String], [], false)
    }, {
      prop: "Stat",
      name: "Stat",
      pkg: "",
      typ: $funcType([$String], [], false)
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            C = new A.Value.ptr($ifaceNil);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["os"] = (function() {
    var $pkg = {},
      $init, A, B, G, K, F, C, D, H, I, E, J, AA, AB, AC, BA, BW, CA, DM, DN, DO, DQ, DT, DU, DV, DW, DX, DY, DZ, EA, EI, EN, EO, EP, EQ, ER, EV, EX, EY, AX, BH, CJ, L, M, N, AD, AF, AI, AJ, AL, BN, BP, BX, BZ, CB, CL, CM, CQ, CT, CZ, DB, DC, DD, DG;
    A = $packages["errors"];
    B = $packages["github.com/gopherjs/gopherjs/js"];
    G = $packages["internal/poll"];
    K = $packages["internal/syscall/unix"];
    F = $packages["internal/testlog"];
    C = $packages["io"];
    D = $packages["runtime"];
    H = $packages["sync"];
    I = $packages["sync/atomic"];
    E = $packages["syscall"];
    J = $packages["time"];
    AA = $pkg.timeout = $newType(8, $kindInterface, "os.timeout", true, "os", false, null);
    AB = $pkg.PathError = $newType(0, $kindStruct, "os.PathError", true, "os", true, function(Op_, Path_, Err_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Op = "";
        this.Path = "";
        this.Err = $ifaceNil;
        return;
      }
      this.Op = Op_;
      this.Path = Path_;
      this.Err = Err_;
    });
    AC = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", true, "os", true, function(Syscall_, Err_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Syscall = "";
        this.Err = $ifaceNil;
        return;
      }
      this.Syscall = Syscall_;
      this.Err = Err_;
    });
    BA = $pkg.LinkError = $newType(0, $kindStruct, "os.LinkError", true, "os", true, function(Op_, Old_, New_, Err_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Op = "";
        this.Old = "";
        this.New = "";
        this.Err = $ifaceNil;
        return;
      }
      this.Op = Op_;
      this.Old = Old_;
      this.New = New_;
      this.Err = Err_;
    });
    BW = $pkg.file = $newType(0, $kindStruct, "os.file", true, "os", false, function(pfd_, name_, dirinfo_, nonblock_, stdoutOrErr_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.pfd = new G.FD.ptr(new G.fdMutex.ptr(new $Uint64(0, 0), 0, 0), 0, new G.pollDesc.ptr(false), EO.nil, 0, 0, false, false, false);
        this.name = "";
        this.dirinfo = DW.nil;
        this.nonblock = false;
        this.stdoutOrErr = false;
        return;
      }
      this.pfd = pfd_;
      this.name = name_;
      this.dirinfo = dirinfo_;
      this.nonblock = nonblock_;
      this.stdoutOrErr = stdoutOrErr_;
    });
    CA = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", true, "os", false, function(buf_, nbuf_, bufp_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.buf = DX.nil;
        this.nbuf = 0;
        this.bufp = 0;
        return;
      }
      this.buf = buf_;
      this.nbuf = nbuf_;
      this.bufp = bufp_;
    });
    DM = $pkg.File = $newType(0, $kindStruct, "os.File", true, "os", true, function(file_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.file = EQ.nil;
        return;
      }
      this.file = file_;
    });
    DN = $pkg.FileInfo = $newType(8, $kindInterface, "os.FileInfo", true, "os", true, null);
    DO = $pkg.FileMode = $newType(4, $kindUint32, "os.FileMode", true, "os", true, null);
    DQ = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", true, "os", false, function(name_, size_, mode_, modTime_, sys_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.name = "";
        this.size = new $Int64(0, 0);
        this.mode = 0;
        this.modTime = new J.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), EV.nil);
        this.sys = new E.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, EI.zero(), new E.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new E.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new E.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new E.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, EP.zero());
        return;
      }
      this.name = name_;
      this.size = size_;
      this.mode = mode_;
      this.modTime = modTime_;
      this.sys = sys_;
    });
    DT = $sliceType($String);
    DU = $ptrType(DM);
    DV = $sliceType(DN);
    DW = $ptrType(CA);
    DX = $sliceType($Uint8);
    DY = $ptrType(AB);
    DZ = $ptrType(BA);
    EA = $ptrType(AC);
    EI = $arrayType($Uint8, 4);
    EN = $sliceType(E.Iovec);
    EO = $ptrType(EN);
    EP = $arrayType($Int64, 2);
    EQ = $ptrType(BW);
    ER = $funcType([EQ], [$error], false);
    EV = $ptrType(J.Location);
    EX = $arrayType($Uint8, 32);
    EY = $ptrType(DQ);
    L = function() {
      return $pkg.Args;
    };
    M = function() {
      var c, d, e;
      c = $global.process;
      if (!(c === undefined)) {
        d = c.argv;
        $pkg.Args = $makeSlice(DT, ($parseInt(d.length) - 1 >> 0));
        e = 0;
        while (true) {
          if (!(e < ($parseInt(d.length) - 1 >> 0))) {
            break;
          }((e < 0 || e >= $pkg.Args.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Args.$array[$pkg.Args.$offset + e] = $internalize(d[(e + 1 >> 0)], $String));
          e = e + (1) >> 0;
        }
      }
      if ($pkg.Args.$length === 0) {
        $pkg.Args = new DT(["?"]);
      }
    };
    N = function() {};
    DM.ptr.prototype.Readdir = function(c) {
      var c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            if (d === DU.nil) {
              $s = -1;
              return [DV.nil, $pkg.ErrInvalid];
            }
            e = d.readdir(c);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.Readdir
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.Readdir = function(c) {
      return this.$val.Readdir(c);
    };
    DM.ptr.prototype.Readdirnames = function(c) {
      var c, d, e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = DT.nil;
            e = $ifaceNil;
            f = this;
            if (f === DU.nil) {
              g = DT.nil;
              h = $pkg.ErrInvalid;
              d = g;
              e = h;
              $s = -1;
              return [d, e];
            }
            j = f.readdirnames(c);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            i = j;
            d = i[0];
            e = i[1];
            $s = -1;
            return [d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.Readdirnames
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.Readdirnames = function(c) {
      return this.$val.Readdirnames(c);
    };
    DM.ptr.prototype.readdir = function(c) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = DV.nil;
            e = $ifaceNil;
            f = this;
            g = f.file.name;
            if (g === "") {
              g = ".";
            }
            i = f.Readdirnames(c);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            j = h[0];
            e = h[1];
            d = $makeSlice(DV, 0, j.$length);
            k = j;
            l = 0;
          case 2:
            if (!(l < k.$length)) {
              $s = 3;
              continue;
            }
            m = ((l < 0 || l >= k.$length) ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + l]);
            o = BH(g + "/" + m);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            n = o;
            p = n[0];
            q = n[1];
            if (AF(q)) {
              l++;
              $s = 2;
              continue;
            }
            if (!($interfaceIsEqual(q, $ifaceNil))) {
              r = d;
              s = q;
              d = r;
              e = s;
              $s = -1;
              return [d, e];
            }
            d = $append(d, p);
            l++;
            $s = 2;
            continue;
          case 3:
            if ((d.$length === 0) && $interfaceIsEqual(e, $ifaceNil) && c > 0) {
              e = C.EOF;
            }
            t = d;
            u = e;
            d = t;
            e = u;
            $s = -1;
            return [d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.readdir
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.readdir = function(c) {
      return this.$val.readdir(c);
    };
    DM.ptr.prototype.readdirnames = function(c) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = DT.nil;
            e = $ifaceNil;
            f = this;
            if (f.file.dirinfo === DW.nil) {
              f.file.dirinfo = new CA.ptr(DX.nil, 0, 0);
              f.file.dirinfo.buf = $makeSlice(DX, 8192);
            }
            g = f.file.dirinfo;
            h = c;
            if (h <= 0) {
              h = 100;
              c = -1;
            }
            d = $makeSlice(DT, 0, h);
          case 1:
            if (!(!((c === 0)))) {
              $s = 2;
              continue;
            }
            if (g.bufp >= g.nbuf) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            g.bufp = 0;
            i = $ifaceNil;
            k = f.file.pfd.ReadDirent(g.buf);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            g.nbuf = j[0];
            i = j[1];
            D.KeepAlive(f);
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              l = d;
              m = AJ("readdirent", i);
              d = l;
              e = m;
              $s = -1;
              return [d, e];
            }
            if (g.nbuf <= 0) {
              $s = 2;
              continue;
            }
          case 4:
            n = 0;
            o = 0;
            p = n;
            q = o;
            r = E.ParseDirent($subslice(g.buf, g.bufp, g.nbuf), c, d);
            p = r[0];
            q = r[1];
            d = r[2];
            g.bufp = g.bufp + (p) >> 0;
            c = c - (q) >> 0;
            $s = 1;
            continue;
          case 2:
            if (c >= 0 && (d.$length === 0)) {
              s = d;
              t = C.EOF;
              d = s;
              e = t;
              $s = -1;
              return [d, e];
            }
            u = d;
            v = $ifaceNil;
            d = u;
            e = v;
            $s = -1;
            return [d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.readdirnames
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.readdirnames = function(c) {
      return this.$val.readdirnames(c);
    };
    AB.ptr.prototype.Error = function() {
      var c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = c.Err.Error();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c.Op + " " + c.Path + ": " + d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AB.ptr.prototype.Error
        };
      }
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AB.prototype.Error = function() {
      return this.$val.Error();
    };
    AB.ptr.prototype.Timeout = function() {
      var c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = $assertType(c.Err, AA, true);
            e = d[0];
            f = d[1];
            if (!(f)) {
              g = false;
              $s = 1;
              continue s;
            }
            h = e.Timeout();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = h;
          case 1:
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AB.ptr.prototype.Timeout
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AB.prototype.Timeout = function() {
      return this.$val.Timeout();
    };
    AC.ptr.prototype.Error = function() {
      var c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = c.Err.Error();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c.Syscall + ": " + d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AC.ptr.prototype.Error
        };
      }
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AC.prototype.Error = function() {
      return this.$val.Error();
    };
    AC.ptr.prototype.Timeout = function() {
      var c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = $assertType(c.Err, AA, true);
            e = d[0];
            f = d[1];
            if (!(f)) {
              g = false;
              $s = 1;
              continue s;
            }
            h = e.Timeout();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = h;
          case 1:
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AC.ptr.prototype.Timeout
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AC.prototype.Timeout = function() {
      return this.$val.Timeout();
    };
    AD = function(c, d) {
      var c, d;
      if ($interfaceIsEqual(d, $ifaceNil)) {
        return $ifaceNil;
      }
      return new AC.ptr(c, d);
    };
    $pkg.NewSyscallError = AD;
    AF = function(c) {
      var c;
      return AL(c);
    };
    $pkg.IsNotExist = AF;
    AI = function(c) {
      var c, d, e, f, g;
      d = c;
      if ($assertType(d, DY, true)[1]) {
        e = d.$val;
        return e.Err;
      } else if ($assertType(d, DZ, true)[1]) {
        f = d.$val;
        return f.Err;
      } else if ($assertType(d, EA, true)[1]) {
        g = d.$val;
        return g.Err;
      }
      return c;
    };
    AJ = function(c, d) {
      var c, d, e, f;
      e = $assertType(d, E.Errno, true);
      f = e[1];
      if (f) {
        d = AD(c, d);
      }
      return d;
    };
    AL = function(c) {
      var c;
      c = AI(c);
      return $interfaceIsEqual(c, new E.Errno(2)) || $interfaceIsEqual(c, $pkg.ErrNotExist);
    };
    DM.ptr.prototype.Name = function() {
      var c;
      c = this;
      return c.file.name;
    };
    DM.prototype.Name = function() {
      return this.$val.Name();
    };
    BA.ptr.prototype.Error = function() {
      var c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = c.Err.Error();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c.Op + " " + c.Old + " " + c.New + ": " + d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BA.ptr.prototype.Error
        };
      }
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BA.prototype.Error = function() {
      return this.$val.Error();
    };
    DM.ptr.prototype.Read = function(c) {
      var c, d, e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = 0;
            e = $ifaceNil;
            f = this;
            g = f.checkValid("read");
            if (!($interfaceIsEqual(g, $ifaceNil))) {
              h = 0;
              i = g;
              d = h;
              e = i;
              $s = -1;
              return [d, e];
            }
            k = f.read(c);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            d = j[0];
            l = j[1];
            m = d;
            n = f.wrapErr("read", l);
            d = m;
            e = n;
            $s = -1;
            return [d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.Read
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.Read = function(c) {
      return this.$val.Read(c);
    };
    DM.ptr.prototype.ReadAt = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = 0;
            f = $ifaceNil;
            g = this;
            h = g.checkValid("read");
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              i = 0;
              j = h;
              e = i;
              f = j;
              $s = -1;
              return [e, f];
            }
            if ((d.$high < 0 || (d.$high === 0 && d.$low < 0))) {
              k = 0;
              l = new AB.ptr("readat", g.file.name, A.New("negative offset"));
              e = k;
              f = l;
              $s = -1;
              return [e, f];
            }
          case 1:
            if (!(c.$length > 0)) {
              $s = 2;
              continue;
            }
            n = g.pread(c, d);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            m = n;
            o = m[0];
            p = m[1];
            if (!($interfaceIsEqual(p, $ifaceNil))) {
              f = g.wrapErr("read", p);
              $s = 2;
              continue;
            }
            e = e + (o) >> 0;
            c = $subslice(c, o);
            d = (q = (new $Int64(0, o)), new $Int64(d.$high + q.$high, d.$low + q.$low));
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return [e, f];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.ReadAt
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.ReadAt = function(c, d) {
      return this.$val.ReadAt(c, d);
    };
    DM.ptr.prototype.Write = function(c) {
      var c, d, e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = 0;
            e = $ifaceNil;
            f = this;
            g = f.checkValid("write");
            if (!($interfaceIsEqual(g, $ifaceNil))) {
              h = 0;
              i = g;
              d = h;
              e = i;
              $s = -1;
              return [d, e];
            }
            k = f.write(c);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            d = j[0];
            l = j[1];
            if (d < 0) {
              d = 0;
            }
            if (!((d === c.$length))) {
              e = C.ErrShortWrite;
            }
            CB(f, l);
            if (!($interfaceIsEqual(l, $ifaceNil))) {
              e = f.wrapErr("write", l);
            }
            m = d;
            n = e;
            d = m;
            e = n;
            $s = -1;
            return [d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.Write
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.Write = function(c) {
      return this.$val.Write(c);
    };
    DM.ptr.prototype.WriteAt = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = 0;
            f = $ifaceNil;
            g = this;
            h = g.checkValid("write");
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              i = 0;
              j = h;
              e = i;
              f = j;
              $s = -1;
              return [e, f];
            }
            if ((d.$high < 0 || (d.$high === 0 && d.$low < 0))) {
              k = 0;
              l = new AB.ptr("writeat", g.file.name, A.New("negative offset"));
              e = k;
              f = l;
              $s = -1;
              return [e, f];
            }
          case 1:
            if (!(c.$length > 0)) {
              $s = 2;
              continue;
            }
            n = g.pwrite(c, d);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            m = n;
            o = m[0];
            p = m[1];
            if (!($interfaceIsEqual(p, $ifaceNil))) {
              f = g.wrapErr("write", p);
              $s = 2;
              continue;
            }
            e = e + (o) >> 0;
            c = $subslice(c, o);
            d = (q = (new $Int64(0, o)), new $Int64(d.$high + q.$high, d.$low + q.$low));
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return [e, f];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.WriteAt
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.WriteAt = function(c, d) {
      return this.$val.WriteAt(c, d);
    };
    DM.ptr.prototype.Seek = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = new $Int64(0, 0);
            f = $ifaceNil;
            g = this;
            h = g.checkValid("seek");
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              i = new $Int64(0, 0);
              j = h;
              e = i;
              f = j;
              $s = -1;
              return [e, f];
            }
            l = g.seek(c, d);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            k = l;
            m = k[0];
            n = k[1];
            if ($interfaceIsEqual(n, $ifaceNil) && !(g.file.dirinfo === DW.nil) && !((m.$high === 0 && m.$low === 0))) {
              n = new E.Errno(21);
            }
            if (!($interfaceIsEqual(n, $ifaceNil))) {
              o = new $Int64(0, 0);
              p = g.wrapErr("seek", n);
              e = o;
              f = p;
              $s = -1;
              return [e, f];
            }
            q = m;
            r = $ifaceNil;
            e = q;
            f = r;
            $s = -1;
            return [e, f];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.Seek
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.Seek = function(c, d) {
      return this.$val.Seek(c, d);
    };
    DM.ptr.prototype.WriteString = function(c) {
      var c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = 0;
            e = $ifaceNil;
            f = this;
            h = f.Write((new DX($stringToBytes(c))));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = h;
            d = g[0];
            e = g[1];
            $s = -1;
            return [d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.WriteString
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.WriteString = function(c) {
      return this.$val.WriteString(c);
    };
    DM.ptr.prototype.wrapErr = function(c, d) {
      var c, d, e;
      e = this;
      if ($interfaceIsEqual(d, $ifaceNil) || $interfaceIsEqual(d, C.EOF)) {
        return d;
      }
      if ($interfaceIsEqual(d, G.ErrFileClosing)) {
        d = $pkg.ErrClosed;
      }
      return new AB.ptr(c, e.file.name, d);
    };
    DM.prototype.wrapErr = function(c, d) {
      return this.$val.wrapErr(c, d);
    };
    DM.ptr.prototype.Chmod = function(c) {
      var c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = d.chmod(c);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.Chmod
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.Chmod = function(c) {
      return this.$val.Chmod(c);
    };
    DM.ptr.prototype.SetDeadline = function(c) {
      var c, d;
      d = this;
      return d.setDeadline($clone(c, J.Time));
    };
    DM.prototype.SetDeadline = function(c) {
      return this.$val.SetDeadline(c);
    };
    DM.ptr.prototype.SetReadDeadline = function(c) {
      var c, d;
      d = this;
      return d.setReadDeadline($clone(c, J.Time));
    };
    DM.prototype.SetReadDeadline = function(c) {
      return this.$val.SetReadDeadline(c);
    };
    DM.ptr.prototype.SetWriteDeadline = function(c) {
      var c, d;
      d = this;
      return d.setWriteDeadline($clone(c, J.Time));
    };
    DM.prototype.SetWriteDeadline = function(c) {
      return this.$val.SetWriteDeadline(c);
    };
    BN = function() {
      $throwRuntimeError("native function not implemented: os.sigpipe");
    };
    BP = function(c) {
      var c, d;
      d = 0;
      d = (d | (((new DO(c).Perm() >>> 0)))) >>> 0;
      if (!((((c & 8388608) >>> 0) === 0))) {
        d = (d | (2048)) >>> 0;
      }
      if (!((((c & 4194304) >>> 0) === 0))) {
        d = (d | (1024)) >>> 0;
      }
      if (!((((c & 1048576) >>> 0) === 0))) {
        d = (d | (512)) >>> 0;
      }
      return d;
    };
    DM.ptr.prototype.chmod = function(c) {
      var c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = d.checkValid("chmod");
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              $s = -1;
              return e;
            }
            f = d.file.pfd.Fchmod(BP(c));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            g = f;
            if (!($interfaceIsEqual(g, $ifaceNil))) {
              $s = -1;
              return d.wrapErr("chmod", g);
            }
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.chmod
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.chmod = function(c) {
      return this.$val.chmod(c);
    };
    DM.ptr.prototype.Chown = function(c, d) {
      var c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            f = e.checkValid("chown");
            if (!($interfaceIsEqual(f, $ifaceNil))) {
              $s = -1;
              return f;
            }
            g = e.file.pfd.Fchown(c, d);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = g;
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              $s = -1;
              return e.wrapErr("chown", h);
            }
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.Chown
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.Chown = function(c, d) {
      return this.$val.Chown(c, d);
    };
    DM.ptr.prototype.Truncate = function(c) {
      var c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = d.checkValid("truncate");
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              $s = -1;
              return e;
            }
            f = d.file.pfd.Ftruncate(c);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            g = f;
            if (!($interfaceIsEqual(g, $ifaceNil))) {
              $s = -1;
              return d.wrapErr("truncate", g);
            }
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.Truncate
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.Truncate = function(c) {
      return this.$val.Truncate(c);
    };
    DM.ptr.prototype.Sync = function() {
      var c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = c.checkValid("sync");
            if (!($interfaceIsEqual(d, $ifaceNil))) {
              $s = -1;
              return d;
            }
            e = c.file.pfd.Fsync();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            if (!($interfaceIsEqual(f, $ifaceNil))) {
              $s = -1;
              return c.wrapErr("sync", f);
            }
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.Sync
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.Sync = function() {
      return this.$val.Sync();
    };
    DM.ptr.prototype.Chdir = function() {
      var c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = c.checkValid("chdir");
            if (!($interfaceIsEqual(d, $ifaceNil))) {
              $s = -1;
              return d;
            }
            e = c.file.pfd.Fchdir();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            if (!($interfaceIsEqual(f, $ifaceNil))) {
              $s = -1;
              return c.wrapErr("chdir", f);
            }
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.Chdir
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.Chdir = function() {
      return this.$val.Chdir();
    };
    DM.ptr.prototype.setDeadline = function(c) {
      var c, d, e;
      d = this;
      e = d.checkValid("SetDeadline");
      if (!($interfaceIsEqual(e, $ifaceNil))) {
        return e;
      }
      return d.file.pfd.SetDeadline($clone(c, J.Time));
    };
    DM.prototype.setDeadline = function(c) {
      return this.$val.setDeadline(c);
    };
    DM.ptr.prototype.setReadDeadline = function(c) {
      var c, d, e;
      d = this;
      e = d.checkValid("SetReadDeadline");
      if (!($interfaceIsEqual(e, $ifaceNil))) {
        return e;
      }
      return d.file.pfd.SetReadDeadline($clone(c, J.Time));
    };
    DM.prototype.setReadDeadline = function(c) {
      return this.$val.setReadDeadline(c);
    };
    DM.ptr.prototype.setWriteDeadline = function(c) {
      var c, d, e;
      d = this;
      e = d.checkValid("SetWriteDeadline");
      if (!($interfaceIsEqual(e, $ifaceNil))) {
        return e;
      }
      return d.file.pfd.SetWriteDeadline($clone(c, J.Time));
    };
    DM.prototype.setWriteDeadline = function(c) {
      return this.$val.setWriteDeadline(c);
    };
    DM.ptr.prototype.checkValid = function(c) {
      var c, d;
      d = this;
      if (d === DU.nil) {
        return $pkg.ErrInvalid;
      }
      return $ifaceNil;
    };
    DM.prototype.checkValid = function(c) {
      return this.$val.checkValid(c);
    };
    DM.ptr.prototype.Fd = function() {
      var c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            if (c === DU.nil) {
              $s = -1;
              return 4294967295;
            }
            if (c.file.nonblock) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            d = c.file.pfd.SetBlocking();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            d;
          case 2:
            $s = -1;
            return ((c.file.pfd.Sysfd >>> 0));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.Fd
        };
      }
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.Fd = function() {
      return this.$val.Fd();
    };
    BX = function(c, d) {
      var c, d, e, f, g, h;
      e = 0;
      f = K.IsNonblock(((c >> 0)));
      g = f[0];
      h = f[1];
      if ($interfaceIsEqual(h, $ifaceNil) && g) {
        e = 3;
      }
      return BZ(c, d, e);
    };
    $pkg.NewFile = BX;
    BZ = function(c, d, e) {
      var c, d, e, f, g, h, i, j, k, l;
      f = ((c >> 0));
      if (f < 0) {
        return DU.nil;
      }
      g = new DM.ptr(new BW.ptr(new G.FD.ptr(new G.fdMutex.ptr(new $Uint64(0, 0), 0, 0), f, new G.pollDesc.ptr(false), EO.nil, 0, 0, true, true, false), d, DW.nil, false, (f === 1) || (f === 2)));
      h = (e === 1) || (e === 2) || (e === 3);
      if (false && (e === 1)) {
        h = false;
      }
      if (true && (e === 1)) {
        i = new E.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, EI.zero(), new E.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new E.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new E.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new E.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, EP.zero());
        j = E.Fstat(f, i);
        if ($interfaceIsEqual(j, $ifaceNil) && (((i.Mode & 61440) >>> 0) === 4096)) {
          h = false;
        }
      }
      k = g.file.pfd.Init("file", h);
      if (!($interfaceIsEqual(k, $ifaceNil))) {} else if (h) {
        l = E.SetNonblock(f, true);
        if ($interfaceIsEqual(l, $ifaceNil)) {
          g.file.nonblock = true;
        }
      }
      D.SetFinalizer(g.file, new ER($methodExpr(EQ, "close")));
      return g;
    };
    CB = function(c, d) {
      var c, d;
      if ($interfaceIsEqual(d, new E.Errno(32)) && c.file.stdoutOrErr) {
        BN();
      }
    };
    DM.ptr.prototype.Close = function() {
      var c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            if (c === DU.nil) {
              $s = -1;
              return $pkg.ErrInvalid;
            }
            d = c.file.close();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.Close
        };
      }
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.Close = function() {
      return this.$val.Close();
    };
    BW.ptr.prototype.close = function() {
      var c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            if (c === EQ.nil) {
              $s = -1;
              return new E.Errno(22);
            }
            d = $ifaceNil;
            e = c.pfd.Close();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            if (!($interfaceIsEqual(f, $ifaceNil))) {
              if ($interfaceIsEqual(f, G.ErrFileClosing)) {
                f = $pkg.ErrClosed;
              }
              d = new AB.ptr("close", c.name, f);
            }
            D.SetFinalizer(c, $ifaceNil);
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BW.ptr.prototype.close
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BW.prototype.close = function() {
      return this.$val.close();
    };
    DM.ptr.prototype.read = function(c) {
      var c, d, e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = 0;
            e = $ifaceNil;
            f = this;
            h = f.file.pfd.Read(c);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = h;
            d = g[0];
            e = g[1];
            D.KeepAlive(f);
            i = d;
            j = e;
            d = i;
            e = j;
            $s = -1;
            return [d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.read
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.read = function(c) {
      return this.$val.read(c);
    };
    DM.ptr.prototype.pread = function(c, d) {
      var c, d, e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = 0;
            f = $ifaceNil;
            g = this;
            i = g.file.pfd.Pread(c, d);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            e = h[0];
            f = h[1];
            D.KeepAlive(g);
            j = e;
            k = f;
            e = j;
            f = k;
            $s = -1;
            return [e, f];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.pread
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.pread = function(c, d) {
      return this.$val.pread(c, d);
    };
    DM.ptr.prototype.write = function(c) {
      var c, d, e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = 0;
            e = $ifaceNil;
            f = this;
            h = f.file.pfd.Write(c);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = h;
            d = g[0];
            e = g[1];
            D.KeepAlive(f);
            i = d;
            j = e;
            d = i;
            e = j;
            $s = -1;
            return [d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.write
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.write = function(c) {
      return this.$val.write(c);
    };
    DM.ptr.prototype.pwrite = function(c, d) {
      var c, d, e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = 0;
            f = $ifaceNil;
            g = this;
            i = g.file.pfd.Pwrite(c, d);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            e = h[0];
            f = h[1];
            D.KeepAlive(g);
            j = e;
            k = f;
            e = j;
            f = k;
            $s = -1;
            return [e, f];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.pwrite
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.pwrite = function(c, d) {
      return this.$val.pwrite(c, d);
    };
    DM.ptr.prototype.seek = function(c, d) {
      var c, d, e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = new $Int64(0, 0);
            f = $ifaceNil;
            g = this;
            i = g.file.pfd.Seek(c, d);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            e = h[0];
            f = h[1];
            D.KeepAlive(g);
            j = e;
            k = f;
            e = j;
            f = k;
            $s = -1;
            return [e, f];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.seek
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.seek = function(c, d) {
      return this.$val.seek(c, d);
    };
    CL = function() {
      CJ = CM;
    };
    CM = function(c) {
      var c;
      return !($interfaceIsEqual(c, new E.Errno(45)));
    };
    CQ = function(c) {
      var c, d;
      d = c.length - 1 >> 0;
      while (true) {
        if (!(d > 0 && (c.charCodeAt(d) === 47))) {
          break;
        }
        c = $substring(c, 0, d);
        d = d - (1) >> 0;
      }
      d = d - (1) >> 0;
      while (true) {
        if (!(d >= 0)) {
          break;
        }
        if (c.charCodeAt(d) === 47) {
          c = $substring(c, (d + 1 >> 0));
          break;
        }
        d = d - (1) >> 0;
      }
      return c;
    };
    CT = function() {
      if (false) {
        return;
      }
      $pkg.Args = L();
    };
    CZ = function(c) {
      var c;
      if (c === 0) {
        N();
      }
      E.Exit(c);
    };
    $pkg.Exit = CZ;
    DB = function(c) {
      var c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = F.Stat(c);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return DG(c);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DB
        };
      }
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Lstat = DB;
    DC = function(c, d) {
      var c, d, e;
      c.name = CQ(d);
      c.size = c.sys.Size;
      J.Time.copy(c.modTime, DD($clone(c.sys.Mtimespec, E.Timespec)));
      c.mode = ((((c.sys.Mode & 511) >>> 0) >>> 0));
      e = (c.sys.Mode & 61440) >>> 0;
      if ((e === (24576)) || (e === (57344))) {
        c.mode = (c.mode | (67108864)) >>> 0;
      } else if (e === (8192)) {
        c.mode = (c.mode | (69206016)) >>> 0;
      } else if (e === (16384)) {
        c.mode = (c.mode | (2147483648)) >>> 0;
      } else if (e === (4096)) {
        c.mode = (c.mode | (33554432)) >>> 0;
      } else if (e === (40960)) {
        c.mode = (c.mode | (134217728)) >>> 0;
      } else if (e === (32768)) {} else if (e === (49152)) {
        c.mode = (c.mode | (16777216)) >>> 0;
      }
      if (!((((c.sys.Mode & 1024) >>> 0) === 0))) {
        c.mode = (c.mode | (4194304)) >>> 0;
      }
      if (!((((c.sys.Mode & 2048) >>> 0) === 0))) {
        c.mode = (c.mode | (8388608)) >>> 0;
      }
      if (!((((c.sys.Mode & 512) >>> 0) === 0))) {
        c.mode = (c.mode | (1048576)) >>> 0;
      }
    };
    DD = function(c) {
      var c;
      return J.Unix((c.Sec), (c.Nsec));
    };
    DM.ptr.prototype.Stat = function() {
      var c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = [c];
            d = this;
            if (d === DU.nil) {
              $s = -1;
              return [$ifaceNil, $pkg.ErrInvalid];
            }
            c[0] = new DQ.ptr("", new $Int64(0, 0), 0, new J.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), EV.nil), new E.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, EI.zero(), new E.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new E.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new E.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new E.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, EP.zero()));
            e = d.file.pfd.Fstat(c[0].sys);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            if (!($interfaceIsEqual(f, $ifaceNil))) {
              $s = -1;
              return [$ifaceNil, new AB.ptr("stat", d.file.name, f)];
            }
            DC(c[0], d.file.name);
            $s = -1;
            return [c[0], $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DM.ptr.prototype.Stat
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DM.prototype.Stat = function() {
      return this.$val.Stat();
    };
    DG = function(c) {
      var c, d, e;
      d = new DQ.ptr("", new $Int64(0, 0), 0, new J.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), EV.nil), new E.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, EI.zero(), new E.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new E.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new E.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new E.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, EP.zero()));
      e = E.Lstat(c, d.sys);
      if (!($interfaceIsEqual(e, $ifaceNil))) {
        return [$ifaceNil, new AB.ptr("lstat", c, e)];
      }
      DC(d, c);
      return [d, $ifaceNil];
    };
    DO.prototype.String = function() {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q;
      c = this.$val;
      d = EX.zero();
      e = 0;
      f = "dalTLDpSugct?";
      g = 0;
      while (true) {
        if (!(g < f.length)) {
          break;
        }
        h = $decodeRune(f, g);
        i = g;
        j = h[0];
        if (!((((c & (((k = (((31 - i >> 0) >>> 0)), k < 32 ? (1 << k) : 0) >>> 0))) >>> 0) === 0))) {
          ((e < 0 || e >= d.length) ? ($throwRuntimeError("index out of range"), undefined) : d[e] = ((j << 24 >>> 24)));
          e = e + (1) >> 0;
        }
        g += h[1];
      }
      if (e === 0) {
        ((e < 0 || e >= d.length) ? ($throwRuntimeError("index out of range"), undefined) : d[e] = 45);
        e = e + (1) >> 0;
      }
      l = "rwxrwxrwx";
      m = 0;
      while (true) {
        if (!(m < l.length)) {
          break;
        }
        n = $decodeRune(l, m);
        o = m;
        p = n[0];
        if (!((((c & (((q = (((8 - o >> 0) >>> 0)), q < 32 ? (1 << q) : 0) >>> 0))) >>> 0) === 0))) {
          ((e < 0 || e >= d.length) ? ($throwRuntimeError("index out of range"), undefined) : d[e] = ((p << 24 >>> 24)));
        } else {
          ((e < 0 || e >= d.length) ? ($throwRuntimeError("index out of range"), undefined) : d[e] = 45);
        }
        e = e + (1) >> 0;
        m += n[1];
      }
      return ($bytesToString($subslice(new DX(d), 0, e)));
    };
    $ptrType(DO).prototype.String = function() {
      return new DO(this.$get()).String();
    };
    DO.prototype.IsDir = function() {
      var c;
      c = this.$val;
      return !((((c & 2147483648) >>> 0) === 0));
    };
    $ptrType(DO).prototype.IsDir = function() {
      return new DO(this.$get()).IsDir();
    };
    DO.prototype.IsRegular = function() {
      var c;
      c = this.$val;
      return ((c & 2399666176) >>> 0) === 0;
    };
    $ptrType(DO).prototype.IsRegular = function() {
      return new DO(this.$get()).IsRegular();
    };
    DO.prototype.Perm = function() {
      var c;
      c = this.$val;
      return (c & 511) >>> 0;
    };
    $ptrType(DO).prototype.Perm = function() {
      return new DO(this.$get()).Perm();
    };
    DQ.ptr.prototype.Name = function() {
      var c;
      c = this;
      return c.name;
    };
    DQ.prototype.Name = function() {
      return this.$val.Name();
    };
    DQ.ptr.prototype.IsDir = function() {
      var c;
      c = this;
      return new DO(c.Mode()).IsDir();
    };
    DQ.prototype.IsDir = function() {
      return this.$val.IsDir();
    };
    DQ.ptr.prototype.Size = function() {
      var c;
      c = this;
      return c.size;
    };
    DQ.prototype.Size = function() {
      return this.$val.Size();
    };
    DQ.ptr.prototype.Mode = function() {
      var c;
      c = this;
      return c.mode;
    };
    DQ.prototype.Mode = function() {
      return this.$val.Mode();
    };
    DQ.ptr.prototype.ModTime = function() {
      var c;
      c = this;
      return c.modTime;
    };
    DQ.prototype.ModTime = function() {
      return this.$val.ModTime();
    };
    DQ.ptr.prototype.Sys = function() {
      var c;
      c = this;
      return c.sys;
    };
    DQ.prototype.Sys = function() {
      return this.$val.Sys();
    };
    DY.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Timeout",
      name: "Timeout",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }];
    EA.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Timeout",
      name: "Timeout",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }];
    DZ.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    EQ.methods = [{
      prop: "close",
      name: "close",
      pkg: "os",
      typ: $funcType([], [$error], false)
    }];
    DU.methods = [{
      prop: "Readdir",
      name: "Readdir",
      pkg: "",
      typ: $funcType([$Int], [DV, $error], false)
    }, {
      prop: "Readdirnames",
      name: "Readdirnames",
      pkg: "",
      typ: $funcType([$Int], [DT, $error], false)
    }, {
      prop: "readdir",
      name: "readdir",
      pkg: "os",
      typ: $funcType([$Int], [DV, $error], false)
    }, {
      prop: "readdirnames",
      name: "readdirnames",
      pkg: "os",
      typ: $funcType([$Int], [DT, $error], false)
    }, {
      prop: "Name",
      name: "Name",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Read",
      name: "Read",
      pkg: "",
      typ: $funcType([DX], [$Int, $error], false)
    }, {
      prop: "ReadAt",
      name: "ReadAt",
      pkg: "",
      typ: $funcType([DX, $Int64], [$Int, $error], false)
    }, {
      prop: "Write",
      name: "Write",
      pkg: "",
      typ: $funcType([DX], [$Int, $error], false)
    }, {
      prop: "WriteAt",
      name: "WriteAt",
      pkg: "",
      typ: $funcType([DX, $Int64], [$Int, $error], false)
    }, {
      prop: "Seek",
      name: "Seek",
      pkg: "",
      typ: $funcType([$Int64, $Int], [$Int64, $error], false)
    }, {
      prop: "WriteString",
      name: "WriteString",
      pkg: "",
      typ: $funcType([$String], [$Int, $error], false)
    }, {
      prop: "wrapErr",
      name: "wrapErr",
      pkg: "os",
      typ: $funcType([$String, $error], [$error], false)
    }, {
      prop: "Chmod",
      name: "Chmod",
      pkg: "",
      typ: $funcType([DO], [$error], false)
    }, {
      prop: "SetDeadline",
      name: "SetDeadline",
      pkg: "",
      typ: $funcType([J.Time], [$error], false)
    }, {
      prop: "SetReadDeadline",
      name: "SetReadDeadline",
      pkg: "",
      typ: $funcType([J.Time], [$error], false)
    }, {
      prop: "SetWriteDeadline",
      name: "SetWriteDeadline",
      pkg: "",
      typ: $funcType([J.Time], [$error], false)
    }, {
      prop: "chmod",
      name: "chmod",
      pkg: "os",
      typ: $funcType([DO], [$error], false)
    }, {
      prop: "Chown",
      name: "Chown",
      pkg: "",
      typ: $funcType([$Int, $Int], [$error], false)
    }, {
      prop: "Truncate",
      name: "Truncate",
      pkg: "",
      typ: $funcType([$Int64], [$error], false)
    }, {
      prop: "Sync",
      name: "Sync",
      pkg: "",
      typ: $funcType([], [$error], false)
    }, {
      prop: "Chdir",
      name: "Chdir",
      pkg: "",
      typ: $funcType([], [$error], false)
    }, {
      prop: "setDeadline",
      name: "setDeadline",
      pkg: "os",
      typ: $funcType([J.Time], [$error], false)
    }, {
      prop: "setReadDeadline",
      name: "setReadDeadline",
      pkg: "os",
      typ: $funcType([J.Time], [$error], false)
    }, {
      prop: "setWriteDeadline",
      name: "setWriteDeadline",
      pkg: "os",
      typ: $funcType([J.Time], [$error], false)
    }, {
      prop: "checkValid",
      name: "checkValid",
      pkg: "os",
      typ: $funcType([$String], [$error], false)
    }, {
      prop: "Fd",
      name: "Fd",
      pkg: "",
      typ: $funcType([], [$Uintptr], false)
    }, {
      prop: "Close",
      name: "Close",
      pkg: "",
      typ: $funcType([], [$error], false)
    }, {
      prop: "read",
      name: "read",
      pkg: "os",
      typ: $funcType([DX], [$Int, $error], false)
    }, {
      prop: "pread",
      name: "pread",
      pkg: "os",
      typ: $funcType([DX, $Int64], [$Int, $error], false)
    }, {
      prop: "write",
      name: "write",
      pkg: "os",
      typ: $funcType([DX], [$Int, $error], false)
    }, {
      prop: "pwrite",
      name: "pwrite",
      pkg: "os",
      typ: $funcType([DX, $Int64], [$Int, $error], false)
    }, {
      prop: "seek",
      name: "seek",
      pkg: "os",
      typ: $funcType([$Int64, $Int], [$Int64, $error], false)
    }, {
      prop: "Stat",
      name: "Stat",
      pkg: "",
      typ: $funcType([], [DN, $error], false)
    }];
    DO.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "IsDir",
      name: "IsDir",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsRegular",
      name: "IsRegular",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Perm",
      name: "Perm",
      pkg: "",
      typ: $funcType([], [DO], false)
    }];
    EY.methods = [{
      prop: "Name",
      name: "Name",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "IsDir",
      name: "IsDir",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Size",
      name: "Size",
      pkg: "",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "Mode",
      name: "Mode",
      pkg: "",
      typ: $funcType([], [DO], false)
    }, {
      prop: "ModTime",
      name: "ModTime",
      pkg: "",
      typ: $funcType([], [J.Time], false)
    }, {
      prop: "Sys",
      name: "Sys",
      pkg: "",
      typ: $funcType([], [$emptyInterface], false)
    }];
    AA.init([{
      prop: "Timeout",
      name: "Timeout",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }]);
    AB.init("", [{
      prop: "Op",
      name: "Op",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Path",
      name: "Path",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Err",
      name: "Err",
      embedded: false,
      exported: true,
      typ: $error,
      tag: ""
    }]);
    AC.init("", [{
      prop: "Syscall",
      name: "Syscall",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Err",
      name: "Err",
      embedded: false,
      exported: true,
      typ: $error,
      tag: ""
    }]);
    BA.init("", [{
      prop: "Op",
      name: "Op",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Old",
      name: "Old",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "New",
      name: "New",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Err",
      name: "Err",
      embedded: false,
      exported: true,
      typ: $error,
      tag: ""
    }]);
    BW.init("os", [{
      prop: "pfd",
      name: "pfd",
      embedded: false,
      exported: false,
      typ: G.FD,
      tag: ""
    }, {
      prop: "name",
      name: "name",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "dirinfo",
      name: "dirinfo",
      embedded: false,
      exported: false,
      typ: DW,
      tag: ""
    }, {
      prop: "nonblock",
      name: "nonblock",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "stdoutOrErr",
      name: "stdoutOrErr",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    CA.init("os", [{
      prop: "buf",
      name: "buf",
      embedded: false,
      exported: false,
      typ: DX,
      tag: ""
    }, {
      prop: "nbuf",
      name: "nbuf",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "bufp",
      name: "bufp",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }]);
    DM.init("os", [{
      prop: "file",
      name: "file",
      embedded: true,
      exported: false,
      typ: EQ,
      tag: ""
    }]);
    DN.init([{
      prop: "IsDir",
      name: "IsDir",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "ModTime",
      name: "ModTime",
      pkg: "",
      typ: $funcType([], [J.Time], false)
    }, {
      prop: "Mode",
      name: "Mode",
      pkg: "",
      typ: $funcType([], [DO], false)
    }, {
      prop: "Name",
      name: "Name",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Size",
      name: "Size",
      pkg: "",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "Sys",
      name: "Sys",
      pkg: "",
      typ: $funcType([], [$emptyInterface], false)
    }]);
    DQ.init("os", [{
      prop: "name",
      name: "name",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "size",
      name: "size",
      embedded: false,
      exported: false,
      typ: $Int64,
      tag: ""
    }, {
      prop: "mode",
      name: "mode",
      embedded: false,
      exported: false,
      typ: DO,
      tag: ""
    }, {
      prop: "modTime",
      name: "modTime",
      embedded: false,
      exported: false,
      typ: J.Time,
      tag: ""
    }, {
      prop: "sys",
      name: "sys",
      embedded: false,
      exported: false,
      typ: E.Stat_t,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = G.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = K.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = F.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = H.$init();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = I.$init();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = J.$init();
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $pkg.Args = DT.nil;
            $pkg.ErrInvalid = A.New("invalid argument");
            $pkg.ErrPermission = A.New("permission denied");
            $pkg.ErrExist = A.New("file already exists");
            $pkg.ErrNotExist = A.New("file does not exist");
            $pkg.ErrClosed = A.New("file already closed");
            AX = A.New("os: process already finished");
            $pkg.Stdin = BX(((E.Stdin >>> 0)), "/dev/stdin");
            $pkg.Stdout = BX(((E.Stdout >>> 0)), "/dev/stdout");
            $pkg.Stderr = BX(((E.Stderr >>> 0)), "/dev/stderr");
            CJ = (function(c) {
              var c;
              return true;
            });
            BH = DB;
            M();
            CL();
            CT();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["fmt"] = (function() {
    var $pkg = {},
      $init, C, D, H, E, F, A, G, B, I, J, K, L, M, N, O, P, AH, AT, AU, AV, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BS, CN, CO, Q, AW, BA, BC, BD, R, S, T, U, V, W, Y, AB, AC, AD, AE, AF, AG, AX, AY, BE;
    C = $packages["errors"];
    D = $packages["io"];
    H = $packages["math"];
    E = $packages["os"];
    F = $packages["reflect"];
    A = $packages["strconv"];
    G = $packages["sync"];
    B = $packages["unicode/utf8"];
    I = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", true, "fmt", false, function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, zero_, plusV_, sharpV_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.widPresent = false;
        this.precPresent = false;
        this.minus = false;
        this.plus = false;
        this.sharp = false;
        this.space = false;
        this.zero = false;
        this.plusV = false;
        this.sharpV = false;
        return;
      }
      this.widPresent = widPresent_;
      this.precPresent = precPresent_;
      this.minus = minus_;
      this.plus = plus_;
      this.sharp = sharp_;
      this.space = space_;
      this.zero = zero_;
      this.plusV = plusV_;
      this.sharpV = sharpV_;
    });
    J = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", true, "fmt", false, function(buf_, fmtFlags_, wid_, prec_, intbuf_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.buf = BJ.nil;
        this.fmtFlags = new I.ptr(false, false, false, false, false, false, false, false, false);
        this.wid = 0;
        this.prec = 0;
        this.intbuf = BK.zero();
        return;
      }
      this.buf = buf_;
      this.fmtFlags = fmtFlags_;
      this.wid = wid_;
      this.prec = prec_;
      this.intbuf = intbuf_;
    });
    K = $pkg.State = $newType(8, $kindInterface, "fmt.State", true, "fmt", true, null);
    L = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", true, "fmt", true, null);
    M = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", true, "fmt", true, null);
    N = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", true, "fmt", true, null);
    O = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", true, "fmt", false, null);
    P = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", true, "fmt", false, function(buf_, arg_, value_, fmt_, reordered_, goodArgNum_, panicking_, erroring_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.buf = O.nil;
        this.arg = $ifaceNil;
        this.value = new F.Value.ptr(BI.nil, 0, 0);
        this.fmt = new J.ptr(BJ.nil, new I.ptr(false, false, false, false, false, false, false, false, false), 0, 0, BK.zero());
        this.reordered = false;
        this.goodArgNum = false;
        this.panicking = false;
        this.erroring = false;
        return;
      }
      this.buf = buf_;
      this.arg = arg_;
      this.value = value_;
      this.fmt = fmt_;
      this.reordered = reordered_;
      this.goodArgNum = goodArgNum_;
      this.panicking = panicking_;
      this.erroring = erroring_;
    });
    AH = $pkg.ScanState = $newType(8, $kindInterface, "fmt.ScanState", true, "fmt", true, null);
    AT = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", true, "fmt", false, function(err_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.err = $ifaceNil;
        return;
      }
      this.err = err_;
    });
    AU = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", true, "fmt", false, function(rs_, buf_, count_, atEOF_, ssave_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.rs = $ifaceNil;
        this.buf = O.nil;
        this.count = 0;
        this.atEOF = false;
        this.ssave = new AV.ptr(false, false, false, 0, 0, 0);
        return;
      }
      this.rs = rs_;
      this.buf = buf_;
      this.count = count_;
      this.atEOF = atEOF_;
      this.ssave = ssave_;
    });
    AV = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", true, "fmt", false, function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.validSave = false;
        this.nlIsEnd = false;
        this.nlIsSpace = false;
        this.argLimit = 0;
        this.limit = 0;
        this.maxWid = 0;
        return;
      }
      this.validSave = validSave_;
      this.nlIsEnd = nlIsEnd_;
      this.nlIsSpace = nlIsSpace_;
      this.argLimit = argLimit_;
      this.limit = limit_;
      this.maxWid = maxWid_;
    });
    BH = $sliceType($emptyInterface);
    BI = $ptrType(F.rtype);
    BJ = $ptrType(O);
    BK = $arrayType($Uint8, 68);
    BL = $arrayType($Uint16, 2);
    BM = $sliceType(BL);
    BN = $sliceType($Uint8);
    BO = $arrayType($Uint8, 5);
    BP = $ptrType(P);
    BS = $ptrType(AU);
    CN = $ptrType(J);
    CO = $funcType([$Int32], [$Bool], false);
    J.ptr.prototype.clearflags = function() {
      var a;
      a = this;
      I.copy(a.fmtFlags, new I.ptr(false, false, false, false, false, false, false, false, false));
    };
    J.prototype.clearflags = function() {
      return this.$val.clearflags();
    };
    J.ptr.prototype.init = function(a) {
      var a, b;
      b = this;
      b.buf = a;
      b.clearflags();
    };
    J.prototype.init = function(a) {
      return this.$val.init(a);
    };
    J.ptr.prototype.writePadding = function(a) {
      var a, b, c, d, e, f, g, h, i, j;
      b = this;
      if (a <= 0) {
        return;
      }
      c = b.buf.$get();
      d = c.$length;
      e = d + a >> 0;
      if (e > c.$capacity) {
        c = $makeSlice(O, (($imul(c.$capacity, 2)) + a >> 0));
        $copySlice(c, b.buf.$get());
      }
      f = 32;
      if (b.fmtFlags.zero) {
        f = 48;
      }
      g = $subslice(c, d, e);
      h = g;
      i = 0;
      while (true) {
        if (!(i < h.$length)) {
          break;
        }
        j = i;
        ((j < 0 || j >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + j] = f);
        i++;
      }
      b.buf.$set($subslice(c, 0, e));
    };
    J.prototype.writePadding = function(a) {
      return this.$val.writePadding(a);
    };
    J.ptr.prototype.pad = function(a) {
      var a, b, c;
      b = this;
      if (!b.fmtFlags.widPresent || (b.wid === 0)) {
        b.buf.Write(a);
        return;
      }
      c = b.wid - B.RuneCount(a) >> 0;
      if (!b.fmtFlags.minus) {
        b.writePadding(c);
        b.buf.Write(a);
      } else {
        b.buf.Write(a);
        b.writePadding(c);
      }
    };
    J.prototype.pad = function(a) {
      return this.$val.pad(a);
    };
    J.ptr.prototype.padString = function(a) {
      var a, b, c;
      b = this;
      if (!b.fmtFlags.widPresent || (b.wid === 0)) {
        b.buf.WriteString(a);
        return;
      }
      c = b.wid - B.RuneCountInString(a) >> 0;
      if (!b.fmtFlags.minus) {
        b.writePadding(c);
        b.buf.WriteString(a);
      } else {
        b.buf.WriteString(a);
        b.writePadding(c);
      }
    };
    J.prototype.padString = function(a) {
      return this.$val.padString(a);
    };
    J.ptr.prototype.fmtBoolean = function(a) {
      var a, b;
      b = this;
      if (a) {
        b.padString("true");
      } else {
        b.padString("false");
      }
    };
    J.prototype.fmtBoolean = function(a) {
      return this.$val.fmtBoolean(a);
    };
    J.ptr.prototype.fmtUnicode = function(a) {
      var a, b, c, d, e, f, g;
      b = this;
      c = $subslice(new BN(b.intbuf), 0);
      d = 4;
      if (b.fmtFlags.precPresent && b.prec > 4) {
        d = b.prec;
        e = (((2 + d >> 0) + 2 >> 0) + 4 >> 0) + 1 >> 0;
        if (e > c.$length) {
          c = $makeSlice(BN, e);
        }
      }
      f = c.$length;
      if (b.fmtFlags.sharp && (a.$high < 0 || (a.$high === 0 && a.$low <= 1114111)) && A.IsPrint(((a.$low >> 0)))) {
        f = f - (1) >> 0;
        ((f < 0 || f >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + f] = 39);
        f = f - (B.RuneLen(((a.$low >> 0)))) >> 0;
        B.EncodeRune($subslice(c, f), ((a.$low >> 0)));
        f = f - (1) >> 0;
        ((f < 0 || f >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + f] = 39);
        f = f - (1) >> 0;
        ((f < 0 || f >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + f] = 32);
      }
      while (true) {
        if (!((a.$high > 0 || (a.$high === 0 && a.$low >= 16)))) {
          break;
        }
        f = f - (1) >> 0;
        ((f < 0 || f >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + f] = "0123456789ABCDEFX".charCodeAt($flatten64(new $Uint64(a.$high & 0, (a.$low & 15) >>> 0))));
        d = d - (1) >> 0;
        a = $shiftRightUint64(a, (4));
      }
      f = f - (1) >> 0;
      ((f < 0 || f >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + f] = "0123456789ABCDEFX".charCodeAt($flatten64(a)));
      d = d - (1) >> 0;
      while (true) {
        if (!(d > 0)) {
          break;
        }
        f = f - (1) >> 0;
        ((f < 0 || f >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + f] = 48);
        d = d - (1) >> 0;
      }
      f = f - (1) >> 0;
      ((f < 0 || f >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + f] = 43);
      f = f - (1) >> 0;
      ((f < 0 || f >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + f] = 85);
      g = b.fmtFlags.zero;
      b.fmtFlags.zero = false;
      b.pad($subslice(c, f));
      b.fmtFlags.zero = g;
    };
    J.prototype.fmtUnicode = function(a) {
      return this.$val.fmtUnicode(a);
    };
    J.ptr.prototype.fmtInteger = function(a, b, c, d) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t;
      e = this;
      g = c && (f = (new $Int64(a.$high, a.$low)), (f.$high < 0 || (f.$high === 0 && f.$low < 0)));
      if (g) {
        a = new $Uint64(-a.$high, -a.$low);
      }
      h = $subslice(new BN(e.intbuf), 0);
      if (e.fmtFlags.widPresent || e.fmtFlags.precPresent) {
        i = (3 + e.wid >> 0) + e.prec >> 0;
        if (i > h.$length) {
          h = $makeSlice(BN, i);
        }
      }
      j = 0;
      if (e.fmtFlags.precPresent) {
        j = e.prec;
        if ((j === 0) && (a.$high === 0 && a.$low === 0)) {
          k = e.fmtFlags.zero;
          e.fmtFlags.zero = false;
          e.writePadding(e.wid);
          e.fmtFlags.zero = k;
          return;
        }
      } else if (e.fmtFlags.zero && e.fmtFlags.widPresent) {
        j = e.wid;
        if (g || e.fmtFlags.plus || e.fmtFlags.space) {
          j = j - (1) >> 0;
        }
      }
      l = h.$length;
      m = b;
      if (m === (10)) {
        while (true) {
          if (!((a.$high > 0 || (a.$high === 0 && a.$low >= 10)))) {
            break;
          }
          l = l - (1) >> 0;
          n = $div64(a, new $Uint64(0, 10), false);
          ((l < 0 || l >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + l] = (((o = new $Uint64(0 + a.$high, 48 + a.$low), p = $mul64(n, new $Uint64(0, 10)), new $Uint64(o.$high - p.$high, o.$low - p.$low)).$low << 24 >>> 24)));
          a = n;
        }
      } else if (m === (16)) {
        while (true) {
          if (!((a.$high > 0 || (a.$high === 0 && a.$low >= 16)))) {
            break;
          }
          l = l - (1) >> 0;
          ((l < 0 || l >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + l] = d.charCodeAt($flatten64(new $Uint64(a.$high & 0, (a.$low & 15) >>> 0))));
          a = $shiftRightUint64(a, (4));
        }
      } else if (m === (8)) {
        while (true) {
          if (!((a.$high > 0 || (a.$high === 0 && a.$low >= 8)))) {
            break;
          }
          l = l - (1) >> 0;
          ((l < 0 || l >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + l] = (((q = new $Uint64(a.$high & 0, (a.$low & 7) >>> 0), new $Uint64(0 + q.$high, 48 + q.$low)).$low << 24 >>> 24)));
          a = $shiftRightUint64(a, (3));
        }
      } else if (m === (2)) {
        while (true) {
          if (!((a.$high > 0 || (a.$high === 0 && a.$low >= 2)))) {
            break;
          }
          l = l - (1) >> 0;
          ((l < 0 || l >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + l] = (((r = new $Uint64(a.$high & 0, (a.$low & 1) >>> 0), new $Uint64(0 + r.$high, 48 + r.$low)).$low << 24 >>> 24)));
          a = $shiftRightUint64(a, (1));
        }
      } else {
        $panic(new $String("fmt: unknown base; can't happen"));
      }
      l = l - (1) >> 0;
      ((l < 0 || l >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + l] = d.charCodeAt($flatten64(a)));
      while (true) {
        if (!(l > 0 && j > (h.$length - l >> 0))) {
          break;
        }
        l = l - (1) >> 0;
        ((l < 0 || l >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + l] = 48);
      }
      if (e.fmtFlags.sharp) {
        s = b;
        if (s === (8)) {
          if (!((((l < 0 || l >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + l]) === 48))) {
            l = l - (1) >> 0;
            ((l < 0 || l >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + l] = 48);
          }
        } else if (s === (16)) {
          l = l - (1) >> 0;
          ((l < 0 || l >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + l] = d.charCodeAt(16));
          l = l - (1) >> 0;
          ((l < 0 || l >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + l] = 48);
        }
      }
      if (g) {
        l = l - (1) >> 0;
        ((l < 0 || l >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + l] = 45);
      } else if (e.fmtFlags.plus) {
        l = l - (1) >> 0;
        ((l < 0 || l >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + l] = 43);
      } else if (e.fmtFlags.space) {
        l = l - (1) >> 0;
        ((l < 0 || l >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + l] = 32);
      }
      t = e.fmtFlags.zero;
      e.fmtFlags.zero = false;
      e.pad($subslice(h, l));
      e.fmtFlags.zero = t;
    };
    J.prototype.fmtInteger = function(a, b, c, d) {
      return this.$val.fmtInteger(a, b, c, d);
    };
    J.ptr.prototype.truncate = function(a) {
      var a, b, c, d, e, f, g;
      b = this;
      if (b.fmtFlags.precPresent) {
        c = b.prec;
        d = a;
        e = 0;
        while (true) {
          if (!(e < d.length)) {
            break;
          }
          f = $decodeRune(d, e);
          g = e;
          c = c - (1) >> 0;
          if (c < 0) {
            return $substring(a, 0, g);
          }
          e += f[1];
        }
      }
      return a;
    };
    J.prototype.truncate = function(a) {
      return this.$val.truncate(a);
    };
    J.ptr.prototype.fmtS = function(a) {
      var a, b;
      b = this;
      a = b.truncate(a);
      b.padString(a);
    };
    J.prototype.fmtS = function(a) {
      return this.$val.fmtS(a);
    };
    J.ptr.prototype.fmtSbx = function(a, b, c) {
      var a, b, c, d, e, f, g, h, i;
      d = this;
      e = b.$length;
      if (b === BN.nil) {
        e = a.length;
      }
      if (d.fmtFlags.precPresent && d.prec < e) {
        e = d.prec;
      }
      f = $imul(2, e);
      if (f > 0) {
        if (d.fmtFlags.space) {
          if (d.fmtFlags.sharp) {
            f = $imul(f, (2));
          }
          f = f + ((e - 1 >> 0)) >> 0;
        } else if (d.fmtFlags.sharp) {
          f = f + (2) >> 0;
        }
      } else {
        if (d.fmtFlags.widPresent) {
          d.writePadding(d.wid);
        }
        return;
      }
      if (d.fmtFlags.widPresent && d.wid > f && !d.fmtFlags.minus) {
        d.writePadding(d.wid - f >> 0);
      }
      g = d.buf.$get();
      if (d.fmtFlags.sharp) {
        g = $append(g, 48, c.charCodeAt(16));
      }
      h = 0;
      i = 0;
      while (true) {
        if (!(i < e)) {
          break;
        }
        if (d.fmtFlags.space && i > 0) {
          g = $append(g, 32);
          if (d.fmtFlags.sharp) {
            g = $append(g, 48, c.charCodeAt(16));
          }
        }
        if (!(b === BN.nil)) {
          h = ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]);
        } else {
          h = a.charCodeAt(i);
        }
        g = $append(g, c.charCodeAt((h >>> 4 << 24 >>> 24)), c.charCodeAt(((h & 15) >>> 0)));
        i = i + (1) >> 0;
      }
      d.buf.$set(g);
      if (d.fmtFlags.widPresent && d.wid > f && d.fmtFlags.minus) {
        d.writePadding(d.wid - f >> 0);
      }
    };
    J.prototype.fmtSbx = function(a, b, c) {
      return this.$val.fmtSbx(a, b, c);
    };
    J.ptr.prototype.fmtSx = function(a, b) {
      var a, b, c;
      c = this;
      c.fmtSbx(a, BN.nil, b);
    };
    J.prototype.fmtSx = function(a, b) {
      return this.$val.fmtSx(a, b);
    };
    J.ptr.prototype.fmtBx = function(a, b) {
      var a, b, c;
      c = this;
      c.fmtSbx("", a, b);
    };
    J.prototype.fmtBx = function(a, b) {
      return this.$val.fmtBx(a, b);
    };
    J.ptr.prototype.fmtQ = function(a) {
      var a, b, c;
      b = this;
      a = b.truncate(a);
      if (b.fmtFlags.sharp && A.CanBackquote(a)) {
        b.padString("`" + a + "`");
        return;
      }
      c = $subslice(new BN(b.intbuf), 0, 0);
      if (b.fmtFlags.plus) {
        b.pad(A.AppendQuoteToASCII(c, a));
      } else {
        b.pad(A.AppendQuote(c, a));
      }
    };
    J.prototype.fmtQ = function(a) {
      return this.$val.fmtQ(a);
    };
    J.ptr.prototype.fmtC = function(a) {
      var a, b, c, d, e;
      b = this;
      c = ((a.$low >> 0));
      if ((a.$high > 0 || (a.$high === 0 && a.$low > 1114111))) {
        c = 65533;
      }
      d = $subslice(new BN(b.intbuf), 0, 0);
      e = B.EncodeRune($subslice(d, 0, 4), c);
      b.pad($subslice(d, 0, e));
    };
    J.prototype.fmtC = function(a) {
      return this.$val.fmtC(a);
    };
    J.ptr.prototype.fmtQc = function(a) {
      var a, b, c, d;
      b = this;
      c = ((a.$low >> 0));
      if ((a.$high > 0 || (a.$high === 0 && a.$low > 1114111))) {
        c = 65533;
      }
      d = $subslice(new BN(b.intbuf), 0, 0);
      if (b.fmtFlags.plus) {
        b.pad(A.AppendQuoteRuneToASCII(d, c));
      } else {
        b.pad(A.AppendQuoteRune(d, c));
      }
    };
    J.prototype.fmtQc = function(a) {
      return this.$val.fmtQc(a);
    };
    J.ptr.prototype.fmtFloat = function(a, b, c, d) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n;
      e = this;
      if (e.fmtFlags.precPresent) {
        d = e.prec;
      }
      f = A.AppendFloat($subslice(new BN(e.intbuf), 0, 1), a, ((c << 24 >>> 24)), d, b);
      if (((1 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 1]) === 45) || ((1 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 1]) === 43)) {
        f = $subslice(f, 1);
      } else {
        (0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0] = 43);
      }
      if (e.fmtFlags.space && ((0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0]) === 43) && !e.fmtFlags.plus) {
        (0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0] = 32);
      }
      if (((1 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 1]) === 73) || ((1 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 1]) === 78)) {
        g = e.fmtFlags.zero;
        e.fmtFlags.zero = false;
        if (((1 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 1]) === 78) && !e.fmtFlags.space && !e.fmtFlags.plus) {
          f = $subslice(f, 1);
        }
        e.pad(f);
        e.fmtFlags.zero = g;
        return;
      }
      if (e.fmtFlags.sharp && !((c === 98))) {
        h = 0;
        i = c;
        if ((i === (118)) || (i === (103)) || (i === (71))) {
          h = d;
          if (h === -1) {
            h = 6;
          }
        }
        j = BO.zero();
        k = $subslice(new BN(j), 0, 0);
        l = false;
        m = 1;
        while (true) {
          if (!(m < f.$length)) {
            break;
          }
          n = ((m < 0 || m >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + m]);
          if (n === (46)) {
            l = true;
          } else if ((n === (101)) || (n === (69))) {
            k = $appendSlice(k, $subslice(f, m));
            f = $subslice(f, 0, m);
          } else {
            h = h - (1) >> 0;
          }
          m = m + (1) >> 0;
        }
        if (!l) {
          f = $append(f, 46);
        }
        while (true) {
          if (!(h > 0)) {
            break;
          }
          f = $append(f, 48);
          h = h - (1) >> 0;
        }
        f = $appendSlice(f, k);
      }
      if (e.fmtFlags.plus || !(((0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0]) === 43))) {
        if (e.fmtFlags.zero && e.fmtFlags.widPresent && e.wid > f.$length) {
          e.buf.WriteByte((0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0]));
          e.writePadding(e.wid - f.$length >> 0);
          e.buf.Write($subslice(f, 1));
          return;
        }
        e.pad(f);
        return;
      }
      e.pad($subslice(f, 1));
    };
    J.prototype.fmtFloat = function(a, b, c, d) {
      return this.$val.fmtFloat(a, b, c, d);
    };
    $ptrType(O).prototype.Write = function(a) {
      var a, b;
      b = this;
      b.$set($appendSlice(b.$get(), a));
    };
    $ptrType(O).prototype.WriteString = function(a) {
      var a, b;
      b = this;
      b.$set($appendSlice(b.$get(), a));
    };
    $ptrType(O).prototype.WriteByte = function(a) {
      var a, b;
      b = this;
      b.$set($append(b.$get(), a));
    };
    $ptrType(O).prototype.WriteRune = function(a) {
      var a, b, c, d, e, f;
      b = this;
      if (a < 128) {
        b.$set($append(b.$get(), ((a << 24 >>> 24))));
        return;
      }
      c = b.$get();
      d = c.$length;
      while (true) {
        if (!((d + 4 >> 0) > c.$capacity)) {
          break;
        }
        c = $append(c, 0);
      }
      f = B.EncodeRune((e = $subslice(c, d, (d + 4 >> 0)), $subslice(new BN(e.$array), e.$offset, e.$offset + e.$length)), a);
      b.$set($subslice(c, 0, (d + f >> 0)));
    };
    R = function() {
      var a, b, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = Q.Get();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              a = a.$blk();
            }
            if (a && a.$blk !== undefined) {
              break s;
            }
            b = $assertType(a, BP);
            b.panicking = false;
            b.erroring = false;
            b.fmt.init((b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, b))));
            $s = -1;
            return b;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: R
        };
      }
      $f.a = a;
      $f.b = b;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.ptr.prototype.free = function() {
      var a;
      a = this;
      a.buf = $subslice(a.buf, 0, 0);
      a.arg = $ifaceNil;
      a.value = new F.Value.ptr(BI.nil, 0, 0);
      Q.Put(a);
    };
    P.prototype.free = function() {
      return this.$val.free();
    };
    P.ptr.prototype.Width = function() {
      var a, b, c, d, e;
      a = 0;
      b = false;
      c = this;
      d = c.fmt.wid;
      e = c.fmt.fmtFlags.widPresent;
      a = d;
      b = e;
      return [a, b];
    };
    P.prototype.Width = function() {
      return this.$val.Width();
    };
    P.ptr.prototype.Precision = function() {
      var a, b, c, d, e;
      a = 0;
      b = false;
      c = this;
      d = c.fmt.prec;
      e = c.fmt.fmtFlags.precPresent;
      a = d;
      b = e;
      return [a, b];
    };
    P.prototype.Precision = function() {
      return this.$val.Precision();
    };
    P.ptr.prototype.Flag = function(a) {
      var a, b, c;
      b = this;
      c = a;
      if (c === (45)) {
        return b.fmt.fmtFlags.minus;
      } else if (c === (43)) {
        return b.fmt.fmtFlags.plus || b.fmt.fmtFlags.plusV;
      } else if (c === (35)) {
        return b.fmt.fmtFlags.sharp || b.fmt.fmtFlags.sharpV;
      } else if (c === (32)) {
        return b.fmt.fmtFlags.space;
      } else if (c === (48)) {
        return b.fmt.fmtFlags.zero;
      }
      return false;
    };
    P.prototype.Flag = function(a) {
      return this.$val.Flag(a);
    };
    P.ptr.prototype.Write = function(a) {
      var a, b, c, d, e, f;
      b = 0;
      c = $ifaceNil;
      d = this;
      (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
        return this.$target.buf;
      }, function($v) {
        this.$target.buf = $v;
      }, d))).Write(a);
      e = a.$length;
      f = $ifaceNil;
      b = e;
      c = f;
      return [b, c];
    };
    P.prototype.Write = function(a) {
      return this.$val.Write(a);
    };
    P.ptr.prototype.WriteString = function(a) {
      var a, b, c, d, e, f;
      b = 0;
      c = $ifaceNil;
      d = this;
      (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
        return this.$target.buf;
      }, function($v) {
        this.$target.buf = $v;
      }, d))).WriteString(a);
      e = a.length;
      f = $ifaceNil;
      b = e;
      c = f;
      return [b, c];
    };
    P.prototype.WriteString = function(a) {
      return this.$val.WriteString(a);
    };
    S = function(a, b, c) {
      var a, b, c, d, e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = 0;
            e = $ifaceNil;
            f = R();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            g = f;
            $r = g.doPrintf(b, c);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            j = a.Write((i = g.buf, $subslice(new BN(i.$array), i.$offset, i.$offset + i.$length)));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            h = j;
            d = h[0];
            e = h[1];
            g.free();
            $s = -1;
            return [d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: S
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Fprintf = S;
    T = function(a, b) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = 0;
            d = $ifaceNil;
            f = S(E.Stdout, a, b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            e = f;
            c = e[0];
            d = e[1];
            $s = -1;
            return [c, d];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: T
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Printf = T;
    U = function(a, b) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = R();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
            $r = d.doPrintf(a, b);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            e = ($bytesToString(d.buf));
            d.free();
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: U
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Sprintf = U;
    V = function(a, b) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = U(a, b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = C.New(c);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: V
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Errorf = V;
    W = function(a, b) {
      var a, b, c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = 0;
            d = $ifaceNil;
            e = R();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            $r = f.doPrint(b);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            i = a.Write((h = f.buf, $subslice(new BN(h.$array), h.$offset, h.$offset + h.$length)));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            g = i;
            c = g[0];
            d = g[1];
            f.free();
            $s = -1;
            return [c, d];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: W
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Fprint = W;
    Y = function(a) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = R();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            $r = c.doPrint(a);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d = ($bytesToString(c.buf));
            c.free();
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Y
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Sprint = Y;
    AB = function(a) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = R();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            $r = c.doPrintln(a);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d = ($bytesToString(c.buf));
            c.free();
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AB
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Sprintln = AB;
    AC = function(a, b) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = $clone(a, F.Value).Field(b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
            if (($clone(d, F.Value).Kind() === 20) && !$clone(d, F.Value).IsNil()) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            e = $clone(d, F.Value).Elem();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            d = e;
          case 3:
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AC
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AD = function(a) {
      var a;
      return a > 1000000 || a < -1000000;
    };
    AE = function(a, b, c) {
      var a, b, c, d, e, f, g, h, i, j, k, l;
      d = 0;
      e = false;
      f = 0;
      if (b >= c) {
        g = 0;
        h = false;
        i = c;
        d = g;
        e = h;
        f = i;
        return [d, e, f];
      }
      f = b;
      while (true) {
        if (!(f < c && 48 <= a.charCodeAt(f) && a.charCodeAt(f) <= 57)) {
          break;
        }
        if (AD(d)) {
          j = 0;
          k = false;
          l = c;
          d = j;
          e = k;
          f = l;
          return [d, e, f];
        }
        d = ($imul(d, 10)) + (((a.charCodeAt(f) - 48 << 24 >>> 24) >> 0)) >> 0;
        e = true;
        f = f + (1) >> 0;
      }
      return [d, e, f];
    };
    P.ptr.prototype.unknownType = function(a) {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            if (!$clone(a, F.Value).IsValid()) {
              (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, b))).WriteString("<nil>");
              $s = -1;
              return;
            }(b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, b))).WriteByte(63);
            c = $clone(a, F.Value).Type().String();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            $r = (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, b))).WriteString(c);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }(b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, b))).WriteByte(63);
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.unknownType
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.unknownType = function(a) {
      return this.$val.unknownType(a);
    };
    P.ptr.prototype.badVerb = function(a) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            b.erroring = true;
            (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, b))).WriteString("%!");
            (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, b))).WriteRune(a);
            (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, b))).WriteByte(40);
            if (!($interfaceIsEqual(b.arg, $ifaceNil))) {
              $s = 2;
              continue;
            }
            if ($clone(b.value, F.Value).IsValid()) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 2:
            c = F.TypeOf(b.arg).String();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            $r = (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, b))).WriteString(c);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }(b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, b))).WriteByte(61);
            $r = b.printArg(b.arg, 118);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 5;
            continue;
          case 3:
            d = $clone(b.value, F.Value).Type().String();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $r = (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, b))).WriteString(d);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }(b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, b))).WriteByte(61);
            $r = b.printValue($clone(b.value, F.Value), 118, 0);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 5;
            continue;
          case 4:
            (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, b))).WriteString("<nil>");
          case 5:
          case 1:
            (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, b))).WriteByte(41);
            b.erroring = false;
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.badVerb
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.badVerb = function(a) {
      return this.$val.badVerb(a);
    };
    P.ptr.prototype.fmtBool = function(a, b) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = b;
            if ((d === (116)) || (d === (118))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            c.fmt.fmtBoolean(a);
            $s = 4;
            continue;
          case 3:
            $r = c.badVerb(b);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 4:
          case 1:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.fmtBool
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.fmtBool = function(a, b) {
      return this.$val.fmtBool(a, b);
    };
    P.ptr.prototype.fmt0x64 = function(a, b) {
      var a, b, c, d;
      c = this;
      d = c.fmt.fmtFlags.sharp;
      c.fmt.fmtFlags.sharp = b;
      c.fmt.fmtInteger(a, 16, false, "0123456789abcdefx");
      c.fmt.fmtFlags.sharp = d;
    };
    P.prototype.fmt0x64 = function(a, b) {
      return this.$val.fmt0x64(a, b);
    };
    P.ptr.prototype.fmtInteger = function(a, b, c) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = c;
            if (e === (118)) {
              $s = 2;
              continue;
            }
            if (e === (100)) {
              $s = 3;
              continue;
            }
            if (e === (98)) {
              $s = 4;
              continue;
            }
            if (e === (111)) {
              $s = 5;
              continue;
            }
            if (e === (120)) {
              $s = 6;
              continue;
            }
            if (e === (88)) {
              $s = 7;
              continue;
            }
            if (e === (99)) {
              $s = 8;
              continue;
            }
            if (e === (113)) {
              $s = 9;
              continue;
            }
            if (e === (85)) {
              $s = 10;
              continue;
            }
            $s = 11;
            continue;
          case 2:
            if (d.fmt.fmtFlags.sharpV && !b) {
              d.fmt0x64(a, true);
            } else {
              d.fmt.fmtInteger(a, 10, b, "0123456789abcdefx");
            }
            $s = 12;
            continue;
          case 3:
            d.fmt.fmtInteger(a, 10, b, "0123456789abcdefx");
            $s = 12;
            continue;
          case 4:
            d.fmt.fmtInteger(a, 2, b, "0123456789abcdefx");
            $s = 12;
            continue;
          case 5:
            d.fmt.fmtInteger(a, 8, b, "0123456789abcdefx");
            $s = 12;
            continue;
          case 6:
            d.fmt.fmtInteger(a, 16, b, "0123456789abcdefx");
            $s = 12;
            continue;
          case 7:
            d.fmt.fmtInteger(a, 16, b, "0123456789ABCDEFX");
            $s = 12;
            continue;
          case 8:
            d.fmt.fmtC(a);
            $s = 12;
            continue;
          case 9:
            if ((a.$high < 0 || (a.$high === 0 && a.$low <= 1114111))) {
              $s = 13;
              continue;
            }
            $s = 14;
            continue;
          case 13:
            d.fmt.fmtQc(a);
            $s = 15;
            continue;
          case 14:
            $r = d.badVerb(c);
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 15:
            $s = 12;
            continue;
          case 10:
            d.fmt.fmtUnicode(a);
            $s = 12;
            continue;
          case 11:
            $r = d.badVerb(c);
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 12:
          case 1:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.fmtInteger
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.fmtInteger = function(a, b, c) {
      return this.$val.fmtInteger(a, b, c);
    };
    P.ptr.prototype.fmtFloat = function(a, b, c) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = c;
            if (e === (118)) {
              $s = 2;
              continue;
            }
            if ((e === (98)) || (e === (103)) || (e === (71))) {
              $s = 3;
              continue;
            }
            if ((e === (102)) || (e === (101)) || (e === (69))) {
              $s = 4;
              continue;
            }
            if (e === (70)) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 2:
            d.fmt.fmtFloat(a, b, 103, -1);
            $s = 7;
            continue;
          case 3:
            d.fmt.fmtFloat(a, b, c, -1);
            $s = 7;
            continue;
          case 4:
            d.fmt.fmtFloat(a, b, c, 6);
            $s = 7;
            continue;
          case 5:
            d.fmt.fmtFloat(a, b, 102, 6);
            $s = 7;
            continue;
          case 6:
            $r = d.badVerb(c);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 7:
          case 1:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.fmtFloat
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.fmtFloat = function(a, b, c) {
      return this.$val.fmtFloat(a, b, c);
    };
    P.ptr.prototype.fmtComplex = function(a, b, c) {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = c;
            if ((e === (118)) || (e === (98)) || (e === (103)) || (e === (71)) || (e === (102)) || (e === (70)) || (e === (101)) || (e === (69))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            f = d.fmt.fmtFlags.plus;
            (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteByte(40);
            $r = d.fmtFloat(a.$real, (g = b / 2, (g === g && g !== 1 / 0 && g !== -1 / 0) ? g >> 0 : $throwRuntimeError("integer divide by zero")), c);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d.fmt.fmtFlags.plus = true;
            $r = d.fmtFloat(a.$imag, (h = b / 2, (h === h && h !== 1 / 0 && h !== -1 / 0) ? h >> 0 : $throwRuntimeError("integer divide by zero")), c);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }(d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteString("i)");
            d.fmt.fmtFlags.plus = f;
            $s = 4;
            continue;
          case 3:
            $r = d.badVerb(c);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 4:
          case 1:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.fmtComplex
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.fmtComplex = function(a, b, c) {
      return this.$val.fmtComplex(a, b, c);
    };
    P.ptr.prototype.fmtString = function(a, b) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = b;
            if (d === (118)) {
              $s = 2;
              continue;
            }
            if (d === (115)) {
              $s = 3;
              continue;
            }
            if (d === (120)) {
              $s = 4;
              continue;
            }
            if (d === (88)) {
              $s = 5;
              continue;
            }
            if (d === (113)) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 2:
            if (c.fmt.fmtFlags.sharpV) {
              c.fmt.fmtQ(a);
            } else {
              c.fmt.fmtS(a);
            }
            $s = 8;
            continue;
          case 3:
            c.fmt.fmtS(a);
            $s = 8;
            continue;
          case 4:
            c.fmt.fmtSx(a, "0123456789abcdefx");
            $s = 8;
            continue;
          case 5:
            c.fmt.fmtSx(a, "0123456789ABCDEFX");
            $s = 8;
            continue;
          case 6:
            c.fmt.fmtQ(a);
            $s = 8;
            continue;
          case 7:
            $r = c.badVerb(b);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 8:
          case 1:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.fmtString
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.fmtString = function(a, b) {
      return this.$val.fmtString(a, b);
    };
    P.ptr.prototype.fmtBytes = function(a, b, c) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = b;
            if ((e === (118)) || (e === (100))) {
              $s = 2;
              continue;
            }
            if (e === (115)) {
              $s = 3;
              continue;
            }
            if (e === (120)) {
              $s = 4;
              continue;
            }
            if (e === (88)) {
              $s = 5;
              continue;
            }
            if (e === (113)) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 2:
            if (d.fmt.fmtFlags.sharpV) {
              (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, d))).WriteString(c);
              if (a === BN.nil) {
                (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                  return this.$target.buf;
                }, function($v) {
                  this.$target.buf = $v;
                }, d))).WriteString("(nil)");
                $s = -1;
                return;
              }(d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, d))).WriteByte(123);
              f = a;
              g = 0;
              while (true) {
                if (!(g < f.$length)) {
                  break;
                }
                h = g;
                i = ((g < 0 || g >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + g]);
                if (h > 0) {
                  (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                    return this.$target.buf;
                  }, function($v) {
                    this.$target.buf = $v;
                  }, d))).WriteString(", ");
                }
                d.fmt0x64((new $Uint64(0, i)), true);
                g++;
              }(d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, d))).WriteByte(125);
            } else {
              (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, d))).WriteByte(91);
              j = a;
              k = 0;
              while (true) {
                if (!(k < j.$length)) {
                  break;
                }
                l = k;
                m = ((k < 0 || k >= j.$length) ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + k]);
                if (l > 0) {
                  (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                    return this.$target.buf;
                  }, function($v) {
                    this.$target.buf = $v;
                  }, d))).WriteByte(32);
                }
                d.fmt.fmtInteger((new $Uint64(0, m)), 10, false, "0123456789abcdefx");
                k++;
              }(d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, d))).WriteByte(93);
            }
            $s = 8;
            continue;
          case 3:
            d.fmt.fmtS(($bytesToString(a)));
            $s = 8;
            continue;
          case 4:
            d.fmt.fmtBx(a, "0123456789abcdefx");
            $s = 8;
            continue;
          case 5:
            d.fmt.fmtBx(a, "0123456789ABCDEFX");
            $s = 8;
            continue;
          case 6:
            d.fmt.fmtQ(($bytesToString(a)));
            $s = 8;
            continue;
          case 7:
            n = F.ValueOf(a);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            $r = d.printValue($clone(n, F.Value), b, 0);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 8:
          case 1:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.fmtBytes
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.fmtBytes = function(a, b, c) {
      return this.$val.fmtBytes(a, b, c);
    };
    P.ptr.prototype.fmtPointer = function(a, b) {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = 0;
            e = $clone(a, F.Value).Kind();
            if ((e === (18)) || (e === (19)) || (e === (21)) || (e === (22)) || (e === (23)) || (e === (26))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            d = $clone(a, F.Value).Pointer();
            $s = 4;
            continue;
          case 3:
            $r = c.badVerb(b);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
          case 4:
          case 1:
            f = b;
            if (f === (118)) {
              $s = 7;
              continue;
            }
            if (f === (112)) {
              $s = 8;
              continue;
            }
            if ((f === (98)) || (f === (111)) || (f === (100)) || (f === (120)) || (f === (88))) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 7:
            if (c.fmt.fmtFlags.sharpV) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 12:
            (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, c))).WriteByte(40);
            g = $clone(a, F.Value).Type().String();
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $r = (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, c))).WriteString(g);
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }(c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, c))).WriteString(")(");
            if (d === 0) {
              (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, c))).WriteString("nil");
            } else {
              c.fmt0x64((new $Uint64(0, d.constructor === Number ? d : 1)), true);
            }(c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, c))).WriteByte(41);
            $s = 14;
            continue;
          case 13:
            if (d === 0) {
              c.fmt.padString("<nil>");
            } else {
              c.fmt0x64((new $Uint64(0, d.constructor === Number ? d : 1)), !c.fmt.fmtFlags.sharp);
            }
          case 14:
            $s = 11;
            continue;
          case 8:
            c.fmt0x64((new $Uint64(0, d.constructor === Number ? d : 1)), !c.fmt.fmtFlags.sharp);
            $s = 11;
            continue;
          case 9:
            $r = c.fmtInteger((new $Uint64(0, d.constructor === Number ? d : 1)), false, b);
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 11;
            continue;
          case 10:
            $r = c.badVerb(b);
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 11:
          case 6:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.fmtPointer
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.fmtPointer = function(a, b) {
      return this.$val.fmtPointer(a, b);
    };
    P.ptr.prototype.catchPanic = function(a, b) {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = $recover();
            if (!($interfaceIsEqual(d, $ifaceNil))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            e = F.ValueOf(a);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            if (($clone(f, F.Value).Kind() === 22) && $clone(f, F.Value).IsNil()) {
              (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, c))).WriteString("<nil>");
              $s = -1;
              return;
            }
            if (c.panicking) {
              $panic(d);
            }
            g = $clone(c.fmt.fmtFlags, I);
            c.fmt.clearflags();
            (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, c))).WriteString("%!");
            (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, c))).WriteRune(b);
            (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, c))).WriteString("(PANIC=");
            c.panicking = true;
            $r = c.printArg(d, 118);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            c.panicking = false;
            (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, c))).WriteByte(41);
            I.copy(c.fmt.fmtFlags, g);
          case 2:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.catchPanic
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.catchPanic = function(a, b) {
      return this.$val.catchPanic(a, b);
    };
    P.ptr.prototype.handleMethods = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              b = false;
              c = this;
              if (c.erroring) {
                $s = -1;
                return b;
              }
              d = $assertType(c.arg, L, true);
              e = d[0];
              f = d[1];
              if (f) {
                $s = 1;
                continue;
              }
              $s = 2;
              continue;
            case 1:
              b = true;
              $deferred.push([$methodVal(c, "catchPanic"), [c.arg, a]]);
              $r = e.Format(c, a);
              $s = 3;
            case 3:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              $s = -1;
              return b;
            case 2:
              if (c.fmt.fmtFlags.sharpV) {
                $s = 4;
                continue;
              }
              $s = 5;
              continue;
            case 4:
              g = $assertType(c.arg, N, true);
              h = g[0];
              i = g[1];
              if (i) {
                $s = 7;
                continue;
              }
              $s = 8;
              continue;
            case 7:
              b = true;
              $deferred.push([$methodVal(c, "catchPanic"), [c.arg, a]]);
              j = h.GoString();
              $s = 9;
            case 9:
              if ($c) {
                $c = false;
                j = j.$blk();
              }
              if (j && j.$blk !== undefined) {
                break s;
              }
              $r = c.fmt.fmtS(j);
              $s = 10;
            case 10:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              $s = -1;
              return b;
            case 8:
              $s = 6;
              continue;
            case 5:
              k = a;
              if ((k === (118)) || (k === (115)) || (k === (120)) || (k === (88)) || (k === (113))) {
                $s = 12;
                continue;
              }
              $s = 13;
              continue;
            case 12:
              l = c.arg;
              if ($assertType(l, $error, true)[1]) {
                $s = 14;
                continue;
              }
              if ($assertType(l, M, true)[1]) {
                $s = 15;
                continue;
              }
              $s = 16;
              continue;
            case 14:
              m = l;
              b = true;
              $deferred.push([$methodVal(c, "catchPanic"), [c.arg, a]]);
              o = m.Error();
              $s = 17;
            case 17:
              if ($c) {
                $c = false;
                o = o.$blk();
              }
              if (o && o.$blk !== undefined) {
                break s;
              }
              $r = c.fmtString(o, a);
              $s = 18;
            case 18:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              $s = -1;
              return b;
            case 15:
              n = l;
              b = true;
              $deferred.push([$methodVal(c, "catchPanic"), [c.arg, a]]);
              p = n.String();
              $s = 19;
            case 19:
              if ($c) {
                $c = false;
                p = p.$blk();
              }
              if (p && p.$blk !== undefined) {
                break s;
              }
              $r = c.fmtString(p, a);
              $s = 20;
            case 20:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              $s = -1;
              return b;
            case 16:
            case 13:
            case 11:
            case 6:
              b = false;
              $s = -1;
              return b;
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
      } finally {
        $callDeferred($deferred, $err);
        if (!$curGoroutine.asleep) {
          return b;
        }
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: P.ptr.prototype.handleMethods
            };
          }
          $f.a = a;
          $f.b = b;
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.h = h;
          $f.i = i;
          $f.j = j;
          $f.k = k;
          $f.l = l;
          $f.m = m;
          $f.n = n;
          $f.o = o;
          $f.p = p;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    P.prototype.handleMethods = function(a) {
      return this.$val.handleMethods(a);
    };
    P.ptr.prototype.printArg = function(a, b) {
      var a, aa, ab, ac, ad, ae, af, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            c.arg = a;
            c.value = new F.Value.ptr(BI.nil, 0, 0);
            if ($interfaceIsEqual(a, $ifaceNil)) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            d = b;
            if ((d === (84)) || (d === (118))) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            c.fmt.padString("<nil>");
            $s = 6;
            continue;
          case 5:
            $r = c.badVerb(b);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 6:
          case 3:
            $s = -1;
            return;
          case 2:
            e = b;
            if (e === (84)) {
              $s = 9;
              continue;
            }
            if (e === (112)) {
              $s = 10;
              continue;
            }
            $s = 11;
            continue;
          case 9:
            f = F.TypeOf(a).String();
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $r = c.fmt.fmtS(f);
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
          case 10:
            g = F.ValueOf(a);
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $r = c.fmtPointer($clone(g, F.Value), 112);
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
          case 11:
          case 8:
            h = a;
            if ($assertType(h, $Bool, true)[1]) {
              $s = 16;
              continue;
            }
            if ($assertType(h, $Float32, true)[1]) {
              $s = 17;
              continue;
            }
            if ($assertType(h, $Float64, true)[1]) {
              $s = 18;
              continue;
            }
            if ($assertType(h, $Complex64, true)[1]) {
              $s = 19;
              continue;
            }
            if ($assertType(h, $Complex128, true)[1]) {
              $s = 20;
              continue;
            }
            if ($assertType(h, $Int, true)[1]) {
              $s = 21;
              continue;
            }
            if ($assertType(h, $Int8, true)[1]) {
              $s = 22;
              continue;
            }
            if ($assertType(h, $Int16, true)[1]) {
              $s = 23;
              continue;
            }
            if ($assertType(h, $Int32, true)[1]) {
              $s = 24;
              continue;
            }
            if ($assertType(h, $Int64, true)[1]) {
              $s = 25;
              continue;
            }
            if ($assertType(h, $Uint, true)[1]) {
              $s = 26;
              continue;
            }
            if ($assertType(h, $Uint8, true)[1]) {
              $s = 27;
              continue;
            }
            if ($assertType(h, $Uint16, true)[1]) {
              $s = 28;
              continue;
            }
            if ($assertType(h, $Uint32, true)[1]) {
              $s = 29;
              continue;
            }
            if ($assertType(h, $Uint64, true)[1]) {
              $s = 30;
              continue;
            }
            if ($assertType(h, $Uintptr, true)[1]) {
              $s = 31;
              continue;
            }
            if ($assertType(h, $String, true)[1]) {
              $s = 32;
              continue;
            }
            if ($assertType(h, BN, true)[1]) {
              $s = 33;
              continue;
            }
            if ($assertType(h, F.Value, true)[1]) {
              $s = 34;
              continue;
            }
            $s = 35;
            continue;
          case 16:
            i = h.$val;
            $r = c.fmtBool(i, b);
            $s = 37;
          case 37:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 17:
            j = h.$val;
            $r = c.fmtFloat((j), 32, b);
            $s = 38;
          case 38:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 18:
            k = h.$val;
            $r = c.fmtFloat(k, 64, b);
            $s = 39;
          case 39:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 19:
            l = h.$val;
            $r = c.fmtComplex((new $Complex128(l.$real, l.$imag)), 64, b);
            $s = 40;
          case 40:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 20:
            m = h.$val;
            $r = c.fmtComplex(m, 128, b);
            $s = 41;
          case 41:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 21:
            n = h.$val;
            $r = c.fmtInteger((new $Uint64(0, n)), true, b);
            $s = 42;
          case 42:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 22:
            o = h.$val;
            $r = c.fmtInteger((new $Uint64(0, o)), true, b);
            $s = 43;
          case 43:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 23:
            p = h.$val;
            $r = c.fmtInteger((new $Uint64(0, p)), true, b);
            $s = 44;
          case 44:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 24:
            q = h.$val;
            $r = c.fmtInteger((new $Uint64(0, q)), true, b);
            $s = 45;
          case 45:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 25:
            r = h.$val;
            $r = c.fmtInteger((new $Uint64(r.$high, r.$low)), true, b);
            $s = 46;
          case 46:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 26:
            s = h.$val;
            $r = c.fmtInteger((new $Uint64(0, s)), false, b);
            $s = 47;
          case 47:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 27:
            t = h.$val;
            $r = c.fmtInteger((new $Uint64(0, t)), false, b);
            $s = 48;
          case 48:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 28:
            u = h.$val;
            $r = c.fmtInteger((new $Uint64(0, u)), false, b);
            $s = 49;
          case 49:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 29:
            v = h.$val;
            $r = c.fmtInteger((new $Uint64(0, v)), false, b);
            $s = 50;
          case 50:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 30:
            w = h.$val;
            $r = c.fmtInteger(w, false, b);
            $s = 51;
          case 51:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 31:
            x = h.$val;
            $r = c.fmtInteger((new $Uint64(0, x.constructor === Number ? x : 1)), false, b);
            $s = 52;
          case 52:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 32:
            y = h.$val;
            $r = c.fmtString(y, b);
            $s = 53;
          case 53:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 33:
            z = h.$val;
            $r = c.fmtBytes(z, b, "[]byte");
            $s = 54;
          case 54:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 34:
            aa = h.$val;
            if ($clone(aa, F.Value).IsValid() && $clone(aa, F.Value).CanInterface()) {
              $s = 55;
              continue;
            }
            $s = 56;
            continue;
          case 55:
            ac = $clone(aa, F.Value).Interface();
            $s = 57;
          case 57:
            if ($c) {
              $c = false;
              ac = ac.$blk();
            }
            if (ac && ac.$blk !== undefined) {
              break s;
            }
            c.arg = ac;
            ad = c.handleMethods(b);
            $s = 60;
          case 60:
            if ($c) {
              $c = false;
              ad = ad.$blk();
            }
            if (ad && ad.$blk !== undefined) {
              break s;
            }
            if (ad) {
              $s = 58;
              continue;
            }
            $s = 59;
            continue;
          case 58:
            $s = -1;
            return;
          case 59:
          case 56:
            $r = c.printValue($clone(aa, F.Value), b, 0);
            $s = 61;
          case 61:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 36;
            continue;
          case 35:
            ab = h;
            ae = c.handleMethods(b);
            $s = 64;
          case 64:
            if ($c) {
              $c = false;
              ae = ae.$blk();
            }
            if (ae && ae.$blk !== undefined) {
              break s;
            }
            if (!ae) {
              $s = 62;
              continue;
            }
            $s = 63;
            continue;
          case 62:
            af = F.ValueOf(ab);
            $s = 65;
          case 65:
            if ($c) {
              $c = false;
              af = af.$blk();
            }
            if (af && af.$blk !== undefined) {
              break s;
            }
            $r = c.printValue($clone(af, F.Value), b, 0);
            $s = 66;
          case 66:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 63:
          case 36:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.printArg
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.printArg = function(a, b) {
      return this.$val.printArg(a, b);
    };
    P.ptr.prototype.printValue = function(a, b, c) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            if (c > 0 && $clone(a, F.Value).IsValid() && $clone(a, F.Value).CanInterface()) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            e = $clone(a, F.Value).Interface();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            d.arg = e;
            f = d.handleMethods(b);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            if (f) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            $s = -1;
            return;
          case 5:
          case 2:
            d.arg = $ifaceNil;
            d.value = a;
            g = a;
            h = $clone(a, F.Value).Kind();
            if (h === (0)) {
              $s = 8;
              continue;
            }
            if (h === (1)) {
              $s = 9;
              continue;
            }
            if ((h === (2)) || (h === (3)) || (h === (4)) || (h === (5)) || (h === (6))) {
              $s = 10;
              continue;
            }
            if ((h === (7)) || (h === (8)) || (h === (9)) || (h === (10)) || (h === (11)) || (h === (12))) {
              $s = 11;
              continue;
            }
            if (h === (13)) {
              $s = 12;
              continue;
            }
            if (h === (14)) {
              $s = 13;
              continue;
            }
            if (h === (15)) {
              $s = 14;
              continue;
            }
            if (h === (16)) {
              $s = 15;
              continue;
            }
            if (h === (24)) {
              $s = 16;
              continue;
            }
            if (h === (21)) {
              $s = 17;
              continue;
            }
            if (h === (25)) {
              $s = 18;
              continue;
            }
            if (h === (20)) {
              $s = 19;
              continue;
            }
            if ((h === (17)) || (h === (23))) {
              $s = 20;
              continue;
            }
            if (h === (22)) {
              $s = 21;
              continue;
            }
            if ((h === (18)) || (h === (19)) || (h === (26))) {
              $s = 22;
              continue;
            }
            $s = 23;
            continue;
          case 8:
            if (c === 0) {
              $s = 25;
              continue;
            }
            $s = 26;
            continue;
          case 25:
            (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteString("<invalid reflect.Value>");
            $s = 27;
            continue;
          case 26:
            i = b;
            if (i === (118)) {
              $s = 29;
              continue;
            }
            $s = 30;
            continue;
          case 29:
            (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteString("<nil>");
            $s = 31;
            continue;
          case 30:
            $r = d.badVerb(b);
            $s = 32;
          case 32:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 31:
          case 28:
          case 27:
            $s = 24;
            continue;
          case 9:
            $r = d.fmtBool($clone(g, F.Value).Bool(), b);
            $s = 33;
          case 33:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 24;
            continue;
          case 10:
            $r = d.fmtInteger(((j = $clone(g, F.Value).Int(), new $Uint64(j.$high, j.$low))), true, b);
            $s = 34;
          case 34:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 24;
            continue;
          case 11:
            $r = d.fmtInteger($clone(g, F.Value).Uint(), false, b);
            $s = 35;
          case 35:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 24;
            continue;
          case 12:
            $r = d.fmtFloat($clone(g, F.Value).Float(), 32, b);
            $s = 36;
          case 36:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 24;
            continue;
          case 13:
            $r = d.fmtFloat($clone(g, F.Value).Float(), 64, b);
            $s = 37;
          case 37:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 24;
            continue;
          case 14:
            $r = d.fmtComplex($clone(g, F.Value).Complex(), 64, b);
            $s = 38;
          case 38:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 24;
            continue;
          case 15:
            $r = d.fmtComplex($clone(g, F.Value).Complex(), 128, b);
            $s = 39;
          case 39:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 24;
            continue;
          case 16:
            k = $clone(g, F.Value).String();
            $s = 40;
          case 40:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            $r = d.fmtString(k, b);
            $s = 41;
          case 41:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 24;
            continue;
          case 17:
            if (d.fmt.fmtFlags.sharpV) {
              $s = 42;
              continue;
            }
            $s = 43;
            continue;
          case 42:
            l = $clone(g, F.Value).Type().String();
            $s = 45;
          case 45:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            $r = (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteString(l);
            $s = 46;
          case 46:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            if ($clone(g, F.Value).IsNil()) {
              (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, d))).WriteString("(nil)");
              $s = -1;
              return;
            }(d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteByte(123);
            $s = 44;
            continue;
          case 43:
            (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteString("map[");
          case 44:
            m = $clone(g, F.Value).MapKeys();
            $s = 47;
          case 47:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            n = m;
            o = n;
            p = 0;
          case 48:
            if (!(p < o.$length)) {
              $s = 49;
              continue;
            }
            q = p;
            r = ((p < 0 || p >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + p]);
            if (q > 0) {
              if (d.fmt.fmtFlags.sharpV) {
                (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                  return this.$target.buf;
                }, function($v) {
                  this.$target.buf = $v;
                }, d))).WriteString(", ");
              } else {
                (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                  return this.$target.buf;
                }, function($v) {
                  this.$target.buf = $v;
                }, d))).WriteByte(32);
              }
            }
            $r = d.printValue($clone(r, F.Value), b, c + 1 >> 0);
            $s = 50;
          case 50:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }(d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteByte(58);
            s = $clone(g, F.Value).MapIndex($clone(r, F.Value));
            $s = 51;
          case 51:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            $r = d.printValue($clone(s, F.Value), b, c + 1 >> 0);
            $s = 52;
          case 52:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            p++;
            $s = 48;
            continue;
          case 49:
            if (d.fmt.fmtFlags.sharpV) {
              (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, d))).WriteByte(125);
            } else {
              (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, d))).WriteByte(93);
            }
            $s = 24;
            continue;
          case 18:
            if (d.fmt.fmtFlags.sharpV) {
              $s = 53;
              continue;
            }
            $s = 54;
            continue;
          case 53:
            t = $clone(g, F.Value).Type().String();
            $s = 55;
          case 55:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            $r = (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteString(t);
            $s = 56;
          case 56:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 54:
            (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteByte(123);
            u = 0;
          case 57:
            if (!(u < $clone(g, F.Value).NumField())) {
              $s = 58;
              continue;
            }
            if (u > 0) {
              if (d.fmt.fmtFlags.sharpV) {
                (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                  return this.$target.buf;
                }, function($v) {
                  this.$target.buf = $v;
                }, d))).WriteString(", ");
              } else {
                (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                  return this.$target.buf;
                }, function($v) {
                  this.$target.buf = $v;
                }, d))).WriteByte(32);
              }
            }
            if (d.fmt.fmtFlags.plusV || d.fmt.fmtFlags.sharpV) {
              $s = 59;
              continue;
            }
            $s = 60;
            continue;
          case 59:
            v = $clone(g, F.Value).Type().Field(u);
            $s = 61;
          case 61:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            w = v.Name;
            if (!(w === "")) {
              (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, d))).WriteString(w);
              (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, d))).WriteByte(58);
            }
          case 60:
            x = AC($clone(g, F.Value), u);
            $s = 62;
          case 62:
            if ($c) {
              $c = false;
              x = x.$blk();
            }
            if (x && x.$blk !== undefined) {
              break s;
            }
            $r = d.printValue($clone(x, F.Value), b, c + 1 >> 0);
            $s = 63;
          case 63:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            u = u + (1) >> 0;
            $s = 57;
            continue;
          case 58:
            (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteByte(125);
            $s = 24;
            continue;
          case 19:
            y = $clone(g, F.Value).Elem();
            $s = 64;
          case 64:
            if ($c) {
              $c = false;
              y = y.$blk();
            }
            if (y && y.$blk !== undefined) {
              break s;
            }
            z = y;
            if (!$clone(z, F.Value).IsValid()) {
              $s = 65;
              continue;
            }
            $s = 66;
            continue;
          case 65:
            if (d.fmt.fmtFlags.sharpV) {
              $s = 68;
              continue;
            }
            $s = 69;
            continue;
          case 68:
            aa = $clone(g, F.Value).Type().String();
            $s = 71;
          case 71:
            if ($c) {
              $c = false;
              aa = aa.$blk();
            }
            if (aa && aa.$blk !== undefined) {
              break s;
            }
            $r = (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteString(aa);
            $s = 72;
          case 72:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }(d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteString("(nil)");
            $s = 70;
            continue;
          case 69:
            (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteString("<nil>");
          case 70:
            $s = 67;
            continue;
          case 66:
            $r = d.printValue($clone(z, F.Value), b, c + 1 >> 0);
            $s = 73;
          case 73:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 67:
            $s = 24;
            continue;
          case 20:
            ab = b;
            if ((ab === (115)) || (ab === (113)) || (ab === (120)) || (ab === (88))) {
              $s = 75;
              continue;
            }
            $s = 76;
            continue;
          case 75:
            ac = $clone(g, F.Value).Type();
            ad = ac.Elem();
            $s = 79;
          case 79:
            if ($c) {
              $c = false;
              ad = ad.$blk();
            }
            if (ad && ad.$blk !== undefined) {
              break s;
            }
            ae = ad.Kind();
            $s = 80;
          case 80:
            if ($c) {
              $c = false;
              ae = ae.$blk();
            }
            if (ae && ae.$blk !== undefined) {
              break s;
            }
            if (ae === 8) {
              $s = 77;
              continue;
            }
            $s = 78;
            continue;
          case 77:
            af = BN.nil;
            if ($clone(g, F.Value).Kind() === 23) {
              $s = 81;
              continue;
            }
            if ($clone(g, F.Value).CanAddr()) {
              $s = 82;
              continue;
            }
            $s = 83;
            continue;
          case 81:
            ag = $clone(g, F.Value).Bytes();
            $s = 85;
          case 85:
            if ($c) {
              $c = false;
              ag = ag.$blk();
            }
            if (ag && ag.$blk !== undefined) {
              break s;
            }
            af = ag;
            $s = 84;
            continue;
          case 82:
            ah = $clone(g, F.Value).Slice(0, $clone(g, F.Value).Len());
            $s = 86;
          case 86:
            if ($c) {
              $c = false;
              ah = ah.$blk();
            }
            if (ah && ah.$blk !== undefined) {
              break s;
            }
            ai = $clone(ah, F.Value).Bytes();
            $s = 87;
          case 87:
            if ($c) {
              $c = false;
              ai = ai.$blk();
            }
            if (ai && ai.$blk !== undefined) {
              break s;
            }
            af = ai;
            $s = 84;
            continue;
          case 83:
            af = $makeSlice(BN, $clone(g, F.Value).Len());
            aj = af;
            ak = 0;
          case 88:
            if (!(ak < aj.$length)) {
              $s = 89;
              continue;
            }
            al = ak;
            am = $clone(g, F.Value).Index(al);
            $s = 90;
          case 90:
            if ($c) {
              $c = false;
              am = am.$blk();
            }
            if (am && am.$blk !== undefined) {
              break s;
            }
            an = $clone(am, F.Value).Uint();
            $s = 91;
          case 91:
            if ($c) {
              $c = false;
              an = an.$blk();
            }
            if (an && an.$blk !== undefined) {
              break s;
            }((al < 0 || al >= af.$length) ? ($throwRuntimeError("index out of range"), undefined) : af.$array[af.$offset + al] = ((an.$low << 24 >>> 24)));
            ak++;
            $s = 88;
            continue;
          case 89:
          case 84:
            ao = af;
            ap = b;
            aq = ac.String();
            $s = 92;
          case 92:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            ar = aq;
            $r = d.fmtBytes(ao, ap, ar);
            $s = 93;
          case 93:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
          case 78:
          case 76:
          case 74:
            if (d.fmt.fmtFlags.sharpV) {
              $s = 94;
              continue;
            }
            $s = 95;
            continue;
          case 94:
            as = $clone(g, F.Value).Type().String();
            $s = 97;
          case 97:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            $r = (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteString(as);
            $s = 98;
          case 98:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            if (($clone(g, F.Value).Kind() === 23) && $clone(g, F.Value).IsNil()) {
              (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, d))).WriteString("(nil)");
              $s = -1;
              return;
            }(d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteByte(123);
            at = 0;
          case 99:
            if (!(at < $clone(g, F.Value).Len())) {
              $s = 100;
              continue;
            }
            if (at > 0) {
              (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, d))).WriteString(", ");
            }
            au = $clone(g, F.Value).Index(at);
            $s = 101;
          case 101:
            if ($c) {
              $c = false;
              au = au.$blk();
            }
            if (au && au.$blk !== undefined) {
              break s;
            }
            $r = d.printValue($clone(au, F.Value), b, c + 1 >> 0);
            $s = 102;
          case 102:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            at = at + (1) >> 0;
            $s = 99;
            continue;
          case 100:
            (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteByte(125);
            $s = 96;
            continue;
          case 95:
            (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteByte(91);
            av = 0;
          case 103:
            if (!(av < $clone(g, F.Value).Len())) {
              $s = 104;
              continue;
            }
            if (av > 0) {
              (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, d))).WriteByte(32);
            }
            aw = $clone(g, F.Value).Index(av);
            $s = 105;
          case 105:
            if ($c) {
              $c = false;
              aw = aw.$blk();
            }
            if (aw && aw.$blk !== undefined) {
              break s;
            }
            $r = d.printValue($clone(aw, F.Value), b, c + 1 >> 0);
            $s = 106;
          case 106:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            av = av + (1) >> 0;
            $s = 103;
            continue;
          case 104:
            (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteByte(93);
          case 96:
            $s = 24;
            continue;
          case 21:
            if ((c === 0) && !(($clone(g, F.Value).Pointer() === 0))) {
              $s = 107;
              continue;
            }
            $s = 108;
            continue;
          case 107:
            ax = $clone(g, F.Value).Elem();
            $s = 110;
          case 110:
            if ($c) {
              $c = false;
              ax = ax.$blk();
            }
            if (ax && ax.$blk !== undefined) {
              break s;
            }
            ay = ax;
            az = $clone(ay, F.Value).Kind();
            if ((az === (17)) || (az === (23)) || (az === (25)) || (az === (21))) {
              $s = 111;
              continue;
            }
            $s = 112;
            continue;
          case 111:
            (d.$ptr_buf || (d.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, d))).WriteByte(38);
            $r = d.printValue($clone(ay, F.Value), b, c + 1 >> 0);
            $s = 113;
          case 113:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
          case 112:
          case 109:
          case 108:
            $r = d.fmtPointer($clone(g, F.Value), b);
            $s = 114;
          case 114:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 24;
            continue;
          case 22:
            $r = d.fmtPointer($clone(g, F.Value), b);
            $s = 115;
          case 115:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 24;
            continue;
          case 23:
            $r = d.unknownType($clone(g, F.Value));
            $s = 116;
          case 116:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 24:
          case 7:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.printValue
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.printValue = function(a, b, c) {
      return this.$val.printValue(a, b, c);
    };
    AF = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = 0;
            d = false;
            e = 0;
            e = b;
            if (b < a.$length) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            f = $assertType(((b < 0 || b >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + b]), $Int, true);
            c = f[0];
            d = f[1];
            if (!d) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            g = F.ValueOf(((b < 0 || b >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + b]));
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = g;
            i = $clone(h, F.Value).Kind();
            if ((i === (2)) || (i === (3)) || (i === (4)) || (i === (5)) || (i === (6))) {
              j = $clone(h, F.Value).Int();
              if ((k = (new $Int64(0, (((j.$low + ((j.$high >> 31) * 4294967296)) >> 0)))), (k.$high === j.$high && k.$low === j.$low))) {
                c = (((j.$low + ((j.$high >> 31) * 4294967296)) >> 0));
                d = true;
              }
            } else if ((i === (7)) || (i === (8)) || (i === (9)) || (i === (10)) || (i === (11)) || (i === (12))) {
              l = $clone(h, F.Value).Uint();
              if ((m = (new $Int64(l.$high, l.$low)), (m.$high > 0 || (m.$high === 0 && m.$low >= 0))) && (n = (new $Uint64(0, ((l.$low >> 0)))), (n.$high === l.$high && n.$low === l.$low))) {
                c = ((l.$low >> 0));
                d = true;
              }
            }
          case 5:
          case 4:
            e = b + 1 >> 0;
            if (AD(c)) {
              c = 0;
              d = false;
            }
          case 2:
            $s = -1;
            return [c, d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AF
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AG = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u;
      b = 0;
      c = 0;
      d = false;
      if (a.length < 3) {
        e = 0;
        f = 1;
        g = false;
        b = e;
        c = f;
        d = g;
        return [b, c, d];
      }
      h = 1;
      while (true) {
        if (!(h < a.length)) {
          break;
        }
        if (a.charCodeAt(h) === 93) {
          i = AE(a, 1, h);
          j = i[0];
          k = i[1];
          l = i[2];
          if (!k || !((l === h))) {
            m = 0;
            n = h + 1 >> 0;
            o = false;
            b = m;
            c = n;
            d = o;
            return [b, c, d];
          }
          p = j - 1 >> 0;
          q = h + 1 >> 0;
          r = true;
          b = p;
          c = q;
          d = r;
          return [b, c, d];
        }
        h = h + (1) >> 0;
      }
      s = 0;
      t = 1;
      u = false;
      b = s;
      c = t;
      d = u;
      return [b, c, d];
    };
    P.ptr.prototype.argNumber = function(a, b, c, d) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u;
      e = 0;
      f = 0;
      g = false;
      h = this;
      if (b.length <= c || !((b.charCodeAt(c) === 91))) {
        i = a;
        j = c;
        k = false;
        e = i;
        f = j;
        g = k;
        return [e, f, g];
      }
      h.reordered = true;
      l = AG($substring(b, c));
      m = l[0];
      n = l[1];
      o = l[2];
      if (o && 0 <= m && m < d) {
        p = m;
        q = c + n >> 0;
        r = true;
        e = p;
        f = q;
        g = r;
        return [e, f, g];
      }
      h.goodArgNum = false;
      s = a;
      t = c + n >> 0;
      u = o;
      e = s;
      f = t;
      g = u;
      return [e, f, g];
    };
    P.prototype.argNumber = function(a, b, c, d) {
      return this.$val.argNumber(a, b, c, d);
    };
    P.ptr.prototype.badArgNum = function(a) {
      var a, b;
      b = this;
      (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
        return this.$target.buf;
      }, function($v) {
        this.$target.buf = $v;
      }, b))).WriteString("%!");
      (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
        return this.$target.buf;
      }, function($v) {
        this.$target.buf = $v;
      }, b))).WriteRune(a);
      (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
        return this.$target.buf;
      }, function($v) {
        this.$target.buf = $v;
      }, b))).WriteString("(BADINDEX)");
    };
    P.prototype.badArgNum = function(a) {
      return this.$val.badArgNum(a);
    };
    P.ptr.prototype.missingArg = function(a) {
      var a, b;
      b = this;
      (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
        return this.$target.buf;
      }, function($v) {
        this.$target.buf = $v;
      }, b))).WriteString("%!");
      (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
        return this.$target.buf;
      }, function($v) {
        this.$target.buf = $v;
      }, b))).WriteRune(a);
      (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
        return this.$target.buf;
      }, function($v) {
        this.$target.buf = $v;
      }, b))).WriteString("(MISSING)");
    };
    P.prototype.missingArg = function(a) {
      return this.$val.missingArg(a);
    };
    P.ptr.prototype.doPrintf = function(a, b) {
      var a, aa, ab, ac, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = a.length;
            e = 0;
            f = false;
            c.reordered = false;
            g = 0;
          case 1:
            if (!(g < d)) {
              $s = 2;
              continue;
            }
            c.goodArgNum = true;
            h = g;
            while (true) {
              if (!(g < d && !((a.charCodeAt(g) === 37)))) {
                break;
              }
              g = g + (1) >> 0;
            }
            if (g > h) {
              (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, c))).WriteString($substring(a, h, g));
            }
            if (g >= d) {
              $s = 2;
              continue;
            }
            g = g + (1) >> 0;
            c.fmt.clearflags();
          case 3:
            if (!(g < d)) {
              $s = 4;
              continue;
            }
            i = a.charCodeAt(g);
            j = i;
            if (j === (35)) {
              $s = 6;
              continue;
            }
            if (j === (48)) {
              $s = 7;
              continue;
            }
            if (j === (43)) {
              $s = 8;
              continue;
            }
            if (j === (45)) {
              $s = 9;
              continue;
            }
            if (j === (32)) {
              $s = 10;
              continue;
            }
            $s = 11;
            continue;
          case 6:
            c.fmt.fmtFlags.sharp = true;
            $s = 12;
            continue;
          case 7:
            c.fmt.fmtFlags.zero = !c.fmt.fmtFlags.minus;
            $s = 12;
            continue;
          case 8:
            c.fmt.fmtFlags.plus = true;
            $s = 12;
            continue;
          case 9:
            c.fmt.fmtFlags.minus = true;
            c.fmt.fmtFlags.zero = false;
            $s = 12;
            continue;
          case 10:
            c.fmt.fmtFlags.space = true;
            $s = 12;
            continue;
          case 11:
            if (97 <= i && i <= 122 && e < b.$length) {
              $s = 13;
              continue;
            }
            $s = 14;
            continue;
          case 13:
            if (i === 118) {
              c.fmt.fmtFlags.sharpV = c.fmt.fmtFlags.sharp;
              c.fmt.fmtFlags.sharp = false;
              c.fmt.fmtFlags.plusV = c.fmt.fmtFlags.plus;
              c.fmt.fmtFlags.plus = false;
            }
            $r = c.printArg(((e < 0 || e >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + e]), ((i >> 0)));
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            e = e + (1) >> 0;
            g = g + (1) >> 0;
            $s = 1;
            continue s;
          case 14:
            $s = 4;
            continue s;
          case 12:
          case 5:
            g = g + (1) >> 0;
            $s = 3;
            continue;
          case 4:
            k = c.argNumber(e, a, g, b.$length);
            e = k[0];
            g = k[1];
            f = k[2];
            if (g < d && (a.charCodeAt(g) === 42)) {
              $s = 16;
              continue;
            }
            $s = 17;
            continue;
          case 16:
            g = g + (1) >> 0;
            m = AF(b, e);
            $s = 19;
          case 19:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            l = m;
            c.fmt.wid = l[0];
            c.fmt.fmtFlags.widPresent = l[1];
            e = l[2];
            if (!c.fmt.fmtFlags.widPresent) {
              (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, c))).WriteString("%!(BADWIDTH)");
            }
            if (c.fmt.wid < 0) {
              c.fmt.wid = -c.fmt.wid;
              c.fmt.fmtFlags.minus = true;
              c.fmt.fmtFlags.zero = false;
            }
            f = false;
            $s = 18;
            continue;
          case 17:
            n = AE(a, g, d);
            c.fmt.wid = n[0];
            c.fmt.fmtFlags.widPresent = n[1];
            g = n[2];
            if (f && c.fmt.fmtFlags.widPresent) {
              c.goodArgNum = false;
            }
          case 18:
            if ((g + 1 >> 0) < d && (a.charCodeAt(g) === 46)) {
              $s = 20;
              continue;
            }
            $s = 21;
            continue;
          case 20:
            g = g + (1) >> 0;
            if (f) {
              c.goodArgNum = false;
            }
            o = c.argNumber(e, a, g, b.$length);
            e = o[0];
            g = o[1];
            f = o[2];
            if (g < d && (a.charCodeAt(g) === 42)) {
              $s = 22;
              continue;
            }
            $s = 23;
            continue;
          case 22:
            g = g + (1) >> 0;
            q = AF(b, e);
            $s = 25;
          case 25:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            p = q;
            c.fmt.prec = p[0];
            c.fmt.fmtFlags.precPresent = p[1];
            e = p[2];
            if (c.fmt.prec < 0) {
              c.fmt.prec = 0;
              c.fmt.fmtFlags.precPresent = false;
            }
            if (!c.fmt.fmtFlags.precPresent) {
              (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, c))).WriteString("%!(BADPREC)");
            }
            f = false;
            $s = 24;
            continue;
          case 23:
            r = AE(a, g, d);
            c.fmt.prec = r[0];
            c.fmt.fmtFlags.precPresent = r[1];
            g = r[2];
            if (!c.fmt.fmtFlags.precPresent) {
              c.fmt.prec = 0;
              c.fmt.fmtFlags.precPresent = true;
            }
          case 24:
          case 21:
            if (!f) {
              s = c.argNumber(e, a, g, b.$length);
              e = s[0];
              g = s[1];
              f = s[2];
            }
            if (g >= d) {
              (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, c))).WriteString("%!(NOVERB)");
              $s = 2;
              continue;
            }
            t = ((a.charCodeAt(g) >> 0));
            u = 1;
            v = t;
            w = u;
            if (v >= 128) {
              x = B.DecodeRuneInString($substring(a, g));
              v = x[0];
              w = x[1];
            }
            g = g + (w) >> 0;
            if ((v === 37)) {
              $s = 27;
              continue;
            }
            if (!c.goodArgNum) {
              $s = 28;
              continue;
            }
            if (e >= b.$length) {
              $s = 29;
              continue;
            }
            if ((v === 118)) {
              $s = 30;
              continue;
            }
            $s = 31;
            continue;
          case 27:
            (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, c))).WriteByte(37);
            $s = 32;
            continue;
          case 28:
            c.badArgNum(v);
            $s = 32;
            continue;
          case 29:
            c.missingArg(v);
            $s = 32;
            continue;
          case 30:
            c.fmt.fmtFlags.sharpV = c.fmt.fmtFlags.sharp;
            c.fmt.fmtFlags.sharp = false;
            c.fmt.fmtFlags.plusV = c.fmt.fmtFlags.plus;
            c.fmt.fmtFlags.plus = false;
            $r = c.printArg(((e < 0 || e >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + e]), v);
            $s = 33;
          case 33:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            e = e + (1) >> 0;
            $s = 32;
            continue;
          case 31:
            $r = c.printArg(((e < 0 || e >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + e]), v);
            $s = 34;
          case 34:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            e = e + (1) >> 0;
          case 32:
          case 26:
            $s = 1;
            continue;
          case 2:
            if (!c.reordered && e < b.$length) {
              $s = 35;
              continue;
            }
            $s = 36;
            continue;
          case 35:
            c.fmt.clearflags();
            (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, c))).WriteString("%!(EXTRA ");
            y = $subslice(b, e);
            z = 0;
          case 37:
            if (!(z < y.$length)) {
              $s = 38;
              continue;
            }
            aa = z;
            ab = ((z < 0 || z >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + z]);
            if (aa > 0) {
              (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, c))).WriteString(", ");
            }
            if ($interfaceIsEqual(ab, $ifaceNil)) {
              $s = 39;
              continue;
            }
            $s = 40;
            continue;
          case 39:
            (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, c))).WriteString("<nil>");
            $s = 41;
            continue;
          case 40:
            ac = F.TypeOf(ab).String();
            $s = 42;
          case 42:
            if ($c) {
              $c = false;
              ac = ac.$blk();
            }
            if (ac && ac.$blk !== undefined) {
              break s;
            }
            $r = (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, c))).WriteString(ac);
            $s = 43;
          case 43:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }(c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, c))).WriteByte(61);
            $r = c.printArg(ab, 118);
            $s = 44;
          case 44:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 41:
            z++;
            $s = 37;
            continue;
          case 38:
            (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, c))).WriteByte(41);
          case 36:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.doPrintf
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.doPrintf = function(a, b) {
      return this.$val.doPrintf(a, b);
    };
    P.ptr.prototype.doPrint = function(a) {
      var a, b, c, d, e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = false;
            d = a;
            e = 0;
          case 1:
            if (!(e < d.$length)) {
              $s = 2;
              continue;
            }
            f = e;
            g = ((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e]);
            if (!(!($interfaceIsEqual(g, $ifaceNil)))) {
              h = false;
              $s = 3;
              continue s;
            }
            i = F.TypeOf(g).Kind();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i === 24;
          case 3:
            j = h;
            if (f > 0 && !j && !c) {
              (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, b))).WriteByte(32);
            }
            $r = b.printArg(g, 118);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            c = j;
            e++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.doPrint
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.doPrint = function(a) {
      return this.$val.doPrint(a);
    };
    P.ptr.prototype.doPrintln = function(a) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = a;
            d = 0;
          case 1:
            if (!(d < c.$length)) {
              $s = 2;
              continue;
            }
            e = d;
            f = ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]);
            if (e > 0) {
              (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, b))).WriteByte(32);
            }
            $r = b.printArg(f, 118);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d++;
            $s = 1;
            continue;
          case 2:
            (b.$ptr_buf || (b.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, b))).WriteByte(10);
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.doPrintln
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.doPrintln = function(a) {
      return this.$val.doPrintln(a);
    };
    AU.ptr.prototype.Read = function(a) {
      var a, b, c, d, e, f;
      b = 0;
      c = $ifaceNil;
      d = this;
      e = 0;
      f = C.New("ScanState's Read should not be called. Use ReadRune");
      b = e;
      c = f;
      return [b, c];
    };
    AU.prototype.Read = function(a) {
      return this.$val.Read(a);
    };
    AU.ptr.prototype.ReadRune = function() {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = 0;
            b = 0;
            c = $ifaceNil;
            d = this;
            if (d.atEOF || d.count >= d.ssave.argLimit) {
              c = D.EOF;
              $s = -1;
              return [a, b, c];
            }
            f = d.rs.ReadRune();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            e = f;
            a = e[0];
            b = e[1];
            c = e[2];
            if ($interfaceIsEqual(c, $ifaceNil)) {
              d.count = d.count + (1) >> 0;
              if (d.ssave.nlIsEnd && (a === 10)) {
                d.atEOF = true;
              }
            } else if ($interfaceIsEqual(c, D.EOF)) {
              d.atEOF = true;
            }
            $s = -1;
            return [a, b, c];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AU.ptr.prototype.ReadRune
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AU.prototype.ReadRune = function() {
      return this.$val.ReadRune();
    };
    AU.ptr.prototype.Width = function() {
      var a, b, c, d, e, f, g;
      a = 0;
      b = false;
      c = this;
      if (c.ssave.maxWid === 1073741824) {
        d = 0;
        e = false;
        a = d;
        b = e;
        return [a, b];
      }
      f = c.ssave.maxWid;
      g = true;
      a = f;
      b = g;
      return [a, b];
    };
    AU.prototype.Width = function() {
      return this.$val.Width();
    };
    AU.ptr.prototype.getRune = function() {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = 0;
            b = this;
            d = b.ReadRune();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            c = d;
            a = c[0];
            e = c[2];
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              if ($interfaceIsEqual(e, D.EOF)) {
                a = -1;
                $s = -1;
                return a;
              }
              b.error(e);
            }
            $s = -1;
            return a;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AU.ptr.prototype.getRune
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AU.prototype.getRune = function() {
      return this.$val.getRune();
    };
    AU.ptr.prototype.UnreadRune = function() {
      var a, b, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.rs.UnreadRune();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            b;
            a.atEOF = false;
            a.count = a.count - (1) >> 0;
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AU.ptr.prototype.UnreadRune
        };
      }
      $f.a = a;
      $f.b = b;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AU.prototype.UnreadRune = function() {
      return this.$val.UnreadRune();
    };
    AU.ptr.prototype.error = function(a) {
      var a, b, c;
      b = this;
      $panic((c = new AT.ptr(a), new c.constructor.elem(c)));
    };
    AU.prototype.error = function(a) {
      return this.$val.error(a);
    };
    AU.ptr.prototype.errorString = function(a) {
      var a, b, c;
      b = this;
      $panic((c = new AT.ptr(C.New(a)), new c.constructor.elem(c)));
    };
    AU.prototype.errorString = function(a) {
      return this.$val.errorString(a);
    };
    AU.ptr.prototype.Token = function(a, b) {
      var a, b, c, d, e, f, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              c = [c];
              d = BN.nil;
              c[0] = $ifaceNil;
              e = this;
              $deferred.push([(function(c) {
                return function() {
                  var f, g, h, i;
                  f = $recover();
                  if (!($interfaceIsEqual(f, $ifaceNil))) {
                    g = $assertType(f, AT, true);
                    h = $clone(g[0], AT);
                    i = g[1];
                    if (i) {
                      c[0] = h.err;
                    } else {
                      $panic(f);
                    }
                  }
                };
              })(c), []]);
              if (b === $throwNilPointerError) {
                b = AY;
              }
              e.buf = $subslice(e.buf, 0, 0);
              f = e.token(a, b);
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                f = f.$blk();
              }
              if (f && f.$blk !== undefined) {
                break s;
              }
              d = f;
              $s = -1;
              return [d, c[0]];
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
      } finally {
        $callDeferred($deferred, $err);
        if (!$curGoroutine.asleep) {
          return [d, c[0]];
        }
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: AU.ptr.prototype.Token
            };
          }
          $f.a = a;
          $f.b = b;
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    AU.prototype.Token = function(a, b) {
      return this.$val.Token(a, b);
    };
    AX = function(a) {
      var a, b, c, d, e;
      if (a >= 65536) {
        return false;
      }
      b = ((a << 16 >>> 16));
      c = AW;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = $clone(((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]), BL);
        if (b < e[0]) {
          return false;
        }
        if (b <= e[1]) {
          return true;
        }
        d++;
      }
      return false;
    };
    AY = function(a) {
      var a;
      return !AX(a);
    };
    AU.ptr.prototype.free = function(a) {
      var a, b;
      b = this;
      if (a.validSave) {
        AV.copy(b.ssave, a);
        return;
      }
      if (b.buf.$capacity > 1024) {
        return;
      }
      b.buf = $subslice(b.buf, 0, 0);
      b.rs = $ifaceNil;
      BA.Put(b);
    };
    AU.prototype.free = function(a) {
      return this.$val.free(a);
    };
    AU.ptr.prototype.SkipSpace = function() {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
          case 1:
            b = a.getRune();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            if (c === -1) {
              $s = -1;
              return;
            }
            if (!(c === 13)) {
              d = false;
              $s = 6;
              continue s;
            }
            e = a.peek("\n");
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            d = e;
          case 6:
            if (d) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            $s = 1;
            continue;
          case 5:
            if (c === 10) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            if (a.ssave.nlIsSpace) {
              $s = 1;
              continue;
            }
            a.errorString("unexpected newline");
            $s = -1;
            return;
          case 9:
            if (!AX(c)) {
              $s = 10;
              continue;
            }
            $s = 11;
            continue;
          case 10:
            f = a.UnreadRune();
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            f;
            $s = 2;
            continue;
          case 11:
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AU.ptr.prototype.SkipSpace
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AU.prototype.SkipSpace = function() {
      return this.$val.SkipSpace();
    };
    AU.ptr.prototype.token = function(a, b) {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            if (a) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = c.SkipSpace();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
          case 4:
            d = c.getRune();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            if (e === -1) {
              $s = 5;
              continue;
            }
            f = b(e);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            if (!f) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            g = c.UnreadRune();
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            g;
            $s = 5;
            continue;
          case 8:
            (c.$ptr_buf || (c.$ptr_buf = new BJ(function() {
              return this.$target.buf;
            }, function($v) {
              this.$target.buf = $v;
            }, c))).WriteRune(e);
            $s = 4;
            continue;
          case 5:
            $s = -1;
            return (h = c.buf, $subslice(new BN(h.$array), h.$offset, h.$offset + h.$length));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AU.ptr.prototype.token
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AU.prototype.token = function(a, b) {
      return this.$val.token(a, b);
    };
    BE = function(a, b) {
      var a, b, c, d, e, f, g;
      c = a;
      d = 0;
      while (true) {
        if (!(d < c.length)) {
          break;
        }
        e = $decodeRune(c, d);
        f = d;
        g = e[0];
        if (g === b) {
          return f;
        }
        d += e[1];
      }
      return -1;
    };
    AU.ptr.prototype.peek = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = b.getRune();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
            if (!((d === -1))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            e = b.UnreadRune();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            e;
          case 3:
            $s = -1;
            return BE(a, d) >= 0;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AU.ptr.prototype.peek
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AU.prototype.peek = function(a) {
      return this.$val.peek(a);
    };
    CN.methods = [{
      prop: "clearflags",
      name: "clearflags",
      pkg: "fmt",
      typ: $funcType([], [], false)
    }, {
      prop: "init",
      name: "init",
      pkg: "fmt",
      typ: $funcType([BJ], [], false)
    }, {
      prop: "writePadding",
      name: "writePadding",
      pkg: "fmt",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "pad",
      name: "pad",
      pkg: "fmt",
      typ: $funcType([BN], [], false)
    }, {
      prop: "padString",
      name: "padString",
      pkg: "fmt",
      typ: $funcType([$String], [], false)
    }, {
      prop: "fmtBoolean",
      name: "fmtBoolean",
      pkg: "fmt",
      typ: $funcType([$Bool], [], false)
    }, {
      prop: "fmtUnicode",
      name: "fmtUnicode",
      pkg: "fmt",
      typ: $funcType([$Uint64], [], false)
    }, {
      prop: "fmtInteger",
      name: "fmtInteger",
      pkg: "fmt",
      typ: $funcType([$Uint64, $Int, $Bool, $String], [], false)
    }, {
      prop: "truncate",
      name: "truncate",
      pkg: "fmt",
      typ: $funcType([$String], [$String], false)
    }, {
      prop: "fmtS",
      name: "fmtS",
      pkg: "fmt",
      typ: $funcType([$String], [], false)
    }, {
      prop: "fmtSbx",
      name: "fmtSbx",
      pkg: "fmt",
      typ: $funcType([$String, BN, $String], [], false)
    }, {
      prop: "fmtSx",
      name: "fmtSx",
      pkg: "fmt",
      typ: $funcType([$String, $String], [], false)
    }, {
      prop: "fmtBx",
      name: "fmtBx",
      pkg: "fmt",
      typ: $funcType([BN, $String], [], false)
    }, {
      prop: "fmtQ",
      name: "fmtQ",
      pkg: "fmt",
      typ: $funcType([$String], [], false)
    }, {
      prop: "fmtC",
      name: "fmtC",
      pkg: "fmt",
      typ: $funcType([$Uint64], [], false)
    }, {
      prop: "fmtQc",
      name: "fmtQc",
      pkg: "fmt",
      typ: $funcType([$Uint64], [], false)
    }, {
      prop: "fmtFloat",
      name: "fmtFloat",
      pkg: "fmt",
      typ: $funcType([$Float64, $Int, $Int32, $Int], [], false)
    }];
    BJ.methods = [{
      prop: "Write",
      name: "Write",
      pkg: "",
      typ: $funcType([BN], [], false)
    }, {
      prop: "WriteString",
      name: "WriteString",
      pkg: "",
      typ: $funcType([$String], [], false)
    }, {
      prop: "WriteByte",
      name: "WriteByte",
      pkg: "",
      typ: $funcType([$Uint8], [], false)
    }, {
      prop: "WriteRune",
      name: "WriteRune",
      pkg: "",
      typ: $funcType([$Int32], [], false)
    }];
    BP.methods = [{
      prop: "free",
      name: "free",
      pkg: "fmt",
      typ: $funcType([], [], false)
    }, {
      prop: "Width",
      name: "Width",
      pkg: "",
      typ: $funcType([], [$Int, $Bool], false)
    }, {
      prop: "Precision",
      name: "Precision",
      pkg: "",
      typ: $funcType([], [$Int, $Bool], false)
    }, {
      prop: "Flag",
      name: "Flag",
      pkg: "",
      typ: $funcType([$Int], [$Bool], false)
    }, {
      prop: "Write",
      name: "Write",
      pkg: "",
      typ: $funcType([BN], [$Int, $error], false)
    }, {
      prop: "WriteString",
      name: "WriteString",
      pkg: "",
      typ: $funcType([$String], [$Int, $error], false)
    }, {
      prop: "unknownType",
      name: "unknownType",
      pkg: "fmt",
      typ: $funcType([F.Value], [], false)
    }, {
      prop: "badVerb",
      name: "badVerb",
      pkg: "fmt",
      typ: $funcType([$Int32], [], false)
    }, {
      prop: "fmtBool",
      name: "fmtBool",
      pkg: "fmt",
      typ: $funcType([$Bool, $Int32], [], false)
    }, {
      prop: "fmt0x64",
      name: "fmt0x64",
      pkg: "fmt",
      typ: $funcType([$Uint64, $Bool], [], false)
    }, {
      prop: "fmtInteger",
      name: "fmtInteger",
      pkg: "fmt",
      typ: $funcType([$Uint64, $Bool, $Int32], [], false)
    }, {
      prop: "fmtFloat",
      name: "fmtFloat",
      pkg: "fmt",
      typ: $funcType([$Float64, $Int, $Int32], [], false)
    }, {
      prop: "fmtComplex",
      name: "fmtComplex",
      pkg: "fmt",
      typ: $funcType([$Complex128, $Int, $Int32], [], false)
    }, {
      prop: "fmtString",
      name: "fmtString",
      pkg: "fmt",
      typ: $funcType([$String, $Int32], [], false)
    }, {
      prop: "fmtBytes",
      name: "fmtBytes",
      pkg: "fmt",
      typ: $funcType([BN, $Int32, $String], [], false)
    }, {
      prop: "fmtPointer",
      name: "fmtPointer",
      pkg: "fmt",
      typ: $funcType([F.Value, $Int32], [], false)
    }, {
      prop: "catchPanic",
      name: "catchPanic",
      pkg: "fmt",
      typ: $funcType([$emptyInterface, $Int32], [], false)
    }, {
      prop: "handleMethods",
      name: "handleMethods",
      pkg: "fmt",
      typ: $funcType([$Int32], [$Bool], false)
    }, {
      prop: "printArg",
      name: "printArg",
      pkg: "fmt",
      typ: $funcType([$emptyInterface, $Int32], [], false)
    }, {
      prop: "printValue",
      name: "printValue",
      pkg: "fmt",
      typ: $funcType([F.Value, $Int32, $Int], [], false)
    }, {
      prop: "argNumber",
      name: "argNumber",
      pkg: "fmt",
      typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)
    }, {
      prop: "badArgNum",
      name: "badArgNum",
      pkg: "fmt",
      typ: $funcType([$Int32], [], false)
    }, {
      prop: "missingArg",
      name: "missingArg",
      pkg: "fmt",
      typ: $funcType([$Int32], [], false)
    }, {
      prop: "doPrintf",
      name: "doPrintf",
      pkg: "fmt",
      typ: $funcType([$String, BH], [], false)
    }, {
      prop: "doPrint",
      name: "doPrint",
      pkg: "fmt",
      typ: $funcType([BH], [], false)
    }, {
      prop: "doPrintln",
      name: "doPrintln",
      pkg: "fmt",
      typ: $funcType([BH], [], false)
    }];
    BS.methods = [{
      prop: "Read",
      name: "Read",
      pkg: "",
      typ: $funcType([BN], [$Int, $error], false)
    }, {
      prop: "ReadRune",
      name: "ReadRune",
      pkg: "",
      typ: $funcType([], [$Int32, $Int, $error], false)
    }, {
      prop: "Width",
      name: "Width",
      pkg: "",
      typ: $funcType([], [$Int, $Bool], false)
    }, {
      prop: "getRune",
      name: "getRune",
      pkg: "fmt",
      typ: $funcType([], [$Int32], false)
    }, {
      prop: "mustReadRune",
      name: "mustReadRune",
      pkg: "fmt",
      typ: $funcType([], [$Int32], false)
    }, {
      prop: "UnreadRune",
      name: "UnreadRune",
      pkg: "",
      typ: $funcType([], [$error], false)
    }, {
      prop: "error",
      name: "error",
      pkg: "fmt",
      typ: $funcType([$error], [], false)
    }, {
      prop: "errorString",
      name: "errorString",
      pkg: "fmt",
      typ: $funcType([$String], [], false)
    }, {
      prop: "Token",
      name: "Token",
      pkg: "",
      typ: $funcType([$Bool, CO], [BN, $error], false)
    }, {
      prop: "free",
      name: "free",
      pkg: "fmt",
      typ: $funcType([AV], [], false)
    }, {
      prop: "SkipSpace",
      name: "SkipSpace",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "token",
      name: "token",
      pkg: "fmt",
      typ: $funcType([$Bool, CO], [BN], false)
    }, {
      prop: "consume",
      name: "consume",
      pkg: "fmt",
      typ: $funcType([$String, $Bool], [$Bool], false)
    }, {
      prop: "peek",
      name: "peek",
      pkg: "fmt",
      typ: $funcType([$String], [$Bool], false)
    }, {
      prop: "notEOF",
      name: "notEOF",
      pkg: "fmt",
      typ: $funcType([], [], false)
    }, {
      prop: "accept",
      name: "accept",
      pkg: "fmt",
      typ: $funcType([$String], [$Bool], false)
    }, {
      prop: "okVerb",
      name: "okVerb",
      pkg: "fmt",
      typ: $funcType([$Int32, $String, $String], [$Bool], false)
    }, {
      prop: "scanBool",
      name: "scanBool",
      pkg: "fmt",
      typ: $funcType([$Int32], [$Bool], false)
    }, {
      prop: "getBase",
      name: "getBase",
      pkg: "fmt",
      typ: $funcType([$Int32], [$Int, $String], false)
    }, {
      prop: "scanNumber",
      name: "scanNumber",
      pkg: "fmt",
      typ: $funcType([$String, $Bool], [$String], false)
    }, {
      prop: "scanRune",
      name: "scanRune",
      pkg: "fmt",
      typ: $funcType([$Int], [$Int64], false)
    }, {
      prop: "scanBasePrefix",
      name: "scanBasePrefix",
      pkg: "fmt",
      typ: $funcType([], [$Int, $String, $Bool], false)
    }, {
      prop: "scanInt",
      name: "scanInt",
      pkg: "fmt",
      typ: $funcType([$Int32, $Int], [$Int64], false)
    }, {
      prop: "scanUint",
      name: "scanUint",
      pkg: "fmt",
      typ: $funcType([$Int32, $Int], [$Uint64], false)
    }, {
      prop: "floatToken",
      name: "floatToken",
      pkg: "fmt",
      typ: $funcType([], [$String], false)
    }, {
      prop: "complexTokens",
      name: "complexTokens",
      pkg: "fmt",
      typ: $funcType([], [$String, $String], false)
    }, {
      prop: "convertFloat",
      name: "convertFloat",
      pkg: "fmt",
      typ: $funcType([$String, $Int], [$Float64], false)
    }, {
      prop: "scanComplex",
      name: "scanComplex",
      pkg: "fmt",
      typ: $funcType([$Int32, $Int], [$Complex128], false)
    }, {
      prop: "convertString",
      name: "convertString",
      pkg: "fmt",
      typ: $funcType([$Int32], [$String], false)
    }, {
      prop: "quotedString",
      name: "quotedString",
      pkg: "fmt",
      typ: $funcType([], [$String], false)
    }, {
      prop: "hexByte",
      name: "hexByte",
      pkg: "fmt",
      typ: $funcType([], [$Uint8, $Bool], false)
    }, {
      prop: "hexString",
      name: "hexString",
      pkg: "fmt",
      typ: $funcType([], [$String], false)
    }, {
      prop: "scanOne",
      name: "scanOne",
      pkg: "fmt",
      typ: $funcType([$Int32, $emptyInterface], [], false)
    }, {
      prop: "doScan",
      name: "doScan",
      pkg: "fmt",
      typ: $funcType([BH], [$Int, $error], false)
    }, {
      prop: "advance",
      name: "advance",
      pkg: "fmt",
      typ: $funcType([$String], [$Int], false)
    }, {
      prop: "doScanf",
      name: "doScanf",
      pkg: "fmt",
      typ: $funcType([$String, BH], [$Int, $error], false)
    }];
    I.init("fmt", [{
      prop: "widPresent",
      name: "widPresent",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "precPresent",
      name: "precPresent",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "minus",
      name: "minus",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "plus",
      name: "plus",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "sharp",
      name: "sharp",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "space",
      name: "space",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "zero",
      name: "zero",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "plusV",
      name: "plusV",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "sharpV",
      name: "sharpV",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    J.init("fmt", [{
      prop: "buf",
      name: "buf",
      embedded: false,
      exported: false,
      typ: BJ,
      tag: ""
    }, {
      prop: "fmtFlags",
      name: "fmtFlags",
      embedded: true,
      exported: false,
      typ: I,
      tag: ""
    }, {
      prop: "wid",
      name: "wid",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "prec",
      name: "prec",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "intbuf",
      name: "intbuf",
      embedded: false,
      exported: false,
      typ: BK,
      tag: ""
    }]);
    K.init([{
      prop: "Flag",
      name: "Flag",
      pkg: "",
      typ: $funcType([$Int], [$Bool], false)
    }, {
      prop: "Precision",
      name: "Precision",
      pkg: "",
      typ: $funcType([], [$Int, $Bool], false)
    }, {
      prop: "Width",
      name: "Width",
      pkg: "",
      typ: $funcType([], [$Int, $Bool], false)
    }, {
      prop: "Write",
      name: "Write",
      pkg: "",
      typ: $funcType([BN], [$Int, $error], false)
    }]);
    L.init([{
      prop: "Format",
      name: "Format",
      pkg: "",
      typ: $funcType([K, $Int32], [], false)
    }]);
    M.init([{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }]);
    N.init([{
      prop: "GoString",
      name: "GoString",
      pkg: "",
      typ: $funcType([], [$String], false)
    }]);
    O.init($Uint8);
    P.init("fmt", [{
      prop: "buf",
      name: "buf",
      embedded: false,
      exported: false,
      typ: O,
      tag: ""
    }, {
      prop: "arg",
      name: "arg",
      embedded: false,
      exported: false,
      typ: $emptyInterface,
      tag: ""
    }, {
      prop: "value",
      name: "value",
      embedded: false,
      exported: false,
      typ: F.Value,
      tag: ""
    }, {
      prop: "fmt",
      name: "fmt",
      embedded: false,
      exported: false,
      typ: J,
      tag: ""
    }, {
      prop: "reordered",
      name: "reordered",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "goodArgNum",
      name: "goodArgNum",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "panicking",
      name: "panicking",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "erroring",
      name: "erroring",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    AH.init([{
      prop: "Read",
      name: "Read",
      pkg: "",
      typ: $funcType([BN], [$Int, $error], false)
    }, {
      prop: "ReadRune",
      name: "ReadRune",
      pkg: "",
      typ: $funcType([], [$Int32, $Int, $error], false)
    }, {
      prop: "SkipSpace",
      name: "SkipSpace",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "Token",
      name: "Token",
      pkg: "",
      typ: $funcType([$Bool, CO], [BN, $error], false)
    }, {
      prop: "UnreadRune",
      name: "UnreadRune",
      pkg: "",
      typ: $funcType([], [$error], false)
    }, {
      prop: "Width",
      name: "Width",
      pkg: "",
      typ: $funcType([], [$Int, $Bool], false)
    }]);
    AT.init("fmt", [{
      prop: "err",
      name: "err",
      embedded: false,
      exported: false,
      typ: $error,
      tag: ""
    }]);
    AU.init("fmt", [{
      prop: "rs",
      name: "rs",
      embedded: false,
      exported: false,
      typ: D.RuneScanner,
      tag: ""
    }, {
      prop: "buf",
      name: "buf",
      embedded: false,
      exported: false,
      typ: O,
      tag: ""
    }, {
      prop: "count",
      name: "count",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "atEOF",
      name: "atEOF",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "ssave",
      name: "ssave",
      embedded: true,
      exported: false,
      typ: AV,
      tag: ""
    }]);
    AV.init("fmt", [{
      prop: "validSave",
      name: "validSave",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "nlIsEnd",
      name: "nlIsEnd",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "nlIsSpace",
      name: "nlIsSpace",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "argLimit",
      name: "argLimit",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "limit",
      name: "limit",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "maxWid",
      name: "maxWid",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = C.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = H.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = F.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = G.$init();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            Q = new G.Pool.ptr(0, 0, BH.nil, (function() {
              return new P.ptr(O.nil, $ifaceNil, new F.Value.ptr(BI.nil, 0, 0), new J.ptr(BJ.nil, new I.ptr(false, false, false, false, false, false, false, false, false), 0, 0, BK.zero()), false, false, false, false);
            }));
            AW = new BM([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
            BA = new G.Pool.ptr(0, 0, BH.nil, (function() {
              return new AU.ptr($ifaceNil, O.nil, 0, false, new AV.ptr(false, false, false, 0, 0, 0));
            }));
            BC = C.New("syntax error scanning complex number");
            BD = C.New("syntax error scanning boolean");
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["sort"] = (function() {
    var $pkg = {},
      $init, A, S, Z, AW, AX, AY, B, E, F, J, K, L, M, O, P, Q, R, AC, AK, AL, AM, AN, AP, AQ;
    A = $packages["reflect"];
    S = $pkg.lessSwap = $newType(0, $kindStruct, "sort.lessSwap", true, "sort", false, function(Less_, Swap_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Less = $throwNilPointerError;
        this.Swap = $throwNilPointerError;
        return;
      }
      this.Less = Less_;
      this.Swap = Swap_;
    });
    Z = $pkg.StringSlice = $newType(12, $kindSlice, "sort.StringSlice", true, "sort", true, null);
    AW = $sliceType($String);
    AX = $funcType([$Int, $Int], [$Bool], false);
    AY = $funcType([$Int, $Int], [], false);
    B = function(a, b) {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = 0;
            d = a;
            e = c;
            f = d;
          case 1:
            if (!(e < f)) {
              $s = 2;
              continue;
            }
            g = ((((((e + f >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
            h = b(g);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            if (!h) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            e = g + 1 >> 0;
            $s = 5;
            continue;
          case 4:
            f = g;
          case 5:
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: B
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Search = B;
    E = function(a, b) {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = [a];
            b = [b];
            c = B(a[0].$length, (function(a, b) {
              return function(c) {
                var c;
                return ((c < 0 || c >= a[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : a[0].$array[a[0].$offset + c]) >= b[0];
              };
            })(a, b));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: E
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.SearchStrings = E;
    Z.prototype.Search = function(a) {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = E($subslice(new AW(b.$array), b.$offset, b.$offset + b.$length), a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Z.prototype.Search
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(Z).prototype.Search = function(a) {
      return this.$get().Search(a);
    };
    F = function(a, b) {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = A.ValueOf(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
            e = A.Swapper(a);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            g = $clone(d, A.Value).Len();
            $r = AQ(new S.ptr(b, f), 0, g, R(g));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: F
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Slice = F;
    J = function(a, b, c) {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = b + 1 >> 0;
          case 1:
            if (!(d < c)) {
              $s = 2;
              continue;
            }
            e = d;
          case 3:
            if (!(e > b)) {
              f = false;
              $s = 5;
              continue s;
            }
            g = a.Less(e, e - 1 >> 0);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
          case 5:
            if (!(f)) {
              $s = 4;
              continue;
            }
            $r = a.Swap(e, e - 1 >> 0);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            e = e - (1) >> 0;
            $s = 3;
            continue;
          case 4:
            d = d + (1) >> 0;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: J
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    K = function(a, b, c, d) {
      var a, b, c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = b;
          case 1:
            f = ($imul(2, e)) + 1 >> 0;
            if (f >= c) {
              $s = 2;
              continue;
            }
            if (!((f + 1 >> 0) < c)) {
              g = false;
              $s = 5;
              continue s;
            }
            h = a.Less(d + f >> 0, (d + f >> 0) + 1 >> 0);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = h;
          case 5:
            if (g) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            f = f + (1) >> 0;
          case 4:
            i = a.Less(d + e >> 0, d + f >> 0);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            if (!i) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            $s = -1;
            return;
          case 8:
            $r = a.Swap(d + e >> 0, d + f >> 0);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            e = f;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: K
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    L = function(a, b, c) {
      var a, b, c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = b;
            e = 0;
            f = c - b >> 0;
            h = (g = ((f - 1 >> 0)) / 2, (g === g && g !== 1 / 0 && g !== -1 / 0) ? g >> 0 : $throwRuntimeError("integer divide by zero"));
          case 1:
            if (!(h >= 0)) {
              $s = 2;
              continue;
            }
            $r = K(a, h, f, d);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            h = h - (1) >> 0;
            $s = 1;
            continue;
          case 2:
            i = f - 1 >> 0;
          case 4:
            if (!(i >= 0)) {
              $s = 5;
              continue;
            }
            $r = a.Swap(d, d + i >> 0);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = K(a, e, i, d);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            i = i - (1) >> 0;
            $s = 4;
            continue;
          case 5:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: L
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M = function(a, b, c, d) {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = a.Less(b, c);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            if (e) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = a.Swap(b, c);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            f = a.Less(d, b);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            if (f) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            $r = a.Swap(d, b);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            g = a.Less(b, c);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            if (g) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            $r = a.Swap(b, c);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 10:
          case 6:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O = function(a, b, c) {
      var a, aa, ab, ac, ad, ae, af, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = 0;
            e = 0;
            f = ((((((b + c >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
            if ((c - b >> 0) > 40) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            h = (g = ((c - b >> 0)) / 8, (g === g && g !== 1 / 0 && g !== -1 / 0) ? g >> 0 : $throwRuntimeError("integer divide by zero"));
            $r = M(a, b, b + h >> 0, b + ($imul(2, h)) >> 0);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = M(a, f, f - h >> 0, f + h >> 0);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = M(a, c - 1 >> 0, (c - 1 >> 0) - h >> 0, (c - 1 >> 0) - ($imul(2, h)) >> 0);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            $r = M(a, b, f, c - 1 >> 0);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            i = b;
            j = b + 1 >> 0;
            k = c - 1 >> 0;
            l = j;
            m = k;
          case 7:
            if (!(l < m)) {
              n = false;
              $s = 9;
              continue s;
            }
            o = a.Less(l, i);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            n = o;
          case 9:
            if (!(n)) {
              $s = 8;
              continue;
            }
            l = l + (1) >> 0;
            $s = 7;
            continue;
          case 8:
            p = l;
          case 11:
          case 13:
            if (!(p < m)) {
              q = false;
              $s = 15;
              continue s;
            }
            r = a.Less(i, p);
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              r = r.$blk();
            }
            if (r && r.$blk !== undefined) {
              break s;
            }
            q = !r;
          case 15:
            if (!(q)) {
              $s = 14;
              continue;
            }
            p = p + (1) >> 0;
            $s = 13;
            continue;
          case 14:
          case 17:
            if (!(p < m)) {
              s = false;
              $s = 19;
              continue s;
            }
            t = a.Less(i, m - 1 >> 0);
            $s = 20;
          case 20:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            s = t;
          case 19:
            if (!(s)) {
              $s = 18;
              continue;
            }
            m = m - (1) >> 0;
            $s = 17;
            continue;
          case 18:
            if (p >= m) {
              $s = 12;
              continue;
            }
            $r = a.Swap(p, m - 1 >> 0);
            $s = 21;
          case 21:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            p = p + (1) >> 0;
            m = m - (1) >> 0;
            $s = 11;
            continue;
          case 12:
            u = (c - m >> 0) < 5;
            if (!u && (c - m >> 0) < (v = ((c - b >> 0)) / 4, (v === v && v !== 1 / 0 && v !== -1 / 0) ? v >> 0 : $throwRuntimeError("integer divide by zero"))) {
              $s = 22;
              continue;
            }
            $s = 23;
            continue;
          case 22:
            w = 0;
            x = a.Less(i, c - 1 >> 0);
            $s = 26;
          case 26:
            if ($c) {
              $c = false;
              x = x.$blk();
            }
            if (x && x.$blk !== undefined) {
              break s;
            }
            if (!x) {
              $s = 24;
              continue;
            }
            $s = 25;
            continue;
          case 24:
            $r = a.Swap(m, c - 1 >> 0);
            $s = 27;
          case 27:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            m = m + (1) >> 0;
            w = w + (1) >> 0;
          case 25:
            y = a.Less(p - 1 >> 0, i);
            $s = 30;
          case 30:
            if ($c) {
              $c = false;
              y = y.$blk();
            }
            if (y && y.$blk !== undefined) {
              break s;
            }
            if (!y) {
              $s = 28;
              continue;
            }
            $s = 29;
            continue;
          case 28:
            p = p - (1) >> 0;
            w = w + (1) >> 0;
          case 29:
            z = a.Less(f, i);
            $s = 33;
          case 33:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            if (!z) {
              $s = 31;
              continue;
            }
            $s = 32;
            continue;
          case 31:
            $r = a.Swap(f, p - 1 >> 0);
            $s = 34;
          case 34:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            p = p - (1) >> 0;
            w = w + (1) >> 0;
          case 32:
            u = w > 1;
          case 23:
            if (u) {
              $s = 35;
              continue;
            }
            $s = 36;
            continue;
          case 35:
          case 37:
          case 39:
            if (!(l < p)) {
              aa = false;
              $s = 41;
              continue s;
            }
            ab = a.Less(p - 1 >> 0, i);
            $s = 42;
          case 42:
            if ($c) {
              $c = false;
              ab = ab.$blk();
            }
            if (ab && ab.$blk !== undefined) {
              break s;
            }
            aa = !ab;
          case 41:
            if (!(aa)) {
              $s = 40;
              continue;
            }
            p = p - (1) >> 0;
            $s = 39;
            continue;
          case 40:
          case 43:
            if (!(l < p)) {
              ac = false;
              $s = 45;
              continue s;
            }
            ad = a.Less(l, i);
            $s = 46;
          case 46:
            if ($c) {
              $c = false;
              ad = ad.$blk();
            }
            if (ad && ad.$blk !== undefined) {
              break s;
            }
            ac = ad;
          case 45:
            if (!(ac)) {
              $s = 44;
              continue;
            }
            l = l + (1) >> 0;
            $s = 43;
            continue;
          case 44:
            if (l >= p) {
              $s = 38;
              continue;
            }
            $r = a.Swap(l, p - 1 >> 0);
            $s = 47;
          case 47:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            l = l + (1) >> 0;
            p = p - (1) >> 0;
            $s = 37;
            continue;
          case 38:
          case 36:
            $r = a.Swap(i, p - 1 >> 0);
            $s = 48;
          case 48:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            ae = p - 1 >> 0;
            af = m;
            d = ae;
            e = af;
            $s = -1;
            return [d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P = function(a, b, c, d) {
      var a, b, c, d, e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
          case 1:
            if (!((c - b >> 0) > 12)) {
              $s = 2;
              continue;
            }
            if (d === 0) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            $r = L(a, b, c);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
          case 4:
            d = d - (1) >> 0;
            f = O(a, b, c);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            e = f;
            g = e[0];
            h = e[1];
            if ((g - b >> 0) < (c - h >> 0)) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            $r = P(a, b, g, d);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            b = h;
            $s = 9;
            continue;
          case 8:
            $r = P(a, h, c, d);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            c = g;
          case 9:
            $s = 1;
            continue;
          case 2:
            if ((c - b >> 0) > 1) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 12:
            i = b + 6 >> 0;
          case 14:
            if (!(i < c)) {
              $s = 15;
              continue;
            }
            j = a.Less(i, i - 6 >> 0);
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            if (j) {
              $s = 16;
              continue;
            }
            $s = 17;
            continue;
          case 16:
            $r = a.Swap(i, i - 6 >> 0);
            $s = 19;
          case 19:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 17:
            i = i + (1) >> 0;
            $s = 14;
            continue;
          case 15:
            $r = J(a, b, c);
            $s = 20;
          case 20:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 13:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    Q = function(a) {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = a.Len();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            $r = P(a, 0, c, R(c));
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Q
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Sort = Q;
    R = function(a) {
      var a, b, c;
      b = 0;
      c = a;
      while (true) {
        if (!(c > 0)) {
          break;
        }
        b = b + (1) >> 0;
        c = (c >> $min((1), 31)) >> 0;
      }
      return $imul(b, 2);
    };
    Z.prototype.Len = function() {
      var a;
      a = this;
      return a.$length;
    };
    $ptrType(Z).prototype.Len = function() {
      return this.$get().Len();
    };
    Z.prototype.Less = function(a, b) {
      var a, b, c;
      c = this;
      return ((a < 0 || a >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + a]) < ((b < 0 || b >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + b]);
    };
    $ptrType(Z).prototype.Less = function(a, b) {
      return this.$get().Less(a, b);
    };
    Z.prototype.Swap = function(a, b) {
      var a, b, c, d, e;
      c = this;
      d = ((b < 0 || b >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + b]);
      e = ((a < 0 || a >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + a]);
      ((a < 0 || a >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + a] = d);
      ((b < 0 || b >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + b] = e);
    };
    $ptrType(Z).prototype.Swap = function(a, b) {
      return this.$get().Swap(a, b);
    };
    Z.prototype.Sort = function() {
      var a, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            $r = Q(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Z.prototype.Sort
        };
      }
      $f.a = a;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(Z).prototype.Sort = function() {
      return this.$get().Sort();
    };
    AC = function(a) {
      var a, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = Q(($subslice(new Z(a.$array), a.$offset, a.$offset + a.$length)));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AC
        };
      }
      $f.a = a;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Strings = AC;
    AK = function(a, b, c) {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = b + 1 >> 0;
          case 1:
            if (!(d < c)) {
              $s = 2;
              continue;
            }
            e = d;
          case 3:
            if (!(e > b)) {
              f = false;
              $s = 5;
              continue s;
            }
            g = a.Less(e, e - 1 >> 0);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
          case 5:
            if (!(f)) {
              $s = 4;
              continue;
            }
            $r = a.Swap(e, e - 1 >> 0);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            e = e - (1) >> 0;
            $s = 3;
            continue;
          case 4:
            d = d + (1) >> 0;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AK
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AL = function(a, b, c, d) {
      var a, b, c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = b;
          case 1:
            f = ($imul(2, e)) + 1 >> 0;
            if (f >= c) {
              $s = 2;
              continue;
            }
            if (!((f + 1 >> 0) < c)) {
              g = false;
              $s = 5;
              continue s;
            }
            h = a.Less(d + f >> 0, (d + f >> 0) + 1 >> 0);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = h;
          case 5:
            if (g) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            f = f + (1) >> 0;
          case 4:
            i = a.Less(d + e >> 0, d + f >> 0);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            if (!i) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            $s = -1;
            return;
          case 8:
            $r = a.Swap(d + e >> 0, d + f >> 0);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            e = f;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AL
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AM = function(a, b, c) {
      var a, b, c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = b;
            e = 0;
            f = c - b >> 0;
            h = (g = ((f - 1 >> 0)) / 2, (g === g && g !== 1 / 0 && g !== -1 / 0) ? g >> 0 : $throwRuntimeError("integer divide by zero"));
          case 1:
            if (!(h >= 0)) {
              $s = 2;
              continue;
            }
            $r = AL($clone(a, S), h, f, d);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            h = h - (1) >> 0;
            $s = 1;
            continue;
          case 2:
            i = f - 1 >> 0;
          case 4:
            if (!(i >= 0)) {
              $s = 5;
              continue;
            }
            $r = a.Swap(d, d + i >> 0);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = AL($clone(a, S), e, i, d);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            i = i - (1) >> 0;
            $s = 4;
            continue;
          case 5:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AM
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN = function(a, b, c, d) {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = a.Less(b, c);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            if (e) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = a.Swap(b, c);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            f = a.Less(d, b);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            if (f) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            $r = a.Swap(d, b);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            g = a.Less(b, c);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            if (g) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            $r = a.Swap(b, c);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 10:
          case 6:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AP = function(a, b, c) {
      var a, aa, ab, ac, ad, ae, af, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = 0;
            e = 0;
            f = ((((((b + c >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
            if ((c - b >> 0) > 40) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            h = (g = ((c - b >> 0)) / 8, (g === g && g !== 1 / 0 && g !== -1 / 0) ? g >> 0 : $throwRuntimeError("integer divide by zero"));
            $r = AN($clone(a, S), b, b + h >> 0, b + ($imul(2, h)) >> 0);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = AN($clone(a, S), f, f - h >> 0, f + h >> 0);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = AN($clone(a, S), c - 1 >> 0, (c - 1 >> 0) - h >> 0, (c - 1 >> 0) - ($imul(2, h)) >> 0);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            $r = AN($clone(a, S), b, f, c - 1 >> 0);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            i = b;
            j = b + 1 >> 0;
            k = c - 1 >> 0;
            l = j;
            m = k;
          case 7:
            if (!(l < m)) {
              n = false;
              $s = 9;
              continue s;
            }
            o = a.Less(l, i);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            n = o;
          case 9:
            if (!(n)) {
              $s = 8;
              continue;
            }
            l = l + (1) >> 0;
            $s = 7;
            continue;
          case 8:
            p = l;
          case 11:
          case 13:
            if (!(p < m)) {
              q = false;
              $s = 15;
              continue s;
            }
            r = a.Less(i, p);
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              r = r.$blk();
            }
            if (r && r.$blk !== undefined) {
              break s;
            }
            q = !r;
          case 15:
            if (!(q)) {
              $s = 14;
              continue;
            }
            p = p + (1) >> 0;
            $s = 13;
            continue;
          case 14:
          case 17:
            if (!(p < m)) {
              s = false;
              $s = 19;
              continue s;
            }
            t = a.Less(i, m - 1 >> 0);
            $s = 20;
          case 20:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            s = t;
          case 19:
            if (!(s)) {
              $s = 18;
              continue;
            }
            m = m - (1) >> 0;
            $s = 17;
            continue;
          case 18:
            if (p >= m) {
              $s = 12;
              continue;
            }
            $r = a.Swap(p, m - 1 >> 0);
            $s = 21;
          case 21:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            p = p + (1) >> 0;
            m = m - (1) >> 0;
            $s = 11;
            continue;
          case 12:
            u = (c - m >> 0) < 5;
            if (!u && (c - m >> 0) < (v = ((c - b >> 0)) / 4, (v === v && v !== 1 / 0 && v !== -1 / 0) ? v >> 0 : $throwRuntimeError("integer divide by zero"))) {
              $s = 22;
              continue;
            }
            $s = 23;
            continue;
          case 22:
            w = 0;
            x = a.Less(i, c - 1 >> 0);
            $s = 26;
          case 26:
            if ($c) {
              $c = false;
              x = x.$blk();
            }
            if (x && x.$blk !== undefined) {
              break s;
            }
            if (!x) {
              $s = 24;
              continue;
            }
            $s = 25;
            continue;
          case 24:
            $r = a.Swap(m, c - 1 >> 0);
            $s = 27;
          case 27:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            m = m + (1) >> 0;
            w = w + (1) >> 0;
          case 25:
            y = a.Less(p - 1 >> 0, i);
            $s = 30;
          case 30:
            if ($c) {
              $c = false;
              y = y.$blk();
            }
            if (y && y.$blk !== undefined) {
              break s;
            }
            if (!y) {
              $s = 28;
              continue;
            }
            $s = 29;
            continue;
          case 28:
            p = p - (1) >> 0;
            w = w + (1) >> 0;
          case 29:
            z = a.Less(f, i);
            $s = 33;
          case 33:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            if (!z) {
              $s = 31;
              continue;
            }
            $s = 32;
            continue;
          case 31:
            $r = a.Swap(f, p - 1 >> 0);
            $s = 34;
          case 34:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            p = p - (1) >> 0;
            w = w + (1) >> 0;
          case 32:
            u = w > 1;
          case 23:
            if (u) {
              $s = 35;
              continue;
            }
            $s = 36;
            continue;
          case 35:
          case 37:
          case 39:
            if (!(l < p)) {
              aa = false;
              $s = 41;
              continue s;
            }
            ab = a.Less(p - 1 >> 0, i);
            $s = 42;
          case 42:
            if ($c) {
              $c = false;
              ab = ab.$blk();
            }
            if (ab && ab.$blk !== undefined) {
              break s;
            }
            aa = !ab;
          case 41:
            if (!(aa)) {
              $s = 40;
              continue;
            }
            p = p - (1) >> 0;
            $s = 39;
            continue;
          case 40:
          case 43:
            if (!(l < p)) {
              ac = false;
              $s = 45;
              continue s;
            }
            ad = a.Less(l, i);
            $s = 46;
          case 46:
            if ($c) {
              $c = false;
              ad = ad.$blk();
            }
            if (ad && ad.$blk !== undefined) {
              break s;
            }
            ac = ad;
          case 45:
            if (!(ac)) {
              $s = 44;
              continue;
            }
            l = l + (1) >> 0;
            $s = 43;
            continue;
          case 44:
            if (l >= p) {
              $s = 38;
              continue;
            }
            $r = a.Swap(l, p - 1 >> 0);
            $s = 47;
          case 47:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            l = l + (1) >> 0;
            p = p - (1) >> 0;
            $s = 37;
            continue;
          case 38:
          case 36:
            $r = a.Swap(i, p - 1 >> 0);
            $s = 48;
          case 48:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            ae = p - 1 >> 0;
            af = m;
            d = ae;
            e = af;
            $s = -1;
            return [d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AP
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AQ = function(a, b, c, d) {
      var a, b, c, d, e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
          case 1:
            if (!((c - b >> 0) > 12)) {
              $s = 2;
              continue;
            }
            if (d === 0) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            $r = AM($clone(a, S), b, c);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
          case 4:
            d = d - (1) >> 0;
            f = AP($clone(a, S), b, c);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            e = f;
            g = e[0];
            h = e[1];
            if ((g - b >> 0) < (c - h >> 0)) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            $r = AQ($clone(a, S), b, g, d);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            b = h;
            $s = 9;
            continue;
          case 8:
            $r = AQ($clone(a, S), h, c, d);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            c = g;
          case 9:
            $s = 1;
            continue;
          case 2:
            if ((c - b >> 0) > 1) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 12:
            i = b + 6 >> 0;
          case 14:
            if (!(i < c)) {
              $s = 15;
              continue;
            }
            j = a.Less(i, i - 6 >> 0);
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            if (j) {
              $s = 16;
              continue;
            }
            $s = 17;
            continue;
          case 16:
            $r = a.Swap(i, i - 6 >> 0);
            $s = 19;
          case 19:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 17:
            i = i + (1) >> 0;
            $s = 14;
            continue;
          case 15:
            $r = AK($clone(a, S), b, c);
            $s = 20;
          case 20:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 13:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AQ
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    Z.methods = [{
      prop: "Search",
      name: "Search",
      pkg: "",
      typ: $funcType([$String], [$Int], false)
    }, {
      prop: "Len",
      name: "Len",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Less",
      name: "Less",
      pkg: "",
      typ: $funcType([$Int, $Int], [$Bool], false)
    }, {
      prop: "Swap",
      name: "Swap",
      pkg: "",
      typ: $funcType([$Int, $Int], [], false)
    }, {
      prop: "Sort",
      name: "Sort",
      pkg: "",
      typ: $funcType([], [], false)
    }];
    S.init("", [{
      prop: "Less",
      name: "Less",
      embedded: false,
      exported: true,
      typ: AX,
      tag: ""
    }, {
      prop: "Swap",
      name: "Swap",
      embedded: false,
      exported: true,
      typ: AY,
      tag: ""
    }]);
    Z.init($String);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["strings"] = (function() {
    var $pkg = {},
      $init, C, B, E, D, F, A, K, N, P, Q, S, T, V, W, X, Z, AB, AC, AD, BT, CS, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP, CQ, CR, CT, CU, CV, CW, CX, CY, CZ, AW, G, H, I, J, O, R, U, Y, AA, AE, AF, AG, AH, AK, AL, AM, AN, AO, AR, AU, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BK, BL, BM, BN, BO, BR, BS, BU, BZ, CA, CC, CD;
    C = $packages["errors"];
    B = $packages["github.com/gopherjs/gopherjs/js"];
    E = $packages["internal/bytealg"];
    D = $packages["io"];
    F = $packages["unicode"];
    A = $packages["unicode/utf8"];
    K = $pkg.Builder = $newType(0, $kindStruct, "strings.Builder", true, "strings", true, function(addr_, buf_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.addr = CF.nil;
        this.buf = CG.nil;
        return;
      }
      this.addr = addr_;
      this.buf = buf_;
    });
    N = $pkg.Reader = $newType(0, $kindStruct, "strings.Reader", true, "strings", true, function(s_, i_, prevRune_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.s = "";
        this.i = new $Int64(0, 0);
        this.prevRune = 0;
        return;
      }
      this.s = s_;
      this.i = i_;
      this.prevRune = prevRune_;
    });
    P = $pkg.Replacer = $newType(0, $kindStruct, "strings.Replacer", true, "strings", true, function(r_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.r = $ifaceNil;
        return;
      }
      this.r = r_;
    });
    Q = $pkg.replacer = $newType(8, $kindInterface, "strings.replacer", true, "strings", false, null);
    S = $pkg.trieNode = $newType(0, $kindStruct, "strings.trieNode", true, "strings", false, function(value_, priority_, prefix_, next_, table_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.value = "";
        this.priority = 0;
        this.prefix = "";
        this.next = CL.nil;
        this.table = CM.nil;
        return;
      }
      this.value = value_;
      this.priority = priority_;
      this.prefix = prefix_;
      this.next = next_;
      this.table = table_;
    });
    T = $pkg.genericReplacer = $newType(0, $kindStruct, "strings.genericReplacer", true, "strings", false, function(root_, tableSize_, mapping_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.root = new S.ptr("", 0, "", CL.nil, CM.nil);
        this.tableSize = 0;
        this.mapping = CH.zero();
        return;
      }
      this.root = root_;
      this.tableSize = tableSize_;
      this.mapping = mapping_;
    });
    V = $pkg.appendSliceWriter = $newType(12, $kindSlice, "strings.appendSliceWriter", true, "strings", false, null);
    W = $pkg.stringWriterIface = $newType(8, $kindInterface, "strings.stringWriterIface", true, "strings", false, null);
    X = $pkg.stringWriter = $newType(0, $kindStruct, "strings.stringWriter", true, "strings", false, function(w_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.w = $ifaceNil;
        return;
      }
      this.w = w_;
    });
    Z = $pkg.singleStringReplacer = $newType(0, $kindStruct, "strings.singleStringReplacer", true, "strings", false, function(finder_, value_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.finder = CO.nil;
        this.value = "";
        return;
      }
      this.finder = finder_;
      this.value = value_;
    });
    AB = $pkg.byteReplacer = $newType(256, $kindArray, "strings.byteReplacer", true, "strings", false, null);
    AC = $pkg.byteStringReplacer = $newType(0, $kindStruct, "strings.byteStringReplacer", true, "strings", false, function(replacements_, toReplace_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.replacements = CJ.zero();
        this.toReplace = CK.nil;
        return;
      }
      this.replacements = replacements_;
      this.toReplace = toReplace_;
    });
    AD = $pkg.stringFinder = $newType(0, $kindStruct, "strings.stringFinder", true, "strings", false, function(pattern_, badCharSkip_, goodSuffixSkip_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.pattern = "";
        this.badCharSkip = CP.zero();
        this.goodSuffixSkip = CQ.nil;
        return;
      }
      this.pattern = pattern_;
      this.badCharSkip = badCharSkip_;
      this.goodSuffixSkip = goodSuffixSkip_;
    });
    BT = $pkg.asciiSet = $newType(32, $kindArray, "strings.asciiSet", true, "strings", false, null);
    CS = $newType(0, $kindStruct, "strings.span", true, "strings", false, function(start_, end_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.start = 0;
        this.end = 0;
        return;
      }
      this.start = start_;
      this.end = end_;
    });
    CF = $ptrType(K);
    CG = $sliceType($Uint8);
    CH = $arrayType($Uint8, 256);
    CI = $ptrType(AB);
    CJ = $arrayType(CG, 256);
    CK = $sliceType($String);
    CL = $ptrType(S);
    CM = $sliceType(CL);
    CN = $ptrType(V);
    CO = $ptrType(AD);
    CP = $arrayType($Int, 256);
    CQ = $sliceType($Int);
    CR = $ptrType(BT);
    CT = $sliceType(CS);
    CU = $arrayType($Uint32, 8);
    CV = $ptrType(N);
    CW = $ptrType(P);
    CX = $ptrType(T);
    CY = $ptrType(Z);
    CZ = $ptrType(AC);
    G = function(e, f) {
      var e, f;
      return $parseInt(e.indexOf($global.String.fromCharCode(f))) >> 0;
    };
    $pkg.IndexByte = G;
    H = function(e, f) {
      var e, f;
      return $parseInt(e.indexOf(f)) >> 0;
    };
    $pkg.Index = H;
    I = function(e, f) {
      var e, f;
      return $parseInt(e.lastIndexOf(f)) >> 0;
    };
    $pkg.LastIndex = I;
    J = function(e, f) {
      var e, f, g, h;
      g = 0;
      if ((f.length === 0)) {
        return A.RuneCountInString(e) + 1 >> 0;
      } else if (f.length > e.length) {
        return 0;
      } else if ((f.length === e.length)) {
        if (f === e) {
          return 1;
        }
        return 0;
      }
      while (true) {
        h = H(e, f);
        if (h === -1) {
          break;
        }
        g = g + (1) >> 0;
        e = $substring(e, (h + f.length >> 0));
      }
      return g;
    };
    $pkg.Count = J;
    K.ptr.prototype.String = function() {
      var e;
      e = this;
      return ($bytesToString(e.buf));
    };
    K.prototype.String = function() {
      return this.$val.String();
    };
    K.ptr.prototype.copyCheck = function() {
      var e;
      e = this;
      if (e.addr === CF.nil) {
        e.addr = e;
      } else if (!(e.addr === e)) {
        $panic(new $String("strings: illegal use of non-zero Builder copied by value"));
      }
    };
    K.prototype.copyCheck = function() {
      return this.$val.copyCheck();
    };
    K.ptr.prototype.Len = function() {
      var e;
      e = this;
      return e.buf.$length;
    };
    K.prototype.Len = function() {
      return this.$val.Len();
    };
    K.ptr.prototype.Reset = function() {
      var e;
      e = this;
      e.addr = CF.nil;
      e.buf = CG.nil;
    };
    K.prototype.Reset = function() {
      return this.$val.Reset();
    };
    K.ptr.prototype.grow = function(e) {
      var e, f, g;
      f = this;
      g = $makeSlice(CG, f.buf.$length, (($imul(2, f.buf.$capacity)) + e >> 0));
      $copySlice(g, f.buf);
      f.buf = g;
    };
    K.prototype.grow = function(e) {
      return this.$val.grow(e);
    };
    K.ptr.prototype.Grow = function(e) {
      var e, f;
      f = this;
      f.copyCheck();
      if (e < 0) {
        $panic(new $String("strings.Builder.Grow: negative count"));
      }
      if ((f.buf.$capacity - f.buf.$length >> 0) < e) {
        f.grow(e);
      }
    };
    K.prototype.Grow = function(e) {
      return this.$val.Grow(e);
    };
    K.ptr.prototype.Write = function(e) {
      var e, f;
      f = this;
      f.copyCheck();
      f.buf = $appendSlice(f.buf, e);
      return [e.$length, $ifaceNil];
    };
    K.prototype.Write = function(e) {
      return this.$val.Write(e);
    };
    K.ptr.prototype.WriteByte = function(e) {
      var e, f;
      f = this;
      f.copyCheck();
      f.buf = $append(f.buf, e);
      return $ifaceNil;
    };
    K.prototype.WriteByte = function(e) {
      return this.$val.WriteByte(e);
    };
    K.ptr.prototype.WriteRune = function(e) {
      var e, f, g, h;
      f = this;
      f.copyCheck();
      if (e < 128) {
        f.buf = $append(f.buf, ((e << 24 >>> 24)));
        return [1, $ifaceNil];
      }
      g = f.buf.$length;
      if ((f.buf.$capacity - g >> 0) < 4) {
        f.grow(4);
      }
      h = A.EncodeRune($subslice(f.buf, g, (g + 4 >> 0)), e);
      f.buf = $subslice(f.buf, 0, (g + h >> 0));
      return [h, $ifaceNil];
    };
    K.prototype.WriteRune = function(e) {
      return this.$val.WriteRune(e);
    };
    K.ptr.prototype.WriteString = function(e) {
      var e, f;
      f = this;
      f.copyCheck();
      f.buf = $appendSlice(f.buf, e);
      return [e.length, $ifaceNil];
    };
    K.prototype.WriteString = function(e) {
      return this.$val.WriteString(e);
    };
    N.ptr.prototype.Len = function() {
      var e, f, g, h, i, j;
      e = this;
      if ((f = e.i, g = (new $Int64(0, e.s.length)), (f.$high > g.$high || (f.$high === g.$high && f.$low >= g.$low)))) {
        return 0;
      }
      return (((h = (i = (new $Int64(0, e.s.length)), j = e.i, new $Int64(i.$high - j.$high, i.$low - j.$low)), h.$low + ((h.$high >> 31) * 4294967296)) >> 0));
    };
    N.prototype.Len = function() {
      return this.$val.Len();
    };
    N.ptr.prototype.Size = function() {
      var e;
      e = this;
      return (new $Int64(0, e.s.length));
    };
    N.prototype.Size = function() {
      return this.$val.Size();
    };
    N.ptr.prototype.Read = function(e) {
      var e, f, g, h, i, j, k, l, m, n;
      f = 0;
      g = $ifaceNil;
      h = this;
      if ((i = h.i, j = (new $Int64(0, h.s.length)), (i.$high > j.$high || (i.$high === j.$high && i.$low >= j.$low)))) {
        k = 0;
        l = D.EOF;
        f = k;
        g = l;
        return [f, g];
      }
      h.prevRune = -1;
      f = $copyString(e, $substring(h.s, $flatten64(h.i)));
      h.i = (m = h.i, n = (new $Int64(0, f)), new $Int64(m.$high + n.$high, m.$low + n.$low));
      return [f, g];
    };
    N.prototype.Read = function(e) {
      return this.$val.Read(e);
    };
    N.ptr.prototype.ReadAt = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n;
      g = 0;
      h = $ifaceNil;
      i = this;
      if ((f.$high < 0 || (f.$high === 0 && f.$low < 0))) {
        j = 0;
        k = C.New("strings.Reader.ReadAt: negative offset");
        g = j;
        h = k;
        return [g, h];
      }
      if ((l = (new $Int64(0, i.s.length)), (f.$high > l.$high || (f.$high === l.$high && f.$low >= l.$low)))) {
        m = 0;
        n = D.EOF;
        g = m;
        h = n;
        return [g, h];
      }
      g = $copyString(e, $substring(i.s, $flatten64(f)));
      if (g < e.$length) {
        h = D.EOF;
      }
      return [g, h];
    };
    N.prototype.ReadAt = function(e, f) {
      return this.$val.ReadAt(e, f);
    };
    N.ptr.prototype.ReadByte = function() {
      var e, f, g, h, i, j;
      e = this;
      e.prevRune = -1;
      if ((f = e.i, g = (new $Int64(0, e.s.length)), (f.$high > g.$high || (f.$high === g.$high && f.$low >= g.$low)))) {
        return [0, D.EOF];
      }
      h = e.s.charCodeAt($flatten64(e.i));
      e.i = (i = e.i, j = new $Int64(0, 1), new $Int64(i.$high + j.$high, i.$low + j.$low));
      return [h, $ifaceNil];
    };
    N.prototype.ReadByte = function() {
      return this.$val.ReadByte();
    };
    N.ptr.prototype.UnreadByte = function() {
      var e, f, g, h;
      e = this;
      e.prevRune = -1;
      if ((f = e.i, (f.$high < 0 || (f.$high === 0 && f.$low <= 0)))) {
        return C.New("strings.Reader.UnreadByte: at beginning of string");
      }
      e.i = (g = e.i, h = new $Int64(0, 1), new $Int64(g.$high - h.$high, g.$low - h.$low));
      return $ifaceNil;
    };
    N.prototype.UnreadByte = function() {
      return this.$val.UnreadByte();
    };
    N.ptr.prototype.ReadRune = function() {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w;
      e = 0;
      f = 0;
      g = $ifaceNil;
      h = this;
      if ((i = h.i, j = (new $Int64(0, h.s.length)), (i.$high > j.$high || (i.$high === j.$high && i.$low >= j.$low)))) {
        h.prevRune = -1;
        k = 0;
        l = 0;
        m = D.EOF;
        e = k;
        f = l;
        g = m;
        return [e, f, g];
      }
      h.prevRune = (((n = h.i, n.$low + ((n.$high >> 31) * 4294967296)) >> 0));
      o = h.s.charCodeAt($flatten64(h.i));
      if (o < 128) {
        h.i = (p = h.i, q = new $Int64(0, 1), new $Int64(p.$high + q.$high, p.$low + q.$low));
        r = ((o >> 0));
        s = 1;
        t = $ifaceNil;
        e = r;
        f = s;
        g = t;
        return [e, f, g];
      }
      u = A.DecodeRuneInString($substring(h.s, $flatten64(h.i)));
      e = u[0];
      f = u[1];
      h.i = (v = h.i, w = (new $Int64(0, f)), new $Int64(v.$high + w.$high, v.$low + w.$low));
      return [e, f, g];
    };
    N.prototype.ReadRune = function() {
      return this.$val.ReadRune();
    };
    N.ptr.prototype.UnreadRune = function() {
      var e;
      e = this;
      if (e.prevRune < 0) {
        return C.New("strings.Reader.UnreadRune: previous operation was not ReadRune");
      }
      e.i = (new $Int64(0, e.prevRune));
      e.prevRune = -1;
      return $ifaceNil;
    };
    N.prototype.UnreadRune = function() {
      return this.$val.UnreadRune();
    };
    N.ptr.prototype.Seek = function(e, f) {
      var e, f, g, h, i, j, k;
      g = this;
      g.prevRune = -1;
      h = new $Int64(0, 0);
      i = f;
      if (i === (0)) {
        h = e;
      } else if (i === (1)) {
        h = (j = g.i, new $Int64(j.$high + e.$high, j.$low + e.$low));
      } else if (i === (2)) {
        h = (k = (new $Int64(0, g.s.length)), new $Int64(k.$high + e.$high, k.$low + e.$low));
      } else {
        return [new $Int64(0, 0), C.New("strings.Reader.Seek: invalid whence")];
      }
      if ((h.$high < 0 || (h.$high === 0 && h.$low < 0))) {
        return [new $Int64(0, 0), C.New("strings.Reader.Seek: negative position")];
      }
      g.i = h;
      return [h, $ifaceNil];
    };
    N.prototype.Seek = function(e, f) {
      return this.$val.Seek(e, f);
    };
    N.ptr.prototype.WriteTo = function(e) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = new $Int64(0, 0);
            g = $ifaceNil;
            h = this;
            h.prevRune = -1;
            if ((i = h.i, j = (new $Int64(0, h.s.length)), (i.$high > j.$high || (i.$high === j.$high && i.$low >= j.$low)))) {
              k = new $Int64(0, 0);
              l = $ifaceNil;
              f = k;
              g = l;
              $s = -1;
              return [f, g];
            }
            m = $substring(h.s, $flatten64(h.i));
            o = D.WriteString(e, m);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            n = o;
            p = n[0];
            g = n[1];
            if (p > m.length) {
              $panic(new $String("strings.Reader.WriteTo: invalid WriteString count"));
            }
            h.i = (q = h.i, r = (new $Int64(0, p)), new $Int64(q.$high + r.$high, q.$low + r.$low));
            f = (new $Int64(0, p));
            if (!((p === m.length)) && $interfaceIsEqual(g, $ifaceNil)) {
              g = D.ErrShortWrite;
            }
            $s = -1;
            return [f, g];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: N.ptr.prototype.WriteTo
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    N.prototype.WriteTo = function(e) {
      return this.$val.WriteTo(e);
    };
    N.ptr.prototype.Reset = function(e) {
      var e, f;
      f = this;
      N.copy(f, new N.ptr(e, new $Int64(0, 0), -1));
    };
    N.prototype.Reset = function(e) {
      return this.$val.Reset(e);
    };
    O = function(e) {
      var e;
      return new N.ptr(e, new $Int64(0, 0), -1);
    };
    $pkg.NewReader = O;
    R = function(e) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y;
      if ((f = e.$length % 2, f === f ? f : $throwRuntimeError("integer divide by zero")) === 1) {
        $panic(new $String("strings.NewReplacer: odd argument count"));
      }
      if ((e.$length === 2) && (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]).length > 1) {
        return new P.ptr(AA((0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]), (1 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 1])));
      }
      g = true;
      h = 0;
      while (true) {
        if (!(h < e.$length)) {
          break;
        }
        if (!((((h < 0 || h >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + h]).length === 1))) {
          return new P.ptr(U(e));
        }
        if (!(((i = h + 1 >> 0, ((i < 0 || i >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + i])).length === 1))) {
          g = false;
        }
        h = h + (2) >> 0;
      }
      if (g) {
        j = CH.zero();
        k = j;
        l = 0;
        while (true) {
          if (!(l < 256)) {
            break;
          }
          m = l;
          ((m < 0 || m >= j.length) ? ($throwRuntimeError("index out of range"), undefined) : j[m] = ((m << 24 >>> 24)));
          l++;
        }
        n = e.$length - 2 >> 0;
        while (true) {
          if (!(n >= 0)) {
            break;
          }
          o = ((n < 0 || n >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + n]).charCodeAt(0);
          q = (p = n + 1 >> 0, ((p < 0 || p >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + p])).charCodeAt(0);
          ((o < 0 || o >= j.length) ? ($throwRuntimeError("index out of range"), undefined) : j[o] = q);
          n = n - (2) >> 0;
        }
        return new P.ptr(new CI(j));
      }
      s = new AC.ptr(CJ.zero(), $makeSlice(CK, 0, (r = e.$length / 2, (r === r && r !== 1 / 0 && r !== -1 / 0) ? r >> 0 : $throwRuntimeError("integer divide by zero"))));
      t = e.$length - 2 >> 0;
      while (true) {
        if (!(t >= 0)) {
          break;
        }
        u = ((t < 0 || t >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + t]).charCodeAt(0);
        w = (v = t + 1 >> 0, ((v < 0 || v >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + v]));
        if ((x = s.replacements, ((u < 0 || u >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[u])) === CG.nil) {
          s.toReplace = $append(s.toReplace, ($bytesToString(new CG([u]))));
        }(y = s.replacements, ((u < 0 || u >= y.length) ? ($throwRuntimeError("index out of range"), undefined) : y[u] = (new CG($stringToBytes(w)))));
        t = t - (2) >> 0;
      }
      return new P.ptr(s);
    };
    $pkg.NewReplacer = R;
    P.ptr.prototype.Replace = function(e) {
      var e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            g = f.r.Replace(e);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.Replace
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.Replace = function(e) {
      return this.$val.Replace(e);
    };
    P.ptr.prototype.WriteString = function(e, f) {
      var e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = 0;
            h = $ifaceNil;
            i = this;
            k = i.r.WriteString(e, f);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            g = j[0];
            h = j[1];
            $s = -1;
            return [g, h];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.WriteString
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.WriteString = function(e, f) {
      return this.$val.WriteString(e, f);
    };
    S.ptr.prototype.add = function(e, f, g, h) {
      var aa, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      i = this;
      if (e === "") {
        if (i.priority === 0) {
          i.value = f;
          i.priority = g;
        }
        return;
      }
      if (!(i.prefix === "")) {
        j = 0;
        while (true) {
          if (!(j < i.prefix.length && j < e.length)) {
            break;
          }
          if (!((i.prefix.charCodeAt(j) === e.charCodeAt(j)))) {
            break;
          }
          j = j + (1) >> 0;
        }
        if (j === i.prefix.length) {
          i.next.add($substring(e, j), f, g, h);
        } else if (j === 0) {
          k = CL.nil;
          if (i.prefix.length === 1) {
            k = i.next;
          } else {
            k = new S.ptr("", 0, $substring(i.prefix, 1), i.next, CM.nil);
          }
          l = new S.ptr("", 0, "", CL.nil, CM.nil);
          i.table = $makeSlice(CM, h.tableSize);
          (m = i.table, n = (o = h.mapping, p = i.prefix.charCodeAt(0), ((p < 0 || p >= o.length) ? ($throwRuntimeError("index out of range"), undefined) : o[p])), ((n < 0 || n >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + n] = k));
          (q = i.table, r = (s = h.mapping, t = e.charCodeAt(0), ((t < 0 || t >= s.length) ? ($throwRuntimeError("index out of range"), undefined) : s[t])), ((r < 0 || r >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + r] = l));
          i.prefix = "";
          i.next = CL.nil;
          l.add($substring(e, 1), f, g, h);
        } else {
          u = new S.ptr("", 0, $substring(i.prefix, j), i.next, CM.nil);
          i.prefix = $substring(i.prefix, 0, j);
          i.next = u;
          u.add($substring(e, j), f, g, h);
        }
      } else if (!(i.table === CM.nil)) {
        x = (v = h.mapping, w = e.charCodeAt(0), ((w < 0 || w >= v.length) ? ($throwRuntimeError("index out of range"), undefined) : v[w]));
        if ((y = i.table, ((x < 0 || x >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + x])) === CL.nil) {
          (z = i.table, ((x < 0 || x >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x] = new S.ptr("", 0, "", CL.nil, CM.nil)));
        }(aa = i.table, ((x < 0 || x >= aa.$length) ? ($throwRuntimeError("index out of range"), undefined) : aa.$array[aa.$offset + x])).add($substring(e, 1), f, g, h);
      } else {
        i.prefix = e;
        i.next = new S.ptr("", 0, "", CL.nil, CM.nil);
        i.next.add("", f, g, h);
      }
    };
    S.prototype.add = function(e, f, g, h) {
      return this.$val.add(e, f, g, h);
    };
    T.ptr.prototype.lookup = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q;
      g = "";
      h = 0;
      i = false;
      j = this;
      k = 0;
      l = j.root;
      m = 0;
      while (true) {
        if (!(!(l === CL.nil))) {
          break;
        }
        if (l.priority > k && !(f && l === j.root)) {
          k = l.priority;
          g = l.value;
          h = m;
          i = true;
        }
        if (e === "") {
          break;
        }
        if (!(l.table === CM.nil)) {
          p = (n = j.mapping, o = e.charCodeAt(0), ((o < 0 || o >= n.length) ? ($throwRuntimeError("index out of range"), undefined) : n[o]));
          if (((p >> 0)) === j.tableSize) {
            break;
          }
          l = (q = l.table, ((p < 0 || p >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + p]));
          e = $substring(e, 1);
          m = m + (1) >> 0;
        } else if (!(l.prefix === "") && BA(e, l.prefix)) {
          m = m + (l.prefix.length) >> 0;
          e = $substring(e, l.prefix.length);
          l = l.next;
        } else {
          break;
        }
      }
      return [g, h, i];
    };
    T.prototype.lookup = function(e, f) {
      return this.$val.lookup(e, f);
    };
    U = function(e) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w;
      f = new T.ptr(new S.ptr("", 0, "", CL.nil, CM.nil), 0, CH.zero());
      g = 0;
      while (true) {
        if (!(g < e.$length)) {
          break;
        }
        h = ((g < 0 || g >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + g]);
        i = 0;
        while (true) {
          if (!(i < h.length)) {
            break;
          }(j = f.mapping, k = h.charCodeAt(i), ((k < 0 || k >= j.length) ? ($throwRuntimeError("index out of range"), undefined) : j[k] = 1));
          i = i + (1) >> 0;
        }
        g = g + (2) >> 0;
      }
      l = f.mapping;
      m = 0;
      while (true) {
        if (!(m < 256)) {
          break;
        }
        n = ((m < 0 || m >= l.length) ? ($throwRuntimeError("index out of range"), undefined) : l[m]);
        f.tableSize = f.tableSize + (((n >> 0))) >> 0;
        m++;
      }
      o = 0;
      p = f.mapping;
      q = 0;
      while (true) {
        if (!(q < 256)) {
          break;
        }
        r = q;
        s = ((q < 0 || q >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[q]);
        if (s === 0) {
          (t = f.mapping, ((r < 0 || r >= t.length) ? ($throwRuntimeError("index out of range"), undefined) : t[r] = ((f.tableSize << 24 >>> 24))));
        } else {
          (u = f.mapping, ((r < 0 || r >= u.length) ? ($throwRuntimeError("index out of range"), undefined) : u[r] = o));
          o = o + (1) << 24 >>> 24;
        }
        q++;
      }
      f.root.table = $makeSlice(CM, f.tableSize);
      v = 0;
      while (true) {
        if (!(v < e.$length)) {
          break;
        }
        f.root.add(((v < 0 || v >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + v]), (w = v + 1 >> 0, ((w < 0 || w >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + w])), e.$length - v >> 0, f);
        v = v + (2) >> 0;
      }
      return f;
    };
    $ptrType(V).prototype.Write = function(e) {
      var e, f;
      f = this;
      f.$set($appendSlice(f.$get(), e));
      return [e.$length, $ifaceNil];
    };
    $ptrType(V).prototype.WriteString = function(e) {
      var e, f;
      f = this;
      f.$set($appendSlice(f.$get(), e));
      return [e.length, $ifaceNil];
    };
    X.ptr.prototype.WriteString = function(e) {
      var e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            g = f.w.Write((new CG($stringToBytes(e))));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: X.ptr.prototype.WriteString
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    X.prototype.WriteString = function(e) {
      return this.$val.WriteString(e);
    };
    Y = function(e) {
      var e, f, g, h, i;
      f = $assertType(e, W, true);
      g = f[0];
      h = f[1];
      if (!h) {
        g = (i = new X.ptr(e), new i.constructor.elem(i));
      }
      return g;
    };
    T.ptr.prototype.Replace = function(e) {
      var e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = [f];
            g = this;
            f[0] = $makeSlice(V, 0, e.length);
            h = g.WriteString((f.$ptr || (f.$ptr = new CN(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, f))), e);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            h;
            $s = -1;
            return ($bytesToString(f[0]));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: T.ptr.prototype.Replace
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    T.prototype.Replace = function(e) {
      return this.$val.Replace(e);
    };
    T.ptr.prototype.WriteString = function(e, f) {
      var aa, ab, ac, ad, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = 0;
            h = $ifaceNil;
            i = this;
            j = Y(e);
            k = 0;
            l = 0;
            m = k;
            n = l;
            o = false;
            p = 0;
          case 1:
            if (!(p <= f.length)) {
              $s = 2;
              continue;
            }
            if (!((p === f.length)) && (i.root.priority === 0)) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            s = (((q = i.mapping, r = f.charCodeAt(p), ((r < 0 || r >= q.length) ? ($throwRuntimeError("index out of range"), undefined) : q[r])) >> 0));
            if ((s === i.tableSize) || (t = i.root.table, ((s < 0 || s >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + s])) === CL.nil) {
              p = p + (1) >> 0;
              $s = 1;
              continue;
            }
          case 4:
            u = i.lookup($substring(f, p), o);
            v = u[0];
            w = u[1];
            x = u[2];
            o = x && (w === 0);
            if (x) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            z = j.WriteString($substring(f, m, p));
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            y = z;
            n = y[0];
            h = y[1];
            g = g + (n) >> 0;
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              $s = -1;
              return [g, h];
            }
            ab = j.WriteString(v);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              ab = ab.$blk();
            }
            if (ab && ab.$blk !== undefined) {
              break s;
            }
            aa = ab;
            n = aa[0];
            h = aa[1];
            g = g + (n) >> 0;
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              $s = -1;
              return [g, h];
            }
            p = p + (w) >> 0;
            m = p;
            $s = 1;
            continue;
          case 6:
            p = p + (1) >> 0;
            $s = 1;
            continue;
          case 2:
            if (!((m === f.length))) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            ad = j.WriteString($substring(f, m));
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              ad = ad.$blk();
            }
            if (ad && ad.$blk !== undefined) {
              break s;
            }
            ac = ad;
            n = ac[0];
            h = ac[1];
            g = g + (n) >> 0;
          case 10:
            $s = -1;
            return [g, h];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: T.ptr.prototype.WriteString
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    T.prototype.WriteString = function(e, f) {
      return this.$val.WriteString(e, f);
    };
    AA = function(e, f) {
      var e, f;
      return new Z.ptr(AE(e), f);
    };
    Z.ptr.prototype.Replace = function(e) {
      var e, f, g, h, i, j, k, l;
      f = this;
      g = CG.nil;
      h = 0;
      i = false;
      j = h;
      k = i;
      while (true) {
        l = f.finder.next($substring(e, j));
        if (l === -1) {
          break;
        }
        k = true;
        g = $appendSlice(g, $substring(e, j, (j + l >> 0)));
        g = $appendSlice(g, f.value);
        j = j + ((l + f.finder.pattern.length >> 0)) >> 0;
      }
      if (!k) {
        return e;
      }
      g = $appendSlice(g, $substring(e, j));
      return ($bytesToString(g));
    };
    Z.prototype.Replace = function(e) {
      return this.$val.Replace(e);
    };
    Z.ptr.prototype.WriteString = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = 0;
            h = $ifaceNil;
            i = this;
            j = Y(e);
            k = 0;
            l = 0;
            m = k;
            n = l;
          case 1:
            o = i.finder.next($substring(f, m));
            if (o === -1) {
              $s = 2;
              continue;
            }
            q = j.WriteString($substring(f, m, (m + o >> 0)));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            p = q;
            n = p[0];
            h = p[1];
            g = g + (n) >> 0;
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              $s = -1;
              return [g, h];
            }
            s = j.WriteString(i.value);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            r = s;
            n = r[0];
            h = r[1];
            g = g + (n) >> 0;
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              $s = -1;
              return [g, h];
            }
            m = m + ((o + i.finder.pattern.length >> 0)) >> 0;
            $s = 1;
            continue;
          case 2:
            u = j.WriteString($substring(f, m));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              u = u.$blk();
            }
            if (u && u.$blk !== undefined) {
              break s;
            }
            t = u;
            n = t[0];
            h = t[1];
            g = g + (n) >> 0;
            $s = -1;
            return [g, h];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Z.ptr.prototype.WriteString
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    Z.prototype.WriteString = function(e, f) {
      return this.$val.WriteString(e, f);
    };
    AB.prototype.Replace = function(e) {
      var e, f, g, h, i;
      f = this.$val;
      g = CG.nil;
      h = 0;
      while (true) {
        if (!(h < e.length)) {
          break;
        }
        i = e.charCodeAt(h);
        if (!(((f.nilCheck, ((i < 0 || i >= f.length) ? ($throwRuntimeError("index out of range"), undefined) : f[i])) === i))) {
          if (g === CG.nil) {
            g = (new CG($stringToBytes(e)));
          }((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h] = (f.nilCheck, ((i < 0 || i >= f.length) ? ($throwRuntimeError("index out of range"), undefined) : f[i])));
        }
        h = h + (1) >> 0;
      }
      if (g === CG.nil) {
        return e;
      }
      return ($bytesToString(g));
    };
    $ptrType(AB).prototype.Replace = function(e) {
      return (new AB(this.$get())).Replace(e);
    };
    AB.prototype.WriteString = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = 0;
            h = $ifaceNil;
            i = this.$val;
            j = 32768;
            if (f.length < j) {
              j = f.length;
            }
            k = $makeSlice(CG, j);
          case 1:
            if (!(f.length > 0)) {
              $s = 2;
              continue;
            }
            l = $copyString(k, f);
            f = $substring(f, l);
            m = $subslice(k, 0, l);
            n = 0;
            while (true) {
              if (!(n < m.$length)) {
                break;
              }
              o = n;
              p = ((n < 0 || n >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + n]);
              ((o < 0 || o >= k.$length) ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + o] = (i.nilCheck, ((p < 0 || p >= i.length) ? ($throwRuntimeError("index out of range"), undefined) : i[p])));
              n++;
            }
            r = e.Write($subslice(k, 0, l));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              r = r.$blk();
            }
            if (r && r.$blk !== undefined) {
              break s;
            }
            q = r;
            s = q[0];
            t = q[1];
            g = g + (s) >> 0;
            if (!($interfaceIsEqual(t, $ifaceNil))) {
              u = g;
              v = t;
              g = u;
              h = v;
              $s = -1;
              return [g, h];
            }
            $s = 1;
            continue;
          case 2:
            w = g;
            x = $ifaceNil;
            g = w;
            h = x;
            $s = -1;
            return [g, h];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AB.prototype.WriteString
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(AB).prototype.WriteString = function(e, f) {
      return (new AB(this.$get())).WriteString(e, f);
    };
    AC.ptr.prototype.Replace = function(e) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x;
      f = this;
      g = e.length;
      h = false;
      if (($imul(f.toReplace.$length, 8)) <= e.length) {
        i = f.toReplace;
        j = 0;
        while (true) {
          if (!(j < i.$length)) {
            break;
          }
          k = ((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j]);
          l = J(e, k);
          if (!((l === 0))) {
            g = g + (($imul(l, (((m = f.replacements, n = k.charCodeAt(0), ((n < 0 || n >= m.length) ? ($throwRuntimeError("index out of range"), undefined) : m[n])).$length - 1 >> 0))))) >> 0;
            h = true;
          }
          j++;
        }
      } else {
        o = 0;
        while (true) {
          if (!(o < e.length)) {
            break;
          }
          p = e.charCodeAt(o);
          if (!((q = f.replacements, ((p < 0 || p >= q.length) ? ($throwRuntimeError("index out of range"), undefined) : q[p])) === CG.nil)) {
            g = g + (((r = f.replacements, ((p < 0 || p >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[p])).$length - 1 >> 0)) >> 0;
            h = true;
          }
          o = o + (1) >> 0;
        }
      }
      if (!h) {
        return e;
      }
      s = $makeSlice(CG, g);
      t = 0;
      u = 0;
      while (true) {
        if (!(u < e.length)) {
          break;
        }
        v = e.charCodeAt(u);
        if (!((w = f.replacements, ((v < 0 || v >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[v])) === CG.nil)) {
          t = t + ($copySlice($subslice(s, t), (x = f.replacements, ((v < 0 || v >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[v])))) >> 0;
        } else {
          ((t < 0 || t >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + t] = v);
          t = t + (1) >> 0;
        }
        u = u + (1) >> 0;
      }
      return ($bytesToString(s));
    };
    AC.prototype.Replace = function(e) {
      return this.$val.Replace(e);
    };
    AC.ptr.prototype.WriteString = function(e, f) {
      var aa, ab, ac, ad, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = 0;
            h = $ifaceNil;
            i = this;
            j = Y(e);
            k = 0;
            l = 0;
          case 1:
            if (!(l < f.length)) {
              $s = 2;
              continue;
            }
            m = f.charCodeAt(l);
            if ((n = i.replacements, ((m < 0 || m >= n.length) ? ($throwRuntimeError("index out of range"), undefined) : n[m])) === CG.nil) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            l = l + (1) >> 0;
            $s = 1;
            continue;
          case 4:
            if (!((k === l))) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            p = j.WriteString($substring(f, k, l));
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            o = p;
            q = o[0];
            r = o[1];
            g = g + (q) >> 0;
            if (!($interfaceIsEqual(r, $ifaceNil))) {
              s = g;
              t = r;
              g = s;
              h = t;
              $s = -1;
              return [g, h];
            }
          case 6:
            k = l + 1 >> 0;
            w = e.Write((v = i.replacements, ((m < 0 || m >= v.length) ? ($throwRuntimeError("index out of range"), undefined) : v[m])));
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              w = w.$blk();
            }
            if (w && w.$blk !== undefined) {
              break s;
            }
            u = w;
            x = u[0];
            y = u[1];
            g = g + (x) >> 0;
            if (!($interfaceIsEqual(y, $ifaceNil))) {
              z = g;
              aa = y;
              g = z;
              h = aa;
              $s = -1;
              return [g, h];
            }
            l = l + (1) >> 0;
            $s = 1;
            continue;
          case 2:
            if (!((k === f.length))) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            ab = 0;
            ad = j.WriteString($substring(f, k));
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              ad = ad.$blk();
            }
            if (ad && ad.$blk !== undefined) {
              break s;
            }
            ac = ad;
            ab = ac[0];
            h = ac[1];
            g = g + (ab) >> 0;
          case 10:
            $s = -1;
            return [g, h];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AC.ptr.prototype.WriteString
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AC.prototype.WriteString = function(e, f) {
      return this.$val.WriteString(e, f);
    };
    AE = function(e) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u;
      f = new AD.ptr(e, CP.zero(), $makeSlice(CQ, e.length));
      g = e.length - 1 >> 0;
      h = f.badCharSkip;
      i = 0;
      while (true) {
        if (!(i < 256)) {
          break;
        }
        j = i;
        (k = f.badCharSkip, ((j < 0 || j >= k.length) ? ($throwRuntimeError("index out of range"), undefined) : k[j] = e.length));
        i++;
      }
      l = 0;
      while (true) {
        if (!(l < g)) {
          break;
        }(m = f.badCharSkip, n = e.charCodeAt(l), ((n < 0 || n >= m.length) ? ($throwRuntimeError("index out of range"), undefined) : m[n] = (g - l >> 0)));
        l = l + (1) >> 0;
      }
      o = g;
      p = g;
      while (true) {
        if (!(p >= 0)) {
          break;
        }
        if (BA(e, $substring(e, (p + 1 >> 0)))) {
          o = p + 1 >> 0;
        }(q = f.goodSuffixSkip, ((p < 0 || p >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + p] = ((o + g >> 0) - p >> 0)));
        p = p - (1) >> 0;
      }
      r = 0;
      while (true) {
        if (!(r < g)) {
          break;
        }
        s = AF(e, $substring(e, 1, (r + 1 >> 0)));
        if (!((e.charCodeAt((r - s >> 0)) === e.charCodeAt((g - s >> 0))))) {
          (t = f.goodSuffixSkip, u = g - s >> 0, ((u < 0 || u >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + u] = ((s + g >> 0) - r >> 0)));
        }
        r = r + (1) >> 0;
      }
      return f;
    };
    AF = function(e, f) {
      var e, f, g;
      g = 0;
      while (true) {
        if (!(g < e.length && g < f.length)) {
          break;
        }
        if (!((e.charCodeAt(((e.length - 1 >> 0) - g >> 0)) === f.charCodeAt(((f.length - 1 >> 0) - g >> 0))))) {
          break;
        }
        g = g + (1) >> 0;
      }
      return g;
    };
    AD.ptr.prototype.next = function(e) {
      var e, f, g, h, i, j, k;
      f = this;
      g = f.pattern.length - 1 >> 0;
      while (true) {
        if (!(g < e.length)) {
          break;
        }
        h = f.pattern.length - 1 >> 0;
        while (true) {
          if (!(h >= 0 && (e.charCodeAt(g) === f.pattern.charCodeAt(h)))) {
            break;
          }
          g = g - (1) >> 0;
          h = h - (1) >> 0;
        }
        if (h < 0) {
          return g + 1 >> 0;
        }
        g = g + (AG((i = f.badCharSkip, j = e.charCodeAt(g), ((j < 0 || j >= i.length) ? ($throwRuntimeError("index out of range"), undefined) : i[j])), (k = f.goodSuffixSkip, ((h < 0 || h >= k.$length) ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + h])))) >> 0;
      }
      return -1;
    };
    AD.prototype.next = function(e) {
      return this.$val.next(e);
    };
    AG = function(e, f) {
      var e, f;
      if (e > f) {
        return e;
      }
      return f;
    };
    AH = function(e, f) {
      var e, f, g, h, i, j, k, l, m;
      g = A.RuneCountInString(e);
      if (f < 0 || f > g) {
        f = g;
      }
      h = $makeSlice(CK, f);
      i = 0;
      while (true) {
        if (!(i < (f - 1 >> 0))) {
          break;
        }
        j = A.DecodeRuneInString(e);
        k = j[0];
        l = j[1];
        ((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i] = $substring(e, 0, l));
        e = $substring(e, l);
        if (k === 65533) {
          ((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i] = "\xEF\xBF\xBD");
        }
        i = i + (1) >> 0;
      }
      if (f > 0) {
        (m = f - 1 >> 0, ((m < 0 || m >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + m] = e));
      }
      return h;
    };
    AK = function(e, f) {
      var e, f;
      return H(e, f) >= 0;
    };
    $pkg.Contains = AK;
    AL = function(e, f) {
      var e, f;
      return AO(e, f) >= 0;
    };
    $pkg.ContainsAny = AL;
    AM = function(e, f) {
      var e, f;
      return AN(e, f) >= 0;
    };
    $pkg.ContainsRune = AM;
    AN = function(e, f) {
      var e, f, g, h, i, j, k;
      if (0 <= f && f < 128) {
        return G(e, ((f << 24 >>> 24)));
      } else if ((f === 65533)) {
        g = e;
        h = 0;
        while (true) {
          if (!(h < g.length)) {
            break;
          }
          i = $decodeRune(g, h);
          j = h;
          k = i[0];
          if (k === 65533) {
            return j;
          }
          h += i[1];
        }
        return -1;
      } else if (!A.ValidRune(f)) {
        return -1;
      } else {
        return H(e, ($encodeRune(f)));
      }
    };
    $pkg.IndexRune = AN;
    AO = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s;
      if (f === "") {
        return -1;
      }
      if (e.length > 8) {
        g = BU(f);
        h = $clone(g[0], BT);
        i = g[1];
        if (i) {
          j = 0;
          while (true) {
            if (!(j < e.length)) {
              break;
            }
            if (new CR(h).contains(e.charCodeAt(j))) {
              return j;
            }
            j = j + (1) >> 0;
          }
          return -1;
        }
      }
      k = e;
      l = 0;
      while (true) {
        if (!(l < k.length)) {
          break;
        }
        m = $decodeRune(k, l);
        n = l;
        o = m[0];
        p = f;
        q = 0;
        while (true) {
          if (!(q < p.length)) {
            break;
          }
          r = $decodeRune(p, q);
          s = r[0];
          if (o === s) {
            return n;
          }
          q += r[1];
        }
        l += m[1];
      }
      return -1;
    };
    $pkg.IndexAny = AO;
    AR = function(e, f, g, h) {
      var e, f, g, h, i, j, k;
      if (h === 0) {
        return CK.nil;
      }
      if (f === "") {
        return AH(e, h);
      }
      if (h < 0) {
        h = J(e, f) + 1 >> 0;
      }
      i = $makeSlice(CK, h);
      h = h - (1) >> 0;
      j = 0;
      while (true) {
        if (!(j < h)) {
          break;
        }
        k = H(e, f);
        if (k < 0) {
          break;
        }((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j] = $substring(e, 0, (k + g >> 0)));
        e = $substring(e, (k + f.length >> 0));
        j = j + (1) >> 0;
      }((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j] = e);
      return $subslice(i, 0, (j + 1 >> 0));
    };
    AU = function(e, f) {
      var e, f;
      return AR(e, f, 0, -1);
    };
    $pkg.Split = AU;
    AX = function(e) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = 0;
            g = 1;
            h = 0;
            i = 0;
            while (true) {
              if (!(i < e.length)) {
                break;
              }
              j = e.charCodeAt(i);
              h = (h | (j)) >>> 0;
              k = ((((j < 0 || j >= AW.length) ? ($throwRuntimeError("index out of range"), undefined) : AW[j]) >> 0));
              f = f + ((g & (~k >> 0))) >> 0;
              g = k;
              i = i + (1) >> 0;
            }
            if (h < 128) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            l = $makeSlice(CK, f);
            m = 0;
            n = 0;
            o = 0;
            while (true) {
              if (!(o < e.length && !(((p = e.charCodeAt(o), ((p < 0 || p >= AW.length) ? ($throwRuntimeError("index out of range"), undefined) : AW[p])) === 0)))) {
                break;
              }
              o = o + (1) >> 0;
            }
            n = o;
            while (true) {
              if (!(o < e.length)) {
                break;
              }
              if ((q = e.charCodeAt(o), ((q < 0 || q >= AW.length) ? ($throwRuntimeError("index out of range"), undefined) : AW[q])) === 0) {
                o = o + (1) >> 0;
                continue;
              }((m < 0 || m >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + m] = $substring(e, n, o));
              m = m + (1) >> 0;
              o = o + (1) >> 0;
              while (true) {
                if (!(o < e.length && !(((r = e.charCodeAt(o), ((r < 0 || r >= AW.length) ? ($throwRuntimeError("index out of range"), undefined) : AW[r])) === 0)))) {
                  break;
                }
                o = o + (1) >> 0;
              }
              n = o;
            }
            if (n < e.length) {
              ((m < 0 || m >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + m] = $substring(e, n));
            }
            $s = -1;
            return l;
          case 2:
            s = AY(e, F.IsSpace);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return s;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AX
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Fields = AX;
    AY = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = $makeSlice(CT, 0, 32);
            h = false;
            i = 0;
            j = e;
            k = 0;
          case 1:
            if (!(k < j.length)) {
              $s = 2;
              continue;
            }
            l = $decodeRune(j, k);
            m = k;
            n = l[0];
            o = f(n);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            if (o) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            if (h) {
              g = $append(g, new CS.ptr(i, m));
              h = false;
            }
            $s = 5;
            continue;
          case 4:
            if (!h) {
              i = m;
              h = true;
            }
          case 5:
            k += l[1];
            $s = 1;
            continue;
          case 2:
            if (h) {
              g = $append(g, new CS.ptr(i, e.length));
            }
            p = $makeSlice(CK, g.$length);
            q = g;
            r = 0;
            while (true) {
              if (!(r < q.$length)) {
                break;
              }
              s = r;
              t = $clone(((r < 0 || r >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + r]), CS);
              ((s < 0 || s >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + s] = $substring(e, t.start, t.end));
              r++;
            }
            $s = -1;
            return p;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AY
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.FieldsFunc = AY;
    AZ = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n;
      g = e.$length;
      if (g === (0)) {
        return "";
      } else if (g === (1)) {
        return (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]);
      } else if (g === (2)) {
        return (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]) + f + (1 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 1]);
      } else if (g === (3)) {
        return (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]) + f + (1 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 1]) + f + (2 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 2]);
      }
      h = $imul(f.length, ((e.$length - 1 >> 0)));
      i = 0;
      while (true) {
        if (!(i < e.$length)) {
          break;
        }
        h = h + (((i < 0 || i >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + i]).length) >> 0;
        i = i + (1) >> 0;
      }
      j = $makeSlice(CG, h);
      k = $copyString(j, (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]));
      l = $subslice(e, 1);
      m = 0;
      while (true) {
        if (!(m < l.$length)) {
          break;
        }
        n = ((m < 0 || m >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + m]);
        k = k + ($copyString($subslice(j, k), f)) >> 0;
        k = k + ($copyString($subslice(j, k), n)) >> 0;
        m++;
      }
      return ($bytesToString(j));
    };
    $pkg.Join = AZ;
    BA = function(e, f) {
      var e, f;
      return e.length >= f.length && $substring(e, 0, f.length) === f;
    };
    $pkg.HasPrefix = BA;
    BB = function(e, f) {
      var e, f;
      return e.length >= f.length && $substring(e, (e.length - f.length >> 0)) === f;
    };
    $pkg.HasSuffix = BB;
    BC = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = CG.nil;
            h = 0;
            i = f;
            j = 0;
          case 1:
            if (!(j < i.length)) {
              $s = 2;
              continue;
            }
            k = $decodeRune(i, j);
            l = j;
            m = k[0];
            n = e(m);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            o = n;
            if (o === m) {
              j += k[1];
              $s = 1;
              continue;
            }
            g = $makeSlice(CG, (f.length + 4 >> 0));
            h = $copyString(g, $substring(f, 0, l));
            if (o >= 0) {
              if (o < 128) {
                ((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h] = ((o << 24 >>> 24)));
                h = h + (1) >> 0;
              } else {
                h = h + (A.EncodeRune($subslice(g, h), o)) >> 0;
              }
            }
            if (m === 65533) {
              p = A.DecodeRuneInString($substring(f, l));
              q = p[1];
              l = l + (q) >> 0;
            } else {
              l = l + (A.RuneLen(m)) >> 0;
            }
            f = $substring(f, l);
            $s = 2;
            continue;
            $s = 1;
            continue;
          case 2:
            if (g === CG.nil) {
              $s = -1;
              return f;
            }
            r = f;
            s = 0;
          case 4:
            if (!(s < r.length)) {
              $s = 5;
              continue;
            }
            t = $decodeRune(r, s);
            u = t[0];
            v = e(u);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            w = v;
            if ((0 <= w && w < 128) && h < g.$length) {
              ((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h] = ((w << 24 >>> 24)));
              h = h + (1) >> 0;
              s += t[1];
              $s = 4;
              continue;
            }
            if (w >= 0) {
              if ((h + 4 >> 0) >= g.$length) {
                x = $makeSlice(CG, ($imul(2, g.$length)));
                $copySlice(x, $subslice(g, 0, h));
                g = x;
              }
              h = h + (A.EncodeRune($subslice(g, h), w)) >> 0;
            }
            s += t[1];
            $s = 4;
            continue;
          case 5:
            $s = -1;
            return ($bytesToString($subslice(g, 0, h)));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BC
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Map = BC;
    BD = function(e, f) {
      var e, f, g, h, i;
      if (f < 0) {
        $panic(new $String("strings: negative Repeat count"));
      } else if (f > 0 && !(((g = ($imul(e.length, f)) / f, (g === g && g !== 1 / 0 && g !== -1 / 0) ? g >> 0 : $throwRuntimeError("integer divide by zero")) === e.length))) {
        $panic(new $String("strings: Repeat count causes overflow"));
      }
      h = $makeSlice(CG, ($imul(e.length, f)));
      i = $copyString(h, e);
      while (true) {
        if (!(i < h.$length)) {
          break;
        }
        $copySlice($subslice(h, i), $subslice(h, 0, i));
        i = $imul(i, (2));
      }
      return ($bytesToString(h));
    };
    $pkg.Repeat = BD;
    BE = function(e) {
      var e, f, g, h, i, j, k, l, m, n, o, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = true;
            g = false;
            h = f;
            i = g;
            j = 0;
            while (true) {
              if (!(j < e.length)) {
                break;
              }
              k = e.charCodeAt(j);
              if (k >= 128) {
                h = false;
                break;
              }
              i = i || (k >= 97 && k <= 122);
              j = j + (1) >> 0;
            }
            if (h) {
              if (!i) {
                $s = -1;
                return e;
              }
              l = $makeSlice(CG, e.length);
              m = 0;
              while (true) {
                if (!(m < e.length)) {
                  break;
                }
                n = e.charCodeAt(m);
                if (n >= 97 && n <= 122) {
                  n = n - (32) << 24 >>> 24;
                }((m < 0 || m >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + m] = n);
                m = m + (1) >> 0;
              }
              $s = -1;
              return ($bytesToString(l));
            }
            o = BC(F.ToUpper, e);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return o;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BE
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.ToUpper = BE;
    BF = function(e) {
      var e, f, g, h, i, j, k, l, m, n, o, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = true;
            g = false;
            h = f;
            i = g;
            j = 0;
            while (true) {
              if (!(j < e.length)) {
                break;
              }
              k = e.charCodeAt(j);
              if (k >= 128) {
                h = false;
                break;
              }
              i = i || (k >= 65 && k <= 90);
              j = j + (1) >> 0;
            }
            if (h) {
              if (!i) {
                $s = -1;
                return e;
              }
              l = $makeSlice(CG, e.length);
              m = 0;
              while (true) {
                if (!(m < e.length)) {
                  break;
                }
                n = e.charCodeAt(m);
                if (n >= 65 && n <= 90) {
                  n = n + (32) << 24 >>> 24;
                }((m < 0 || m >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + m] = n);
                m = m + (1) >> 0;
              }
              $s = -1;
              return ($bytesToString(l));
            }
            o = BC(F.ToLower, e);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return o;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BF
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.ToLower = BF;
    BK = function(e) {
      var e;
      if (e <= 127) {
        if (48 <= e && e <= 57) {
          return false;
        } else if (97 <= e && e <= 122) {
          return false;
        } else if (65 <= e && e <= 90) {
          return false;
        } else if ((e === 95)) {
          return false;
        }
        return true;
      }
      if (F.IsLetter(e) || F.IsDigit(e)) {
        return false;
      }
      return F.IsSpace(e);
    };
    BL = function(e) {
      var e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = [f];
            f[0] = 32;
            g = BC((function(f) {
              return function(g) {
                var g;
                if (BK(f[0])) {
                  f[0] = g;
                  return F.ToTitle(g);
                }
                f[0] = g;
                return g;
              };
            })(f), e);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Title = BL;
    BM = function(e, f) {
      var e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = BR(e, f, false);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = g;
            if (h === -1) {
              $s = -1;
              return "";
            }
            $s = -1;
            return $substring(e, h);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BM
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.TrimLeftFunc = BM;
    BN = function(e, f) {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = BS(e, f, false);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = g;
            if (h >= 0 && e.charCodeAt(h) >= 128) {
              i = A.DecodeRuneInString($substring(e, h));
              j = i[1];
              h = h + (j) >> 0;
            } else {
              h = h + (1) >> 0;
            }
            $s = -1;
            return $substring(e, 0, h);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BN
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.TrimRightFunc = BN;
    BO = function(e, f) {
      var e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = BM(e, f);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = BN(g, f);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return h;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BO
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.TrimFunc = BO;
    BR = function(e, f, g) {
      var e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = e;
            i = 0;
          case 1:
            if (!(i < h.length)) {
              $s = 2;
              continue;
            }
            j = $decodeRune(h, i);
            k = i;
            l = j[0];
            m = f(l);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            if (m === g) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            $s = -1;
            return k;
          case 4:
            i += j[1];
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return -1;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BR
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BS = function(e, f, g) {
      var e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = e.length;
          case 1:
            if (!(h > 0)) {
              $s = 2;
              continue;
            }
            i = A.DecodeLastRuneInString($substring(e, 0, h));
            j = i[0];
            k = i[1];
            h = h - (k) >> 0;
            l = f(j);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            if (l === g) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            $s = -1;
            return h;
          case 4:
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return -1;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BS
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BU = function(e) {
      var e, f, g, h, i, j, k, l, m, n, o;
      f = CU.zero();
      g = false;
      h = 0;
      while (true) {
        if (!(h < e.length)) {
          break;
        }
        i = e.charCodeAt(h);
        if (i >= 128) {
          j = $clone(f, BT);
          k = false;
          BT.copy(f, j);
          g = k;
          return [f, g];
        }
        l = i >>> 5 << 24 >>> 24;
        ((l < 0 || l >= f.length) ? ($throwRuntimeError("index out of range"), undefined) : f[l] = ((((l < 0 || l >= f.length) ? ($throwRuntimeError("index out of range"), undefined) : f[l]) | (((m = ((((i & 31) >>> 0) >>> 0)), m < 32 ? (1 << m) : 0) >>> 0))) >>> 0));
        h = h + (1) >> 0;
      }
      n = $clone(f, BT);
      o = true;
      BT.copy(f, n);
      g = o;
      return [f, g];
    };
    BT.prototype.contains = function(e) {
      var e, f, g, h;
      f = this.$val;
      return !((((((g = e >>> 5 << 24 >>> 24, (f.nilCheck, ((g < 0 || g >= f.length) ? ($throwRuntimeError("index out of range"), undefined) : f[g]))) & (((h = ((((e & 31) >>> 0) >>> 0)), h < 32 ? (1 << h) : 0) >>> 0))) >>> 0)) === 0));
    };
    $ptrType(BT).prototype.contains = function(e) {
      return (new BT(this.$get())).contains(e);
    };
    BZ = function(e) {
      var e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = BO(e, F.IsSpace);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BZ
        };
      }
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.TrimSpace = BZ;
    CA = function(e, f) {
      var e, f;
      if (BA(e, f)) {
        return $substring(e, f.length);
      }
      return e;
    };
    $pkg.TrimPrefix = CA;
    CC = function(e, f, g, h) {
      var e, f, g, h, i, j, k, l, m, n, o, p;
      if (f === g || (h === 0)) {
        return e;
      }
      i = J(e, f);
      if (i === 0) {
        return e;
      } else if (h < 0 || i < h) {
        h = i;
      }
      j = $makeSlice(CG, (e.length + ($imul(h, ((g.length - f.length >> 0)))) >> 0));
      k = 0;
      l = 0;
      m = 0;
      while (true) {
        if (!(m < h)) {
          break;
        }
        n = l;
        if (f.length === 0) {
          if (m > 0) {
            o = A.DecodeRuneInString($substring(e, l));
            p = o[1];
            n = n + (p) >> 0;
          }
        } else {
          n = n + (H($substring(e, l), f)) >> 0;
        }
        k = k + ($copyString($subslice(j, k), $substring(e, l, n))) >> 0;
        k = k + ($copyString($subslice(j, k), g)) >> 0;
        l = n + f.length >> 0;
        m = m + (1) >> 0;
      }
      k = k + ($copyString($subslice(j, k), $substring(e, l))) >> 0;
      return ($bytesToString($subslice(j, 0, k)));
    };
    $pkg.Replace = CC;
    CD = function(e, f) {
      var aa, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      while (true) {
        if (!(!(e === "") && !(f === ""))) {
          break;
        }
        g = 0;
        h = 0;
        i = g;
        j = h;
        if (e.charCodeAt(0) < 128) {
          k = ((e.charCodeAt(0) >> 0));
          l = $substring(e, 1);
          i = k;
          e = l;
        } else {
          m = A.DecodeRuneInString(e);
          n = m[0];
          o = m[1];
          p = n;
          q = $substring(e, o);
          i = p;
          e = q;
        }
        if (f.charCodeAt(0) < 128) {
          r = ((f.charCodeAt(0) >> 0));
          s = $substring(f, 1);
          j = r;
          f = s;
        } else {
          t = A.DecodeRuneInString(f);
          u = t[0];
          v = t[1];
          w = u;
          x = $substring(f, v);
          j = w;
          f = x;
        }
        if (j === i) {
          continue;
        }
        if (j < i) {
          y = i;
          z = j;
          j = y;
          i = z;
        }
        if (j < 128) {
          if (65 <= i && i <= 90 && (j === ((i + 97 >> 0) - 65 >> 0))) {
            continue;
          }
          return false;
        }
        aa = F.SimpleFold(i);
        while (true) {
          if (!(!((aa === i)) && aa < j)) {
            break;
          }
          aa = F.SimpleFold(aa);
        }
        if (aa === j) {
          continue;
        }
        return false;
      }
      return e === f;
    };
    $pkg.EqualFold = CD;
    CF.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "copyCheck",
      name: "copyCheck",
      pkg: "strings",
      typ: $funcType([], [], false)
    }, {
      prop: "Len",
      name: "Len",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Reset",
      name: "Reset",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "grow",
      name: "grow",
      pkg: "strings",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "Grow",
      name: "Grow",
      pkg: "",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "Write",
      name: "Write",
      pkg: "",
      typ: $funcType([CG], [$Int, $error], false)
    }, {
      prop: "WriteByte",
      name: "WriteByte",
      pkg: "",
      typ: $funcType([$Uint8], [$error], false)
    }, {
      prop: "WriteRune",
      name: "WriteRune",
      pkg: "",
      typ: $funcType([$Int32], [$Int, $error], false)
    }, {
      prop: "WriteString",
      name: "WriteString",
      pkg: "",
      typ: $funcType([$String], [$Int, $error], false)
    }];
    CV.methods = [{
      prop: "Len",
      name: "Len",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Size",
      name: "Size",
      pkg: "",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "Read",
      name: "Read",
      pkg: "",
      typ: $funcType([CG], [$Int, $error], false)
    }, {
      prop: "ReadAt",
      name: "ReadAt",
      pkg: "",
      typ: $funcType([CG, $Int64], [$Int, $error], false)
    }, {
      prop: "ReadByte",
      name: "ReadByte",
      pkg: "",
      typ: $funcType([], [$Uint8, $error], false)
    }, {
      prop: "UnreadByte",
      name: "UnreadByte",
      pkg: "",
      typ: $funcType([], [$error], false)
    }, {
      prop: "ReadRune",
      name: "ReadRune",
      pkg: "",
      typ: $funcType([], [$Int32, $Int, $error], false)
    }, {
      prop: "UnreadRune",
      name: "UnreadRune",
      pkg: "",
      typ: $funcType([], [$error], false)
    }, {
      prop: "Seek",
      name: "Seek",
      pkg: "",
      typ: $funcType([$Int64, $Int], [$Int64, $error], false)
    }, {
      prop: "WriteTo",
      name: "WriteTo",
      pkg: "",
      typ: $funcType([D.Writer], [$Int64, $error], false)
    }, {
      prop: "Reset",
      name: "Reset",
      pkg: "",
      typ: $funcType([$String], [], false)
    }];
    CW.methods = [{
      prop: "Replace",
      name: "Replace",
      pkg: "",
      typ: $funcType([$String], [$String], false)
    }, {
      prop: "WriteString",
      name: "WriteString",
      pkg: "",
      typ: $funcType([D.Writer, $String], [$Int, $error], false)
    }];
    CL.methods = [{
      prop: "add",
      name: "add",
      pkg: "strings",
      typ: $funcType([$String, $String, $Int, CX], [], false)
    }];
    CX.methods = [{
      prop: "lookup",
      name: "lookup",
      pkg: "strings",
      typ: $funcType([$String, $Bool], [$String, $Int, $Bool], false)
    }, {
      prop: "Replace",
      name: "Replace",
      pkg: "",
      typ: $funcType([$String], [$String], false)
    }, {
      prop: "WriteString",
      name: "WriteString",
      pkg: "",
      typ: $funcType([D.Writer, $String], [$Int, $error], false)
    }];
    CN.methods = [{
      prop: "Write",
      name: "Write",
      pkg: "",
      typ: $funcType([CG], [$Int, $error], false)
    }, {
      prop: "WriteString",
      name: "WriteString",
      pkg: "",
      typ: $funcType([$String], [$Int, $error], false)
    }];
    X.methods = [{
      prop: "WriteString",
      name: "WriteString",
      pkg: "",
      typ: $funcType([$String], [$Int, $error], false)
    }];
    CY.methods = [{
      prop: "Replace",
      name: "Replace",
      pkg: "",
      typ: $funcType([$String], [$String], false)
    }, {
      prop: "WriteString",
      name: "WriteString",
      pkg: "",
      typ: $funcType([D.Writer, $String], [$Int, $error], false)
    }];
    CI.methods = [{
      prop: "Replace",
      name: "Replace",
      pkg: "",
      typ: $funcType([$String], [$String], false)
    }, {
      prop: "WriteString",
      name: "WriteString",
      pkg: "",
      typ: $funcType([D.Writer, $String], [$Int, $error], false)
    }];
    CZ.methods = [{
      prop: "Replace",
      name: "Replace",
      pkg: "",
      typ: $funcType([$String], [$String], false)
    }, {
      prop: "WriteString",
      name: "WriteString",
      pkg: "",
      typ: $funcType([D.Writer, $String], [$Int, $error], false)
    }];
    CO.methods = [{
      prop: "next",
      name: "next",
      pkg: "strings",
      typ: $funcType([$String], [$Int], false)
    }];
    CR.methods = [{
      prop: "contains",
      name: "contains",
      pkg: "strings",
      typ: $funcType([$Uint8], [$Bool], false)
    }];
    K.init("strings", [{
      prop: "addr",
      name: "addr",
      embedded: false,
      exported: false,
      typ: CF,
      tag: ""
    }, {
      prop: "buf",
      name: "buf",
      embedded: false,
      exported: false,
      typ: CG,
      tag: ""
    }]);
    N.init("strings", [{
      prop: "s",
      name: "s",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "i",
      name: "i",
      embedded: false,
      exported: false,
      typ: $Int64,
      tag: ""
    }, {
      prop: "prevRune",
      name: "prevRune",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }]);
    P.init("strings", [{
      prop: "r",
      name: "r",
      embedded: false,
      exported: false,
      typ: Q,
      tag: ""
    }]);
    Q.init([{
      prop: "Replace",
      name: "Replace",
      pkg: "",
      typ: $funcType([$String], [$String], false)
    }, {
      prop: "WriteString",
      name: "WriteString",
      pkg: "",
      typ: $funcType([D.Writer, $String], [$Int, $error], false)
    }]);
    S.init("strings", [{
      prop: "value",
      name: "value",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "priority",
      name: "priority",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "prefix",
      name: "prefix",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "next",
      name: "next",
      embedded: false,
      exported: false,
      typ: CL,
      tag: ""
    }, {
      prop: "table",
      name: "table",
      embedded: false,
      exported: false,
      typ: CM,
      tag: ""
    }]);
    T.init("strings", [{
      prop: "root",
      name: "root",
      embedded: false,
      exported: false,
      typ: S,
      tag: ""
    }, {
      prop: "tableSize",
      name: "tableSize",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "mapping",
      name: "mapping",
      embedded: false,
      exported: false,
      typ: CH,
      tag: ""
    }]);
    V.init($Uint8);
    W.init([{
      prop: "WriteString",
      name: "WriteString",
      pkg: "",
      typ: $funcType([$String], [$Int, $error], false)
    }]);
    X.init("strings", [{
      prop: "w",
      name: "w",
      embedded: false,
      exported: false,
      typ: D.Writer,
      tag: ""
    }]);
    Z.init("strings", [{
      prop: "finder",
      name: "finder",
      embedded: false,
      exported: false,
      typ: CO,
      tag: ""
    }, {
      prop: "value",
      name: "value",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }]);
    AB.init($Uint8, 256);
    AC.init("strings", [{
      prop: "replacements",
      name: "replacements",
      embedded: false,
      exported: false,
      typ: CJ,
      tag: ""
    }, {
      prop: "toReplace",
      name: "toReplace",
      embedded: false,
      exported: false,
      typ: CK,
      tag: ""
    }]);
    AD.init("strings", [{
      prop: "pattern",
      name: "pattern",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "badCharSkip",
      name: "badCharSkip",
      embedded: false,
      exported: false,
      typ: CP,
      tag: ""
    }, {
      prop: "goodSuffixSkip",
      name: "goodSuffixSkip",
      embedded: false,
      exported: false,
      typ: CQ,
      tag: ""
    }]);
    BT.init($Uint32, 8);
    CS.init("strings", [{
      prop: "start",
      name: "start",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "end",
      name: "end",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = C.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = F.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            AW = $toNativeArray($kindUint8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["unicode/utf16"] = (function() {
    var $pkg = {},
      $init, A, B;
    A = function(a) {
      var a;
      return 55296 <= a && a < 57344;
    };
    $pkg.IsSurrogate = A;
    B = function(a, b) {
      var a, b;
      if (55296 <= a && a < 56320 && 56320 <= b && b < 57344) {
        return ((((a - 55296 >> 0)) << 10 >> 0) | ((b - 56320 >> 0))) + 65536 >> 0;
      }
      return 65533;
    };
    $pkg.DecodeRune = B;
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["encoding/json"] = (function() {
    var $pkg = {},
      $init, A, B, C, D, E, N, O, K, F, L, G, M, H, I, J, Q, R, T, U, W, Y, AJ, AK, AL, AN, AP, AS, AU, AV, BK, BQ, BS, BV, BX, BZ, CB, CG, CH, CJ, CY, CZ, EH, EN, EO, ER, ET, EU, EV, EW, EX, EZ, FA, FB, FC, FD, FE, FF, FG, FH, FI, FJ, FL, FM, FO, FP, FQ, FR, FT, FU, FV, FW, FX, FY, FZ, GA, GB, GC, GD, GE, GF, X, AA, AB, AC, AO, AQ, AW, AZ, BA, BL, BM, CM, EP, EQ, a, b, c, P, V, Z, AD, AE, AF, AG, AR, AT, AX, AY, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BN, BO, BP, BR, BT, BU, BW, BY, CA, CC, CD, CE, CF, CI, CK, CL, CN, CO, CP, CQ, CR, CT, CX, DA, DB, DC, DD, DE, DF, DG, DH, DI, DJ, DK, DL, DM, DN, DO, DP, DQ, DR, DS, DT, DU, DV, DW, DX, DY, DZ, EA, EB, EC, ED, EE, EF, EG, EI, EJ, ES;
    A = $packages["bytes"];
    B = $packages["encoding"];
    C = $packages["encoding/base64"];
    D = $packages["errors"];
    E = $packages["fmt"];
    N = $packages["github.com/gopherjs/gopherjs/nosync"];
    O = $packages["io"];
    K = $packages["math"];
    F = $packages["reflect"];
    L = $packages["sort"];
    G = $packages["strconv"];
    M = $packages["strings"];
    H = $packages["unicode"];
    I = $packages["unicode/utf16"];
    J = $packages["unicode/utf8"];
    Q = $pkg.Unmarshaler = $newType(8, $kindInterface, "json.Unmarshaler", true, "encoding/json", true, null);
    R = $pkg.UnmarshalTypeError = $newType(0, $kindStruct, "json.UnmarshalTypeError", true, "encoding/json", true, function(Value_, Type_, Offset_, Struct_, Field_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Value = "";
        this.Type = $ifaceNil;
        this.Offset = new $Int64(0, 0);
        this.Struct = "";
        this.Field = "";
        return;
      }
      this.Value = Value_;
      this.Type = Type_;
      this.Offset = Offset_;
      this.Struct = Struct_;
      this.Field = Field_;
    });
    T = $pkg.InvalidUnmarshalError = $newType(0, $kindStruct, "json.InvalidUnmarshalError", true, "encoding/json", true, function(Type_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Type = $ifaceNil;
        return;
      }
      this.Type = Type_;
    });
    U = $pkg.Number = $newType(8, $kindString, "json.Number", true, "encoding/json", true, null);
    W = $pkg.decodeState = $newType(0, $kindStruct, "json.decodeState", true, "encoding/json", false, function(data_, off_, opcode_, scan_, errorContext_, savedError_, useNumber_, disallowUnknownFields_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.data = EU.nil;
        this.off = 0;
        this.opcode = 0;
        this.scan = new CZ.ptr($throwNilPointerError, false, EZ.nil, $ifaceNil, new $Int64(0, 0));
        this.errorContext = new FA.ptr("", "");
        this.savedError = $ifaceNil;
        this.useNumber = false;
        this.disallowUnknownFields = false;
        return;
      }
      this.data = data_;
      this.off = off_;
      this.opcode = opcode_;
      this.scan = scan_;
      this.errorContext = errorContext_;
      this.savedError = savedError_;
      this.useNumber = useNumber_;
      this.disallowUnknownFields = disallowUnknownFields_;
    });
    Y = $pkg.unquotedValue = $newType(0, $kindStruct, "json.unquotedValue", true, "encoding/json", false, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    AJ = $pkg.Marshaler = $newType(8, $kindInterface, "json.Marshaler", true, "encoding/json", true, null);
    AK = $pkg.UnsupportedTypeError = $newType(0, $kindStruct, "json.UnsupportedTypeError", true, "encoding/json", true, function(Type_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Type = $ifaceNil;
        return;
      }
      this.Type = Type_;
    });
    AL = $pkg.UnsupportedValueError = $newType(0, $kindStruct, "json.UnsupportedValueError", true, "encoding/json", true, function(Value_, Str_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Value = new F.Value.ptr(FC.nil, 0, 0);
        this.Str = "";
        return;
      }
      this.Value = Value_;
      this.Str = Str_;
    });
    AN = $pkg.MarshalerError = $newType(0, $kindStruct, "json.MarshalerError", true, "encoding/json", true, function(Type_, Err_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Type = $ifaceNil;
        this.Err = $ifaceNil;
        return;
      }
      this.Type = Type_;
      this.Err = Err_;
    });
    AP = $pkg.encodeState = $newType(0, $kindStruct, "json.encodeState", true, "encoding/json", false, function(Buffer_, scratch_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Buffer = new A.Buffer.ptr(EU.nil, 0, FF.zero(), 0);
        this.scratch = FF.zero();
        return;
      }
      this.Buffer = Buffer_;
      this.scratch = scratch_;
    });
    AS = $pkg.jsonError = $newType(0, $kindStruct, "json.jsonError", true, "encoding/json", false, function(error_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.error = $ifaceNil;
        return;
      }
      this.error = error_;
    });
    AU = $pkg.encOpts = $newType(0, $kindStruct, "json.encOpts", true, "encoding/json", false, function(quoted_, escapeHTML_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.quoted = false;
        this.escapeHTML = false;
        return;
      }
      this.quoted = quoted_;
      this.escapeHTML = escapeHTML_;
    });
    AV = $pkg.encoderFunc = $newType(4, $kindFunc, "json.encoderFunc", true, "encoding/json", false, null);
    BK = $pkg.floatEncoder = $newType(4, $kindInt, "json.floatEncoder", true, "encoding/json", false, null);
    BQ = $pkg.structEncoder = $newType(0, $kindStruct, "json.structEncoder", true, "encoding/json", false, function(fields_, fieldEncs_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.fields = FH.nil;
        this.fieldEncs = FI.nil;
        return;
      }
      this.fields = fields_;
      this.fieldEncs = fieldEncs_;
    });
    BS = $pkg.mapEncoder = $newType(0, $kindStruct, "json.mapEncoder", true, "encoding/json", false, function(elemEnc_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.elemEnc = $throwNilPointerError;
        return;
      }
      this.elemEnc = elemEnc_;
    });
    BV = $pkg.sliceEncoder = $newType(0, $kindStruct, "json.sliceEncoder", true, "encoding/json", false, function(arrayEnc_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.arrayEnc = $throwNilPointerError;
        return;
      }
      this.arrayEnc = arrayEnc_;
    });
    BX = $pkg.arrayEncoder = $newType(0, $kindStruct, "json.arrayEncoder", true, "encoding/json", false, function(elemEnc_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.elemEnc = $throwNilPointerError;
        return;
      }
      this.elemEnc = elemEnc_;
    });
    BZ = $pkg.ptrEncoder = $newType(0, $kindStruct, "json.ptrEncoder", true, "encoding/json", false, function(elemEnc_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.elemEnc = $throwNilPointerError;
        return;
      }
      this.elemEnc = elemEnc_;
    });
    CB = $pkg.condAddrEncoder = $newType(0, $kindStruct, "json.condAddrEncoder", true, "encoding/json", false, function(canAddrEnc_, elseEnc_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.canAddrEnc = $throwNilPointerError;
        this.elseEnc = $throwNilPointerError;
        return;
      }
      this.canAddrEnc = canAddrEnc_;
      this.elseEnc = elseEnc_;
    });
    CG = $pkg.reflectWithString = $newType(0, $kindStruct, "json.reflectWithString", true, "encoding/json", false, function(v_, s_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.v = new F.Value.ptr(FC.nil, 0, 0);
        this.s = "";
        return;
      }
      this.v = v_;
      this.s = s_;
    });
    CH = $pkg.field = $newType(0, $kindStruct, "json.field", true, "encoding/json", false, function(name_, nameBytes_, equalFold_, tag_, index_, typ_, omitEmpty_, quoted_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.name = "";
        this.nameBytes = EU.nil;
        this.equalFold = $throwNilPointerError;
        this.tag = false;
        this.index = EZ.nil;
        this.typ = $ifaceNil;
        this.omitEmpty = false;
        this.quoted = false;
        return;
      }
      this.name = name_;
      this.nameBytes = nameBytes_;
      this.equalFold = equalFold_;
      this.tag = tag_;
      this.index = index_;
      this.typ = typ_;
      this.omitEmpty = omitEmpty_;
      this.quoted = quoted_;
    });
    CJ = $pkg.byIndex = $newType(12, $kindSlice, "json.byIndex", true, "encoding/json", false, null);
    CY = $pkg.SyntaxError = $newType(0, $kindStruct, "json.SyntaxError", true, "encoding/json", true, function(msg_, Offset_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.msg = "";
        this.Offset = new $Int64(0, 0);
        return;
      }
      this.msg = msg_;
      this.Offset = Offset_;
    });
    CZ = $pkg.scanner = $newType(0, $kindStruct, "json.scanner", true, "encoding/json", false, function(step_, endTop_, parseState_, err_, bytes_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.step = $throwNilPointerError;
        this.endTop = false;
        this.parseState = EZ.nil;
        this.err = $ifaceNil;
        this.bytes = new $Int64(0, 0);
        return;
      }
      this.step = step_;
      this.endTop = endTop_;
      this.parseState = parseState_;
      this.err = err_;
      this.bytes = bytes_;
    });
    EH = $pkg.Decoder = $newType(0, $kindStruct, "json.Decoder", true, "encoding/json", true, function(r_, buf_, d_, scanp_, scanned_, scan_, err_, tokenState_, tokenStack_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.r = $ifaceNil;
        this.buf = EU.nil;
        this.d = new W.ptr(EU.nil, 0, 0, new CZ.ptr($throwNilPointerError, false, EZ.nil, $ifaceNil, new $Int64(0, 0)), new FA.ptr("", ""), $ifaceNil, false, false);
        this.scanp = 0;
        this.scanned = new $Int64(0, 0);
        this.scan = new CZ.ptr($throwNilPointerError, false, EZ.nil, $ifaceNil, new $Int64(0, 0));
        this.err = $ifaceNil;
        this.tokenState = 0;
        this.tokenStack = EZ.nil;
        return;
      }
      this.r = r_;
      this.buf = buf_;
      this.d = d_;
      this.scanp = scanp_;
      this.scanned = scanned_;
      this.scan = scan_;
      this.err = err_;
      this.tokenState = tokenState_;
      this.tokenStack = tokenStack_;
    });
    EN = $pkg.Token = $newType(8, $kindInterface, "json.Token", true, "encoding/json", true, null);
    EO = $pkg.Delim = $newType(4, $kindInt32, "json.Delim", true, "encoding/json", true, null);
    ER = $pkg.tagOptions = $newType(8, $kindString, "json.tagOptions", true, "encoding/json", false, null);
    ET = $sliceType($emptyInterface);
    EU = $sliceType($Uint8);
    EV = $ptrType(B.TextUnmarshaler);
    EW = $ptrType(AJ);
    EX = $ptrType(B.TextMarshaler);
    EZ = $sliceType($Int);
    FA = $structType("", [{
      prop: "Struct",
      name: "Struct",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Field",
      name: "Field",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }]);
    FB = $ptrType(R);
    FC = $ptrType(F.rtype);
    FD = $mapType($String, $emptyInterface);
    FE = $ptrType(CH);
    FF = $arrayType($Uint8, 64);
    FG = $ptrType(AP);
    FH = $sliceType(CH);
    FI = $sliceType(AV);
    FJ = $sliceType(CG);
    FL = $ptrType($String);
    FM = $ptrType($emptyInterface);
    FO = $ptrType(T);
    FP = $ptrType(W);
    FQ = $ptrType(AK);
    FR = $ptrType(AL);
    FT = $ptrType(AN);
    FU = $ptrType(BQ);
    FV = $ptrType(BS);
    FW = $ptrType(BV);
    FX = $ptrType(BX);
    FY = $ptrType(BZ);
    FZ = $ptrType(CB);
    GA = $ptrType(CG);
    GB = $funcType([EU, EU], [$Bool], false);
    GC = $ptrType(CY);
    GD = $ptrType(CZ);
    GE = $funcType([GD, $Uint8], [$Int], false);
    GF = $ptrType(EH);
    P = function(d, e) {
      var d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = new W.ptr(EU.nil, 0, 0, new CZ.ptr($throwNilPointerError, false, EZ.nil, $ifaceNil, new $Int64(0, 0)), new FA.ptr("", ""), $ifaceNil, false, false);
            g = CX(d, f.scan);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = g;
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              $s = -1;
              return h;
            }
            f.init(d);
            i = f.unmarshal(e);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return i;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Unmarshal = P;
    R.ptr.prototype.Error = function() {
      var d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            if (!(d.Struct === "") || !(d.Field === "")) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            e = d.Type.String();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return "json: cannot unmarshal " + d.Value + " into Go struct field " + d.Struct + "." + d.Field + " of type " + e;
          case 2:
            f = d.Type.String();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return "json: cannot unmarshal " + d.Value + " into Go value of type " + f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: R.ptr.prototype.Error
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    R.prototype.Error = function() {
      return this.$val.Error();
    };
    T.ptr.prototype.Error = function() {
      var d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            if ($interfaceIsEqual(d.Type, $ifaceNil)) {
              $s = -1;
              return "json: Unmarshal(nil)";
            }
            e = d.Type.Kind();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            if (!((e === 22))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            f = d.Type.String();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return "json: Unmarshal(non-pointer " + f + ")";
          case 2:
            g = d.Type.String();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return "json: Unmarshal(nil " + g + ")";
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: T.ptr.prototype.Error
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    T.prototype.Error = function() {
      return this.$val.Error();
    };
    W.ptr.prototype.unmarshal = function(d) {
      var d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            f = F.ValueOf(d);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            g = f;
            if (!(($clone(g, F.Value).Kind() === 22)) || $clone(g, F.Value).IsNil()) {
              $s = -1;
              return new T.ptr(F.TypeOf(d));
            }
            e.scan.reset();
            $r = e.scanWhile(9);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            h = e.value($clone(g, F.Value));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            i = h;
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              $s = -1;
              return i;
            }
            $s = -1;
            return e.savedError;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: W.ptr.prototype.unmarshal
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    W.prototype.unmarshal = function(d) {
      return this.$val.unmarshal(d);
    };
    U.prototype.String = function() {
      var d;
      d = this.$val;
      return (d);
    };
    $ptrType(U).prototype.String = function() {
      return new U(this.$get()).String();
    };
    U.prototype.Float64 = function() {
      var d;
      d = this.$val;
      return G.ParseFloat((d), 64);
    };
    $ptrType(U).prototype.Float64 = function() {
      return new U(this.$get()).Float64();
    };
    U.prototype.Int64 = function() {
      var d;
      d = this.$val;
      return G.ParseInt((d), 10, 64);
    };
    $ptrType(U).prototype.Int64 = function() {
      return new U(this.$get()).Int64();
    };
    V = function(d) {
      var d;
      if (d === "") {
        return false;
      }
      if (d.charCodeAt(0) === 45) {
        d = $substring(d, 1);
        if (d === "") {
          return false;
        }
      }
      if ((d.charCodeAt(0) === 48)) {
        d = $substring(d, 1);
      } else if (49 <= d.charCodeAt(0) && d.charCodeAt(0) <= 57) {
        d = $substring(d, 1);
        while (true) {
          if (!(d.length > 0 && 48 <= d.charCodeAt(0) && d.charCodeAt(0) <= 57)) {
            break;
          }
          d = $substring(d, 1);
        }
      } else {
        return false;
      }
      if (d.length >= 2 && (d.charCodeAt(0) === 46) && 48 <= d.charCodeAt(1) && d.charCodeAt(1) <= 57) {
        d = $substring(d, 2);
        while (true) {
          if (!(d.length > 0 && 48 <= d.charCodeAt(0) && d.charCodeAt(0) <= 57)) {
            break;
          }
          d = $substring(d, 1);
        }
      }
      if (d.length >= 2 && ((d.charCodeAt(0) === 101) || (d.charCodeAt(0) === 69))) {
        d = $substring(d, 1);
        if ((d.charCodeAt(0) === 43) || (d.charCodeAt(0) === 45)) {
          d = $substring(d, 1);
          if (d === "") {
            return false;
          }
        }
        while (true) {
          if (!(d.length > 0 && 48 <= d.charCodeAt(0) && d.charCodeAt(0) <= 57)) {
            break;
          }
          d = $substring(d, 1);
        }
      }
      return d === "";
    };
    W.ptr.prototype.readIndex = function() {
      var d;
      d = this;
      return d.off - 1 >> 0;
    };
    W.prototype.readIndex = function() {
      return this.$val.readIndex();
    };
    W.ptr.prototype.init = function(d) {
      var d, e;
      e = this;
      e.data = d;
      e.off = 0;
      e.savedError = $ifaceNil;
      e.errorContext.Struct = "";
      e.errorContext.Field = "";
      return e;
    };
    W.prototype.init = function(d) {
      return this.$val.init(d);
    };
    W.ptr.prototype.saveError = function(d) {
      var d, e;
      e = this;
      if ($interfaceIsEqual(e.savedError, $ifaceNil)) {
        e.savedError = e.addErrorContext(d);
      }
    };
    W.prototype.saveError = function(d) {
      return this.$val.saveError(d);
    };
    W.ptr.prototype.addErrorContext = function(d) {
      var d, e, f, g;
      e = this;
      if (!(e.errorContext.Struct === "") || !(e.errorContext.Field === "")) {
        f = d;
        if ($assertType(f, FB, true)[1]) {
          g = f.$val;
          g.Struct = e.errorContext.Struct;
          g.Field = e.errorContext.Field;
          return g;
        }
      }
      return d;
    };
    W.prototype.addErrorContext = function(d) {
      return this.$val.addErrorContext(d);
    };
    W.ptr.prototype.skip = function() {
      var d, e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = d.scan;
            f = d.data;
            g = d.off;
            h = e;
            i = f;
            j = g;
            k = h.parseState.$length;
          case 1:
            l = h.step(h, ((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            m = l;
            j = j + (1) >> 0;
            if (h.parseState.$length < k) {
              d.off = j;
              d.opcode = m;
              $s = -1;
              return;
            }
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: W.ptr.prototype.skip
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    W.prototype.skip = function() {
      return this.$val.skip();
    };
    W.ptr.prototype.scanNext = function() {
      var d, e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = d.scan;
            f = d.data;
            g = d.off;
            h = e;
            i = f;
            j = g;
            if (j < i.$length) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            k = h.step(h, ((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j]));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            d.opcode = k;
            d.off = j + 1 >> 0;
            $s = 3;
            continue;
          case 2:
            l = h.eof();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            d.opcode = l;
            d.off = i.$length + 1 >> 0;
          case 3:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: W.ptr.prototype.scanNext
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    W.prototype.scanNext = function() {
      return this.$val.scanNext();
    };
    W.ptr.prototype.scanWhile = function(d) {
      var d, e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            f = e.scan;
            g = e.data;
            h = e.off;
            i = f;
            j = g;
            k = h;
          case 1:
            if (!(k < e.data.$length)) {
              $s = 2;
              continue;
            }
            l = i.step(i, ((k < 0 || k >= j.$length) ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + k]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            m = l;
            k = k + (1) >> 0;
            if (!((m === d))) {
              e.opcode = m;
              e.off = k;
              $s = -1;
              return;
            }
            $s = 1;
            continue;
          case 2:
            e.off = e.data.$length + 1 >> 0;
            n = e.scan.eof();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            e.opcode = n;
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: W.ptr.prototype.scanWhile
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    W.prototype.scanWhile = function(d) {
      return this.$val.scanWhile(d);
    };
    W.ptr.prototype.value = function(d) {
      var d, e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            f = e.opcode;
            if (f === (6)) {
              $s = 2;
              continue;
            }
            if (f === (2)) {
              $s = 3;
              continue;
            }
            if (f === (1)) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 2:
            if ($clone(d, F.Value).IsValid()) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            g = e.array($clone(d, F.Value));
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = g;
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              $s = -1;
              return h;
            }
            $s = 9;
            continue;
          case 8:
            $r = e.skip();
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 9:
            $r = e.scanNext();
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 6;
            continue;
          case 3:
            if ($clone(d, F.Value).IsValid()) {
              $s = 13;
              continue;
            }
            $s = 14;
            continue;
          case 13:
            i = e.object($clone(d, F.Value));
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            j = i;
            if (!($interfaceIsEqual(j, $ifaceNil))) {
              $s = -1;
              return j;
            }
            $s = 15;
            continue;
          case 14:
            $r = e.skip();
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 15:
            $r = e.scanNext();
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 6;
            continue;
          case 4:
            k = e.readIndex();
            $r = e.scanWhile(0);
            $s = 19;
          case 19:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            if ($clone(d, F.Value).IsValid()) {
              $s = 20;
              continue;
            }
            $s = 21;
            continue;
          case 20:
            l = e.literalStore($subslice(e.data, k, e.readIndex()), $clone(d, F.Value), false);
            $s = 22;
          case 22:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            m = l;
            if (!($interfaceIsEqual(m, $ifaceNil))) {
              $s = -1;
              return m;
            }
          case 21:
            $s = 6;
            continue;
          case 5:
            $s = -1;
            return X;
          case 6:
          case 1:
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: W.ptr.prototype.value
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    W.prototype.value = function(d) {
      return this.$val.value(d);
    };
    W.ptr.prototype.valueQuoted = function() {
      var d, e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = d.opcode;
            if (e === (6)) {
              $s = 2;
              continue;
            }
            if (e === (2)) {
              $s = 3;
              continue;
            }
            if (e === (1)) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 2:
            $r = d.skip();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = d.scanNext();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 6;
            continue;
          case 3:
            $r = d.skip();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = d.scanNext();
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 6;
            continue;
          case 4:
            g = d.literalInterface();
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
            h = f[0];
            i = f[1];
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              $s = -1;
              return [$ifaceNil, i];
            }
            j = h;
            if (j === $ifaceNil || $assertType(j, $String, true)[1]) {
              $s = -1;
              return [h, $ifaceNil];
            }
            $s = 6;
            continue;
          case 5:
            $s = -1;
            return [$ifaceNil, X];
          case 6:
          case 1:
            $s = -1;
            return [(k = new Y.ptr(), new k.constructor.elem(k)), $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: W.ptr.prototype.valueQuoted
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    W.prototype.valueQuoted = function() {
      return this.$val.valueQuoted();
    };
    Z = function(d, e) {
      var aa, ab, ac, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = d;
            g = false;
            if (!(!(($clone(d, F.Value).Kind() === 22)))) {
              h = false;
              $s = 3;
              continue s;
            }
            i = $clone(d, F.Value).Type().Name();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = !(i === "");
          case 3:
            if (h && $clone(d, F.Value).CanAddr()) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            g = true;
            d = $clone(d, F.Value).Addr();
          case 2:
          case 5:
            if (($clone(d, F.Value).Kind() === 20) && !$clone(d, F.Value).IsNil()) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            j = $clone(d, F.Value).Elem();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            k = j;
            if (!(($clone(k, F.Value).Kind() === 22) && !$clone(k, F.Value).IsNil())) {
              l = false;
              $s = 12;
              continue s;
            }
            if (!e) {
              m = true;
              $s = 13;
              continue s;
            }
            n = $clone(k, F.Value).Elem();
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            o = $clone(n, F.Value).Kind();
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            m = o === 22;
          case 13:
            l = m;
          case 12:
            if (l) {
              $s = 10;
              continue;
            }
            $s = 11;
            continue;
          case 10:
            g = false;
            d = k;
            $s = 5;
            continue;
          case 11:
          case 8:
            if (!(($clone(d, F.Value).Kind() === 22))) {
              $s = 6;
              continue;
            }
            p = $clone(d, F.Value).Elem();
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            q = $clone(p, F.Value).Kind();
            $s = 19;
          case 19:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            if (!((q === 22)) && e && $clone(d, F.Value).CanSet()) {
              $s = 16;
              continue;
            }
            $s = 17;
            continue;
          case 16:
            $s = 6;
            continue;
          case 17:
            if ($clone(d, F.Value).IsNil()) {
              $s = 20;
              continue;
            }
            $s = 21;
            continue;
          case 20:
            r = $clone(d, F.Value).Type().Elem();
            $s = 22;
          case 22:
            if ($c) {
              $c = false;
              r = r.$blk();
            }
            if (r && r.$blk !== undefined) {
              break s;
            }
            s = F.New(r);
            $s = 23;
          case 23:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            $r = $clone(d, F.Value).Set($clone(s, F.Value));
            $s = 24;
          case 24:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 21:
            t = $clone(d, F.Value).Type().NumMethod();
            $s = 27;
          case 27:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            if (t > 0) {
              $s = 25;
              continue;
            }
            $s = 26;
            continue;
          case 25:
            v = $clone(d, F.Value).Interface();
            $s = 28;
          case 28:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            u = $assertType(v, Q, true);
            w = u[0];
            x = u[1];
            if (x) {
              $s = -1;
              return [w, $ifaceNil, new F.Value.ptr(FC.nil, 0, 0)];
            }
            if (!e) {
              $s = 29;
              continue;
            }
            $s = 30;
            continue;
          case 29:
            z = $clone(d, F.Value).Interface();
            $s = 31;
          case 31:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            y = $assertType(z, B.TextUnmarshaler, true);
            aa = y[0];
            ab = y[1];
            if (ab) {
              $s = -1;
              return [$ifaceNil, aa, new F.Value.ptr(FC.nil, 0, 0)];
            }
          case 30:
          case 26:
            if (g) {
              $s = 32;
              continue;
            }
            $s = 33;
            continue;
          case 32:
            d = f;
            g = false;
            $s = 34;
            continue;
          case 33:
            ac = $clone(d, F.Value).Elem();
            $s = 35;
          case 35:
            if ($c) {
              $c = false;
              ac = ac.$blk();
            }
            if (ac && ac.$blk !== undefined) {
              break s;
            }
            d = ac;
          case 34:
            $s = 5;
            continue;
          case 6:
            $s = -1;
            return [$ifaceNil, $ifaceNil, d];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Z
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    W.ptr.prototype.array = function(d) {
      var aa, ab, ac, ad, ae, af, ag, ah, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            g = Z($clone(d, F.Value), false);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
            h = f[0];
            i = f[1];
            j = f[2];
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            k = e.readIndex();
            $r = e.skip();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            l = h.UnmarshalJSON($subslice(e.data, k, e.off));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return l;
          case 3:
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            e.saveError(new R.ptr("array", $clone(d, F.Value).Type(), (new $Int64(0, e.off)), "", ""));
            $r = e.skip();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return $ifaceNil;
          case 7:
            d = j;
            m = $clone(d, F.Value).Kind();
            if (m === (20)) {
              $s = 10;
              continue;
            }
            if (m === (17)) {
              $s = 11;
              continue;
            }
            if (m === (23)) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 10:
            if ($clone(d, F.Value).NumMethod() === 0) {
              $s = 15;
              continue;
            }
            $s = 16;
            continue;
          case 15:
            o = e.arrayInterface();
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            n = o;
            p = n[0];
            q = n[1];
            if (!($interfaceIsEqual(q, $ifaceNil))) {
              $s = -1;
              return q;
            }
            r = F.ValueOf(p);
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              r = r.$blk();
            }
            if (r && r.$blk !== undefined) {
              break s;
            }
            $r = $clone(d, F.Value).Set($clone(r, F.Value));
            $s = 19;
          case 19:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return $ifaceNil;
          case 16:
            e.saveError(new R.ptr("array", $clone(d, F.Value).Type(), (new $Int64(0, e.off)), "", ""));
            $r = e.skip();
            $s = 20;
          case 20:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return $ifaceNil;
          case 11:
            $s = 14;
            continue;
          case 12:
            $s = 9;
            continue;
            $s = 14;
            continue;
          case 13:
            e.saveError(new R.ptr("array", $clone(d, F.Value).Type(), (new $Int64(0, e.off)), "", ""));
            $r = e.skip();
            $s = 21;
          case 21:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return $ifaceNil;
          case 14:
          case 9:
            s = 0;
          case 22:
            $r = e.scanWhile(9);
            $s = 24;
          case 24:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            if (e.opcode === 8) {
              $s = 23;
              continue;
            }
            if ($clone(d, F.Value).Kind() === 23) {
              $s = 25;
              continue;
            }
            $s = 26;
            continue;
          case 25:
            if (s >= $clone(d, F.Value).Cap()) {
              $s = 27;
              continue;
            }
            $s = 28;
            continue;
          case 27:
            u = $clone(d, F.Value).Cap() + (t = $clone(d, F.Value).Cap() / 2, (t === t && t !== 1 / 0 && t !== -1 / 0) ? t >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
            if (u < 4) {
              u = 4;
            }
            v = F.MakeSlice($clone(d, F.Value).Type(), $clone(d, F.Value).Len(), u);
            $s = 29;
          case 29:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            w = v;
            x = F.Copy($clone(w, F.Value), $clone(d, F.Value));
            $s = 30;
          case 30:
            if ($c) {
              $c = false;
              x = x.$blk();
            }
            if (x && x.$blk !== undefined) {
              break s;
            }
            x;
            $r = $clone(d, F.Value).Set($clone(w, F.Value));
            $s = 31;
          case 31:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 28:
            if (s >= $clone(d, F.Value).Len()) {
              $clone(d, F.Value).SetLen(s + 1 >> 0);
            }
          case 26:
            if (s < $clone(d, F.Value).Len()) {
              $s = 32;
              continue;
            }
            $s = 33;
            continue;
          case 32:
            y = $clone(d, F.Value).Index(s);
            $s = 35;
          case 35:
            if ($c) {
              $c = false;
              y = y.$blk();
            }
            if (y && y.$blk !== undefined) {
              break s;
            }
            z = e.value($clone(y, F.Value));
            $s = 36;
          case 36:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            aa = z;
            if (!($interfaceIsEqual(aa, $ifaceNil))) {
              $s = -1;
              return aa;
            }
            $s = 34;
            continue;
          case 33:
            ab = e.value(new F.Value.ptr(FC.nil, 0, 0));
            $s = 37;
          case 37:
            if ($c) {
              $c = false;
              ab = ab.$blk();
            }
            if (ab && ab.$blk !== undefined) {
              break s;
            }
            ac = ab;
            if (!($interfaceIsEqual(ac, $ifaceNil))) {
              $s = -1;
              return ac;
            }
          case 34:
            s = s + (1) >> 0;
            if (e.opcode === 9) {
              $s = 38;
              continue;
            }
            $s = 39;
            continue;
          case 38:
            $r = e.scanWhile(9);
            $s = 40;
          case 40:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 39:
            if (e.opcode === 8) {
              $s = 23;
              continue;
            }
            if (!((e.opcode === 7))) {
              $s = -1;
              return X;
            }
            $s = 22;
            continue;
          case 23:
            if (s < $clone(d, F.Value).Len()) {
              $s = 41;
              continue;
            }
            $s = 42;
            continue;
          case 41:
            if ($clone(d, F.Value).Kind() === 17) {
              $s = 43;
              continue;
            }
            $s = 44;
            continue;
          case 43:
            ad = $clone(d, F.Value).Type().Elem();
            $s = 46;
          case 46:
            if ($c) {
              $c = false;
              ad = ad.$blk();
            }
            if (ad && ad.$blk !== undefined) {
              break s;
            }
            ae = F.Zero(ad);
            $s = 47;
          case 47:
            if ($c) {
              $c = false;
              ae = ae.$blk();
            }
            if (ae && ae.$blk !== undefined) {
              break s;
            }
            af = ae;
          case 48:
            if (!(s < $clone(d, F.Value).Len())) {
              $s = 49;
              continue;
            }
            ag = $clone(d, F.Value).Index(s);
            $s = 50;
          case 50:
            if ($c) {
              $c = false;
              ag = ag.$blk();
            }
            if (ag && ag.$blk !== undefined) {
              break s;
            }
            $r = $clone(ag, F.Value).Set($clone(af, F.Value));
            $s = 51;
          case 51:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            s = s + (1) >> 0;
            $s = 48;
            continue;
          case 49:
            $s = 45;
            continue;
          case 44:
            $clone(d, F.Value).SetLen(s);
          case 45:
          case 42:
            if ((s === 0) && ($clone(d, F.Value).Kind() === 23)) {
              $s = 52;
              continue;
            }
            $s = 53;
            continue;
          case 52:
            ah = F.MakeSlice($clone(d, F.Value).Type(), 0, 0);
            $s = 54;
          case 54:
            if ($c) {
              $c = false;
              ah = ah.$blk();
            }
            if (ah && ah.$blk !== undefined) {
              break s;
            }
            $r = $clone(d, F.Value).Set($clone(ah, F.Value));
            $s = 55;
          case 55:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 53:
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: W.ptr.prototype.array
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    W.prototype.array = function(d) {
      return this.$val.array(d);
    };
    W.ptr.prototype.object = function(d) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, bq, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, cd, ce, cf, cg, ch, ci, cj, ck, cl, cm, cn, co, cp, cq, cr, cs, ct, cu, cv, cw, cx, cy, cz, d, da, db, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        ba = $f.ba;
        bb = $f.bb;
        bc = $f.bc;
        bd = $f.bd;
        be = $f.be;
        bf = $f.bf;
        bg = $f.bg;
        bh = $f.bh;
        bi = $f.bi;
        bj = $f.bj;
        bk = $f.bk;
        bl = $f.bl;
        bm = $f.bm;
        bn = $f.bn;
        bo = $f.bo;
        bp = $f.bp;
        bq = $f.bq;
        br = $f.br;
        bs = $f.bs;
        bt = $f.bt;
        bu = $f.bu;
        bv = $f.bv;
        bw = $f.bw;
        bx = $f.bx;
        by = $f.by;
        bz = $f.bz;
        ca = $f.ca;
        cb = $f.cb;
        cc = $f.cc;
        cd = $f.cd;
        ce = $f.ce;
        cf = $f.cf;
        cg = $f.cg;
        ch = $f.ch;
        ci = $f.ci;
        cj = $f.cj;
        ck = $f.ck;
        cl = $f.cl;
        cm = $f.cm;
        cn = $f.cn;
        co = $f.co;
        cp = $f.cp;
        cq = $f.cq;
        cr = $f.cr;
        cs = $f.cs;
        ct = $f.ct;
        cu = $f.cu;
        cv = $f.cv;
        cw = $f.cw;
        cx = $f.cx;
        cy = $f.cy;
        cz = $f.cz;
        d = $f.d;
        da = $f.da;
        db = $f.db;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            g = Z($clone(d, F.Value), false);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
            h = f[0];
            i = f[1];
            j = f[2];
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            k = e.readIndex();
            $r = e.skip();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            l = h.UnmarshalJSON($subslice(e.data, k, e.off));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return l;
          case 3:
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            e.saveError(new R.ptr("object", $clone(d, F.Value).Type(), (new $Int64(0, e.off)), "", ""));
            $r = e.skip();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return $ifaceNil;
          case 7:
            d = j;
            if (($clone(d, F.Value).Kind() === 20) && ($clone(d, F.Value).NumMethod() === 0)) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            n = e.objectInterface();
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            m = n;
            o = m[0];
            p = m[1];
            if (!($interfaceIsEqual(p, $ifaceNil))) {
              $s = -1;
              return p;
            }
            q = F.ValueOf(new FD(o));
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            $r = $clone(d, F.Value).Set($clone(q, F.Value));
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return $ifaceNil;
          case 10:
            r = $clone(d, F.Value).Kind();
            if (r === (21)) {
              $s = 15;
              continue;
            }
            if (r === (25)) {
              $s = 16;
              continue;
            }
            $s = 17;
            continue;
          case 15:
            s = $clone(d, F.Value).Type();
            t = s.Key();
            $s = 20;
          case 20:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            u = t.Kind();
            $s = 21;
          case 21:
            if ($c) {
              $c = false;
              u = u.$blk();
            }
            if (u && u.$blk !== undefined) {
              break s;
            }
            v = u;
            if ((v === (24)) || (v === (2)) || (v === (3)) || (v === (4)) || (v === (5)) || (v === (6)) || (v === (7)) || (v === (8)) || (v === (9)) || (v === (10)) || (v === (11)) || (v === (12))) {
              $s = 22;
              continue;
            }
            w = s.Key();
            $s = 25;
          case 25:
            if ($c) {
              $c = false;
              w = w.$blk();
            }
            if (w && w.$blk !== undefined) {
              break s;
            }
            x = F.PtrTo(w);
            $s = 26;
          case 26:
            if ($c) {
              $c = false;
              x = x.$blk();
            }
            if (x && x.$blk !== undefined) {
              break s;
            }
            y = x.Implements(AB);
            $s = 27;
          case 27:
            if ($c) {
              $c = false;
              y = y.$blk();
            }
            if (y && y.$blk !== undefined) {
              break s;
            }
            if (!y) {
              $s = 23;
              continue;
            }
            $s = 24;
            continue;
          case 22:
            $s = 24;
            continue;
          case 23:
            e.saveError(new R.ptr("object", $clone(d, F.Value).Type(), (new $Int64(0, e.off)), "", ""));
            $r = e.skip();
            $s = 28;
          case 28:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return $ifaceNil;
          case 24:
          case 19:
            if ($clone(d, F.Value).IsNil()) {
              $s = 29;
              continue;
            }
            $s = 30;
            continue;
          case 29:
            z = F.MakeMap(s);
            $s = 31;
          case 31:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            $r = $clone(d, F.Value).Set($clone(z, F.Value));
            $s = 32;
          case 32:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 30:
            $s = 18;
            continue;
          case 16:
            $s = 18;
            continue;
          case 17:
            e.saveError(new R.ptr("object", $clone(d, F.Value).Type(), (new $Int64(0, e.off)), "", ""));
            $r = e.skip();
            $s = 33;
          case 33:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return $ifaceNil;
          case 18:
          case 14:
            aa = new F.Value.ptr(FC.nil, 0, 0);
          case 34:
            $r = e.scanWhile(9);
            $s = 36;
          case 36:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            if (e.opcode === 5) {
              $s = 35;
              continue;
            }
            if (!((e.opcode === 1))) {
              $s = -1;
              return X;
            }
            ab = e.readIndex();
            $r = e.scanWhile(0);
            $s = 37;
          case 37:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            ac = $subslice(e.data, ab, e.readIndex());
            ad = AF(ac);
            ae = ad[0];
            af = ad[1];
            if (!af) {
              $s = -1;
              return X;
            }
            ag = new F.Value.ptr(FC.nil, 0, 0);
            ah = false;
            if ($clone(d, F.Value).Kind() === 21) {
              $s = 38;
              continue;
            }
            $s = 39;
            continue;
          case 38:
            ai = $clone(d, F.Value).Type().Elem();
            $s = 41;
          case 41:
            if ($c) {
              $c = false;
              ai = ai.$blk();
            }
            if (ai && ai.$blk !== undefined) {
              break s;
            }
            aj = ai;
            if (!$clone(aa, F.Value).IsValid()) {
              $s = 42;
              continue;
            }
            $s = 43;
            continue;
          case 42:
            ak = $clone(F.New(aj), F.Value).Elem();
            $s = 45;
          case 45:
            if ($c) {
              $c = false;
              ak = ak.$blk();
            }
            if (ak && ak.$blk !== undefined) {
              break s;
            }
            aa = ak;
            $s = 44;
            continue;
          case 43:
            al = F.Zero(aj);
            $s = 46;
          case 46:
            if ($c) {
              $c = false;
              al = al.$blk();
            }
            if (al && al.$blk !== undefined) {
              break s;
            }
            $r = $clone(aa, F.Value).Set($clone(al, F.Value));
            $s = 47;
          case 47:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 44:
            ag = aa;
            $s = 40;
            continue;
          case 39:
            am = FE.nil;
            an = CN($clone(d, F.Value).Type());
            $s = 48;
          case 48:
            if ($c) {
              $c = false;
              an = an.$blk();
            }
            if (an && an.$blk !== undefined) {
              break s;
            }
            ao = an;
            ap = ao;
            aq = 0;
          case 49:
            if (!(aq < ap.$length)) {
              $s = 50;
              continue;
            }
            ar = aq;
            as = ((ar < 0 || ar >= ao.$length) ? ($throwRuntimeError("index out of range"), undefined) : ao.$array[ao.$offset + ar]);
            if (A.Equal(as.nameBytes, ae)) {
              am = as;
              $s = 50;
              continue;
            }
            if (!(am === FE.nil)) {
              at = false;
              $s = 53;
              continue s;
            }
            au = as.equalFold(as.nameBytes, ae);
            $s = 54;
          case 54:
            if ($c) {
              $c = false;
              au = au.$blk();
            }
            if (au && au.$blk !== undefined) {
              break s;
            }
            at = au;
          case 53:
            if (at) {
              $s = 51;
              continue;
            }
            $s = 52;
            continue;
          case 51:
            am = as;
          case 52:
            aq++;
            $s = 49;
            continue;
          case 50:
            if (!(am === FE.nil)) {
              $s = 55;
              continue;
            }
            if (e.disallowUnknownFields) {
              $s = 56;
              continue;
            }
            $s = 57;
            continue;
          case 55:
            ag = d;
            ah = am.quoted;
            av = am.index;
            aw = 0;
          case 58:
            if (!(aw < av.$length)) {
              $s = 59;
              continue;
            }
            ax = ((aw < 0 || aw >= av.$length) ? ($throwRuntimeError("index out of range"), undefined) : av.$array[av.$offset + aw]);
            if ($clone(ag, F.Value).Kind() === 22) {
              $s = 60;
              continue;
            }
            $s = 61;
            continue;
          case 60:
            if ($clone(ag, F.Value).IsNil()) {
              $s = 62;
              continue;
            }
            $s = 63;
            continue;
          case 62:
            if (!$clone(ag, F.Value).CanSet()) {
              $s = 64;
              continue;
            }
            $s = 65;
            continue;
          case 64:
            ay = $clone(ag, F.Value).Type().Elem();
            $s = 66;
          case 66:
            if ($c) {
              $c = false;
              ay = ay.$blk();
            }
            if (ay && ay.$blk !== undefined) {
              break s;
            }
            az = ay;
            ba = E.Errorf("json: cannot set embedded pointer to unexported struct: %v", new ET([az]));
            $s = 67;
          case 67:
            if ($c) {
              $c = false;
              ba = ba.$blk();
            }
            if (ba && ba.$blk !== undefined) {
              break s;
            }
            $r = e.saveError(ba);
            $s = 68;
          case 68:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            ag = new F.Value.ptr(FC.nil, 0, 0);
            ah = false;
            $s = 59;
            continue;
          case 65:
            bb = $clone(ag, F.Value).Type().Elem();
            $s = 69;
          case 69:
            if ($c) {
              $c = false;
              bb = bb.$blk();
            }
            if (bb && bb.$blk !== undefined) {
              break s;
            }
            bc = F.New(bb);
            $s = 70;
          case 70:
            if ($c) {
              $c = false;
              bc = bc.$blk();
            }
            if (bc && bc.$blk !== undefined) {
              break s;
            }
            $r = $clone(ag, F.Value).Set($clone(bc, F.Value));
            $s = 71;
          case 71:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 63:
            bd = $clone(ag, F.Value).Elem();
            $s = 72;
          case 72:
            if ($c) {
              $c = false;
              bd = bd.$blk();
            }
            if (bd && bd.$blk !== undefined) {
              break s;
            }
            ag = bd;
          case 61:
            be = $clone(ag, F.Value).Field(ax);
            $s = 73;
          case 73:
            if ($c) {
              $c = false;
              be = be.$blk();
            }
            if (be && be.$blk !== undefined) {
              break s;
            }
            ag = be;
            aw++;
            $s = 58;
            continue;
          case 59:
            e.errorContext.Field = am.name;
            bf = $clone(d, F.Value).Type().Name();
            $s = 74;
          case 74:
            if ($c) {
              $c = false;
              bf = bf.$blk();
            }
            if (bf && bf.$blk !== undefined) {
              break s;
            }
            e.errorContext.Struct = bf;
            $s = 57;
            continue;
          case 56:
            bg = E.Errorf("json: unknown field %q", new ET([ae]));
            $s = 75;
          case 75:
            if ($c) {
              $c = false;
              bg = bg.$blk();
            }
            if (bg && bg.$blk !== undefined) {
              break s;
            }
            $r = e.saveError(bg);
            $s = 76;
          case 76:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 57:
          case 40:
            if (e.opcode === 9) {
              $s = 77;
              continue;
            }
            $s = 78;
            continue;
          case 77:
            $r = e.scanWhile(9);
            $s = 79;
          case 79:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 78:
            if (!((e.opcode === 3))) {
              $s = -1;
              return X;
            }
            $r = e.scanWhile(9);
            $s = 80;
          case 80:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            if (ah) {
              $s = 81;
              continue;
            }
            $s = 82;
            continue;
          case 81:
            bi = e.valueQuoted();
            $s = 84;
          case 84:
            if ($c) {
              $c = false;
              bi = bi.$blk();
            }
            if (bi && bi.$blk !== undefined) {
              break s;
            }
            bh = bi;
            bj = bh[0];
            bk = bh[1];
            if (!($interfaceIsEqual(bk, $ifaceNil))) {
              $s = -1;
              return bk;
            }
            bl = bj;
            if (bl === $ifaceNil) {
              $s = 85;
              continue;
            }
            if ($assertType(bl, $String, true)[1]) {
              $s = 86;
              continue;
            }
            $s = 87;
            continue;
          case 85:
            bm = bl;
            bp = e.literalStore(AA, $clone(ag, F.Value), false);
            $s = 89;
          case 89:
            if ($c) {
              $c = false;
              bp = bp.$blk();
            }
            if (bp && bp.$blk !== undefined) {
              break s;
            }
            bq = bp;
            if (!($interfaceIsEqual(bq, $ifaceNil))) {
              $s = -1;
              return bq;
            }
            $s = 88;
            continue;
          case 86:
            bn = bl.$val;
            br = e.literalStore((new EU($stringToBytes(bn))), $clone(ag, F.Value), true);
            $s = 90;
          case 90:
            if ($c) {
              $c = false;
              br = br.$blk();
            }
            if (br && br.$blk !== undefined) {
              break s;
            }
            bs = br;
            if (!($interfaceIsEqual(bs, $ifaceNil))) {
              $s = -1;
              return bs;
            }
            $s = 88;
            continue;
          case 87:
            bo = bl;
            bt = E.Errorf("json: invalid use of ,string struct tag, trying to unmarshal unquoted value into %v", new ET([$clone(ag, F.Value).Type()]));
            $s = 91;
          case 91:
            if ($c) {
              $c = false;
              bt = bt.$blk();
            }
            if (bt && bt.$blk !== undefined) {
              break s;
            }
            $r = e.saveError(bt);
            $s = 92;
          case 92:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 88:
            $s = 83;
            continue;
          case 82:
            bu = e.value($clone(ag, F.Value));
            $s = 93;
          case 93:
            if ($c) {
              $c = false;
              bu = bu.$blk();
            }
            if (bu && bu.$blk !== undefined) {
              break s;
            }
            bv = bu;
            if (!($interfaceIsEqual(bv, $ifaceNil))) {
              $s = -1;
              return bv;
            }
          case 83:
            if ($clone(d, F.Value).Kind() === 21) {
              $s = 94;
              continue;
            }
            $s = 95;
            continue;
          case 94:
            bw = $clone(d, F.Value).Type().Key();
            $s = 96;
          case 96:
            if ($c) {
              $c = false;
              bw = bw.$blk();
            }
            if (bw && bw.$blk !== undefined) {
              break s;
            }
            bx = bw;
            by = new F.Value.ptr(FC.nil, 0, 0);
            bz = bx.Kind();
            $s = 102;
          case 102:
            if ($c) {
              $c = false;
              bz = bz.$blk();
            }
            if (bz && bz.$blk !== undefined) {
              break s;
            }
            if ((bz === 24)) {
              $s = 98;
              continue;
            }
            ca = F.PtrTo(bx).Implements(AB);
            $s = 103;
          case 103:
            if ($c) {
              $c = false;
              ca = ca.$blk();
            }
            if (ca && ca.$blk !== undefined) {
              break s;
            }
            if (ca) {
              $s = 99;
              continue;
            }
            $s = 100;
            continue;
          case 98:
            cb = F.ValueOf(ae);
            $s = 104;
          case 104:
            if ($c) {
              $c = false;
              cb = cb.$blk();
            }
            if (cb && cb.$blk !== undefined) {
              break s;
            }
            cc = $clone(cb, F.Value).Convert(bx);
            $s = 105;
          case 105:
            if ($c) {
              $c = false;
              cc = cc.$blk();
            }
            if (cc && cc.$blk !== undefined) {
              break s;
            }
            by = cc;
            $s = 101;
            continue;
          case 99:
            cd = $clone(d, F.Value).Type().Key();
            $s = 106;
          case 106:
            if ($c) {
              $c = false;
              cd = cd.$blk();
            }
            if (cd && cd.$blk !== undefined) {
              break s;
            }
            ce = F.New(cd);
            $s = 107;
          case 107:
            if ($c) {
              $c = false;
              ce = ce.$blk();
            }
            if (ce && ce.$blk !== undefined) {
              break s;
            }
            by = ce;
            cf = e.literalStore(ac, $clone(by, F.Value), true);
            $s = 108;
          case 108:
            if ($c) {
              $c = false;
              cf = cf.$blk();
            }
            if (cf && cf.$blk !== undefined) {
              break s;
            }
            cg = cf;
            if (!($interfaceIsEqual(cg, $ifaceNil))) {
              $s = -1;
              return cg;
            }
            ch = $clone(by, F.Value).Elem();
            $s = 109;
          case 109:
            if ($c) {
              $c = false;
              ch = ch.$blk();
            }
            if (ch && ch.$blk !== undefined) {
              break s;
            }
            by = ch;
            $s = 101;
            continue;
          case 100:
            ci = bx.Kind();
            $s = 111;
          case 111:
            if ($c) {
              $c = false;
              ci = ci.$blk();
            }
            if (ci && ci.$blk !== undefined) {
              break s;
            }
            cj = ci;
            if ((cj === (2)) || (cj === (3)) || (cj === (4)) || (cj === (5)) || (cj === (6))) {
              $s = 112;
              continue;
            }
            if ((cj === (7)) || (cj === (8)) || (cj === (9)) || (cj === (10)) || (cj === (11)) || (cj === (12))) {
              $s = 113;
              continue;
            }
            $s = 114;
            continue;
          case 112:
            ck = ($bytesToString(ae));
            cl = G.ParseInt(ck, 10, 64);
            cm = cl[0];
            cn = cl[1];
            if (!($interfaceIsEqual(cn, $ifaceNil))) {
              co = true;
              $s = 118;
              continue s;
            }
            cp = F.Zero(bx);
            $s = 119;
          case 119:
            if ($c) {
              $c = false;
              cp = cp.$blk();
            }
            if (cp && cp.$blk !== undefined) {
              break s;
            }
            cq = $clone(cp, F.Value).OverflowInt(cm);
            $s = 120;
          case 120:
            if ($c) {
              $c = false;
              cq = cq.$blk();
            }
            if (cq && cq.$blk !== undefined) {
              break s;
            }
            co = cq;
          case 118:
            if (co) {
              $s = 116;
              continue;
            }
            $s = 117;
            continue;
          case 116:
            e.saveError(new R.ptr("number " + ck, bx, (new $Int64(0, (ab + 1 >> 0))), "", ""));
            $s = -1;
            return $ifaceNil;
          case 117:
            cr = F.ValueOf(cm);
            $s = 121;
          case 121:
            if ($c) {
              $c = false;
              cr = cr.$blk();
            }
            if (cr && cr.$blk !== undefined) {
              break s;
            }
            cs = $clone(cr, F.Value).Convert(bx);
            $s = 122;
          case 122:
            if ($c) {
              $c = false;
              cs = cs.$blk();
            }
            if (cs && cs.$blk !== undefined) {
              break s;
            }
            by = cs;
            $s = 115;
            continue;
          case 113:
            ct = ($bytesToString(ae));
            cu = G.ParseUint(ct, 10, 64);
            cv = cu[0];
            cw = cu[1];
            if (!($interfaceIsEqual(cw, $ifaceNil))) {
              cx = true;
              $s = 125;
              continue s;
            }
            cy = F.Zero(bx);
            $s = 126;
          case 126:
            if ($c) {
              $c = false;
              cy = cy.$blk();
            }
            if (cy && cy.$blk !== undefined) {
              break s;
            }
            cz = $clone(cy, F.Value).OverflowUint(cv);
            $s = 127;
          case 127:
            if ($c) {
              $c = false;
              cz = cz.$blk();
            }
            if (cz && cz.$blk !== undefined) {
              break s;
            }
            cx = cz;
          case 125:
            if (cx) {
              $s = 123;
              continue;
            }
            $s = 124;
            continue;
          case 123:
            e.saveError(new R.ptr("number " + ct, bx, (new $Int64(0, (ab + 1 >> 0))), "", ""));
            $s = -1;
            return $ifaceNil;
          case 124:
            da = F.ValueOf(cv);
            $s = 128;
          case 128:
            if ($c) {
              $c = false;
              da = da.$blk();
            }
            if (da && da.$blk !== undefined) {
              break s;
            }
            db = $clone(da, F.Value).Convert(bx);
            $s = 129;
          case 129:
            if ($c) {
              $c = false;
              db = db.$blk();
            }
            if (db && db.$blk !== undefined) {
              break s;
            }
            by = db;
            $s = 115;
            continue;
          case 114:
            $panic(new $String("json: Unexpected key type"));
          case 115:
          case 110:
          case 101:
          case 97:
            $r = $clone(d, F.Value).SetMapIndex($clone(by, F.Value), $clone(ag, F.Value));
            $s = 130;
          case 130:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 95:
            if (e.opcode === 9) {
              $s = 131;
              continue;
            }
            $s = 132;
            continue;
          case 131:
            $r = e.scanWhile(9);
            $s = 133;
          case 133:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 132:
            if (e.opcode === 5) {
              $s = 35;
              continue;
            }
            if (!((e.opcode === 4))) {
              $s = -1;
              return X;
            }
            e.errorContext.Struct = "";
            e.errorContext.Field = "";
            $s = 34;
            continue;
          case 35:
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: W.ptr.prototype.object
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.ba = ba;
      $f.bb = bb;
      $f.bc = bc;
      $f.bd = bd;
      $f.be = be;
      $f.bf = bf;
      $f.bg = bg;
      $f.bh = bh;
      $f.bi = bi;
      $f.bj = bj;
      $f.bk = bk;
      $f.bl = bl;
      $f.bm = bm;
      $f.bn = bn;
      $f.bo = bo;
      $f.bp = bp;
      $f.bq = bq;
      $f.br = br;
      $f.bs = bs;
      $f.bt = bt;
      $f.bu = bu;
      $f.bv = bv;
      $f.bw = bw;
      $f.bx = bx;
      $f.by = by;
      $f.bz = bz;
      $f.ca = ca;
      $f.cb = cb;
      $f.cc = cc;
      $f.cd = cd;
      $f.ce = ce;
      $f.cf = cf;
      $f.cg = cg;
      $f.ch = ch;
      $f.ci = ci;
      $f.cj = cj;
      $f.ck = ck;
      $f.cl = cl;
      $f.cm = cm;
      $f.cn = cn;
      $f.co = co;
      $f.cp = cp;
      $f.cq = cq;
      $f.cr = cr;
      $f.cs = cs;
      $f.ct = ct;
      $f.cu = cu;
      $f.cv = cv;
      $f.cw = cw;
      $f.cx = cx;
      $f.cy = cy;
      $f.cz = cz;
      $f.d = d;
      $f.da = da;
      $f.db = db;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    W.prototype.object = function(d) {
      return this.$val.object(d);
    };
    W.ptr.prototype.convertNumber = function(d) {
      var d, e, f, g, h;
      e = this;
      if (e.useNumber) {
        return [new U((d)), $ifaceNil];
      }
      f = G.ParseFloat(d, 64);
      g = f[0];
      h = f[1];
      if (!($interfaceIsEqual(h, $ifaceNil))) {
        return [$ifaceNil, new R.ptr("number " + d, F.TypeOf(new $Float64(0)), (new $Int64(0, e.off)), "", "")];
      }
      return [new $Float64(g), $ifaceNil];
    };
    W.prototype.convertNumber = function(d) {
      return this.$val.convertNumber(d);
    };
    W.ptr.prototype.literalStore = function(d, e, f) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        ba = $f.ba;
        bb = $f.bb;
        bc = $f.bc;
        bd = $f.bd;
        be = $f.be;
        bf = $f.bf;
        bg = $f.bg;
        bh = $f.bh;
        bi = $f.bi;
        bj = $f.bj;
        bk = $f.bk;
        bl = $f.bl;
        bm = $f.bm;
        bn = $f.bn;
        bo = $f.bo;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if (d.$length === 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            h = E.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new ET([d, $clone(e, F.Value).Type()]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            $r = g.saveError(h);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return $ifaceNil;
          case 2:
            i = (0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0]) === 110;
            k = Z($clone(e, F.Value), i);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            l = j[0];
            m = j[1];
            n = j[2];
            if (!($interfaceIsEqual(l, $ifaceNil))) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            o = l.UnmarshalJSON(d);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return o;
          case 7:
            if (!($interfaceIsEqual(m, $ifaceNil))) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            if (!(((0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0]) === 34))) {
              $s = 11;
              continue;
            }
            $s = 12;
            continue;
          case 11:
            if (f) {
              $s = 13;
              continue;
            }
            $s = 14;
            continue;
          case 13:
            p = E.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new ET([d, $clone(e, F.Value).Type()]));
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            $r = g.saveError(p);
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 15;
            continue;
          case 14:
            q = "";
            r = (0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0]);
            if (r === (110)) {
              q = "null";
            } else if ((r === (116)) || (r === (102))) {
              q = "bool";
            } else {
              q = "number";
            }
            g.saveError(new R.ptr(q, $clone(e, F.Value).Type(), (new $Int64(0, g.readIndex())), "", ""));
          case 15:
            $s = -1;
            return $ifaceNil;
          case 12:
            s = AF(d);
            t = s[0];
            u = s[1];
            if (!u) {
              $s = 18;
              continue;
            }
            $s = 19;
            continue;
          case 18:
            if (f) {
              $s = 20;
              continue;
            }
            $s = 21;
            continue;
          case 20:
            v = E.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new ET([d, $clone(e, F.Value).Type()]));
            $s = 22;
          case 22:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return v;
          case 21:
            $s = -1;
            return X;
          case 19:
            w = m.UnmarshalText(t);
            $s = 23;
          case 23:
            if ($c) {
              $c = false;
              w = w.$blk();
            }
            if (w && w.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return w;
          case 10:
            e = n;
            x = (0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0]);
            y = x;
            if (y === (110)) {
              $s = 25;
              continue;
            }
            if ((y === (116)) || (y === (102))) {
              $s = 26;
              continue;
            }
            if (y === (34)) {
              $s = 27;
              continue;
            }
            $s = 28;
            continue;
          case 25:
            if (f && !(($bytesToString(d)) === "null")) {
              $s = 30;
              continue;
            }
            $s = 31;
            continue;
          case 30:
            z = E.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new ET([d, $clone(e, F.Value).Type()]));
            $s = 32;
          case 32:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            $r = g.saveError(z);
            $s = 33;
          case 33:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 24;
            continue;
          case 31:
            aa = $clone(e, F.Value).Kind();
            if ((aa === (20)) || (aa === (22)) || (aa === (21)) || (aa === (23))) {
              $s = 35;
              continue;
            }
            $s = 36;
            continue;
          case 35:
            ab = F.Zero($clone(e, F.Value).Type());
            $s = 37;
          case 37:
            if ($c) {
              $c = false;
              ab = ab.$blk();
            }
            if (ab && ab.$blk !== undefined) {
              break s;
            }
            $r = $clone(e, F.Value).Set($clone(ab, F.Value));
            $s = 38;
          case 38:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 36:
          case 34:
            $s = 29;
            continue;
          case 26:
            ac = (0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0]) === 116;
            if (f && !(($bytesToString(d)) === "true") && !(($bytesToString(d)) === "false")) {
              $s = 39;
              continue;
            }
            $s = 40;
            continue;
          case 39:
            ad = E.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new ET([d, $clone(e, F.Value).Type()]));
            $s = 41;
          case 41:
            if ($c) {
              $c = false;
              ad = ad.$blk();
            }
            if (ad && ad.$blk !== undefined) {
              break s;
            }
            $r = g.saveError(ad);
            $s = 42;
          case 42:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 24;
            continue;
          case 40:
            ae = $clone(e, F.Value).Kind();
            if (ae === (1)) {
              $s = 44;
              continue;
            }
            if (ae === (20)) {
              $s = 45;
              continue;
            }
            if (f) {
              $s = 46;
              continue;
            }
            $s = 47;
            continue;
          case 44:
            $clone(e, F.Value).SetBool(ac);
            $s = 48;
            continue;
          case 45:
            if ($clone(e, F.Value).NumMethod() === 0) {
              $s = 49;
              continue;
            }
            $s = 50;
            continue;
          case 49:
            af = F.ValueOf(new $Bool(ac));
            $s = 52;
          case 52:
            if ($c) {
              $c = false;
              af = af.$blk();
            }
            if (af && af.$blk !== undefined) {
              break s;
            }
            $r = $clone(e, F.Value).Set($clone(af, F.Value));
            $s = 53;
          case 53:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 51;
            continue;
          case 50:
            g.saveError(new R.ptr("bool", $clone(e, F.Value).Type(), (new $Int64(0, g.readIndex())), "", ""));
          case 51:
            $s = 48;
            continue;
          case 46:
            ag = E.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new ET([d, $clone(e, F.Value).Type()]));
            $s = 54;
          case 54:
            if ($c) {
              $c = false;
              ag = ag.$blk();
            }
            if (ag && ag.$blk !== undefined) {
              break s;
            }
            $r = g.saveError(ag);
            $s = 55;
          case 55:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 48;
            continue;
          case 47:
            g.saveError(new R.ptr("bool", $clone(e, F.Value).Type(), (new $Int64(0, g.readIndex())), "", ""));
          case 48:
          case 43:
            $s = 29;
            continue;
          case 27:
            ah = AF(d);
            ai = ah[0];
            aj = ah[1];
            if (!aj) {
              $s = 56;
              continue;
            }
            $s = 57;
            continue;
          case 56:
            if (f) {
              $s = 58;
              continue;
            }
            $s = 59;
            continue;
          case 58:
            ak = E.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new ET([d, $clone(e, F.Value).Type()]));
            $s = 60;
          case 60:
            if ($c) {
              $c = false;
              ak = ak.$blk();
            }
            if (ak && ak.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ak;
          case 59:
            $s = -1;
            return X;
          case 57:
            al = $clone(e, F.Value).Kind();
            if (al === (23)) {
              $s = 62;
              continue;
            }
            if (al === (24)) {
              $s = 63;
              continue;
            }
            if (al === (20)) {
              $s = 64;
              continue;
            }
            $s = 65;
            continue;
          case 62:
            am = $clone(e, F.Value).Type().Elem();
            $s = 69;
          case 69:
            if ($c) {
              $c = false;
              am = am.$blk();
            }
            if (am && am.$blk !== undefined) {
              break s;
            }
            an = am.Kind();
            $s = 70;
          case 70:
            if ($c) {
              $c = false;
              an = an.$blk();
            }
            if (an && an.$blk !== undefined) {
              break s;
            }
            if (!((an === 8))) {
              $s = 67;
              continue;
            }
            $s = 68;
            continue;
          case 67:
            g.saveError(new R.ptr("string", $clone(e, F.Value).Type(), (new $Int64(0, g.readIndex())), "", ""));
            $s = 61;
            continue;
          case 68:
            ao = $makeSlice(EU, C.StdEncoding.DecodedLen(ai.$length));
            ap = C.StdEncoding.Decode(ao, ai);
            aq = ap[0];
            ar = ap[1];
            if (!($interfaceIsEqual(ar, $ifaceNil))) {
              g.saveError(ar);
              $s = 61;
              continue;
            }
            $r = $clone(e, F.Value).SetBytes($subslice(ao, 0, aq));
            $s = 71;
          case 71:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 66;
            continue;
          case 63:
            $clone(e, F.Value).SetString(($bytesToString(ai)));
            $s = 66;
            continue;
          case 64:
            if ($clone(e, F.Value).NumMethod() === 0) {
              $s = 72;
              continue;
            }
            $s = 73;
            continue;
          case 72:
            as = F.ValueOf(new $String(($bytesToString(ai))));
            $s = 75;
          case 75:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            $r = $clone(e, F.Value).Set($clone(as, F.Value));
            $s = 76;
          case 76:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 74;
            continue;
          case 73:
            g.saveError(new R.ptr("string", $clone(e, F.Value).Type(), (new $Int64(0, g.readIndex())), "", ""));
          case 74:
            $s = 66;
            continue;
          case 65:
            g.saveError(new R.ptr("string", $clone(e, F.Value).Type(), (new $Int64(0, g.readIndex())), "", ""));
          case 66:
          case 61:
            $s = 29;
            continue;
          case 28:
            if (!((x === 45)) && (x < 48 || x > 57)) {
              $s = 77;
              continue;
            }
            $s = 78;
            continue;
          case 77:
            if (f) {
              $s = 79;
              continue;
            }
            $s = 80;
            continue;
          case 79:
            at = E.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new ET([d, $clone(e, F.Value).Type()]));
            $s = 81;
          case 81:
            if ($c) {
              $c = false;
              at = at.$blk();
            }
            if (at && at.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return at;
          case 80:
            $s = -1;
            return X;
          case 78:
            au = ($bytesToString(d));
            av = $clone(e, F.Value).Kind();
            if (av === (20)) {
              $s = 83;
              continue;
            }
            if ((av === (2)) || (av === (3)) || (av === (4)) || (av === (5)) || (av === (6))) {
              $s = 84;
              continue;
            }
            if ((av === (7)) || (av === (8)) || (av === (9)) || (av === (10)) || (av === (11)) || (av === (12))) {
              $s = 85;
              continue;
            }
            if ((av === (13)) || (av === (14))) {
              $s = 86;
              continue;
            }
            $s = 87;
            continue;
          case 83:
            aw = g.convertNumber(au);
            ax = aw[0];
            ay = aw[1];
            if (!($interfaceIsEqual(ay, $ifaceNil))) {
              g.saveError(ay);
              $s = 82;
              continue;
            }
            if (!(($clone(e, F.Value).NumMethod() === 0))) {
              g.saveError(new R.ptr("number", $clone(e, F.Value).Type(), (new $Int64(0, g.readIndex())), "", ""));
              $s = 82;
              continue;
            }
            az = F.ValueOf(ax);
            $s = 89;
          case 89:
            if ($c) {
              $c = false;
              az = az.$blk();
            }
            if (az && az.$blk !== undefined) {
              break s;
            }
            $r = $clone(e, F.Value).Set($clone(az, F.Value));
            $s = 90;
          case 90:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 88;
            continue;
          case 84:
            ba = G.ParseInt(au, 10, 64);
            bb = ba[0];
            bc = ba[1];
            if (!($interfaceIsEqual(bc, $ifaceNil)) || $clone(e, F.Value).OverflowInt(bb)) {
              g.saveError(new R.ptr("number " + au, $clone(e, F.Value).Type(), (new $Int64(0, g.readIndex())), "", ""));
              $s = 82;
              continue;
            }
            $clone(e, F.Value).SetInt(bb);
            $s = 88;
            continue;
          case 85:
            bd = G.ParseUint(au, 10, 64);
            be = bd[0];
            bf = bd[1];
            if (!($interfaceIsEqual(bf, $ifaceNil)) || $clone(e, F.Value).OverflowUint(be)) {
              g.saveError(new R.ptr("number " + au, $clone(e, F.Value).Type(), (new $Int64(0, g.readIndex())), "", ""));
              $s = 82;
              continue;
            }
            $clone(e, F.Value).SetUint(be);
            $s = 88;
            continue;
          case 86:
            bh = au;
            bi = $clone(e, F.Value).Type().Bits();
            $s = 91;
          case 91:
            if ($c) {
              $c = false;
              bi = bi.$blk();
            }
            if (bi && bi.$blk !== undefined) {
              break s;
            }
            bj = bi;
            bk = G.ParseFloat(bh, bj);
            $s = 92;
          case 92:
            if ($c) {
              $c = false;
              bk = bk.$blk();
            }
            if (bk && bk.$blk !== undefined) {
              break s;
            }
            bg = bk;
            bl = bg[0];
            bm = bg[1];
            if (!($interfaceIsEqual(bm, $ifaceNil)) || $clone(e, F.Value).OverflowFloat(bl)) {
              g.saveError(new R.ptr("number " + au, $clone(e, F.Value).Type(), (new $Int64(0, g.readIndex())), "", ""));
              $s = 82;
              continue;
            }
            $clone(e, F.Value).SetFloat(bl);
            $s = 88;
            continue;
          case 87:
            if (($clone(e, F.Value).Kind() === 24) && $interfaceIsEqual($clone(e, F.Value).Type(), AC)) {
              $s = 93;
              continue;
            }
            $s = 94;
            continue;
          case 93:
            $clone(e, F.Value).SetString(au);
            if (!V(au)) {
              $s = 95;
              continue;
            }
            $s = 96;
            continue;
          case 95:
            bn = E.Errorf("json: invalid number literal, trying to unmarshal %q into Number", new ET([d]));
            $s = 97;
          case 97:
            if ($c) {
              $c = false;
              bn = bn.$blk();
            }
            if (bn && bn.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return bn;
          case 96:
            $s = 82;
            continue;
          case 94:
            if (f) {
              $s = 98;
              continue;
            }
            $s = 99;
            continue;
          case 98:
            bo = E.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new ET([d, $clone(e, F.Value).Type()]));
            $s = 100;
          case 100:
            if ($c) {
              $c = false;
              bo = bo.$blk();
            }
            if (bo && bo.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return bo;
          case 99:
            $s = -1;
            return new R.ptr("number", $clone(e, F.Value).Type(), (new $Int64(0, g.readIndex())), "", "");
          case 88:
          case 82:
          case 29:
          case 24:
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: W.ptr.prototype.literalStore
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.ba = ba;
      $f.bb = bb;
      $f.bc = bc;
      $f.bd = bd;
      $f.be = be;
      $f.bf = bf;
      $f.bg = bg;
      $f.bh = bh;
      $f.bi = bi;
      $f.bj = bj;
      $f.bk = bk;
      $f.bl = bl;
      $f.bm = bm;
      $f.bn = bn;
      $f.bo = bo;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    W.prototype.literalStore = function(d, e, f) {
      return this.$val.literalStore(d, e, f);
    };
    W.ptr.prototype.valueInterface = function() {
      var d, e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = $ifaceNil;
            e = $ifaceNil;
            f = this;
            g = f.opcode;
            if (g === (6)) {
              $s = 2;
              continue;
            }
            if (g === (2)) {
              $s = 3;
              continue;
            }
            if (g === (1)) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 2:
            i = f.arrayInterface();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            d = h[0];
            e = h[1];
            $r = f.scanNext();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 6;
            continue;
          case 3:
            k = f.objectInterface();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            d = new FD(j[0]);
            e = j[1];
            $r = f.scanNext();
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 6;
            continue;
          case 4:
            m = f.literalInterface();
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            l = m;
            d = l[0];
            e = l[1];
            $s = 6;
            continue;
          case 5:
            e = X;
          case 6:
          case 1:
            $s = -1;
            return [d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: W.ptr.prototype.valueInterface
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    W.prototype.valueInterface = function() {
      return this.$val.valueInterface();
    };
    W.ptr.prototype.arrayInterface = function() {
      var d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = $makeSlice(ET, 0);
          case 1:
            $r = d.scanWhile(9);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            if (d.opcode === 8) {
              $s = 2;
              continue;
            }
            g = d.valueInterface();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
            h = f[0];
            i = f[1];
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              $s = -1;
              return [ET.nil, i];
            }
            e = $append(e, h);
            if (d.opcode === 9) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            $r = d.scanWhile(9);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 6:
            if (d.opcode === 8) {
              $s = 2;
              continue;
            }
            if (!((d.opcode === 7))) {
              $s = -1;
              return [ET.nil, X];
            }
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return [e, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: W.ptr.prototype.arrayInterface
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    W.prototype.arrayInterface = function() {
      return this.$val.arrayInterface();
    };
    W.ptr.prototype.objectInterface = function() {
      var d, e, f, g, h, i, j, k, l, m, n, o, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = {};
          case 1:
            $r = d.scanWhile(9);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            if (d.opcode === 5) {
              $s = 2;
              continue;
            }
            if (!((d.opcode === 1))) {
              $s = -1;
              return [false, X];
            }
            f = d.readIndex();
            $r = d.scanWhile(0);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            g = $subslice(d.data, f, d.readIndex());
            h = AE(g);
            i = h[0];
            j = h[1];
            if (!j) {
              $s = -1;
              return [false, X];
            }
            if (d.opcode === 9) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            $r = d.scanWhile(9);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 6:
            if (!((d.opcode === 3))) {
              $s = -1;
              return [false, X];
            }
            $r = d.scanWhile(9);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            l = d.valueInterface();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            k = l;
            m = k[0];
            n = k[1];
            if (!($interfaceIsEqual(n, $ifaceNil))) {
              $s = -1;
              return [false, n];
            }
            o = i;
            (e || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(o)] = {
              k: o,
              v: m
            };
            if (d.opcode === 9) {
              $s = 10;
              continue;
            }
            $s = 11;
            continue;
          case 10:
            $r = d.scanWhile(9);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 11:
            if (d.opcode === 5) {
              $s = 2;
              continue;
            }
            if (!((d.opcode === 4))) {
              $s = -1;
              return [false, X];
            }
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return [e, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: W.ptr.prototype.objectInterface
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    W.prototype.objectInterface = function() {
      return this.$val.objectInterface();
    };
    W.ptr.prototype.literalInterface = function() {
      var d, e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = d.readIndex();
            $r = d.scanWhile(0);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            f = $subslice(d.data, e, d.readIndex());
            g = (0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0]);
            h = g;
            if (h === (110)) {
              $s = -1;
              return [$ifaceNil, $ifaceNil];
            } else if ((h === (116)) || (h === (102))) {
              $s = -1;
              return [new $Bool((g === 116)), $ifaceNil];
            } else if (h === (34)) {
              i = AE(f);
              j = i[0];
              k = i[1];
              if (!k) {
                $s = -1;
                return [$ifaceNil, X];
              }
              $s = -1;
              return [new $String(j), $ifaceNil];
            } else {
              if (!((g === 45)) && (g < 48 || g > 57)) {
                $s = -1;
                return [$ifaceNil, X];
              }
              l = d.convertNumber(($bytesToString(f)));
              m = l[0];
              n = l[1];
              if (!($interfaceIsEqual(n, $ifaceNil))) {
                d.saveError(n);
              }
              $s = -1;
              return [m, $ifaceNil];
            }
            $s = -1;
            return [$ifaceNil, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: W.ptr.prototype.literalInterface
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    W.prototype.literalInterface = function() {
      return this.$val.literalInterface();
    };
    AD = function(d) {
      var d, e, f, g, h;
      if (d.$length < 6 || !(((0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0]) === 92)) || !(((1 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 1]) === 117))) {
        return -1;
      }
      e = 0;
      f = $subslice(d, 2, 6);
      g = 0;
      while (true) {
        if (!(g < f.$length)) {
          break;
        }
        h = ((g < 0 || g >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + g]);
        if (48 <= h && h <= 57) {
          h = h - 48 << 24 >>> 24;
        } else if (97 <= h && h <= 102) {
          h = (h - 97 << 24 >>> 24) + 10 << 24 >>> 24;
        } else if (65 <= h && h <= 70) {
          h = (h - 65 << 24 >>> 24) + 10 << 24 >>> 24;
        } else {
          return -1;
        }
        e = ($imul(e, 16)) + ((h >> 0)) >> 0;
        g++;
      }
      return e;
    };
    AE = function(d) {
      var d, e, f, g;
      e = "";
      f = false;
      g = AF(d);
      d = g[0];
      f = g[1];
      e = ($bytesToString(d));
      return [e, f];
    };
    AF = function(d) {
      var aa, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      e = EU.nil;
      f = false;
      if (d.$length < 2 || !(((0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0]) === 34)) || !(((g = d.$length - 1 >> 0, ((g < 0 || g >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + g])) === 34))) {
        return [e, f];
      }
      d = $subslice(d, 1, (d.$length - 1 >> 0));
      h = 0;
      while (true) {
        if (!(h < d.$length)) {
          break;
        }
        i = ((h < 0 || h >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + h]);
        if ((i === 92) || (i === 34) || i < 32) {
          break;
        }
        if (i < 128) {
          h = h + (1) >> 0;
          continue;
        }
        j = J.DecodeRune($subslice(d, h));
        k = j[0];
        l = j[1];
        if ((k === 65533) && (l === 1)) {
          break;
        }
        h = h + (l) >> 0;
      }
      if (h === d.$length) {
        m = d;
        n = true;
        e = m;
        f = n;
        return [e, f];
      }
      o = $makeSlice(EU, (d.$length + 8 >> 0));
      p = $copySlice(o, $subslice(d, 0, h));
      while (true) {
        if (!(h < d.$length)) {
          break;
        }
        if (p >= (o.$length - 8 >> 0)) {
          q = $makeSlice(EU, ($imul(((o.$length + 4 >> 0)), 2)));
          $copySlice(q, $subslice(o, 0, p));
          o = q;
        }
        r = ((h < 0 || h >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + h]);
        if ((r === 92)) {
          h = h + (1) >> 0;
          if (h >= d.$length) {
            return [e, f];
          }
          switch (0) {
            default:
              s = ((h < 0 || h >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + h]);
              if ((s === (34)) || (s === (92)) || (s === (47)) || (s === (39))) {
                ((p < 0 || p >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + p] = ((h < 0 || h >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + h]));
                h = h + (1) >> 0;
                p = p + (1) >> 0;
              } else if (s === (98)) {
                ((p < 0 || p >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + p] = 8);
                h = h + (1) >> 0;
                p = p + (1) >> 0;
              } else if (s === (102)) {
                ((p < 0 || p >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + p] = 12);
                h = h + (1) >> 0;
                p = p + (1) >> 0;
              } else if (s === (110)) {
                ((p < 0 || p >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + p] = 10);
                h = h + (1) >> 0;
                p = p + (1) >> 0;
              } else if (s === (114)) {
                ((p < 0 || p >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + p] = 13);
                h = h + (1) >> 0;
                p = p + (1) >> 0;
              } else if (s === (116)) {
                ((p < 0 || p >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + p] = 9);
                h = h + (1) >> 0;
                p = p + (1) >> 0;
              } else if (s === (117)) {
                h = h - (1) >> 0;
                t = AD($subslice(d, h));
                if (t < 0) {
                  return [e, f];
                }
                h = h + (6) >> 0;
                if (I.IsSurrogate(t)) {
                  u = AD($subslice(d, h));
                  v = I.DecodeRune(t, u);
                  if (!((v === 65533))) {
                    h = h + (6) >> 0;
                    p = p + (J.EncodeRune($subslice(o, p), v)) >> 0;
                    break;
                  }
                  t = 65533;
                }
                p = p + (J.EncodeRune($subslice(o, p), t)) >> 0;
              } else {
                return [e, f];
              }
          }
        } else if (((r === 34)) || (r < 32)) {
          return [e, f];
        } else if (r < 128) {
          ((p < 0 || p >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + p] = r);
          h = h + (1) >> 0;
          p = p + (1) >> 0;
        } else {
          w = J.DecodeRune($subslice(d, h));
          x = w[0];
          y = w[1];
          h = h + (y) >> 0;
          p = p + (J.EncodeRune($subslice(o, p), x)) >> 0;
        }
      }
      z = $subslice(o, 0, p);
      aa = true;
      e = z;
      f = aa;
      return [e, f];
    };
    AG = function(d) {
      var d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AR();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            g = f.marshal(d, new AU.ptr(false, true));
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = g;
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              $s = -1;
              return [EU.nil, h];
            }
            i = $appendSlice((EU.nil), f.Buffer.Bytes());
            f.Buffer.Reset();
            AQ.Put(f);
            $s = -1;
            return [i, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AG
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Marshal = AG;
    AK.ptr.prototype.Error = function() {
      var d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = d.Type.String();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return "json: unsupported type: " + e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AK.ptr.prototype.Error
        };
      }
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AK.prototype.Error = function() {
      return this.$val.Error();
    };
    AL.ptr.prototype.Error = function() {
      var d;
      d = this;
      return "json: unsupported value: " + d.Str;
    };
    AL.prototype.Error = function() {
      return this.$val.Error();
    };
    AN.ptr.prototype.Error = function() {
      var d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = d.Type.String();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = d.Err.Error();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return "json: error calling MarshalJSON for type " + e + ": " + f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.Error
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.Error = function() {
      return this.$val.Error();
    };
    AR = function() {
      var d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = AQ.Get();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              f = $assertType(e, FG);
              f.Buffer.Reset();
              $s = -1;
              return f;
            }
            $s = -1;
            return new AP.ptr(new A.Buffer.ptr(EU.nil, 0, FF.zero(), 0), FF.zero());
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AR
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AP.ptr.prototype.marshal = function(d, e) {
      var d, e, f, g, h, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              f = [f];
              f[0] = $ifaceNil;
              g = this;
              $deferred.push([(function(f) {
                return function() {
                  var h, i, j, k;
                  h = $recover();
                  if (!($interfaceIsEqual(h, $ifaceNil))) {
                    i = $assertType(h, AS, true);
                    j = $clone(i[0], AS);
                    k = i[1];
                    if (k) {
                      f[0] = j.error;
                    } else {
                      $panic(h);
                    }
                  }
                };
              })(f), []]);
              h = F.ValueOf(d);
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                h = h.$blk();
              }
              if (h && h.$blk !== undefined) {
                break s;
              }
              $r = g.reflectValue($clone(h, F.Value), $clone(e, AU));
              $s = 2;
            case 2:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              f[0] = $ifaceNil;
              $s = -1;
              return f[0];
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
      } finally {
        $callDeferred($deferred, $err);
        if (!$curGoroutine.asleep) {
          return f[0];
        }
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: AP.ptr.prototype.marshal
            };
          }
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.h = h;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    AP.prototype.marshal = function(d, e) {
      return this.$val.marshal(d, e);
    };
    AP.ptr.prototype.error = function(d) {
      var d, e, f;
      e = this;
      $panic((f = new AS.ptr(d), new f.constructor.elem(f)));
    };
    AP.prototype.error = function(d) {
      return this.$val.error(d);
    };
    AT = function(d) {
      var d, e, f, g;
      e = $clone(d, F.Value).Kind();
      if ((e === (17)) || (e === (21)) || (e === (23)) || (e === (24))) {
        return $clone(d, F.Value).Len() === 0;
      } else if (e === (1)) {
        return !$clone(d, F.Value).Bool();
      } else if ((e === (2)) || (e === (3)) || (e === (4)) || (e === (5)) || (e === (6))) {
        return (f = $clone(d, F.Value).Int(), (f.$high === 0 && f.$low === 0));
      } else if ((e === (7)) || (e === (8)) || (e === (9)) || (e === (10)) || (e === (11)) || (e === (12))) {
        return (g = $clone(d, F.Value).Uint(), (g.$high === 0 && g.$low === 0));
      } else if ((e === (13)) || (e === (14))) {
        return $clone(d, F.Value).Float() === 0;
      } else if ((e === (20)) || (e === (22))) {
        return $clone(d, F.Value).IsNil();
      }
      return false;
    };
    AP.ptr.prototype.reflectValue = function(d, e) {
      var d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            g = AX($clone(d, F.Value));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $r = g(f, $clone(d, F.Value), $clone(e, AU));
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AP.ptr.prototype.reflectValue
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AP.prototype.reflectValue = function(d, e) {
      return this.$val.reflectValue(d, e);
    };
    AX = function(d) {
      var d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (!$clone(d, F.Value).IsValid()) {
              $s = -1;
              return BC;
            }
            e = AY($clone(d, F.Value).Type());
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AX
        };
      }
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AY = function(d) {
      var d, e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = [e];
            f = [f];
            g = AW.Load(d);
            h = g[0];
            i = g[1];
            if (i) {
              $s = -1;
              return $assertType(h, AV);
            }
            f[0] = new N.WaitGroup.ptr(0);
            e[0] = $throwNilPointerError;
            f[0].Add(1);
            j = AW.LoadOrStore(d, new AV(((function(e, f) {
              return function $b(k, l, m) {
                var k, l, m, $s, $r;
                $s = 0;
                var $f, $c = false;
                if (this !== undefined && this.$blk !== undefined) {
                  $f = this;
                  $c = true;
                  k = $f.k;
                  l = $f.l;
                  m = $f.m;
                  $s = $f.$s;
                  $r = $f.$r;
                }
                s: while (true) {
                  switch ($s) {
                    case 0:
                      f[0].Wait();
                      $r = e[0](k, $clone(l, F.Value), $clone(m, AU));
                      $s = 1;
                    case 1:
                      if ($c) {
                        $c = false;
                        $r = $r.$blk();
                      }
                      if ($r && $r.$blk !== undefined) {
                        break s;
                      }
                      $s = -1;
                      return;
                  }
                  return;
                }
                if ($f === undefined) {
                  $f = {
                    $blk: $b
                  };
                }
                $f.k = k;
                $f.l = l;
                $f.m = m;
                $f.$s = $s;
                $f.$r = $r;
                return $f;
              };
            })(e, f))));
            k = j[0];
            l = j[1];
            if (l) {
              $s = -1;
              return $assertType(k, AV);
            }
            m = BB(d, true);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            e[0] = m;
            f[0].Done();
            AW.Store(d, new AV(e[0]));
            $s = -1;
            return e[0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AY
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BB = function(d, e) {
      var d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = d.Implements(AZ);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            if (f) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $s = -1;
            return BD;
          case 2:
            g = d.Kind();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            if (!((g === 22)) && e) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            h = F.PtrTo(d).Implements(AZ);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            if (h) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            i = BE;
            j = BB(d, false);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            k = j;
            l = CC(i, k);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return l;
          case 8:
          case 5:
            m = d.Implements(BA);
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            if (m) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 12:
            $s = -1;
            return BF;
          case 13:
            n = d.Kind();
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            if (!((n === 22)) && e) {
              $s = 15;
              continue;
            }
            $s = 16;
            continue;
          case 15:
            o = F.PtrTo(d).Implements(BA);
            $s = 20;
          case 20:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            if (o) {
              $s = 18;
              continue;
            }
            $s = 19;
            continue;
          case 18:
            p = BG;
            q = BB(d, false);
            $s = 21;
          case 21:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            r = q;
            s = CC(p, r);
            $s = 22;
          case 22:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return s;
          case 19:
          case 16:
            t = d.Kind();
            $s = 24;
          case 24:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            u = t;
            if (u === (1)) {
              $s = 25;
              continue;
            }
            if ((u === (2)) || (u === (3)) || (u === (4)) || (u === (5)) || (u === (6))) {
              $s = 26;
              continue;
            }
            if ((u === (7)) || (u === (8)) || (u === (9)) || (u === (10)) || (u === (11)) || (u === (12))) {
              $s = 27;
              continue;
            }
            if (u === (13)) {
              $s = 28;
              continue;
            }
            if (u === (14)) {
              $s = 29;
              continue;
            }
            if (u === (24)) {
              $s = 30;
              continue;
            }
            if (u === (20)) {
              $s = 31;
              continue;
            }
            if (u === (25)) {
              $s = 32;
              continue;
            }
            if (u === (21)) {
              $s = 33;
              continue;
            }
            if (u === (23)) {
              $s = 34;
              continue;
            }
            if (u === (17)) {
              $s = 35;
              continue;
            }
            if (u === (22)) {
              $s = 36;
              continue;
            }
            $s = 37;
            continue;
          case 25:
            $s = -1;
            return BH;
          case 26:
            $s = -1;
            return BI;
          case 27:
            $s = -1;
            return BJ;
          case 28:
            $s = -1;
            return BL;
          case 29:
            $s = -1;
            return BM;
          case 30:
            $s = -1;
            return BN;
          case 31:
            $s = -1;
            return BO;
          case 32:
            v = BR(d);
            $s = 39;
          case 39:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return v;
          case 33:
            w = BT(d);
            $s = 40;
          case 40:
            if ($c) {
              $c = false;
              w = w.$blk();
            }
            if (w && w.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return w;
          case 34:
            x = BW(d);
            $s = 41;
          case 41:
            if ($c) {
              $c = false;
              x = x.$blk();
            }
            if (x && x.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return x;
          case 35:
            y = BY(d);
            $s = 42;
          case 42:
            if ($c) {
              $c = false;
              y = y.$blk();
            }
            if (y && y.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return y;
          case 36:
            z = CA(d);
            $s = 43;
          case 43:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return z;
          case 37:
            $s = -1;
            return BP;
          case 38:
          case 23:
            $s = -1;
            return $throwNilPointerError;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BB
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BC = function(d, e, f) {
      var d, e, f;
      d.Buffer.WriteString("null");
    };
    BD = function(d, e, f) {
      var d, e, f, g, h, i, j, k, l, m, n, o, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (($clone(e, F.Value).Kind() === 22) && $clone(e, F.Value).IsNil()) {
              d.Buffer.WriteString("null");
              $s = -1;
              return;
            }
            h = $clone(e, F.Value).Interface();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = $assertType(h, AJ, true);
            i = g[0];
            j = g[1];
            if (!j) {
              d.Buffer.WriteString("null");
              $s = -1;
              return;
            }
            l = i.MarshalJSON();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            k = l;
            m = k[0];
            n = k[1];
            if ($interfaceIsEqual(n, $ifaceNil)) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            o = CT(d.Buffer, m, f.escapeHTML);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            n = o;
          case 4:
            if (!($interfaceIsEqual(n, $ifaceNil))) {
              d.error(new AN.ptr($clone(e, F.Value).Type(), n));
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BD
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BE = function(d, e, f) {
      var d, e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = $clone(e, F.Value).Addr();
            if ($clone(g, F.Value).IsNil()) {
              d.Buffer.WriteString("null");
              $s = -1;
              return;
            }
            h = $clone(g, F.Value).Interface();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            i = $assertType(h, AJ);
            k = i.MarshalJSON();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            l = j[0];
            m = j[1];
            if ($interfaceIsEqual(m, $ifaceNil)) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            n = CT(d.Buffer, l, true);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            m = n;
          case 4:
            if (!($interfaceIsEqual(m, $ifaceNil))) {
              d.error(new AN.ptr($clone(e, F.Value).Type(), m));
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BE
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BF = function(d, e, f) {
      var d, e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (($clone(e, F.Value).Kind() === 22) && $clone(e, F.Value).IsNil()) {
              d.Buffer.WriteString("null");
              $s = -1;
              return;
            }
            g = $clone(e, F.Value).Interface();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = $assertType(g, B.TextMarshaler);
            j = h.MarshalText();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            i = j;
            k = i[0];
            l = i[1];
            if (!($interfaceIsEqual(l, $ifaceNil))) {
              d.error(new AN.ptr($clone(e, F.Value).Type(), l));
            }
            d.stringBytes(k, f.escapeHTML);
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BF
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BG = function(d, e, f) {
      var d, e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = $clone(e, F.Value).Addr();
            if ($clone(g, F.Value).IsNil()) {
              d.Buffer.WriteString("null");
              $s = -1;
              return;
            }
            h = $clone(g, F.Value).Interface();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            i = $assertType(h, B.TextMarshaler);
            k = i.MarshalText();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            l = j[0];
            m = j[1];
            if (!($interfaceIsEqual(m, $ifaceNil))) {
              d.error(new AN.ptr($clone(e, F.Value).Type(), m));
            }
            d.stringBytes(l, f.escapeHTML);
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BG
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BH = function(d, e, f) {
      var d, e, f;
      if (f.quoted) {
        d.Buffer.WriteByte(34);
      }
      if ($clone(e, F.Value).Bool()) {
        d.Buffer.WriteString("true");
      } else {
        d.Buffer.WriteString("false");
      }
      if (f.quoted) {
        d.Buffer.WriteByte(34);
      }
    };
    BI = function(d, e, f) {
      var d, e, f, g;
      g = G.AppendInt($subslice(new EU(d.scratch), 0, 0), $clone(e, F.Value).Int(), 10);
      if (f.quoted) {
        d.Buffer.WriteByte(34);
      }
      d.Buffer.Write(g);
      if (f.quoted) {
        d.Buffer.WriteByte(34);
      }
    };
    BJ = function(d, e, f) {
      var d, e, f, g;
      g = G.AppendUint($subslice(new EU(d.scratch), 0, 0), $clone(e, F.Value).Uint(), 10);
      if (f.quoted) {
        d.Buffer.WriteByte(34);
      }
      d.Buffer.Write(g);
      if (f.quoted) {
        d.Buffer.WriteByte(34);
      }
    };
    BK.prototype.encode = function(d, e, f) {
      var d, e, f, g, h, i, j, k, l, m, n, o, p, q;
      g = this.$val;
      h = $clone(e, F.Value).Float();
      if (K.IsInf(h, 0) || K.IsNaN(h)) {
        d.error(new AL.ptr($clone(e, F.Value), G.FormatFloat(h, 103, -1, ((g >> 0)))));
      }
      i = $subslice(new EU(d.scratch), 0, 0);
      j = K.Abs(h);
      k = 102;
      if (!((j === 0))) {
        if ((g === 64) && (j < 1e-06 || j >= 1e+21) || (g === 32) && (($fround(j)) < 9.999999974752427e-07 || ($fround(j)) >= 1.0000000200408773e+21)) {
          k = 101;
        }
      }
      i = G.AppendFloat(i, h, k, -1, ((g >> 0)));
      if (k === 101) {
        l = i.$length;
        if (l >= 4 && ((m = l - 4 >> 0, ((m < 0 || m >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + m])) === 101) && ((n = l - 3 >> 0, ((n < 0 || n >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + n])) === 45) && ((o = l - 2 >> 0, ((o < 0 || o >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + o])) === 48)) {
          (q = l - 2 >> 0, ((q < 0 || q >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + q] = (p = l - 1 >> 0, ((p < 0 || p >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + p]))));
          i = $subslice(i, 0, (l - 1 >> 0));
        }
      }
      if (f.quoted) {
        d.Buffer.WriteByte(34);
      }
      d.Buffer.Write(i);
      if (f.quoted) {
        d.Buffer.WriteByte(34);
      }
    };
    $ptrType(BK).prototype.encode = function(d, e, f) {
      return new BK(this.$get()).encode(d, e, f);
    };
    BN = function(d, e, f) {
      var d, e, f, g, h, i, j, k, l, m, n, o, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if ($interfaceIsEqual($clone(e, F.Value).Type(), AC)) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            g = $clone(e, F.Value).String();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = g;
            if (h === "") {
              h = "0";
            }
            if (!V(h)) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            i = E.Errorf("json: invalid number literal %q", new ET([new $String(h)]));
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            $r = d.error(i);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 5:
            d.Buffer.WriteString(h);
            $s = -1;
            return;
          case 2:
            if (f.quoted) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            k = $clone(e, F.Value).String();
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = AG(new $String(k));
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            j = l;
            m = j[0];
            n = j[1];
            if (!($interfaceIsEqual(n, $ifaceNil))) {
              d.error(n);
            }
            d.string(($bytesToString(m)), f.escapeHTML);
            $s = 10;
            continue;
          case 9:
            o = $clone(e, F.Value).String();
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            $r = d.string(o, f.escapeHTML);
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 10:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BN
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BO = function(d, e, f) {
      var d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if ($clone(e, F.Value).IsNil()) {
              d.Buffer.WriteString("null");
              $s = -1;
              return;
            }
            g = $clone(e, F.Value).Elem();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $r = d.reflectValue($clone(g, F.Value), $clone(f, AU));
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BO
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BP = function(d, e, f) {
      var d, e, f;
      d.error(new AK.ptr($clone(e, F.Value).Type()));
    };
    BQ.ptr.prototype.encode = function(d, e, f) {
      var d, e, f, g, h, i, j, k, l, m, n, o, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            d.Buffer.WriteByte(123);
            h = true;
            i = g.fields;
            j = 0;
          case 1:
            if (!(j < i.$length)) {
              $s = 2;
              continue;
            }
            k = j;
            l = $clone(((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j]), CH);
            m = CE($clone(e, F.Value), l.index);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            n = m;
            if (!$clone(n, F.Value).IsValid() || l.omitEmpty && AT($clone(n, F.Value))) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            j++;
            $s = 1;
            continue;
          case 5:
            if (h) {
              h = false;
            } else {
              d.Buffer.WriteByte(44);
            }
            d.string(l.name, f.escapeHTML);
            d.Buffer.WriteByte(58);
            f.quoted = l.quoted;
            $r = (o = g.fieldEncs, ((k < 0 || k >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + k]))(d, $clone(n, F.Value), $clone(f, AU));
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            j++;
            $s = 1;
            continue;
          case 2:
            d.Buffer.WriteByte(125);
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BQ.ptr.prototype.encode
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BQ.prototype.encode = function(d, e, f) {
      return this.$val.encode(d, e, f);
    };
    BR = function(d) {
      var d, e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = CN(d);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            g = new BQ.ptr(f, $makeSlice(FI, f.$length));
            h = f;
            i = 0;
          case 2:
            if (!(i < h.$length)) {
              $s = 3;
              continue;
            }
            j = i;
            k = $clone(((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i]), CH);
            l = CF(d, k.index);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            m = AY(l);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }(n = g.fieldEncs, ((j < 0 || j >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + j] = m));
            i++;
            $s = 2;
            continue;
          case 3:
            $s = -1;
            return $methodVal(g, "encode");
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BR
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BS.ptr.prototype.encode = function(d, e, f) {
      var d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = [g];
            h = this;
            if ($clone(e, F.Value).IsNil()) {
              d.Buffer.WriteString("null");
              $s = -1;
              return;
            }
            d.Buffer.WriteByte(123);
            i = $clone(e, F.Value).MapKeys();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            j = i;
            g[0] = $makeSlice(FJ, j.$length);
            k = j;
            l = 0;
          case 2:
            if (!(l < k.$length)) {
              $s = 3;
              continue;
            }
            m = l;
            n = ((l < 0 || l >= k.$length) ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + l]);
            ((m < 0 || m >= g[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : g[0].$array[g[0].$offset + m]).v = n;
            o = ((m < 0 || m >= g[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : g[0].$array[g[0].$offset + m]).resolve();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            p = o;
            if (!($interfaceIsEqual(p, $ifaceNil))) {
              d.error(new AN.ptr($clone(n, F.Value).Type(), p));
            }
            l++;
            $s = 2;
            continue;
          case 3:
            $r = L.Slice(g[0], (function(g) {
              return function(q, r) {
                var q, r;
                return ((q < 0 || q >= g[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : g[0].$array[g[0].$offset + q]).s < ((r < 0 || r >= g[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : g[0].$array[g[0].$offset + r]).s;
              };
            })(g));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            q = g[0];
            r = 0;
          case 6:
            if (!(r < q.$length)) {
              $s = 7;
              continue;
            }
            s = r;
            t = $clone(((r < 0 || r >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + r]), CG);
            if (s > 0) {
              d.Buffer.WriteByte(44);
            }
            d.string(t.s, f.escapeHTML);
            d.Buffer.WriteByte(58);
            u = d;
            v = $clone(e, F.Value).MapIndex($clone(t.v, F.Value));
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            w = $clone(v, F.Value);
            x = $clone(f, AU);
            $r = h.elemEnc(u, w, x);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            r++;
            $s = 6;
            continue;
          case 7:
            d.Buffer.WriteByte(125);
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BS.ptr.prototype.encode
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BS.prototype.encode = function(d, e, f) {
      return this.$val.encode(d, e, f);
    };
    BT = function(d) {
      var d, e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = d.Key();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e.Kind();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            g = f;
            if ((g === (24)) || (g === (2)) || (g === (3)) || (g === (4)) || (g === (5)) || (g === (6)) || (g === (7)) || (g === (8)) || (g === (9)) || (g === (10)) || (g === (11)) || (g === (12))) {
              $s = 4;
              continue;
            }
            h = d.Key();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            i = h.Implements(BA);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            if (!i) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 4:
            $s = 6;
            continue;
          case 5:
            $s = -1;
            return BP;
          case 6:
          case 1:
            j = d.Elem();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            k = AY(j);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = new BS.ptr(k);
            $s = -1;
            return $methodVal(l, "encode");
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BT
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BU = function(d, e, f) {
      var d, e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if ($clone(e, F.Value).IsNil()) {
              d.Buffer.WriteString("null");
              $s = -1;
              return;
            }
            g = $clone(e, F.Value).Bytes();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = g;
            d.Buffer.WriteByte(34);
            if (h.$length < 1024) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            i = $makeSlice(EU, C.StdEncoding.EncodedLen(h.$length));
            C.StdEncoding.Encode(i, h);
            d.Buffer.Write(i);
            $s = 4;
            continue;
          case 3:
            j = C.NewEncoder(C.StdEncoding, d);
            k = j.Write(h);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            k;
            l = j.Close();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            l;
          case 4:
            d.Buffer.WriteByte(34);
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BU
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BV.ptr.prototype.encode = function(d, e, f) {
      var d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if ($clone(e, F.Value).IsNil()) {
              d.Buffer.WriteString("null");
              $s = -1;
              return;
            }
            $r = g.arrayEnc(d, $clone(e, F.Value), $clone(f, AU));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BV.ptr.prototype.encode
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BV.prototype.encode = function(d, e, f) {
      return this.$val.encode(d, e, f);
    };
    BW = function(d) {
      var d, e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = d.Elem();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e.Kind();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            if (f === 8) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            g = d.Elem();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = F.PtrTo(g);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            i = h;
            k = i.Implements(AZ);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            if (!(!k)) {
              j = false;
              $s = 9;
              continue s;
            }
            l = i.Implements(BA);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            j = !l;
          case 9:
            if (j) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            $s = -1;
            return BU;
          case 8:
          case 2:
            m = BY(d);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            n = new BV.ptr(m);
            $s = -1;
            return $methodVal(n, "encode");
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BW
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BX.ptr.prototype.encode = function(d, e, f) {
      var d, e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            d.Buffer.WriteByte(91);
            h = $clone(e, F.Value).Len();
            i = 0;
          case 1:
            if (!(i < h)) {
              $s = 2;
              continue;
            }
            if (i > 0) {
              d.Buffer.WriteByte(44);
            }
            j = d;
            k = $clone(e, F.Value).Index(i);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = $clone(k, F.Value);
            m = $clone(f, AU);
            $r = g.elemEnc(j, l, m);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            i = i + (1) >> 0;
            $s = 1;
            continue;
          case 2:
            d.Buffer.WriteByte(93);
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BX.ptr.prototype.encode
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BX.prototype.encode = function(d, e, f) {
      return this.$val.encode(d, e, f);
    };
    BY = function(d) {
      var d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = d.Elem();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = AY(e);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            g = new BX.ptr(f);
            $s = -1;
            return $methodVal(g, "encode");
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BY
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BZ.ptr.prototype.encode = function(d, e, f) {
      var d, e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if ($clone(e, F.Value).IsNil()) {
              d.Buffer.WriteString("null");
              $s = -1;
              return;
            }
            h = d;
            i = $clone(e, F.Value).Elem();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            j = $clone(i, F.Value);
            k = $clone(f, AU);
            $r = g.elemEnc(h, j, k);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BZ.ptr.prototype.encode
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BZ.prototype.encode = function(d, e, f) {
      return this.$val.encode(d, e, f);
    };
    CA = function(d) {
      var d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = d.Elem();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = AY(e);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            g = new BZ.ptr(f);
            $s = -1;
            return $methodVal(g, "encode");
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CA
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CB.ptr.prototype.encode = function(d, e, f) {
      var d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if ($clone(e, F.Value).CanAddr()) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = g.canAddrEnc(d, $clone(e, F.Value), $clone(f, AU));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 3;
            continue;
          case 2:
            $r = g.elseEnc(d, $clone(e, F.Value), $clone(f, AU));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 3:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CB.ptr.prototype.encode
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CB.prototype.encode = function(d, e, f) {
      return this.$val.encode(d, e, f);
    };
    CC = function(d, e) {
      var d, e, f;
      f = new CB.ptr(d, e);
      return $methodVal(f, "encode");
    };
    CD = function(d) {
      var d, e, f, g, h;
      if (d === "") {
        return false;
      }
      e = d;
      f = 0;
      while (true) {
        if (!(f < e.length)) {
          break;
        }
        g = $decodeRune(e, f);
        h = g[0];
        if (M.ContainsRune("!#$%&()*+-./:<=>?@[]^_{|}~ ", h)) {} else if (!H.IsLetter(h) && !H.IsDigit(h)) {
          return false;
        }
        f += g[1];
      }
      return true;
    };
    CE = function(d, e) {
      var d, e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = e;
            g = 0;
          case 1:
            if (!(g < f.$length)) {
              $s = 2;
              continue;
            }
            h = ((g < 0 || g >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + g]);
            if ($clone(d, F.Value).Kind() === 22) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            if ($clone(d, F.Value).IsNil()) {
              $s = -1;
              return new F.Value.ptr(FC.nil, 0, 0);
            }
            i = $clone(d, F.Value).Elem();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            d = i;
          case 4:
            j = $clone(d, F.Value).Field(h);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            d = j;
            g++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CE
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CF = function(d, e) {
      var d, e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = e;
            g = 0;
          case 1:
            if (!(g < f.$length)) {
              $s = 2;
              continue;
            }
            h = ((g < 0 || g >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + g]);
            i = d.Kind();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            if (i === 22) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            j = d.Elem();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            d = j;
          case 4:
            k = d.Field(h);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            d = k.Type;
            g++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CF
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CG.ptr.prototype.resolve = function() {
      var d, e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            if ($clone(d.v, F.Value).Kind() === 24) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            e = $clone(d.v, F.Value).String();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            d.s = e;
            $s = -1;
            return $ifaceNil;
          case 2:
            g = $clone(d.v, F.Value).Interface();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = $assertType(g, B.TextMarshaler, true);
            h = f[0];
            i = f[1];
            if (i) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            k = h.MarshalText();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            l = j[0];
            m = j[1];
            d.s = ($bytesToString(l));
            $s = -1;
            return m;
          case 6:
            n = $clone(d.v, F.Value).Kind();
            if ((n === (2)) || (n === (3)) || (n === (4)) || (n === (5)) || (n === (6))) {
              d.s = G.FormatInt($clone(d.v, F.Value).Int(), 10);
              $s = -1;
              return $ifaceNil;
            } else if ((n === (7)) || (n === (8)) || (n === (9)) || (n === (10)) || (n === (11)) || (n === (12))) {
              d.s = G.FormatUint($clone(d.v, F.Value).Uint(), 10);
              $s = -1;
              return $ifaceNil;
            }
            $panic(new $String("unexpected map key type"));
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CG.ptr.prototype.resolve
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CG.prototype.resolve = function() {
      return this.$val.resolve();
    };
    AP.ptr.prototype.string = function(d, e) {
      var d, e, f, g, h, i, j, k, l, m;
      f = this;
      f.Buffer.WriteByte(34);
      g = 0;
      h = 0;
      while (true) {
        if (!(h < d.length)) {
          break;
        }
        i = d.charCodeAt(h);
        if (i < 128) {
          if (((i < 0 || i >= EQ.length) ? ($throwRuntimeError("index out of range"), undefined) : EQ[i]) || (!e && ((i < 0 || i >= EP.length) ? ($throwRuntimeError("index out of range"), undefined) : EP[i]))) {
            h = h + (1) >> 0;
            continue;
          }
          if (g < h) {
            f.Buffer.WriteString($substring(d, g, h));
          }
          j = i;
          if ((j === (92)) || (j === (34))) {
            f.Buffer.WriteByte(92);
            f.Buffer.WriteByte(i);
          } else if (j === (10)) {
            f.Buffer.WriteByte(92);
            f.Buffer.WriteByte(110);
          } else if (j === (13)) {
            f.Buffer.WriteByte(92);
            f.Buffer.WriteByte(114);
          } else if (j === (9)) {
            f.Buffer.WriteByte(92);
            f.Buffer.WriteByte(116);
          } else {
            f.Buffer.WriteString("\\u00");
            f.Buffer.WriteByte(AO.charCodeAt((i >>> 4 << 24 >>> 24)));
            f.Buffer.WriteByte(AO.charCodeAt(((i & 15) >>> 0)));
          }
          h = h + (1) >> 0;
          g = h;
          continue;
        }
        k = J.DecodeRuneInString($substring(d, h));
        l = k[0];
        m = k[1];
        if ((l === 65533) && (m === 1)) {
          if (g < h) {
            f.Buffer.WriteString($substring(d, g, h));
          }
          f.Buffer.WriteString("\\ufffd");
          h = h + (m) >> 0;
          g = h;
          continue;
        }
        if ((l === 8232) || (l === 8233)) {
          if (g < h) {
            f.Buffer.WriteString($substring(d, g, h));
          }
          f.Buffer.WriteString("\\u202");
          f.Buffer.WriteByte(AO.charCodeAt((l & 15)));
          h = h + (m) >> 0;
          g = h;
          continue;
        }
        h = h + (m) >> 0;
      }
      if (g < d.length) {
        f.Buffer.WriteString($substring(d, g));
      }
      f.Buffer.WriteByte(34);
    };
    AP.prototype.string = function(d, e) {
      return this.$val.string(d, e);
    };
    AP.ptr.prototype.stringBytes = function(d, e) {
      var d, e, f, g, h, i, j, k, l, m;
      f = this;
      f.Buffer.WriteByte(34);
      g = 0;
      h = 0;
      while (true) {
        if (!(h < d.$length)) {
          break;
        }
        i = ((h < 0 || h >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + h]);
        if (i < 128) {
          if (((i < 0 || i >= EQ.length) ? ($throwRuntimeError("index out of range"), undefined) : EQ[i]) || (!e && ((i < 0 || i >= EP.length) ? ($throwRuntimeError("index out of range"), undefined) : EP[i]))) {
            h = h + (1) >> 0;
            continue;
          }
          if (g < h) {
            f.Buffer.Write($subslice(d, g, h));
          }
          j = i;
          if ((j === (92)) || (j === (34))) {
            f.Buffer.WriteByte(92);
            f.Buffer.WriteByte(i);
          } else if (j === (10)) {
            f.Buffer.WriteByte(92);
            f.Buffer.WriteByte(110);
          } else if (j === (13)) {
            f.Buffer.WriteByte(92);
            f.Buffer.WriteByte(114);
          } else if (j === (9)) {
            f.Buffer.WriteByte(92);
            f.Buffer.WriteByte(116);
          } else {
            f.Buffer.WriteString("\\u00");
            f.Buffer.WriteByte(AO.charCodeAt((i >>> 4 << 24 >>> 24)));
            f.Buffer.WriteByte(AO.charCodeAt(((i & 15) >>> 0)));
          }
          h = h + (1) >> 0;
          g = h;
          continue;
        }
        k = J.DecodeRune($subslice(d, h));
        l = k[0];
        m = k[1];
        if ((l === 65533) && (m === 1)) {
          if (g < h) {
            f.Buffer.Write($subslice(d, g, h));
          }
          f.Buffer.WriteString("\\ufffd");
          h = h + (m) >> 0;
          g = h;
          continue;
        }
        if ((l === 8232) || (l === 8233)) {
          if (g < h) {
            f.Buffer.Write($subslice(d, g, h));
          }
          f.Buffer.WriteString("\\u202");
          f.Buffer.WriteByte(AO.charCodeAt((l & 15)));
          h = h + (m) >> 0;
          g = h;
          continue;
        }
        h = h + (m) >> 0;
      }
      if (g < d.$length) {
        f.Buffer.Write($subslice(d, g));
      }
      f.Buffer.WriteByte(34);
    };
    AP.prototype.stringBytes = function(d, e) {
      return this.$val.stringBytes(d, e);
    };
    CI = function(d) {
      var d;
      d.nameBytes = (new EU($stringToBytes(d.name)));
      d.equalFold = CO(d.nameBytes);
      return d;
    };
    CJ.prototype.Len = function() {
      var d;
      d = this;
      return d.$length;
    };
    $ptrType(CJ).prototype.Len = function() {
      return this.$get().Len();
    };
    CJ.prototype.Swap = function(d, e) {
      var d, e, f, g, h;
      f = this;
      g = $clone(((e < 0 || e >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + e]), CH);
      h = $clone(((d < 0 || d >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + d]), CH);
      CH.copy(((d < 0 || d >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + d]), g);
      CH.copy(((e < 0 || e >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + e]), h);
    };
    $ptrType(CJ).prototype.Swap = function(d, e) {
      return this.$get().Swap(d, e);
    };
    CJ.prototype.Less = function(d, e) {
      var d, e, f, g, h, i, j, k, l;
      f = this;
      g = ((d < 0 || d >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + d]).index;
      h = 0;
      while (true) {
        if (!(h < g.$length)) {
          break;
        }
        i = h;
        j = ((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h]);
        if (i >= ((e < 0 || e >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + e]).index.$length) {
          return false;
        }
        if (!((j === (k = ((e < 0 || e >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + e]).index, ((i < 0 || i >= k.$length) ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + i]))))) {
          return j < (l = ((e < 0 || e >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + e]).index, ((i < 0 || i >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + i]));
        }
        h++;
      }
      return ((d < 0 || d >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + d]).index.$length < ((e < 0 || e >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + e]).index.$length;
    };
    $ptrType(CJ).prototype.Less = function(d, e) {
      return this.$get().Less(d, e);
    };
    CK = function(d) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        ba = $f.ba;
        bb = $f.bb;
        bc = $f.bc;
        bd = $f.bd;
        be = $f.be;
        bf = $f.bf;
        bg = $f.bg;
        bh = $f.bh;
        bi = $f.bi;
        bj = $f.bj;
        bk = $f.bk;
        bl = $f.bl;
        bm = $f.bm;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = [e];
            f = new FH([]);
            g = new FH([new CH.ptr("", EU.nil, $throwNilPointerError, false, EZ.nil, d, false, false)]);
            h = $makeMap(F.Type.keyFor, []);
            i = $makeMap(F.Type.keyFor, []);
            j = $makeMap(F.Type.keyFor, []);
            e[0] = FH.nil;
          case 1:
            if (!(g.$length > 0)) {
              $s = 2;
              continue;
            }
            k = g;
            l = $subslice(f, 0, 0);
            f = k;
            g = l;
            m = i;
            n = $makeMap(F.Type.keyFor, []);
            h = m;
            i = n;
            o = f;
            p = 0;
          case 3:
            if (!(p < o.$length)) {
              $s = 4;
              continue;
            }
            q = $clone(((p < 0 || p >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + p]), CH);
            if ((r = j[F.Type.keyFor(q.typ)], r !== undefined ? r.v : false)) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            p++;
            $s = 3;
            continue;
          case 6:
            s = q.typ;
            (j || $throwRuntimeError("assignment to entry in nil map"))[F.Type.keyFor(s)] = {
              k: s,
              v: true
            };
            t = 0;
          case 7:
            u = q.typ.NumField();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              u = u.$blk();
            }
            if (u && u.$blk !== undefined) {
              break s;
            }
            if (!(t < u)) {
              $s = 8;
              continue;
            }
            v = q.typ.Field(t);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            w = $clone(v, F.StructField);
            x = !(w.PkgPath === "");
            if (w.Anonymous) {
              $s = 11;
              continue;
            }
            if (x) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 11:
            y = w.Type;
            z = y.Kind();
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            if (z === 22) {
              $s = 14;
              continue;
            }
            $s = 15;
            continue;
          case 14:
            aa = y.Elem();
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              aa = aa.$blk();
            }
            if (aa && aa.$blk !== undefined) {
              break s;
            }
            y = aa;
          case 15:
            if (!(x)) {
              ab = false;
              $s = 20;
              continue s;
            }
            ac = y.Kind();
            $s = 21;
          case 21:
            if ($c) {
              $c = false;
              ac = ac.$blk();
            }
            if (ac && ac.$blk !== undefined) {
              break s;
            }
            ab = !((ac === 25));
          case 20:
            if (ab) {
              $s = 18;
              continue;
            }
            $s = 19;
            continue;
          case 18:
            t = t + (1) >> 0;
            $s = 7;
            continue;
          case 19:
            $s = 13;
            continue;
          case 12:
            t = t + (1) >> 0;
            $s = 7;
            continue;
          case 13:
            ad = new F.StructTag(w.Tag).Get("json");
            if (ad === "-") {
              $s = 22;
              continue;
            }
            $s = 23;
            continue;
          case 22:
            t = t + (1) >> 0;
            $s = 7;
            continue;
          case 23:
            ae = ES(ad);
            af = ae[0];
            ag = ae[1];
            if (!CD(af)) {
              af = "";
            }
            ah = $makeSlice(EZ, (q.index.$length + 1 >> 0));
            $copySlice(ah, q.index);
            (ai = q.index.$length, ((ai < 0 || ai >= ah.$length) ? ($throwRuntimeError("index out of range"), undefined) : ah.$array[ah.$offset + ai] = t));
            aj = w.Type;
            al = aj.Name();
            $s = 27;
          case 27:
            if ($c) {
              $c = false;
              al = al.$blk();
            }
            if (al && al.$blk !== undefined) {
              break s;
            }
            if (!(al === "")) {
              ak = false;
              $s = 26;
              continue s;
            }
            am = aj.Kind();
            $s = 28;
          case 28:
            if ($c) {
              $c = false;
              am = am.$blk();
            }
            if (am && am.$blk !== undefined) {
              break s;
            }
            ak = am === 22;
          case 26:
            if (ak) {
              $s = 24;
              continue;
            }
            $s = 25;
            continue;
          case 24:
            an = aj.Elem();
            $s = 29;
          case 29:
            if ($c) {
              $c = false;
              an = an.$blk();
            }
            if (an && an.$blk !== undefined) {
              break s;
            }
            aj = an;
          case 25:
            ao = false;
            if (new ER(ag).Contains("string")) {
              $s = 30;
              continue;
            }
            $s = 31;
            continue;
          case 30:
            ap = aj.Kind();
            $s = 33;
          case 33:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            aq = ap;
            if ((aq === (1)) || (aq === (2)) || (aq === (3)) || (aq === (4)) || (aq === (5)) || (aq === (6)) || (aq === (7)) || (aq === (8)) || (aq === (9)) || (aq === (10)) || (aq === (11)) || (aq === (12)) || (aq === (13)) || (aq === (14)) || (aq === (24))) {
              ao = true;
            }
          case 32:
          case 31:
            if (!(af === "") || !w.Anonymous) {
              ar = true;
              $s = 36;
              continue s;
            }
            as = aj.Kind();
            $s = 37;
          case 37:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            ar = !((as === 25));
          case 36:
            if (ar) {
              $s = 34;
              continue;
            }
            $s = 35;
            continue;
          case 34:
            at = !(af === "");
            if (af === "") {
              af = w.Name;
            }
            e[0] = $append(e[0], CI(new CH.ptr(af, EU.nil, $throwNilPointerError, at, ah, aj, new ER(ag).Contains("omitempty"), ao)));
            if ((au = h[F.Type.keyFor(q.typ)], au !== undefined ? au.v : 0) > 1) {
              e[0] = $append(e[0], (av = e[0].$length - 1 >> 0, ((av < 0 || av >= e[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : e[0].$array[e[0].$offset + av])));
            }
            t = t + (1) >> 0;
            $s = 7;
            continue;
          case 35:
            aw = aj;
            (i || $throwRuntimeError("assignment to entry in nil map"))[F.Type.keyFor(aw)] = {
              k: aw,
              v: (ax = i[F.Type.keyFor(aj)], ax !== undefined ? ax.v : 0) + (1) >> 0
            };
            if ((ay = i[F.Type.keyFor(aj)], ay !== undefined ? ay.v : 0) === 1) {
              $s = 38;
              continue;
            }
            $s = 39;
            continue;
          case 38:
            az = aj.Name();
            $s = 40;
          case 40:
            if ($c) {
              $c = false;
              az = az.$blk();
            }
            if (az && az.$blk !== undefined) {
              break s;
            }
            ba = CI(new CH.ptr(az, EU.nil, $throwNilPointerError, false, ah, aj, false, false));
            $s = 41;
          case 41:
            if ($c) {
              $c = false;
              ba = ba.$blk();
            }
            if (ba && ba.$blk !== undefined) {
              break s;
            }
            g = $append(g, ba);
          case 39:
            t = t + (1) >> 0;
            $s = 7;
            continue;
          case 8:
            p++;
            $s = 3;
            continue;
          case 4:
            $s = 1;
            continue;
          case 2:
            $r = L.Slice(e[0], (function(e) {
              return function(bb, bc) {
                var bb, bc, bd;
                bd = e[0];
                if (!(((bb < 0 || bb >= bd.$length) ? ($throwRuntimeError("index out of range"), undefined) : bd.$array[bd.$offset + bb]).name === ((bc < 0 || bc >= bd.$length) ? ($throwRuntimeError("index out of range"), undefined) : bd.$array[bd.$offset + bc]).name)) {
                  return ((bb < 0 || bb >= bd.$length) ? ($throwRuntimeError("index out of range"), undefined) : bd.$array[bd.$offset + bb]).name < ((bc < 0 || bc >= bd.$length) ? ($throwRuntimeError("index out of range"), undefined) : bd.$array[bd.$offset + bc]).name;
                }
                if (!((((bb < 0 || bb >= bd.$length) ? ($throwRuntimeError("index out of range"), undefined) : bd.$array[bd.$offset + bb]).index.$length === ((bc < 0 || bc >= bd.$length) ? ($throwRuntimeError("index out of range"), undefined) : bd.$array[bd.$offset + bc]).index.$length))) {
                  return ((bb < 0 || bb >= bd.$length) ? ($throwRuntimeError("index out of range"), undefined) : bd.$array[bd.$offset + bb]).index.$length < ((bc < 0 || bc >= bd.$length) ? ($throwRuntimeError("index out of range"), undefined) : bd.$array[bd.$offset + bc]).index.$length;
                }
                if (!(((bb < 0 || bb >= bd.$length) ? ($throwRuntimeError("index out of range"), undefined) : bd.$array[bd.$offset + bb]).tag === ((bc < 0 || bc >= bd.$length) ? ($throwRuntimeError("index out of range"), undefined) : bd.$array[bd.$offset + bc]).tag)) {
                  return ((bb < 0 || bb >= bd.$length) ? ($throwRuntimeError("index out of range"), undefined) : bd.$array[bd.$offset + bb]).tag;
                }
                return ($subslice(new CJ(bd.$array), bd.$offset, bd.$offset + bd.$length)).Less(bb, bc);
              };
            })(e));
            $s = 42;
          case 42:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            bb = $subslice(e[0], 0, 0);
            bc = 0;
            bd = 0;
            be = bc;
            bf = bd;
          case 43:
            if (!(bf < e[0].$length)) {
              $s = 44;
              continue;
            }
            bg = $clone(((bf < 0 || bf >= e[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : e[0].$array[e[0].$offset + bf]), CH);
            bh = bg.name;
            be = 1;
            while (true) {
              if (!((bf + be >> 0) < e[0].$length)) {
                break;
              }
              bj = $clone((bi = bf + be >> 0, ((bi < 0 || bi >= e[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : e[0].$array[e[0].$offset + bi])), CH);
              if (!(bj.name === bh)) {
                break;
              }
              be = be + (1) >> 0;
            }
            if (be === 1) {
              bb = $append(bb, bg);
              bf = bf + (be) >> 0;
              $s = 43;
              continue;
            }
            bk = CL($subslice(e[0], bf, (bf + be >> 0)));
            bl = $clone(bk[0], CH);
            bm = bk[1];
            if (bm) {
              bb = $append(bb, bl);
            }
            bf = bf + (be) >> 0;
            $s = 43;
            continue;
          case 44:
            e[0] = bb;
            $r = L.Sort(($subslice(new CJ(e[0].$array), e[0].$offset, e[0].$offset + e[0].$length)));
            $s = 45;
          case 45:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return e[0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CK
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.ba = ba;
      $f.bb = bb;
      $f.bc = bc;
      $f.bd = bd;
      $f.be = be;
      $f.bf = bf;
      $f.bg = bg;
      $f.bh = bh;
      $f.bi = bi;
      $f.bj = bj;
      $f.bk = bk;
      $f.bl = bl;
      $f.bm = bm;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CL = function(d) {
      var d;
      if (d.$length > 1 && ((0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0]).index.$length === (1 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 1]).index.$length) && (0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0]).tag === (1 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 1]).tag) {
        return [new CH.ptr("", EU.nil, $throwNilPointerError, false, EZ.nil, $ifaceNil, false, false), false];
      }
      return [(0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0]), true];
    };
    CN = function(d) {
      var d, e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = CM.Load(d);
            f = e[0];
            g = e[1];
            if (g) {
              $s = -1;
              return $assertType(f, FH);
            }
            i = d;
            j = CK(d);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            k = j;
            l = CM.LoadOrStore(i, k);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            h = l;
            m = h[0];
            $s = -1;
            return $assertType(m, FH);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CN
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CO = function(d) {
      var d, e, f, g, h, i, j;
      e = false;
      f = false;
      g = d;
      h = 0;
      while (true) {
        if (!(h < g.$length)) {
          break;
        }
        i = ((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h]);
        if (i >= 128) {
          return A.EqualFold;
        }
        j = (i & 223) >>> 0;
        if (j < 65 || j > 90) {
          e = true;
        } else if ((j === 75) || (j === 83)) {
          f = true;
        }
        h++;
      }
      if (f) {
        return CP;
      }
      if (e) {
        return CQ;
      }
      return CR;
    };
    CP = function(d, e) {
      var d, e, f, g, h, i, j, k, l, m, n;
      f = d;
      g = 0;
      while (true) {
        if (!(g < f.$length)) {
          break;
        }
        h = ((g < 0 || g >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + g]);
        if (e.$length === 0) {
          return false;
        }
        i = (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]);
        if (i < 128) {
          if (!((h === i))) {
            j = (h & 223) >>> 0;
            if (65 <= j && j <= 90) {
              if (!((j === ((i & 223) >>> 0)))) {
                return false;
              }
            } else {
              return false;
            }
          }
          e = $subslice(e, 1);
          g++;
          continue;
        }
        k = J.DecodeRune(e);
        l = k[0];
        m = k[1];
        n = h;
        if ((n === (115)) || (n === (83))) {
          if (!((l === 383))) {
            return false;
          }
        } else if ((n === (107)) || (n === (75))) {
          if (!((l === 8490))) {
            return false;
          }
        } else {
          return false;
        }
        e = $subslice(e, m);
        g++;
      }
      if (e.$length > 0) {
        return false;
      }
      return true;
    };
    CQ = function(d, e) {
      var d, e, f, g, h, i, j;
      if (!((d.$length === e.$length))) {
        return false;
      }
      f = d;
      g = 0;
      while (true) {
        if (!(g < f.$length)) {
          break;
        }
        h = g;
        i = ((g < 0 || g >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + g]);
        j = ((h < 0 || h >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + h]);
        if (i === j) {
          g++;
          continue;
        }
        if ((97 <= i && i <= 122) || (65 <= i && i <= 90)) {
          if (!((((i & 223) >>> 0) === ((j & 223) >>> 0)))) {
            return false;
          }
        } else {
          return false;
        }
        g++;
      }
      return true;
    };
    CR = function(d, e) {
      var d, e, f, g, h, i;
      if (!((d.$length === e.$length))) {
        return false;
      }
      f = d;
      g = 0;
      while (true) {
        if (!(g < f.$length)) {
          break;
        }
        h = g;
        i = ((g < 0 || g >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + g]);
        if (!((((i & 223) >>> 0) === ((((h < 0 || h >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + h]) & 223) >>> 0)))) {
          return false;
        }
        g++;
      }
      return true;
    };
    CT = function(d, e, f) {
      var d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = [g];
            h = d.Len();
            g[0] = new CZ.ptr($throwNilPointerError, false, EZ.nil, $ifaceNil, new $Int64(0, 0));
            g[0].reset();
            i = 0;
            j = e;
            k = 0;
          case 1:
            if (!(k < j.$length)) {
              $s = 2;
              continue;
            }
            l = k;
            m = ((k < 0 || k >= j.$length) ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + k]);
            if (f && ((m === 60) || (m === 62) || (m === 38))) {
              if (i < l) {
                d.Write($subslice(e, i, l));
              }
              d.WriteString("\\u00");
              d.WriteByte(AO.charCodeAt((m >>> 4 << 24 >>> 24)));
              d.WriteByte(AO.charCodeAt(((m & 15) >>> 0)));
              i = l + 1 >> 0;
            }
            if ((m === 226) && (l + 2 >> 0) < e.$length && ((n = l + 1 >> 0, ((n < 0 || n >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + n])) === 128) && ((((o = l + 2 >> 0, ((o < 0 || o >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + o])) & ~1) << 24 >>> 24) === 168)) {
              if (i < l) {
                d.Write($subslice(e, i, l));
              }
              d.WriteString("\\u202");
              d.WriteByte(AO.charCodeAt((((p = l + 2 >> 0, ((p < 0 || p >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + p])) & 15) >>> 0)));
              i = l + 3 >> 0;
            }
            q = g[0].step(g[0], m);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            r = q;
            if (r >= 9) {
              if (r === 11) {
                $s = 2;
                continue;
              }
              if (i < l) {
                d.Write($subslice(e, i, l));
              }
              i = l + 1 >> 0;
            }
            k++;
            $s = 1;
            continue;
          case 2:
            s = g[0].eof();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            if (s === 11) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            d.Truncate(h);
            $s = -1;
            return g[0].err;
          case 5:
            if (i < e.$length) {
              d.Write($subslice(e, i));
            }
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CT
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CX = function(d, e) {
      var d, e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e.reset();
            f = d;
            g = 0;
          case 1:
            if (!(g < f.$length)) {
              $s = 2;
              continue;
            }
            h = ((g < 0 || g >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + g]);
            e.bytes = (i = e.bytes, j = new $Int64(0, 1), new $Int64(i.$high + j.$high, i.$low + j.$low));
            k = e.step(e, h);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            if (k === 11) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            $s = -1;
            return e.err;
          case 4:
            g++;
            $s = 1;
            continue;
          case 2:
            l = e.eof();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            if (l === 11) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            $s = -1;
            return e.err;
          case 7:
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CX
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CY.ptr.prototype.Error = function() {
      var d;
      d = this;
      return d.msg;
    };
    CY.prototype.Error = function() {
      return this.$val.Error();
    };
    CZ.ptr.prototype.reset = function() {
      var d;
      d = this;
      d.step = DC;
      d.parseState = $subslice(d.parseState, 0, 0);
      d.err = $ifaceNil;
      d.endTop = false;
    };
    CZ.prototype.reset = function() {
      return this.$val.reset();
    };
    CZ.ptr.prototype.eof = function() {
      var d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            if (!($interfaceIsEqual(d.err, $ifaceNil))) {
              $s = -1;
              return 11;
            }
            if (d.endTop) {
              $s = -1;
              return 10;
            }
            e = d.step(d, 32);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            e;
            if (d.endTop) {
              $s = -1;
              return 10;
            }
            if ($interfaceIsEqual(d.err, $ifaceNil)) {
              d.err = new CY.ptr("unexpected end of JSON input", d.bytes);
            }
            $s = -1;
            return 11;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CZ.ptr.prototype.eof
        };
      }
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CZ.prototype.eof = function() {
      return this.$val.eof();
    };
    CZ.ptr.prototype.pushParseState = function(d) {
      var d, e;
      e = this;
      e.parseState = $append(e.parseState, d);
    };
    CZ.prototype.pushParseState = function(d) {
      return this.$val.pushParseState(d);
    };
    CZ.ptr.prototype.popParseState = function() {
      var d, e;
      d = this;
      e = d.parseState.$length - 1 >> 0;
      d.parseState = $subslice(d.parseState, 0, e);
      if (e === 0) {
        d.step = DG;
        d.endTop = true;
      } else {
        d.step = DF;
      }
    };
    CZ.prototype.popParseState = function() {
      return this.$val.popParseState();
    };
    DA = function(d) {
      var d;
      return (d === 32) || (d === 9) || (d === 13) || (d === 10);
    };
    DB = function(d, e) {
      var d, e;
      if (e <= 32 && DA(e)) {
        return 9;
      }
      if (e === 93) {
        return DF(d, e);
      }
      return DC(d, e);
    };
    DC = function(d, e) {
      var d, e, f;
      if (e <= 32 && DA(e)) {
        return 9;
      }
      f = e;
      if (f === (123)) {
        d.step = DD;
        d.pushParseState(0);
        return 2;
      } else if (f === (91)) {
        d.step = DB;
        d.pushParseState(2);
        return 6;
      } else if (f === (34)) {
        d.step = DH;
        return 1;
      } else if (f === (45)) {
        d.step = DN;
        return 1;
      } else if (f === (48)) {
        d.step = DP;
        return 1;
      } else if (f === (116)) {
        d.step = DV;
        return 1;
      } else if (f === (102)) {
        d.step = DY;
        return 1;
      } else if (f === (110)) {
        d.step = EC;
        return 1;
      }
      if (49 <= e && e <= 57) {
        d.step = DO;
        return 1;
      }
      return d.error(e, "looking for beginning of value");
    };
    DD = function(d, e) {
      var d, e, f, g, h;
      if (e <= 32 && DA(e)) {
        return 9;
      }
      if (e === 125) {
        f = d.parseState.$length;
        (g = d.parseState, h = f - 1 >> 0, ((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h] = 1));
        return DF(d, e);
      }
      return DE(d, e);
    };
    DE = function(d, e) {
      var d, e;
      if (e <= 32 && DA(e)) {
        return 9;
      }
      if (e === 34) {
        d.step = DH;
        return 1;
      }
      return d.error(e, "looking for beginning of object key string");
    };
    DF = function(d, e) {
      var d, e, f, g, h, i, j, k, l, m, n;
      f = d.parseState.$length;
      if (f === 0) {
        d.step = DG;
        d.endTop = true;
        return DG(d, e);
      }
      if (e <= 32 && DA(e)) {
        d.step = DF;
        return 9;
      }
      i = (g = d.parseState, h = f - 1 >> 0, ((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h]));
      j = i;
      if (j === (0)) {
        if (e === 58) {
          (k = d.parseState, l = f - 1 >> 0, ((l < 0 || l >= k.$length) ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + l] = 1));
          d.step = DC;
          return 3;
        }
        return d.error(e, "after object key");
      } else if (j === (1)) {
        if (e === 44) {
          (m = d.parseState, n = f - 1 >> 0, ((n < 0 || n >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + n] = 0));
          d.step = DE;
          return 4;
        }
        if (e === 125) {
          d.popParseState();
          return 5;
        }
        return d.error(e, "after object key:value pair");
      } else if (j === (2)) {
        if (e === 44) {
          d.step = DC;
          return 7;
        }
        if (e === 93) {
          d.popParseState();
          return 8;
        }
        return d.error(e, "after array element");
      }
      return d.error(e, "");
    };
    DG = function(d, e) {
      var d, e;
      if (!((e === 32)) && !((e === 9)) && !((e === 13)) && !((e === 10))) {
        d.error(e, "after top-level value");
      }
      return 10;
    };
    DH = function(d, e) {
      var d, e;
      if (e === 34) {
        d.step = DF;
        return 0;
      }
      if (e === 92) {
        d.step = DI;
        return 0;
      }
      if (e < 32) {
        return d.error(e, "in string literal");
      }
      return 0;
    };
    DI = function(d, e) {
      var d, e, f;
      f = e;
      if ((f === (98)) || (f === (102)) || (f === (110)) || (f === (114)) || (f === (116)) || (f === (92)) || (f === (47)) || (f === (34))) {
        d.step = DH;
        return 0;
      } else if (f === (117)) {
        d.step = DJ;
        return 0;
      }
      return d.error(e, "in string escape code");
    };
    DJ = function(d, e) {
      var d, e;
      if (48 <= e && e <= 57 || 97 <= e && e <= 102 || 65 <= e && e <= 70) {
        d.step = DK;
        return 0;
      }
      return d.error(e, "in \\u hexadecimal character escape");
    };
    DK = function(d, e) {
      var d, e;
      if (48 <= e && e <= 57 || 97 <= e && e <= 102 || 65 <= e && e <= 70) {
        d.step = DL;
        return 0;
      }
      return d.error(e, "in \\u hexadecimal character escape");
    };
    DL = function(d, e) {
      var d, e;
      if (48 <= e && e <= 57 || 97 <= e && e <= 102 || 65 <= e && e <= 70) {
        d.step = DM;
        return 0;
      }
      return d.error(e, "in \\u hexadecimal character escape");
    };
    DM = function(d, e) {
      var d, e;
      if (48 <= e && e <= 57 || 97 <= e && e <= 102 || 65 <= e && e <= 70) {
        d.step = DH;
        return 0;
      }
      return d.error(e, "in \\u hexadecimal character escape");
    };
    DN = function(d, e) {
      var d, e;
      if (e === 48) {
        d.step = DP;
        return 0;
      }
      if (49 <= e && e <= 57) {
        d.step = DO;
        return 0;
      }
      return d.error(e, "in numeric literal");
    };
    DO = function(d, e) {
      var d, e;
      if (48 <= e && e <= 57) {
        d.step = DO;
        return 0;
      }
      return DP(d, e);
    };
    DP = function(d, e) {
      var d, e;
      if (e === 46) {
        d.step = DQ;
        return 0;
      }
      if ((e === 101) || (e === 69)) {
        d.step = DS;
        return 0;
      }
      return DF(d, e);
    };
    DQ = function(d, e) {
      var d, e;
      if (48 <= e && e <= 57) {
        d.step = DR;
        return 0;
      }
      return d.error(e, "after decimal point in numeric literal");
    };
    DR = function(d, e) {
      var d, e;
      if (48 <= e && e <= 57) {
        return 0;
      }
      if ((e === 101) || (e === 69)) {
        d.step = DS;
        return 0;
      }
      return DF(d, e);
    };
    DS = function(d, e) {
      var d, e;
      if ((e === 43) || (e === 45)) {
        d.step = DT;
        return 0;
      }
      return DT(d, e);
    };
    DT = function(d, e) {
      var d, e;
      if (48 <= e && e <= 57) {
        d.step = DU;
        return 0;
      }
      return d.error(e, "in exponent of numeric literal");
    };
    DU = function(d, e) {
      var d, e;
      if (48 <= e && e <= 57) {
        return 0;
      }
      return DF(d, e);
    };
    DV = function(d, e) {
      var d, e;
      if (e === 114) {
        d.step = DW;
        return 0;
      }
      return d.error(e, "in literal true (expecting 'r')");
    };
    DW = function(d, e) {
      var d, e;
      if (e === 117) {
        d.step = DX;
        return 0;
      }
      return d.error(e, "in literal true (expecting 'u')");
    };
    DX = function(d, e) {
      var d, e;
      if (e === 101) {
        d.step = DF;
        return 0;
      }
      return d.error(e, "in literal true (expecting 'e')");
    };
    DY = function(d, e) {
      var d, e;
      if (e === 97) {
        d.step = DZ;
        return 0;
      }
      return d.error(e, "in literal false (expecting 'a')");
    };
    DZ = function(d, e) {
      var d, e;
      if (e === 108) {
        d.step = EA;
        return 0;
      }
      return d.error(e, "in literal false (expecting 'l')");
    };
    EA = function(d, e) {
      var d, e;
      if (e === 115) {
        d.step = EB;
        return 0;
      }
      return d.error(e, "in literal false (expecting 's')");
    };
    EB = function(d, e) {
      var d, e;
      if (e === 101) {
        d.step = DF;
        return 0;
      }
      return d.error(e, "in literal false (expecting 'e')");
    };
    EC = function(d, e) {
      var d, e;
      if (e === 117) {
        d.step = ED;
        return 0;
      }
      return d.error(e, "in literal null (expecting 'u')");
    };
    ED = function(d, e) {
      var d, e;
      if (e === 108) {
        d.step = EE;
        return 0;
      }
      return d.error(e, "in literal null (expecting 'l')");
    };
    EE = function(d, e) {
      var d, e;
      if (e === 108) {
        d.step = DF;
        return 0;
      }
      return d.error(e, "in literal null (expecting 'l')");
    };
    EF = function(d, e) {
      var d, e;
      return 11;
    };
    CZ.ptr.prototype.error = function(d, e) {
      var d, e, f;
      f = this;
      f.step = EF;
      f.err = new CY.ptr("invalid character " + EG(d) + " " + e, f.bytes);
      return 11;
    };
    CZ.prototype.error = function(d, e) {
      return this.$val.error(d, e);
    };
    EG = function(d) {
      var d, e;
      if (d === 39) {
        return "'\\''";
      }
      if (d === 34) {
        return "'\"'";
      }
      e = G.Quote(($encodeRune(d)));
      return "'" + $substring(e, 1, (e.length - 1 >> 0)) + "'";
    };
    EI = function(d) {
      var d;
      return new EH.ptr(d, EU.nil, new W.ptr(EU.nil, 0, 0, new CZ.ptr($throwNilPointerError, false, EZ.nil, $ifaceNil, new $Int64(0, 0)), new FA.ptr("", ""), $ifaceNil, false, false), 0, new $Int64(0, 0), new CZ.ptr($throwNilPointerError, false, EZ.nil, $ifaceNil, new $Int64(0, 0)), $ifaceNil, 0, EZ.nil);
    };
    $pkg.NewDecoder = EI;
    EH.ptr.prototype.UseNumber = function() {
      var d;
      d = this;
      d.d.useNumber = true;
    };
    EH.prototype.UseNumber = function() {
      return this.$val.UseNumber();
    };
    EH.ptr.prototype.DisallowUnknownFields = function() {
      var d;
      d = this;
      d.d.disallowUnknownFields = true;
    };
    EH.prototype.DisallowUnknownFields = function() {
      return this.$val.DisallowUnknownFields();
    };
    EH.ptr.prototype.Decode = function(d) {
      var d, e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            if (!($interfaceIsEqual(e.err, $ifaceNil))) {
              $s = -1;
              return e.err;
            }
            f = e.tokenPrepareForDecode();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            g = f;
            if (!($interfaceIsEqual(g, $ifaceNil))) {
              $s = -1;
              return g;
            }
            if (!e.tokenValueAllowed()) {
              $s = -1;
              return new CY.ptr("not at beginning of value", e.offset());
            }
            i = e.readValue();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            j = h[0];
            k = h[1];
            if (!($interfaceIsEqual(k, $ifaceNil))) {
              $s = -1;
              return k;
            }
            e.d.init($subslice(e.buf, e.scanp, (e.scanp + j >> 0)));
            e.scanp = e.scanp + (j) >> 0;
            l = e.d.unmarshal(d);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            k = l;
            e.tokenValueEnd();
            $s = -1;
            return k;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: EH.ptr.prototype.Decode
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    EH.prototype.Decode = function(d) {
      return this.$val.Decode(d);
    };
    EH.ptr.prototype.Buffered = function() {
      var d;
      d = this;
      return A.NewReader($subslice(d.buf, d.scanp));
    };
    EH.prototype.Buffered = function() {
      return this.$val.Buffered();
    };
    EH.ptr.prototype.readValue = function() {
      var d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            d.scan.reset();
            e = d.scanp;
            f = $ifaceNil;
          case 1:
            g = $subslice(d.buf, e);
            h = 0;
          case 3:
            if (!(h < g.$length)) {
              $s = 4;
              continue;
            }
            i = h;
            j = ((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h]);
            d.scan.bytes = (k = d.scan.bytes, l = new $Int64(0, 1), new $Int64(k.$high + l.$high, k.$low + l.$low));
            m = d.scan.step(d.scan, j);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            n = m;
            if (n === 10) {
              e = e + (i) >> 0;
              $s = 2;
              continue s;
            }
            if (!((n === 5) || (n === 8))) {
              o = false;
              $s = 8;
              continue s;
            }
            p = d.scan.step(d.scan, 32);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            o = p === 10;
          case 8:
            if (o) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            e = e + ((i + 1 >> 0)) >> 0;
            $s = 2;
            continue s;
          case 7:
            if (n === 11) {
              d.err = d.scan.err;
              $s = -1;
              return [0, d.scan.err];
            }
            h++;
            $s = 3;
            continue;
          case 4:
            e = d.buf.$length;
            if (!($interfaceIsEqual(f, $ifaceNil))) {
              $s = 10;
              continue;
            }
            $s = 11;
            continue;
          case 10:
            if ($interfaceIsEqual(f, O.EOF)) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 12:
            q = d.scan.step(d.scan, 32);
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            if (q === 10) {
              $s = 14;
              continue;
            }
            $s = 15;
            continue;
          case 14:
            $s = 2;
            continue s;
          case 15:
            if (EJ(d.buf)) {
              f = O.ErrUnexpectedEOF;
            }
          case 13:
            d.err = f;
            $s = -1;
            return [0, f];
          case 11:
            r = e - d.scanp >> 0;
            s = d.refill();
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            f = s;
            e = d.scanp + r >> 0;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return [e - d.scanp >> 0, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: EH.ptr.prototype.readValue
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    EH.prototype.readValue = function() {
      return this.$val.readValue();
    };
    EH.ptr.prototype.refill = function() {
      var d, e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            if (d.scanp > 0) {
              d.scanned = (e = d.scanned, f = (new $Int64(0, d.scanp)), new $Int64(e.$high + f.$high, e.$low + f.$low));
              g = $copySlice(d.buf, $subslice(d.buf, d.scanp));
              d.buf = $subslice(d.buf, 0, g);
              d.scanp = 0;
            }
            if ((d.buf.$capacity - d.buf.$length >> 0) < 512) {
              h = $makeSlice(EU, d.buf.$length, (($imul(2, d.buf.$capacity)) + 512 >> 0));
              $copySlice(h, d.buf);
              d.buf = h;
            }
            j = d.r.Read($subslice(d.buf, d.buf.$length, d.buf.$capacity));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            i = j;
            k = i[0];
            l = i[1];
            d.buf = $subslice(d.buf, 0, (d.buf.$length + k >> 0));
            $s = -1;
            return l;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: EH.ptr.prototype.refill
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    EH.prototype.refill = function() {
      return this.$val.refill();
    };
    EJ = function(d) {
      var d, e, f, g;
      e = d;
      f = 0;
      while (true) {
        if (!(f < e.$length)) {
          break;
        }
        g = ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]);
        if (!DA(g)) {
          return true;
        }
        f++;
      }
      return false;
    };
    EH.ptr.prototype.tokenPrepareForDecode = function() {
      var d, e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = d.tokenState;
            if (e === (3)) {
              $s = 2;
              continue;
            }
            if (e === (6)) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 2:
            g = d.peek();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
            h = f[0];
            i = f[1];
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              $s = -1;
              return i;
            }
            if (!((h === 44))) {
              $s = -1;
              return new CY.ptr("expected comma after array element", d.offset());
            }
            d.scanp = d.scanp + (1) >> 0;
            d.tokenState = 2;
            $s = 4;
            continue;
          case 3:
            k = d.peek();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            l = j[0];
            m = j[1];
            if (!($interfaceIsEqual(m, $ifaceNil))) {
              $s = -1;
              return m;
            }
            if (!((l === 58))) {
              $s = -1;
              return new CY.ptr("expected colon after object key", d.offset());
            }
            d.scanp = d.scanp + (1) >> 0;
            d.tokenState = 7;
          case 4:
          case 1:
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: EH.ptr.prototype.tokenPrepareForDecode
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    EH.prototype.tokenPrepareForDecode = function() {
      return this.$val.tokenPrepareForDecode();
    };
    EH.ptr.prototype.tokenValueAllowed = function() {
      var d, e;
      d = this;
      e = d.tokenState;
      if ((e === (0)) || (e === (1)) || (e === (2)) || (e === (7))) {
        return true;
      }
      return false;
    };
    EH.prototype.tokenValueAllowed = function() {
      return this.$val.tokenValueAllowed();
    };
    EH.ptr.prototype.tokenValueEnd = function() {
      var d, e;
      d = this;
      e = d.tokenState;
      if ((e === (1)) || (e === (2))) {
        d.tokenState = 3;
      } else if (e === (7)) {
        d.tokenState = 8;
      }
    };
    EH.prototype.tokenValueEnd = function() {
      return this.$val.tokenValueEnd();
    };
    EO.prototype.String = function() {
      var d;
      d = this.$val;
      return ($encodeRune(d));
    };
    $ptrType(EO).prototype.String = function() {
      return new EO(this.$get()).String();
    };
    EH.ptr.prototype.Token = function() {
      var d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
          case 1:
            e = [e];
            f = [f];
            h = d.peek();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = h;
            i = g[0];
            j = g[1];
            if (!($interfaceIsEqual(j, $ifaceNil))) {
              $s = -1;
              return [$ifaceNil, j];
            }
            k = i;
            if (k === (91)) {
              $s = 5;
              continue;
            }
            if (k === (93)) {
              $s = 6;
              continue;
            }
            if (k === (123)) {
              $s = 7;
              continue;
            }
            if (k === (125)) {
              $s = 8;
              continue;
            }
            if (k === (58)) {
              $s = 9;
              continue;
            }
            if (k === (44)) {
              $s = 10;
              continue;
            }
            if (k === (34)) {
              $s = 11;
              continue;
            }
            $s = 12;
            continue;
          case 5:
            if (!d.tokenValueAllowed()) {
              $s = -1;
              return d.tokenError(i);
            }
            d.scanp = d.scanp + (1) >> 0;
            d.tokenStack = $append(d.tokenStack, d.tokenState);
            d.tokenState = 1;
            $s = -1;
            return [new EO(91), $ifaceNil];
          case 6:
            if (!((d.tokenState === 1)) && !((d.tokenState === 3))) {
              $s = -1;
              return d.tokenError(i);
            }
            d.scanp = d.scanp + (1) >> 0;
            d.tokenState = (l = d.tokenStack, m = d.tokenStack.$length - 1 >> 0, ((m < 0 || m >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + m]));
            d.tokenStack = $subslice(d.tokenStack, 0, (d.tokenStack.$length - 1 >> 0));
            d.tokenValueEnd();
            $s = -1;
            return [new EO(93), $ifaceNil];
          case 7:
            if (!d.tokenValueAllowed()) {
              $s = -1;
              return d.tokenError(i);
            }
            d.scanp = d.scanp + (1) >> 0;
            d.tokenStack = $append(d.tokenStack, d.tokenState);
            d.tokenState = 4;
            $s = -1;
            return [new EO(123), $ifaceNil];
          case 8:
            if (!((d.tokenState === 4)) && !((d.tokenState === 8))) {
              $s = -1;
              return d.tokenError(i);
            }
            d.scanp = d.scanp + (1) >> 0;
            d.tokenState = (n = d.tokenStack, o = d.tokenStack.$length - 1 >> 0, ((o < 0 || o >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + o]));
            d.tokenStack = $subslice(d.tokenStack, 0, (d.tokenStack.$length - 1 >> 0));
            d.tokenValueEnd();
            $s = -1;
            return [new EO(125), $ifaceNil];
          case 9:
            if (!((d.tokenState === 6))) {
              $s = -1;
              return d.tokenError(i);
            }
            d.scanp = d.scanp + (1) >> 0;
            d.tokenState = 7;
            $s = 1;
            continue;
            $s = 13;
            continue;
          case 10:
            if (d.tokenState === 3) {
              $s = 14;
              continue;
            }
            $s = 15;
            continue;
          case 14:
            d.scanp = d.scanp + (1) >> 0;
            d.tokenState = 2;
            $s = 1;
            continue;
          case 15:
            if (d.tokenState === 8) {
              d.scanp = d.scanp + (1) >> 0;
              d.tokenState = 5;
              $s = 1;
              continue;
            }
            $s = -1;
            return d.tokenError(i);
          case 11:
            if ((d.tokenState === 4) || (d.tokenState === 5)) {
              $s = 16;
              continue;
            }
            $s = 17;
            continue;
          case 16:
            e[0] = "";
            p = d.tokenState;
            d.tokenState = 0;
            q = d.Decode((e.$ptr || (e.$ptr = new FL(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, e))));
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            r = q;
            d.tokenState = p;
            if (!($interfaceIsEqual(r, $ifaceNil))) {
              $s = -1;
              return [$ifaceNil, r];
            }
            d.tokenState = 6;
            $s = -1;
            return [new $String(e[0]), $ifaceNil];
          case 17:
            if (!d.tokenValueAllowed()) {
              $s = -1;
              return d.tokenError(i);
            }
            f[0] = $ifaceNil;
            s = d.Decode((f.$ptr || (f.$ptr = new FM(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, f))));
            $s = 19;
          case 19:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            t = s;
            if (!($interfaceIsEqual(t, $ifaceNil))) {
              $s = -1;
              return [$ifaceNil, t];
            }
            $s = -1;
            return [f[0], $ifaceNil];
          case 12:
            if (!d.tokenValueAllowed()) {
              $s = -1;
              return d.tokenError(i);
            }
            f[0] = $ifaceNil;
            u = d.Decode((f.$ptr || (f.$ptr = new FM(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, f))));
            $s = 20;
          case 20:
            if ($c) {
              $c = false;
              u = u.$blk();
            }
            if (u && u.$blk !== undefined) {
              break s;
            }
            t = u;
            if (!($interfaceIsEqual(t, $ifaceNil))) {
              $s = -1;
              return [$ifaceNil, t];
            }
            $s = -1;
            return [f[0], $ifaceNil];
          case 13:
          case 4:
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return [$ifaceNil, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: EH.ptr.prototype.Token
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    EH.prototype.Token = function() {
      return this.$val.Token();
    };
    EH.ptr.prototype.tokenError = function(d) {
      var d, e, f, g;
      e = this;
      f = "";
      g = e.tokenState;
      if (g === (0)) {
        f = " looking for beginning of value";
      } else if ((g === (1)) || (g === (2)) || (g === (7))) {
        f = " looking for beginning of value";
      } else if (g === (3)) {
        f = " after array element";
      } else if (g === (5)) {
        f = " looking for beginning of object key string";
      } else if (g === (6)) {
        f = " after object key";
      } else if (g === (8)) {
        f = " after object key:value pair";
      }
      return [$ifaceNil, new CY.ptr("invalid character " + EG(d) + " " + f, e.offset())];
    };
    EH.prototype.tokenError = function(d) {
      return this.$val.tokenError(d);
    };
    EH.ptr.prototype.More = function() {
      var d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            f = d.peek();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            e = f;
            g = e[0];
            h = e[1];
            $s = -1;
            return $interfaceIsEqual(h, $ifaceNil) && !((g === 93)) && !((g === 125));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: EH.ptr.prototype.More
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    EH.prototype.More = function() {
      return this.$val.More();
    };
    EH.ptr.prototype.peek = function() {
      var d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = $ifaceNil;
          case 1:
            f = d.scanp;
          case 3:
            if (!(f < d.buf.$length)) {
              $s = 4;
              continue;
            }
            h = (g = d.buf, ((f < 0 || f >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + f]));
            if (DA(h)) {
              f = f + (1) >> 0;
              $s = 3;
              continue;
            }
            d.scanp = f;
            $s = -1;
            return [h, $ifaceNil];
            $s = 3;
            continue;
          case 4:
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              $s = -1;
              return [0, e];
            }
            i = d.refill();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            e = i;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return [0, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: EH.ptr.prototype.peek
        };
      }
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    EH.prototype.peek = function() {
      return this.$val.peek();
    };
    EH.ptr.prototype.offset = function() {
      var d, e, f;
      d = this;
      return (e = d.scanned, f = (new $Int64(0, d.scanp)), new $Int64(e.$high + f.$high, e.$low + f.$low));
    };
    EH.prototype.offset = function() {
      return this.$val.offset();
    };
    ES = function(d) {
      var d, e;
      e = M.Index(d, ",");
      if (!((e === -1))) {
        return [$substring(d, 0, e), ($substring(d, (e + 1 >> 0)))];
      }
      return [d, ""];
    };
    ER.prototype.Contains = function(d) {
      var d, e, f, g, h, i, j;
      e = this.$val;
      if (e.length === 0) {
        return false;
      }
      f = (e);
      while (true) {
        if (!(!(f === ""))) {
          break;
        }
        g = "";
        h = M.Index(f, ",");
        if (h >= 0) {
          i = $substring(f, 0, h);
          j = $substring(f, (h + 1 >> 0));
          f = i;
          g = j;
        }
        if (f === d) {
          return true;
        }
        f = g;
      }
      return false;
    };
    $ptrType(ER).prototype.Contains = function(d) {
      return new ER(this.$get()).Contains(d);
    };
    FB.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    FO.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    U.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Float64",
      name: "Float64",
      pkg: "",
      typ: $funcType([], [$Float64, $error], false)
    }, {
      prop: "Int64",
      name: "Int64",
      pkg: "",
      typ: $funcType([], [$Int64, $error], false)
    }];
    FP.methods = [{
      prop: "unmarshal",
      name: "unmarshal",
      pkg: "encoding/json",
      typ: $funcType([$emptyInterface], [$error], false)
    }, {
      prop: "readIndex",
      name: "readIndex",
      pkg: "encoding/json",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "init",
      name: "init",
      pkg: "encoding/json",
      typ: $funcType([EU], [FP], false)
    }, {
      prop: "saveError",
      name: "saveError",
      pkg: "encoding/json",
      typ: $funcType([$error], [], false)
    }, {
      prop: "addErrorContext",
      name: "addErrorContext",
      pkg: "encoding/json",
      typ: $funcType([$error], [$error], false)
    }, {
      prop: "skip",
      name: "skip",
      pkg: "encoding/json",
      typ: $funcType([], [], false)
    }, {
      prop: "scanNext",
      name: "scanNext",
      pkg: "encoding/json",
      typ: $funcType([], [], false)
    }, {
      prop: "scanWhile",
      name: "scanWhile",
      pkg: "encoding/json",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "value",
      name: "value",
      pkg: "encoding/json",
      typ: $funcType([F.Value], [$error], false)
    }, {
      prop: "valueQuoted",
      name: "valueQuoted",
      pkg: "encoding/json",
      typ: $funcType([], [$emptyInterface, $error], false)
    }, {
      prop: "array",
      name: "array",
      pkg: "encoding/json",
      typ: $funcType([F.Value], [$error], false)
    }, {
      prop: "object",
      name: "object",
      pkg: "encoding/json",
      typ: $funcType([F.Value], [$error], false)
    }, {
      prop: "convertNumber",
      name: "convertNumber",
      pkg: "encoding/json",
      typ: $funcType([$String], [$emptyInterface, $error], false)
    }, {
      prop: "literalStore",
      name: "literalStore",
      pkg: "encoding/json",
      typ: $funcType([EU, F.Value, $Bool], [$error], false)
    }, {
      prop: "valueInterface",
      name: "valueInterface",
      pkg: "encoding/json",
      typ: $funcType([], [$emptyInterface, $error], false)
    }, {
      prop: "arrayInterface",
      name: "arrayInterface",
      pkg: "encoding/json",
      typ: $funcType([], [ET, $error], false)
    }, {
      prop: "objectInterface",
      name: "objectInterface",
      pkg: "encoding/json",
      typ: $funcType([], [FD, $error], false)
    }, {
      prop: "literalInterface",
      name: "literalInterface",
      pkg: "encoding/json",
      typ: $funcType([], [$emptyInterface, $error], false)
    }];
    FQ.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    FR.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    FT.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    FG.methods = [{
      prop: "marshal",
      name: "marshal",
      pkg: "encoding/json",
      typ: $funcType([$emptyInterface, AU], [$error], false)
    }, {
      prop: "error",
      name: "error",
      pkg: "encoding/json",
      typ: $funcType([$error], [], false)
    }, {
      prop: "reflectValue",
      name: "reflectValue",
      pkg: "encoding/json",
      typ: $funcType([F.Value, AU], [], false)
    }, {
      prop: "string",
      name: "string",
      pkg: "encoding/json",
      typ: $funcType([$String, $Bool], [], false)
    }, {
      prop: "stringBytes",
      name: "stringBytes",
      pkg: "encoding/json",
      typ: $funcType([EU, $Bool], [], false)
    }];
    BK.methods = [{
      prop: "encode",
      name: "encode",
      pkg: "encoding/json",
      typ: $funcType([FG, F.Value, AU], [], false)
    }];
    FU.methods = [{
      prop: "encode",
      name: "encode",
      pkg: "encoding/json",
      typ: $funcType([FG, F.Value, AU], [], false)
    }];
    FV.methods = [{
      prop: "encode",
      name: "encode",
      pkg: "encoding/json",
      typ: $funcType([FG, F.Value, AU], [], false)
    }];
    FW.methods = [{
      prop: "encode",
      name: "encode",
      pkg: "encoding/json",
      typ: $funcType([FG, F.Value, AU], [], false)
    }];
    FX.methods = [{
      prop: "encode",
      name: "encode",
      pkg: "encoding/json",
      typ: $funcType([FG, F.Value, AU], [], false)
    }];
    FY.methods = [{
      prop: "encode",
      name: "encode",
      pkg: "encoding/json",
      typ: $funcType([FG, F.Value, AU], [], false)
    }];
    FZ.methods = [{
      prop: "encode",
      name: "encode",
      pkg: "encoding/json",
      typ: $funcType([FG, F.Value, AU], [], false)
    }];
    GA.methods = [{
      prop: "resolve",
      name: "resolve",
      pkg: "encoding/json",
      typ: $funcType([], [$error], false)
    }];
    CJ.methods = [{
      prop: "Len",
      name: "Len",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Swap",
      name: "Swap",
      pkg: "",
      typ: $funcType([$Int, $Int], [], false)
    }, {
      prop: "Less",
      name: "Less",
      pkg: "",
      typ: $funcType([$Int, $Int], [$Bool], false)
    }];
    GC.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    GD.methods = [{
      prop: "reset",
      name: "reset",
      pkg: "encoding/json",
      typ: $funcType([], [], false)
    }, {
      prop: "eof",
      name: "eof",
      pkg: "encoding/json",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "pushParseState",
      name: "pushParseState",
      pkg: "encoding/json",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "popParseState",
      name: "popParseState",
      pkg: "encoding/json",
      typ: $funcType([], [], false)
    }, {
      prop: "error",
      name: "error",
      pkg: "encoding/json",
      typ: $funcType([$Uint8, $String], [$Int], false)
    }];
    GF.methods = [{
      prop: "UseNumber",
      name: "UseNumber",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "DisallowUnknownFields",
      name: "DisallowUnknownFields",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "Decode",
      name: "Decode",
      pkg: "",
      typ: $funcType([$emptyInterface], [$error], false)
    }, {
      prop: "Buffered",
      name: "Buffered",
      pkg: "",
      typ: $funcType([], [O.Reader], false)
    }, {
      prop: "readValue",
      name: "readValue",
      pkg: "encoding/json",
      typ: $funcType([], [$Int, $error], false)
    }, {
      prop: "refill",
      name: "refill",
      pkg: "encoding/json",
      typ: $funcType([], [$error], false)
    }, {
      prop: "tokenPrepareForDecode",
      name: "tokenPrepareForDecode",
      pkg: "encoding/json",
      typ: $funcType([], [$error], false)
    }, {
      prop: "tokenValueAllowed",
      name: "tokenValueAllowed",
      pkg: "encoding/json",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "tokenValueEnd",
      name: "tokenValueEnd",
      pkg: "encoding/json",
      typ: $funcType([], [], false)
    }, {
      prop: "Token",
      name: "Token",
      pkg: "",
      typ: $funcType([], [EN, $error], false)
    }, {
      prop: "tokenError",
      name: "tokenError",
      pkg: "encoding/json",
      typ: $funcType([$Uint8], [EN, $error], false)
    }, {
      prop: "More",
      name: "More",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "peek",
      name: "peek",
      pkg: "encoding/json",
      typ: $funcType([], [$Uint8, $error], false)
    }, {
      prop: "offset",
      name: "offset",
      pkg: "encoding/json",
      typ: $funcType([], [$Int64], false)
    }];
    EO.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    ER.methods = [{
      prop: "Contains",
      name: "Contains",
      pkg: "",
      typ: $funcType([$String], [$Bool], false)
    }];
    Q.init([{
      prop: "UnmarshalJSON",
      name: "UnmarshalJSON",
      pkg: "",
      typ: $funcType([EU], [$error], false)
    }]);
    R.init("", [{
      prop: "Value",
      name: "Value",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Type",
      name: "Type",
      embedded: false,
      exported: true,
      typ: F.Type,
      tag: ""
    }, {
      prop: "Offset",
      name: "Offset",
      embedded: false,
      exported: true,
      typ: $Int64,
      tag: ""
    }, {
      prop: "Struct",
      name: "Struct",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Field",
      name: "Field",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }]);
    T.init("", [{
      prop: "Type",
      name: "Type",
      embedded: false,
      exported: true,
      typ: F.Type,
      tag: ""
    }]);
    W.init("encoding/json", [{
      prop: "data",
      name: "data",
      embedded: false,
      exported: false,
      typ: EU,
      tag: ""
    }, {
      prop: "off",
      name: "off",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "opcode",
      name: "opcode",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "scan",
      name: "scan",
      embedded: false,
      exported: false,
      typ: CZ,
      tag: ""
    }, {
      prop: "errorContext",
      name: "errorContext",
      embedded: false,
      exported: false,
      typ: FA,
      tag: ""
    }, {
      prop: "savedError",
      name: "savedError",
      embedded: false,
      exported: false,
      typ: $error,
      tag: ""
    }, {
      prop: "useNumber",
      name: "useNumber",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "disallowUnknownFields",
      name: "disallowUnknownFields",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    Y.init("", []);
    AJ.init([{
      prop: "MarshalJSON",
      name: "MarshalJSON",
      pkg: "",
      typ: $funcType([], [EU, $error], false)
    }]);
    AK.init("", [{
      prop: "Type",
      name: "Type",
      embedded: false,
      exported: true,
      typ: F.Type,
      tag: ""
    }]);
    AL.init("", [{
      prop: "Value",
      name: "Value",
      embedded: false,
      exported: true,
      typ: F.Value,
      tag: ""
    }, {
      prop: "Str",
      name: "Str",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }]);
    AN.init("", [{
      prop: "Type",
      name: "Type",
      embedded: false,
      exported: true,
      typ: F.Type,
      tag: ""
    }, {
      prop: "Err",
      name: "Err",
      embedded: false,
      exported: true,
      typ: $error,
      tag: ""
    }]);
    AP.init("encoding/json", [{
      prop: "Buffer",
      name: "Buffer",
      embedded: true,
      exported: true,
      typ: A.Buffer,
      tag: ""
    }, {
      prop: "scratch",
      name: "scratch",
      embedded: false,
      exported: false,
      typ: FF,
      tag: ""
    }]);
    AS.init("encoding/json", [{
      prop: "error",
      name: "error",
      embedded: true,
      exported: false,
      typ: $error,
      tag: ""
    }]);
    AU.init("encoding/json", [{
      prop: "quoted",
      name: "quoted",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "escapeHTML",
      name: "escapeHTML",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    AV.init([FG, F.Value, AU], [], false);
    BQ.init("encoding/json", [{
      prop: "fields",
      name: "fields",
      embedded: false,
      exported: false,
      typ: FH,
      tag: ""
    }, {
      prop: "fieldEncs",
      name: "fieldEncs",
      embedded: false,
      exported: false,
      typ: FI,
      tag: ""
    }]);
    BS.init("encoding/json", [{
      prop: "elemEnc",
      name: "elemEnc",
      embedded: false,
      exported: false,
      typ: AV,
      tag: ""
    }]);
    BV.init("encoding/json", [{
      prop: "arrayEnc",
      name: "arrayEnc",
      embedded: false,
      exported: false,
      typ: AV,
      tag: ""
    }]);
    BX.init("encoding/json", [{
      prop: "elemEnc",
      name: "elemEnc",
      embedded: false,
      exported: false,
      typ: AV,
      tag: ""
    }]);
    BZ.init("encoding/json", [{
      prop: "elemEnc",
      name: "elemEnc",
      embedded: false,
      exported: false,
      typ: AV,
      tag: ""
    }]);
    CB.init("encoding/json", [{
      prop: "canAddrEnc",
      name: "canAddrEnc",
      embedded: false,
      exported: false,
      typ: AV,
      tag: ""
    }, {
      prop: "elseEnc",
      name: "elseEnc",
      embedded: false,
      exported: false,
      typ: AV,
      tag: ""
    }]);
    CG.init("encoding/json", [{
      prop: "v",
      name: "v",
      embedded: false,
      exported: false,
      typ: F.Value,
      tag: ""
    }, {
      prop: "s",
      name: "s",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }]);
    CH.init("encoding/json", [{
      prop: "name",
      name: "name",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "nameBytes",
      name: "nameBytes",
      embedded: false,
      exported: false,
      typ: EU,
      tag: ""
    }, {
      prop: "equalFold",
      name: "equalFold",
      embedded: false,
      exported: false,
      typ: GB,
      tag: ""
    }, {
      prop: "tag",
      name: "tag",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "index",
      name: "index",
      embedded: false,
      exported: false,
      typ: EZ,
      tag: ""
    }, {
      prop: "typ",
      name: "typ",
      embedded: false,
      exported: false,
      typ: F.Type,
      tag: ""
    }, {
      prop: "omitEmpty",
      name: "omitEmpty",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "quoted",
      name: "quoted",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    CJ.init(CH);
    CY.init("encoding/json", [{
      prop: "msg",
      name: "msg",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "Offset",
      name: "Offset",
      embedded: false,
      exported: true,
      typ: $Int64,
      tag: ""
    }]);
    CZ.init("encoding/json", [{
      prop: "step",
      name: "step",
      embedded: false,
      exported: false,
      typ: GE,
      tag: ""
    }, {
      prop: "endTop",
      name: "endTop",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "parseState",
      name: "parseState",
      embedded: false,
      exported: false,
      typ: EZ,
      tag: ""
    }, {
      prop: "err",
      name: "err",
      embedded: false,
      exported: false,
      typ: $error,
      tag: ""
    }, {
      prop: "bytes",
      name: "bytes",
      embedded: false,
      exported: false,
      typ: $Int64,
      tag: ""
    }]);
    EH.init("encoding/json", [{
      prop: "r",
      name: "r",
      embedded: false,
      exported: false,
      typ: O.Reader,
      tag: ""
    }, {
      prop: "buf",
      name: "buf",
      embedded: false,
      exported: false,
      typ: EU,
      tag: ""
    }, {
      prop: "d",
      name: "d",
      embedded: false,
      exported: false,
      typ: W,
      tag: ""
    }, {
      prop: "scanp",
      name: "scanp",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "scanned",
      name: "scanned",
      embedded: false,
      exported: false,
      typ: $Int64,
      tag: ""
    }, {
      prop: "scan",
      name: "scan",
      embedded: false,
      exported: false,
      typ: CZ,
      tag: ""
    }, {
      prop: "err",
      name: "err",
      embedded: false,
      exported: false,
      typ: $error,
      tag: ""
    }, {
      prop: "tokenState",
      name: "tokenState",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "tokenStack",
      name: "tokenStack",
      embedded: false,
      exported: false,
      typ: EZ,
      tag: ""
    }]);
    EN.init([]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = N.$init();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = O.$init();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = K.$init();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = F.$init();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = L.$init();
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = G.$init();
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = M.$init();
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = H.$init();
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = I.$init();
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = J.$init();
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            AQ = new N.Pool.ptr(ET.nil, $throwNilPointerError);
            AW = new N.Map.ptr(false);
            CM = new N.Map.ptr(false);
            X = D.New("JSON decoder out of sync - data changing underfoot?");
            AA = (new EU($stringToBytes("null")));
            a = F.TypeOf($newDataPointer($ifaceNil, EV)).Elem();
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              a = a.$blk();
            }
            if (a && a.$blk !== undefined) {
              break s;
            }
            AB = a;
            AC = F.TypeOf(new U(""));
            AO = "0123456789abcdef";
            b = F.TypeOf($newDataPointer($ifaceNil, EW)).Elem();
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            AZ = b;
            c = F.TypeOf($newDataPointer($ifaceNil, EX)).Elem();
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            BA = c;
            BL = $methodVal(new BK(32), "encode");
            BM = $methodVal(new BK(64), "encode");
            EP = $toNativeArray($kindBool, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true]);
            EQ = $toNativeArray($kindBool, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true]);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["go.1password.io/xplatform/api/errors"] = (function() {
    var $pkg = {},
      $init;
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["go.1password.io/xplatform/api/response"] = (function() {
    var $pkg = {},
      $init, A, B, C, D, E, H, F, G;
    A = $packages["encoding/json"];
    B = $packages["go.1password.io/xplatform/api/errors"];
    C = $pkg.Response = $newType(0, $kindStruct, "response.Response", true, "go.1password.io/xplatform/api/response", true, function(Result_, Error_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Result = $ifaceNil;
        this.Error = new D.ptr(0, "");
        return;
      }
      this.Result = Result_;
      this.Error = Error_;
    });
    D = $pkg.JSONError = $newType(0, $kindStruct, "response.JSONError", true, "go.1password.io/xplatform/api/response", true, function(Code_, Reason_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Code = 0;
        this.Reason = "";
        return;
      }
      this.Code = Code_;
      this.Reason = Reason_;
    });
    E = $pkg.ResponseOption = $newType(4, $kindFunc, "response.ResponseOption", true, "go.1password.io/xplatform/api/response", true, null);
    H = $ptrType(C);
    F = function(a, b) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = new C.ptr($ifaceNil, new D.ptr(0, ""));
            c.Result = a;
            d = b;
            e = 0;
          case 1:
            if (!(e < d.$length)) {
              $s = 2;
              continue;
            }
            f = ((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e]);
            $r = f(c);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            e++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: F
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.NewResponse = F;
    G = function(a, b) {
      var a, b;
      return (function $b(c) {
        var c, d, e, $s, $r;
        $s = 0;
        var $f, $c = false;
        if (this !== undefined && this.$blk !== undefined) {
          $f = this;
          $c = true;
          c = $f.c;
          d = $f.d;
          e = $f.e;
          $s = $f.$s;
          $r = $f.$r;
        }
        s: while (true) {
          switch ($s) {
            case 0:
              d = a.Error();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                d = d.$blk();
              }
              if (d && d.$blk !== undefined) {
                break s;
              }
              e = new D.ptr(b, d);
              D.copy(c.Error, e);
              $s = -1;
              return;
          }
          return;
        }
        if ($f === undefined) {
          $f = {
            $blk: $b
          };
        }
        $f.c = c;
        $f.d = d;
        $f.e = e;
        $f.$s = $s;
        $f.$r = $r;
        return $f;
      });
    };
    $pkg.WithError = G;
    C.ptr.prototype.ToJSON = function() {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            c = A.Marshal(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            b = c;
            d = b[0];
            e = b[1];
            if ($interfaceIsEqual(e, $ifaceNil)) {
              $s = -1;
              return ($bytesToString(d));
            }
            f = e.Error();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return "{\"error\": {\"reason\":" + f + ", \"code\": " + "\xEF\xBF\xBD" + "}";
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: C.ptr.prototype.ToJSON
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    C.prototype.ToJSON = function() {
      return this.$val.ToJSON();
    };
    H.methods = [{
      prop: "ToJSON",
      name: "ToJSON",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    C.init("", [{
      prop: "Result",
      name: "Result",
      embedded: false,
      exported: true,
      typ: $emptyInterface,
      tag: "json:\"result\""
    }, {
      prop: "Error",
      name: "Error",
      embedded: false,
      exported: true,
      typ: D,
      tag: "json:\"error,omitempty\""
    }]);
    D.init("", [{
      prop: "Code",
      name: "Code",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: "json:\"code\""
    }, {
      prop: "Reason",
      name: "Reason",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"reason\""
    }]);
    E.init([H], [], false);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["math/rand"] = (function() {
    var $pkg = {},
      $init, B, A, J, K, M, AG, AI, AM, AN, AO, AP, AQ, AR, AT, AU, AV, C, D, E, G, H, I, P, AH, F, L, N, O, AJ;
    B = $packages["github.com/gopherjs/gopherjs/nosync"];
    A = $packages["math"];
    J = $pkg.Source = $newType(8, $kindInterface, "rand.Source", true, "math/rand", true, null);
    K = $pkg.Source64 = $newType(8, $kindInterface, "rand.Source64", true, "math/rand", true, null);
    M = $pkg.Rand = $newType(0, $kindStruct, "rand.Rand", true, "math/rand", true, function(src_, s64_, readVal_, readPos_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.src = $ifaceNil;
        this.s64 = $ifaceNil;
        this.readVal = new $Int64(0, 0);
        this.readPos = 0;
        return;
      }
      this.src = src_;
      this.s64 = s64_;
      this.readVal = readVal_;
      this.readPos = readPos_;
    });
    AG = $pkg.lockedSource = $newType(0, $kindStruct, "rand.lockedSource", true, "math/rand", false, function(lk_, src_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.lk = new B.Mutex.ptr(false);
        this.src = $ifaceNil;
        return;
      }
      this.lk = lk_;
      this.src = src_;
    });
    AI = $pkg.rngSource = $newType(0, $kindStruct, "rand.rngSource", true, "math/rand", false, function(tap_, feed_, vec_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.tap = 0;
        this.feed = 0;
        this.vec = AM.zero();
        return;
      }
      this.tap = tap_;
      this.feed = feed_;
      this.vec = vec_;
    });
    AM = $arrayType($Int64, 607);
    AN = $ptrType(AG);
    AO = $ptrType($Int8);
    AP = $sliceType($Int);
    AQ = $ptrType($Int64);
    AR = $ptrType(M);
    AT = $funcType([$Int, $Int], [], false);
    AU = $sliceType($Uint8);
    AV = $ptrType(AI);
    M.ptr.prototype.ExpFloat64 = function() {
      var a, b, c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
          case 1:
            b = a.Uint32();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            d = (c & 255) >>> 0;
            e = (c) * (((d < 0 || d >= D.length) ? ($throwRuntimeError("index out of range"), undefined) : D[d]));
            if (c < ((d < 0 || d >= C.length) ? ($throwRuntimeError("index out of range"), undefined) : C[d])) {
              $s = -1;
              return e;
            }
            if (d === 0) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            f = a.Float64();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            g = A.Log(f);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return 7.69711747013105 - g;
          case 5:
            h = a.Float64();
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            if ($fround(((d < 0 || d >= E.length) ? ($throwRuntimeError("index out of range"), undefined) : E[d]) + $fround(($fround(h)) * ($fround((i = d - 1 >>> 0, ((i < 0 || i >= E.length) ? ($throwRuntimeError("index out of range"), undefined) : E[i])) - ((d < 0 || d >= E.length) ? ($throwRuntimeError("index out of range"), undefined) : E[d]))))) < ($fround(A.Exp(-e)))) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            $s = -1;
            return e;
          case 9:
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return 0;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.ExpFloat64
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.ExpFloat64 = function() {
      return this.$val.ExpFloat64();
    };
    F = function(a) {
      var a;
      if (a < 0) {
        return ((-a >>> 0));
      }
      return ((a >>> 0));
    };
    M.ptr.prototype.NormFloat64 = function() {
      var a, b, c, d, e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
          case 1:
            b = a.Uint32();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = ((b >> 0));
            d = c & 127;
            e = (c) * (((d < 0 || d >= H.length) ? ($throwRuntimeError("index out of range"), undefined) : H[d]));
            if (F(c) < ((d < 0 || d >= G.length) ? ($throwRuntimeError("index out of range"), undefined) : G[d])) {
              $s = -1;
              return e;
            }
            if (d === 0) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
          case 6:
            f = a.Float64();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            g = A.Log(f);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            e = -g * 0.29047645161474317;
            h = a.Float64();
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            i = A.Log(h);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            j = -i;
            if (j + j >= e * e) {
              $s = 7;
              continue;
            }
            $s = 6;
            continue;
          case 7:
            if (c > 0) {
              $s = -1;
              return 3.442619855899 + e;
            }
            $s = -1;
            return -3.442619855899 - e;
          case 5:
            k = a.Float64();
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            if ($fround(((d < 0 || d >= I.length) ? ($throwRuntimeError("index out of range"), undefined) : I[d]) + $fround(($fround(k)) * ($fround((l = d - 1 >> 0, ((l < 0 || l >= I.length) ? ($throwRuntimeError("index out of range"), undefined) : I[l])) - ((d < 0 || d >= I.length) ? ($throwRuntimeError("index out of range"), undefined) : I[d]))))) < ($fround(A.Exp(-0.5 * e * e)))) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 12:
            $s = -1;
            return e;
          case 13:
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return 0;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.NormFloat64
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.NormFloat64 = function() {
      return this.$val.NormFloat64();
    };
    L = function(a) {
      var a, b;
      b = new AI.ptr(0, 0, AM.zero());
      b.Seed(a);
      return b;
    };
    $pkg.NewSource = L;
    N = function(a) {
      var a, b, c;
      b = $assertType(a, K, true);
      c = b[0];
      return new M.ptr(a, c, new $Int64(0, 0), 0);
    };
    $pkg.New = N;
    M.ptr.prototype.Seed = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = $assertType(b.src, AN, true);
            d = c[0];
            e = c[1];
            if (e) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = d.seedPos(a, (b.$ptr_readPos || (b.$ptr_readPos = new AO(function() {
              return this.$target.readPos;
            }, function($v) {
              this.$target.readPos = $v;
            }, b))));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
          case 2:
            $r = b.src.Seed(a);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            b.readPos = 0;
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.Seed
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.Seed = function(a) {
      return this.$val.Seed(a);
    };
    M.ptr.prototype.Int63 = function() {
      var a, b, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.src.Int63();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return b;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.Int63
        };
      }
      $f.a = a;
      $f.b = b;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.Int63 = function() {
      return this.$val.Int63();
    };
    M.ptr.prototype.Uint32 = function() {
      var a, b, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.Int63();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return (($shiftRightInt64(b, 31).$low >>> 0));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.Uint32
        };
      }
      $f.a = a;
      $f.b = b;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.Uint32 = function() {
      return this.$val.Uint32();
    };
    M.ptr.prototype.Uint64 = function() {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            if (!($interfaceIsEqual(a.s64, $ifaceNil))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            b = a.s64.Uint64();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return b;
          case 2:
            e = a.Int63();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            h = a.Int63();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return (c = $shiftRightUint64(((d = e, new $Uint64(d.$high, d.$low))), 31), f = $shiftLeft64(((g = h, new $Uint64(g.$high, g.$low))), 32), new $Uint64(c.$high | f.$high, (c.$low | f.$low) >>> 0));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.Uint64
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.Uint64 = function() {
      return this.$val.Uint64();
    };
    M.ptr.prototype.Int31 = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            c = a.Int63();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return (((b = $shiftRightInt64(c, 32), b.$low + ((b.$high >> 31) * 4294967296)) >> 0));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.Int31
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.Int31 = function() {
      return this.$val.Int31();
    };
    M.ptr.prototype.Int = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.Int63();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = ((b.$low >>> 0));
            $s = -1;
            return ((((c << 1 >>> 0) >>> 1 >>> 0) >> 0));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.Int
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.Int = function() {
      return this.$val.Int();
    };
    M.ptr.prototype.Int63n = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            if ((a.$high < 0 || (a.$high === 0 && a.$low <= 0))) {
              $panic(new $String("invalid argument to Int63n"));
            }
            if ((c = (d = new $Int64(a.$high - 0, a.$low - 1), new $Int64(a.$high & d.$high, (a.$low & d.$low) >>> 0)), (c.$high === 0 && c.$low === 0))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            f = b.Int63();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return (e = f, g = new $Int64(a.$high - 0, a.$low - 1), new $Int64(e.$high & g.$high, (e.$low & g.$low) >>> 0));
          case 2:
            j = ((h = (i = $div64(new $Uint64(2147483648, 0), (new $Uint64(a.$high, a.$low)), true), new $Uint64(2147483647 - i.$high, 4294967295 - i.$low)), new $Int64(h.$high, h.$low)));
            k = b.Int63();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = k;
          case 5:
            if (!((l.$high > j.$high || (l.$high === j.$high && l.$low > j.$low)))) {
              $s = 6;
              continue;
            }
            m = b.Int63();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            l = m;
            $s = 5;
            continue;
          case 6:
            $s = -1;
            return $div64(l, a, true);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.Int63n
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.Int63n = function(a) {
      return this.$val.Int63n(a);
    };
    M.ptr.prototype.Int31n = function(a) {
      var a, b, c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            if (a <= 0) {
              $panic(new $String("invalid argument to Int31n"));
            }
            if ((a & ((a - 1 >> 0))) === 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            c = b.Int31();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c & ((a - 1 >> 0));
          case 2:
            e = (((2147483647 - (d = 2147483648 % ((a >>> 0)), d === d ? d : $throwRuntimeError("integer divide by zero")) >>> 0) >> 0));
            f = b.Int31();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            g = f;
          case 5:
            if (!(g > e)) {
              $s = 6;
              continue;
            }
            h = b.Int31();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = h;
            $s = 5;
            continue;
          case 6:
            $s = -1;
            return (i = g % a, i === i ? i : $throwRuntimeError("integer divide by zero"));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.Int31n
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.Int31n = function(a) {
      return this.$val.Int31n(a);
    };
    M.ptr.prototype.int31n = function(a) {
      var a, b, c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = b.Uint32();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
            e = $mul64((new $Uint64(0, d)), (new $Uint64(0, a)));
            f = ((e.$low >>> 0));
            if (f < ((a >>> 0))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            h = (g = ((-a >>> 0)) % ((a >>> 0)), g === g ? g : $throwRuntimeError("integer divide by zero"));
          case 4:
            if (!(f < h)) {
              $s = 5;
              continue;
            }
            i = b.Uint32();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            d = i;
            e = $mul64((new $Uint64(0, d)), (new $Uint64(0, a)));
            f = ((e.$low >>> 0));
            $s = 4;
            continue;
          case 5:
          case 3:
            $s = -1;
            return (($shiftRightUint64(e, 32).$low >> 0));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.int31n
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.int31n = function(a) {
      return this.$val.int31n(a);
    };
    M.ptr.prototype.Intn = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            if (a <= 0) {
              $panic(new $String("invalid argument to Intn"));
            }
            if (a <= 2147483647) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            c = b.Int31n(((a >> 0)));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ((c >> 0));
          case 2:
            e = b.Int63n((new $Int64(0, a)));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return (((d = e, d.$low + ((d.$high >> 31) * 4294967296)) >> 0));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.Intn
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.Intn = function(a) {
      return this.$val.Intn(a);
    };
    M.ptr.prototype.Float64 = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
          case 1:
            b = a.Int63();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = ($flatten64(b)) / 9.223372036854776e+18;
            if (c === 1) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            $s = 1;
            continue;
          case 4:
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.Float64
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.Float64 = function() {
      return this.$val.Float64();
    };
    M.ptr.prototype.Float32 = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
          case 1:
            b = a.Float64();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = ($fround(b));
            if (c === 1) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            $s = 1;
            continue;
          case 4:
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.Float32
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.Float32 = function() {
      return this.$val.Float32();
    };
    M.ptr.prototype.Perm = function(a) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = $makeSlice(AP, a);
            d = 0;
          case 1:
            if (!(d < a)) {
              $s = 2;
              continue;
            }
            e = b.Intn(d + 1 >> 0);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d] = ((f < 0 || f >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + f]));
            ((f < 0 || f >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + f] = d);
            d = d + (1) >> 0;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.Perm
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.Perm = function(a) {
      return this.$val.Perm(a);
    };
    M.ptr.prototype.Shuffle = function(a, b) {
      var a, b, c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            if (a < 0) {
              $panic(new $String("invalid argument to Shuffle"));
            }
            d = a - 1 >> 0;
          case 1:
            if (!(d > 2147483646)) {
              $s = 2;
              continue;
            }
            f = c.Int63n((new $Int64(0, (d + 1 >> 0))));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            g = (((e = f, e.$low + ((e.$high >> 31) * 4294967296)) >> 0));
            $r = b(d, g);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d = d - (1) >> 0;
            $s = 1;
            continue;
          case 2:
          case 5:
            if (!(d > 0)) {
              $s = 6;
              continue;
            }
            h = c.int31n((((d + 1 >> 0) >> 0)));
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            i = ((h >> 0));
            $r = b(d, i);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d = d - (1) >> 0;
            $s = 5;
            continue;
          case 6:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.Shuffle
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.Shuffle = function(a, b) {
      return this.$val.Shuffle(a, b);
    };
    M.ptr.prototype.Read = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = 0;
            c = $ifaceNil;
            d = this;
            e = $assertType(d.src, AN, true);
            f = e[0];
            g = e[1];
            if (g) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            i = f.read(a, (d.$ptr_readVal || (d.$ptr_readVal = new AQ(function() {
              return this.$target.readVal;
            }, function($v) {
              this.$target.readVal = $v;
            }, d))), (d.$ptr_readPos || (d.$ptr_readPos = new AO(function() {
              return this.$target.readPos;
            }, function($v) {
              this.$target.readPos = $v;
            }, d))));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            b = h[0];
            c = h[1];
            $s = -1;
            return [b, c];
          case 2:
            k = O(a, $methodVal(d, "Int63"), (d.$ptr_readVal || (d.$ptr_readVal = new AQ(function() {
              return this.$target.readVal;
            }, function($v) {
              this.$target.readVal = $v;
            }, d))), (d.$ptr_readPos || (d.$ptr_readPos = new AO(function() {
              return this.$target.readPos;
            }, function($v) {
              this.$target.readPos = $v;
            }, d))));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            b = j[0];
            c = j[1];
            $s = -1;
            return [b, c];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.Read
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.Read = function(a) {
      return this.$val.Read(a);
    };
    O = function(a, b, c, d) {
      var a, b, c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = 0;
            f = $ifaceNil;
            g = d.$get();
            h = c.$get();
            e = 0;
          case 1:
            if (!(e < a.$length)) {
              $s = 2;
              continue;
            }
            if (g === 0) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            i = b();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            g = 7;
          case 4:
            ((e < 0 || e >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + e] = ((h.$low << 24 >>> 24)));
            h = $shiftRightInt64(h, (8));
            g = g - (1) << 24 >> 24;
            e = e + (1) >> 0;
            $s = 1;
            continue;
          case 2:
            d.$set(g);
            c.$set(h);
            $s = -1;
            return [e, f];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AG.ptr.prototype.Int63 = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = new $Int64(0, 0);
            b = this;
            b.lk.Lock();
            c = b.src.Int63();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            a = c;
            b.lk.Unlock();
            $s = -1;
            return a;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AG.ptr.prototype.Int63
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AG.prototype.Int63 = function() {
      return this.$val.Int63();
    };
    AG.ptr.prototype.Uint64 = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = new $Uint64(0, 0);
            b = this;
            b.lk.Lock();
            c = b.src.Uint64();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            a = c;
            b.lk.Unlock();
            $s = -1;
            return a;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AG.ptr.prototype.Uint64
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AG.prototype.Uint64 = function() {
      return this.$val.Uint64();
    };
    AG.ptr.prototype.Seed = function(a) {
      var a, b, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            b.lk.Lock();
            $r = b.src.Seed(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            b.lk.Unlock();
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AG.ptr.prototype.Seed
        };
      }
      $f.a = a;
      $f.b = b;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AG.prototype.Seed = function(a) {
      return this.$val.Seed(a);
    };
    AG.ptr.prototype.seedPos = function(a, b) {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            c.lk.Lock();
            $r = c.src.Seed(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            b.$set(0);
            c.lk.Unlock();
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AG.ptr.prototype.seedPos
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AG.prototype.seedPos = function(a, b) {
      return this.$val.seedPos(a, b);
    };
    AG.ptr.prototype.read = function(a, b, c) {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = 0;
            e = $ifaceNil;
            f = this;
            f.lk.Lock();
            h = O(a, $methodVal(f.src, "Int63"), b, c);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = h;
            d = g[0];
            e = g[1];
            f.lk.Unlock();
            $s = -1;
            return [d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AG.ptr.prototype.read
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AG.prototype.read = function(a, b, c) {
      return this.$val.read(a, b, c);
    };
    AJ = function(a) {
      var a, b, c, d, e;
      c = (b = a / 44488, (b === b && b !== 1 / 0 && b !== -1 / 0) ? b >> 0 : $throwRuntimeError("integer divide by zero"));
      e = (d = a % 44488, d === d ? d : $throwRuntimeError("integer divide by zero"));
      a = ($imul(48271, e)) - ($imul(3399, c)) >> 0;
      if (a < 0) {
        a = a + (2147483647) >> 0;
      }
      return a;
    };
    AI.ptr.prototype.Seed = function(a) {
      var a, b, c, d, e, f, g, h, i, j;
      b = this;
      b.tap = 0;
      b.feed = 334;
      a = $div64(a, new $Int64(0, 2147483647), true);
      if ((a.$high < 0 || (a.$high === 0 && a.$low < 0))) {
        a = (c = new $Int64(0, 2147483647), new $Int64(a.$high + c.$high, a.$low + c.$low));
      }
      if ((a.$high === 0 && a.$low === 0)) {
        a = new $Int64(0, 89482311);
      }
      d = (((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));
      e = -20;
      while (true) {
        if (!(e < 607)) {
          break;
        }
        d = AJ(d);
        if (e >= 0) {
          f = new $Int64(0, 0);
          f = $shiftLeft64((new $Int64(0, d)), 40);
          d = AJ(d);
          f = (g = $shiftLeft64((new $Int64(0, d)), 20), new $Int64(f.$high ^ g.$high, (f.$low ^ g.$low) >>> 0));
          d = AJ(d);
          f = (h = (new $Int64(0, d)), new $Int64(f.$high ^ h.$high, (f.$low ^ h.$low) >>> 0));
          f = (i = ((e < 0 || e >= AH.length) ? ($throwRuntimeError("index out of range"), undefined) : AH[e]), new $Int64(f.$high ^ i.$high, (f.$low ^ i.$low) >>> 0));
          (j = b.vec, ((e < 0 || e >= j.length) ? ($throwRuntimeError("index out of range"), undefined) : j[e] = f));
        }
        e = e + (1) >> 0;
      }
    };
    AI.prototype.Seed = function(a) {
      return this.$val.Seed(a);
    };
    AI.ptr.prototype.Int63 = function() {
      var a, b, c;
      a = this;
      return ((b = (c = a.Uint64(), new $Uint64(c.$high & 2147483647, (c.$low & 4294967295) >>> 0)), new $Int64(b.$high, b.$low)));
    };
    AI.prototype.Int63 = function() {
      return this.$val.Int63();
    };
    AI.ptr.prototype.Uint64 = function() {
      var a, b, c, d, e, f, g, h, i, j;
      a = this;
      a.tap = a.tap - (1) >> 0;
      if (a.tap < 0) {
        a.tap = a.tap + (607) >> 0;
      }
      a.feed = a.feed - (1) >> 0;
      if (a.feed < 0) {
        a.feed = a.feed + (607) >> 0;
      }
      h = (b = (c = a.vec, d = a.feed, ((d < 0 || d >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[d])), e = (f = a.vec, g = a.tap, ((g < 0 || g >= f.length) ? ($throwRuntimeError("index out of range"), undefined) : f[g])), new $Int64(b.$high + e.$high, b.$low + e.$low));
      (i = a.vec, j = a.feed, ((j < 0 || j >= i.length) ? ($throwRuntimeError("index out of range"), undefined) : i[j] = h));
      return (new $Uint64(h.$high, h.$low));
    };
    AI.prototype.Uint64 = function() {
      return this.$val.Uint64();
    };
    AR.methods = [{
      prop: "ExpFloat64",
      name: "ExpFloat64",
      pkg: "",
      typ: $funcType([], [$Float64], false)
    }, {
      prop: "NormFloat64",
      name: "NormFloat64",
      pkg: "",
      typ: $funcType([], [$Float64], false)
    }, {
      prop: "Seed",
      name: "Seed",
      pkg: "",
      typ: $funcType([$Int64], [], false)
    }, {
      prop: "Int63",
      name: "Int63",
      pkg: "",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "Uint32",
      name: "Uint32",
      pkg: "",
      typ: $funcType([], [$Uint32], false)
    }, {
      prop: "Uint64",
      name: "Uint64",
      pkg: "",
      typ: $funcType([], [$Uint64], false)
    }, {
      prop: "Int31",
      name: "Int31",
      pkg: "",
      typ: $funcType([], [$Int32], false)
    }, {
      prop: "Int",
      name: "Int",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Int63n",
      name: "Int63n",
      pkg: "",
      typ: $funcType([$Int64], [$Int64], false)
    }, {
      prop: "Int31n",
      name: "Int31n",
      pkg: "",
      typ: $funcType([$Int32], [$Int32], false)
    }, {
      prop: "int31n",
      name: "int31n",
      pkg: "math/rand",
      typ: $funcType([$Int32], [$Int32], false)
    }, {
      prop: "Intn",
      name: "Intn",
      pkg: "",
      typ: $funcType([$Int], [$Int], false)
    }, {
      prop: "Float64",
      name: "Float64",
      pkg: "",
      typ: $funcType([], [$Float64], false)
    }, {
      prop: "Float32",
      name: "Float32",
      pkg: "",
      typ: $funcType([], [$Float32], false)
    }, {
      prop: "Perm",
      name: "Perm",
      pkg: "",
      typ: $funcType([$Int], [AP], false)
    }, {
      prop: "Shuffle",
      name: "Shuffle",
      pkg: "",
      typ: $funcType([$Int, AT], [], false)
    }, {
      prop: "Read",
      name: "Read",
      pkg: "",
      typ: $funcType([AU], [$Int, $error], false)
    }];
    AN.methods = [{
      prop: "Int63",
      name: "Int63",
      pkg: "",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "Uint64",
      name: "Uint64",
      pkg: "",
      typ: $funcType([], [$Uint64], false)
    }, {
      prop: "Seed",
      name: "Seed",
      pkg: "",
      typ: $funcType([$Int64], [], false)
    }, {
      prop: "seedPos",
      name: "seedPos",
      pkg: "math/rand",
      typ: $funcType([$Int64, AO], [], false)
    }, {
      prop: "read",
      name: "read",
      pkg: "math/rand",
      typ: $funcType([AU, AQ, AO], [$Int, $error], false)
    }];
    AV.methods = [{
      prop: "Seed",
      name: "Seed",
      pkg: "",
      typ: $funcType([$Int64], [], false)
    }, {
      prop: "Int63",
      name: "Int63",
      pkg: "",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "Uint64",
      name: "Uint64",
      pkg: "",
      typ: $funcType([], [$Uint64], false)
    }];
    J.init([{
      prop: "Int63",
      name: "Int63",
      pkg: "",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "Seed",
      name: "Seed",
      pkg: "",
      typ: $funcType([$Int64], [], false)
    }]);
    K.init([{
      prop: "Int63",
      name: "Int63",
      pkg: "",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "Seed",
      name: "Seed",
      pkg: "",
      typ: $funcType([$Int64], [], false)
    }, {
      prop: "Uint64",
      name: "Uint64",
      pkg: "",
      typ: $funcType([], [$Uint64], false)
    }]);
    M.init("math/rand", [{
      prop: "src",
      name: "src",
      embedded: false,
      exported: false,
      typ: J,
      tag: ""
    }, {
      prop: "s64",
      name: "s64",
      embedded: false,
      exported: false,
      typ: K,
      tag: ""
    }, {
      prop: "readVal",
      name: "readVal",
      embedded: false,
      exported: false,
      typ: $Int64,
      tag: ""
    }, {
      prop: "readPos",
      name: "readPos",
      embedded: false,
      exported: false,
      typ: $Int8,
      tag: ""
    }]);
    AG.init("math/rand", [{
      prop: "lk",
      name: "lk",
      embedded: false,
      exported: false,
      typ: B.Mutex,
      tag: ""
    }, {
      prop: "src",
      name: "src",
      embedded: false,
      exported: false,
      typ: K,
      tag: ""
    }]);
    AI.init("math/rand", [{
      prop: "tap",
      name: "tap",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "feed",
      name: "feed",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "vec",
      name: "vec",
      embedded: false,
      exported: false,
      typ: AM,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = B.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            C = $toNativeArray($kindUint32, [3801129273, 0, 2615860924, 3279400049, 3571300752, 3733536696, 3836274812, 3906990442, 3958562475, 3997804264, 4028649213, 4053523342, 4074002619, 4091154507, 4105727352, 4118261130, 4129155133, 4138710916, 4147160435, 4154685009, 4161428406, 4167506077, 4173011791, 4178022498, 4182601930, 4186803325, 4190671498, 4194244443, 4197554582, 4200629752, 4203493986, 4206168142, 4208670408, 4211016720, 4213221098, 4215295924, 4217252177, 4219099625, 4220846988, 4222502074, 4224071896, 4225562770, 4226980400, 4228329951, 4229616109, 4230843138, 4232014925, 4233135020, 4234206673, 4235232866, 4236216336, 4237159604, 4238064994, 4238934652, 4239770563, 4240574564, 4241348362, 4242093539, 4242811568, 4243503822, 4244171579, 4244816032, 4245438297, 4246039419, 4246620374, 4247182079, 4247725394, 4248251127, 4248760037, 4249252839, 4249730206, 4250192773, 4250641138, 4251075867, 4251497493, 4251906522, 4252303431, 4252688672, 4253062674, 4253425844, 4253778565, 4254121205, 4254454110, 4254777611, 4255092022, 4255397640, 4255694750, 4255983622, 4256264513, 4256537670, 4256803325, 4257061702, 4257313014, 4257557464, 4257795244, 4258026541, 4258251531, 4258470383, 4258683258, 4258890309, 4259091685, 4259287526, 4259477966, 4259663135, 4259843154, 4260018142, 4260188212, 4260353470, 4260514019, 4260669958, 4260821380, 4260968374, 4261111028, 4261249421, 4261383632, 4261513736, 4261639802, 4261761900, 4261880092, 4261994441, 4262105003, 4262211835, 4262314988, 4262414513, 4262510454, 4262602857, 4262691764, 4262777212, 4262859239, 4262937878, 4263013162, 4263085118, 4263153776, 4263219158, 4263281289, 4263340187, 4263395872, 4263448358, 4263497660, 4263543789, 4263586755, 4263626565, 4263663224, 4263696735, 4263727099, 4263754314, 4263778377, 4263799282, 4263817020, 4263831582, 4263842955, 4263851124, 4263856071, 4263857776, 4263856218, 4263851370, 4263843206, 4263831695, 4263816804, 4263798497, 4263776735, 4263751476, 4263722676, 4263690284, 4263654251, 4263614520, 4263571032, 4263523724, 4263472530, 4263417377, 4263358192, 4263294892, 4263227394, 4263155608, 4263079437, 4262998781, 4262913534, 4262823581, 4262728804, 4262629075, 4262524261, 4262414220, 4262298801, 4262177846, 4262051187, 4261918645, 4261780032, 4261635148, 4261483780, 4261325704, 4261160681, 4260988457, 4260808763, 4260621313, 4260425802, 4260221905, 4260009277, 4259787550, 4259556329, 4259315195, 4259063697, 4258801357, 4258527656, 4258242044, 4257943926, 4257632664, 4257307571, 4256967906, 4256612870, 4256241598, 4255853155, 4255446525, 4255020608, 4254574202, 4254106002, 4253614578, 4253098370, 4252555662, 4251984571, 4251383021, 4250748722, 4250079132, 4249371435, 4248622490, 4247828790, 4246986404, 4246090910, 4245137315, 4244119963, 4243032411, 4241867296, 4240616155, 4239269214, 4237815118, 4236240596, 4234530035, 4232664930, 4230623176, 4228378137, 4225897409, 4223141146, 4220059768, 4216590757, 4212654085, 4208145538, 4202926710, 4196809522, 4189531420, 4180713890, 4169789475, 4155865042, 4137444620, 4111806704, 4073393724, 4008685917, 3873074895]);
            D = $toNativeArray($kindFloat32, [2.0249555365836613e-09, 1.4866739783681027e-11, 2.4409616689036184e-11, 3.1968806074589295e-11, 3.844677007314168e-11, 4.42282044321729e-11, 4.951644302919611e-11, 5.443358958023836e-11, 5.905943789574764e-11, 6.34494193296753e-11, 6.764381416113352e-11, 7.167294535648239e-11, 7.556032188826833e-11, 7.932458162551725e-11, 8.298078890689453e-11, 8.654132271912474e-11, 9.001651507523079e-11, 9.341507428706208e-11, 9.674443190998971e-11, 1.0001099254308699e-10, 1.0322031424037093e-10, 1.0637725422757427e-10, 1.0948611461891744e-10, 1.1255067711157807e-10, 1.1557434870246297e-10, 1.1856014781042035e-10, 1.2151082917633005e-10, 1.2442885610752796e-10, 1.2731647680563896e-10, 1.3017574518325858e-10, 1.330085347417409e-10, 1.3581656632677408e-10, 1.386014220061682e-10, 1.413645728254309e-10, 1.4410737880776736e-10, 1.4683107507629245e-10, 1.4953686899854546e-10, 1.522258291641876e-10, 1.5489899640730442e-10, 1.575573282952547e-10, 1.6020171300645814e-10, 1.628330109637588e-10, 1.6545202707884954e-10, 1.68059510752272e-10, 1.7065616975120435e-10, 1.73242697965037e-10, 1.758197337720091e-10, 1.783878739169964e-10, 1.8094774290045024e-10, 1.834998542005195e-10, 1.8604476292871652e-10, 1.8858298256319017e-10, 1.9111498494872592e-10, 1.9364125580789704e-10, 1.9616222535212557e-10, 1.9867835154840918e-10, 2.011900368525943e-10, 2.0369768372052732e-10, 2.062016807302669e-10, 2.0870240258208383e-10, 2.1120022397624894e-10, 2.136955057352452e-10, 2.1618855317040442e-10, 2.1867974098199738e-10, 2.2116936060356807e-10, 2.2365774510202385e-10, 2.2614519978869652e-10, 2.2863201609713002e-10, 2.3111849933865614e-10, 2.3360494094681883e-10, 2.3609159072179864e-10, 2.3857874009713953e-10, 2.4106666662859766e-10, 2.4355562011635357e-10, 2.460458781161634e-10, 2.485376904282077e-10, 2.5103127909709144e-10, 2.5352694943414633e-10, 2.560248957284017e-10, 2.585253955356137e-10, 2.610286709003873e-10, 2.6353494386732734e-10, 2.6604446423661443e-10, 2.6855745405285347e-10, 2.71074163116225e-10, 2.7359478571575835e-10, 2.7611959940720965e-10, 2.786487707240326e-10, 2.8118254946640775e-10, 2.8372118543451563e-10, 2.8626484516180994e-10, 2.8881380620404684e-10, 2.9136826285025563e-10, 2.9392840938946563e-10, 2.96494523377433e-10, 2.990667713476114e-10, 3.016454031001814e-10, 3.042306406797479e-10, 3.068226783753403e-10, 3.09421765987139e-10, 3.12028125559749e-10, 3.1464195138219964e-10, 3.17263521010247e-10, 3.1989300097734485e-10, 3.225306410836737e-10, 3.2517669112941405e-10, 3.2783134540359526e-10, 3.3049485370639786e-10, 3.3316743808242677e-10, 3.3584937608743815e-10, 3.385408342548857e-10, 3.4124211789610115e-10, 3.4395342130011386e-10, 3.4667499426710435e-10, 3.494071143528288e-10, 3.521500313574677e-10, 3.54903967325626e-10, 3.576691720574843e-10, 3.6044595086437425e-10, 3.632345535464765e-10, 3.660352021483959e-10, 3.688482297370399e-10, 3.716738583570134e-10, 3.7451239331964814e-10, 3.773641121807003e-10, 3.802292924959261e-10, 3.831082673322328e-10, 3.8600128648980103e-10, 3.8890865527996255e-10, 3.9183070676962473e-10, 3.9476774627011935e-10, 3.977200790927782e-10, 4.006880383045086e-10, 4.0367195697221803e-10, 4.066721681628138e-10, 4.0968900494320337e-10, 4.127228558914453e-10, 4.15774054074447e-10, 4.188429603146915e-10, 4.2192993543466173e-10, 4.25035395767992e-10, 4.2815970213716525e-10, 4.313032986313914e-10, 4.3446651831757777e-10, 4.376498607960855e-10, 4.408536868893975e-10, 4.4407846844229937e-10, 4.4732464954400086e-10, 4.5059267428371186e-10, 4.538830145062178e-10, 4.5719619756745544e-10, 4.605326675566346e-10, 4.638929240741163e-10, 4.672775499869886e-10, 4.706869893844612e-10, 4.74121908400349e-10, 4.775827511238617e-10, 4.810701836888143e-10, 4.845848167178701e-10, 4.881271498113904e-10, 4.916979601254923e-10, 4.952977472605369e-10, 4.989272883726414e-10, 5.025872495956207e-10, 5.062783525744408e-10, 5.100013189540675e-10, 5.13756870379467e-10, 5.175458395179078e-10, 5.21369003525507e-10, 5.252272505806843e-10, 5.29121357839557e-10, 5.330522134805449e-10, 5.3702081670437e-10, 5.41028055689452e-10, 5.450749851476644e-10, 5.491624932574268e-10, 5.532918012640664e-10, 5.574638528571541e-10, 5.616799247931681e-10, 5.659410717839819e-10, 5.702485705860738e-10, 5.746036979559221e-10, 5.790077306500052e-10, 5.83462111958255e-10, 5.879682296594524e-10, 5.925275825546805e-10, 5.971417249561739e-10, 6.01812211176167e-10, 6.065408175714992e-10, 6.113292094767075e-10, 6.16179329782085e-10, 6.21092954844471e-10, 6.260721940876124e-10, 6.311191569352559e-10, 6.362359528111483e-10, 6.414249686947926e-10, 6.466885360545405e-10, 6.520292639144998e-10, 6.574497612987784e-10, 6.629528592760892e-10, 6.685415554485985e-10, 6.742187919073217e-10, 6.799880103436351e-10, 6.858525969377638e-10, 6.918161599145378e-10, 6.978825850545434e-10, 7.040559801829716e-10, 7.103406751696184e-10, 7.167412219288849e-10, 7.232625609532306e-10, 7.2990985477972e-10, 7.366885990123251e-10, 7.436047333442275e-10, 7.506645305355164e-10, 7.57874762946642e-10, 7.652426470272644e-10, 7.727759543385559e-10, 7.804830115532013e-10, 7.883728114777e-10, 7.964550685635174e-10, 8.047402189070851e-10, 8.132396422944055e-10, 8.219657177122031e-10, 8.309318788590758e-10, 8.401527806789488e-10, 8.496445214056791e-10, 8.594246980742071e-10, 8.695127395874636e-10, 8.799300732498239e-10, 8.90700457834015e-10, 9.01850316648023e-10, 9.134091816243028e-10, 9.254100818978372e-10, 9.37890431984556e-10, 9.508922538259412e-10, 9.64463842123564e-10, 9.78660263939446e-10, 9.935448019859905e-10, 1.0091912860943353e-09, 1.0256859805934937e-09, 1.0431305819125214e-09, 1.0616465484503124e-09, 1.0813799855569073e-09, 1.1025096391392708e-09, 1.1252564435793033e-09, 1.149898620766976e-09, 1.176793218427008e-09, 1.2064089727203964e-09, 1.2393785997488749e-09, 1.2765849488616254e-09, 1.319313880365769e-09, 1.36954347862428e-09, 1.4305497897382224e-09, 1.5083649884672923e-09, 1.6160853766322703e-09, 1.7921247819074893e-09]);
            E = $toNativeArray($kindFloat32, [1, 0.9381436705589294, 0.900469958782196, 0.8717043399810791, 0.847785472869873, 0.8269932866096497, 0.8084216713905334, 0.7915276288986206, 0.7759568691253662, 0.7614634037017822, 0.7478685975074768, 0.7350381016731262, 0.7228676676750183, 0.7112747430801392, 0.7001926302909851, 0.6895664930343628, 0.6793505549430847, 0.669506311416626, 0.6600008606910706, 0.6508058309555054, 0.6418967247009277, 0.633251965045929, 0.62485271692276, 0.6166821718215942, 0.608725368976593, 0.6009689569473267, 0.5934008955955505, 0.5860103368759155, 0.5787873864173889, 0.5717230439186096, 0.5648092031478882, 0.5580382943153381, 0.5514034032821655, 0.5448982119560242, 0.5385168790817261, 0.5322538614273071, 0.526104211807251, 0.5200631618499756, 0.5141264200210571, 0.5082897543907166, 0.5025495290756226, 0.4969019889831543, 0.4913438558578491, 0.4858720004558563, 0.48048335313796997, 0.4751752018928528, 0.4699448347091675, 0.4647897481918335, 0.4597076177597046, 0.4546961486339569, 0.4497532546520233, 0.44487687945365906, 0.4400651156902313, 0.4353161156177521, 0.4306281507015228, 0.42599955201148987, 0.42142874002456665, 0.4169141948223114, 0.4124544560909271, 0.40804818272590637, 0.4036940038204193, 0.39939069747924805, 0.3951369822025299, 0.39093172550201416, 0.38677382469177246, 0.38266217708587646, 0.378595769405365, 0.37457355856895447, 0.37059465050697327, 0.366658091545105, 0.362762987613678, 0.358908474445343, 0.35509374737739563, 0.35131800174713135, 0.3475804924964905, 0.34388044476509094, 0.34021714329719543, 0.33658990263938904, 0.3329980671405792, 0.3294409513473511, 0.32591795921325684, 0.32242849469184875, 0.3189719021320343, 0.3155476748943329, 0.31215524673461914, 0.3087940812110901, 0.30546361207962036, 0.30216339230537415, 0.29889291524887085, 0.29565170407295227, 0.2924392819404602, 0.2892552316188812, 0.28609907627105713, 0.2829704284667969, 0.27986884117126465, 0.2767939269542694, 0.2737452983856201, 0.2707225978374481, 0.26772540807724, 0.26475343108177185, 0.2618062496185303, 0.258883535861969, 0.2559850215911865, 0.25311028957366943, 0.25025907158851624, 0.24743106961250305, 0.2446259707212448, 0.24184346199035645, 0.23908329010009766, 0.23634515702724457, 0.2336287796497345, 0.23093391954898834, 0.22826029360294342, 0.22560766339302063, 0.22297576069831848, 0.22036437690258026, 0.21777324378490448, 0.21520215272903442, 0.212650865316391, 0.21011915802955627, 0.20760682225227356, 0.20511364936828613, 0.20263944566249847, 0.20018397271633148, 0.19774706661701202, 0.1953285187482834, 0.19292815029621124, 0.19054576754570007, 0.18818120658397675, 0.18583425879478455, 0.18350479006767273, 0.18119260668754578, 0.17889754474163055, 0.17661945521831512, 0.17435817420482635, 0.1721135377883911, 0.16988539695739746, 0.16767361760139465, 0.16547803580760956, 0.16329853236675262, 0.16113494336605072, 0.1589871346950531, 0.15685498714447021, 0.15473836660385132, 0.15263713896274567, 0.1505511850118637, 0.1484803706407547, 0.14642459154129028, 0.1443837285041809, 0.14235764741897583, 0.1403462439775467, 0.13834942877292633, 0.136367067694664, 0.13439907133579254, 0.1324453204870224, 0.1305057406425476, 0.12858019769191742, 0.12666863203048706, 0.12477091699838638, 0.12288697808980942, 0.1210167184472084, 0.11916005611419678, 0.11731690168380737, 0.11548716574907303, 0.11367076635360718, 0.11186762899160385, 0.11007767915725708, 0.1083008274435997, 0.10653700679540634, 0.10478614270687103, 0.1030481606721878, 0.10132300108671188, 0.0996105819940567, 0.09791085124015808, 0.09622374176979065, 0.09454918652772903, 0.09288713335990906, 0.09123751521110535, 0.08960027992725372, 0.08797537535429001, 0.08636274188756943, 0.0847623273730278, 0.08317409455776215, 0.08159798383712769, 0.08003395050764084, 0.07848194986581802, 0.07694194465875626, 0.07541389018297195, 0.07389774918556213, 0.07239348441362381, 0.070901058614254, 0.06942043453454971, 0.06795158982276917, 0.06649449467658997, 0.06504911929368973, 0.06361543387174606, 0.06219341605901718, 0.06078304722905159, 0.0593843050301075, 0.05799717456102371, 0.05662164092063904, 0.05525768920779228, 0.05390531197190285, 0.05256449431180954, 0.05123523622751236, 0.04991753399372101, 0.04861138388514519, 0.047316793352365494, 0.04603376239538193, 0.044762298464775085, 0.04350241273641586, 0.04225412383675575, 0.04101744294166565, 0.039792392402887344, 0.03857899457216263, 0.03737728297710419, 0.03618728369474411, 0.03500903770327568, 0.03384258225560188, 0.0326879620552063, 0.031545232981443405, 0.030414443463087082, 0.0292956605553627, 0.028188949450850487, 0.027094384655356407, 0.02601204626262188, 0.024942025542259216, 0.023884421214461327, 0.022839335724711418, 0.021806888282299042, 0.020787203684449196, 0.019780423492193222, 0.018786700442433357, 0.017806200310587883, 0.016839107498526573, 0.015885621309280396, 0.014945968054234982, 0.01402039173990488, 0.013109165243804455, 0.012212592177093029, 0.011331013403832912, 0.010464809834957123, 0.009614413604140282, 0.008780314587056637, 0.007963077165186405, 0.007163353264331818, 0.0063819061033427715, 0.005619642324745655, 0.004877655766904354, 0.004157294984906912, 0.003460264764726162, 0.0027887988835573196, 0.0021459676790982485, 0.001536299823783338, 0.0009672692976891994, 0.0004541343660093844]);
            G = $toNativeArray($kindUint32, [1991057938, 0, 1611602771, 1826899878, 1918584482, 1969227037, 2001281515, 2023368125, 2039498179, 2051788381, 2061460127, 2069267110, 2075699398, 2081089314, 2085670119, 2089610331, 2093034710, 2096037586, 2098691595, 2101053571, 2103168620, 2105072996, 2106796166, 2108362327, 2109791536, 2111100552, 2112303493, 2113412330, 2114437283, 2115387130, 2116269447, 2117090813, 2117856962, 2118572919, 2119243101, 2119871411, 2120461303, 2121015852, 2121537798, 2122029592, 2122493434, 2122931299, 2123344971, 2123736059, 2124106020, 2124456175, 2124787725, 2125101763, 2125399283, 2125681194, 2125948325, 2126201433, 2126441213, 2126668298, 2126883268, 2127086657, 2127278949, 2127460589, 2127631985, 2127793506, 2127945490, 2128088244, 2128222044, 2128347141, 2128463758, 2128572095, 2128672327, 2128764606, 2128849065, 2128925811, 2128994934, 2129056501, 2129110560, 2129157136, 2129196237, 2129227847, 2129251929, 2129268426, 2129277255, 2129278312, 2129271467, 2129256561, 2129233410, 2129201800, 2129161480, 2129112170, 2129053545, 2128985244, 2128906855, 2128817916, 2128717911, 2128606255, 2128482298, 2128345305, 2128194452, 2128028813, 2127847342, 2127648860, 2127432031, 2127195339, 2126937058, 2126655214, 2126347546, 2126011445, 2125643893, 2125241376, 2124799783, 2124314271, 2123779094, 2123187386, 2122530867, 2121799464, 2120980787, 2120059418, 2119015917, 2117825402, 2116455471, 2114863093, 2112989789, 2110753906, 2108037662, 2104664315, 2100355223, 2094642347, 2086670106, 2074676188, 2054300022, 2010539237]);
            H = $toNativeArray($kindFloat32, [1.7290404663583558e-09, 1.2680928529462676e-10, 1.689751810696194e-10, 1.9862687883343e-10, 2.223243117382978e-10, 2.4244936613904144e-10, 2.601613091623989e-10, 2.761198769629658e-10, 2.9073962681813725e-10, 3.042996965518796e-10, 3.169979556627567e-10, 3.289802041894774e-10, 3.4035738116777736e-10, 3.5121602848242617e-10, 3.61625090983253e-10, 3.7164057942185025e-10, 3.813085680537398e-10, 3.906675816178762e-10, 3.997501218933053e-10, 4.0858399996679395e-10, 4.1719308563337165e-10, 4.255982233303257e-10, 4.3381759295968436e-10, 4.4186720948857783e-10, 4.497613115272969e-10, 4.57512583373898e-10, 4.6513240481438345e-10, 4.726310454117311e-10, 4.800177477726209e-10, 4.873009773476156e-10, 4.944885056978876e-10, 5.015873272284921e-10, 5.086040477664255e-10, 5.155446070048697e-10, 5.224146670812502e-10, 5.292193350214802e-10, 5.359634958068682e-10, 5.426517013518151e-10, 5.492881705038144e-10, 5.558769555769061e-10, 5.624218868405251e-10, 5.689264614971989e-10, 5.75394121238304e-10, 5.818281967329142e-10, 5.882316855831959e-10, 5.946076964136182e-10, 6.009590047817426e-10, 6.072883862451306e-10, 6.135985053390414e-10, 6.19892026598734e-10, 6.261713370037114e-10, 6.324390455780815e-10, 6.386973727678935e-10, 6.449488165749528e-10, 6.511955974453087e-10, 6.574400468473129e-10, 6.636843297158634e-10, 6.699307220081607e-10, 6.761814441702541e-10, 6.824387166481927e-10, 6.887046488657234e-10, 6.949815167800466e-10, 7.012714853260604e-10, 7.075767749498141e-10, 7.13899661608508e-10, 7.202424212593428e-10, 7.266072743483676e-10, 7.329966078550854e-10, 7.394128087589991e-10, 7.458582640396116e-10, 7.523354716987285e-10, 7.588469852493063e-10, 7.653954137154528e-10, 7.719834771435785e-10, 7.786139510912449e-10, 7.852897221383159e-10, 7.920137878869582e-10, 7.987892014504894e-10, 8.056192379868321e-10, 8.125072836762115e-10, 8.194568912323064e-10, 8.264716688799467e-10, 8.3355555791087e-10, 8.407127216614185e-10, 8.479473234679347e-10, 8.552640262671218e-10, 8.626675485068347e-10, 8.701631637464402e-10, 8.777562010564566e-10, 8.854524335966119e-10, 8.932581896381464e-10, 9.011799639857543e-10, 9.092249730890956e-10, 9.174008219758889e-10, 9.25715837318819e-10, 9.341788453909317e-10, 9.42799727177146e-10, 9.515889187738935e-10, 9.605578554783278e-10, 9.697193048552322e-10, 9.790869226478094e-10, 9.886760299337993e-10, 9.985036131254788e-10, 1.008588212947359e-09, 1.0189509236369076e-09, 1.0296150598776421e-09, 1.040606933955246e-09, 1.0519566329136865e-09, 1.0636980185552147e-09, 1.0758701707302976e-09, 1.0885182755160372e-09, 1.101694735439196e-09, 1.115461056855338e-09, 1.1298901814171813e-09, 1.1450695946990663e-09, 1.1611052119775422e-09, 1.178127595480305e-09, 1.1962995039027646e-09, 1.2158286599728285e-09, 1.2369856250415978e-09, 1.2601323318151003e-09, 1.2857697129220469e-09, 1.3146201904845611e-09, 1.3477839955200466e-09, 1.3870635751089821e-09, 1.43574030442295e-09, 1.5008658760251592e-09, 1.6030947680434338e-09]);
            I = $toNativeArray($kindFloat32, [1, 0.963599681854248, 0.9362826943397522, 0.9130436182022095, 0.8922816514968872, 0.8732430338859558, 0.8555005788803101, 0.8387836217880249, 0.8229072093963623, 0.8077383041381836, 0.7931770086288452, 0.7791460752487183, 0.7655841708183289, 0.7524415850639343, 0.7396772503852844, 0.7272568941116333, 0.7151514887809753, 0.7033361196517944, 0.6917891502380371, 0.6804918646812439, 0.6694276928901672, 0.6585819721221924, 0.6479418277740479, 0.6374954581260681, 0.6272324919700623, 0.6171433925628662, 0.6072195172309875, 0.5974531769752502, 0.5878370404243469, 0.5783646702766418, 0.5690299868583679, 0.5598273873329163, 0.550751805305481, 0.5417983531951904, 0.5329626798629761, 0.5242405533790588, 0.5156282186508179, 0.5071220397949219, 0.49871864914894104, 0.4904148280620575, 0.48220765590667725, 0.47409430146217346, 0.466072142124176, 0.45813870429992676, 0.45029163360595703, 0.44252872467041016, 0.4348478317260742, 0.42724698781967163, 0.41972434520721436, 0.41227802634239197, 0.40490642189979553, 0.39760786294937134, 0.3903807997703552, 0.3832238018512726, 0.3761354684829712, 0.3691144585609436, 0.36215949058532715, 0.3552693724632263, 0.3484429717063904, 0.3416791558265686, 0.33497685194015503, 0.32833510637283325, 0.3217529058456421, 0.3152293860912323, 0.30876362323760986, 0.3023548424243927, 0.2960021495819092, 0.2897048592567444, 0.28346219658851624, 0.2772735059261322, 0.271138072013855, 0.2650552988052368, 0.25902456045150757, 0.25304529070854187, 0.24711695313453674, 0.24123899638652802, 0.23541094362735748, 0.22963231801986694, 0.22390270233154297, 0.21822164952754974, 0.21258877217769623, 0.20700371265411377, 0.20146611332893372, 0.1959756463766098, 0.19053204357624054, 0.18513499200344086, 0.17978426814079285, 0.1744796335697174, 0.16922089457511902, 0.16400785744190216, 0.1588403731584549, 0.15371830761432648, 0.14864157140254974, 0.14361007511615753, 0.13862377405166626, 0.13368265330791473, 0.12878671288490295, 0.12393598258495331, 0.11913054436445236, 0.11437050998210907, 0.10965602099895477, 0.1049872562289238, 0.10036443918943405, 0.09578784555196762, 0.09125780314207077, 0.08677466958761215, 0.08233889937400818, 0.07795098423957825, 0.07361150532960892, 0.06932111829519272, 0.06508058309555054, 0.06089077144861221, 0.05675266310572624, 0.05266740173101425, 0.048636294901371, 0.044660862535238266, 0.040742866694927216, 0.03688438981771469, 0.03308788686990738, 0.029356317594647408, 0.025693291798233986, 0.02210330404341221, 0.018592102453112602, 0.015167297795414925, 0.011839478276669979, 0.0086244847625494, 0.005548994988203049, 0.0026696291752159595]);
            AH = $toNativeArray($kindInt64, [new $Int64(-973649357, 3952672746), new $Int64(-1065661887, 3130416987), new $Int64(324977939, 3414273807), new $Int64(1241840476, 2806224363), new $Int64(-1477934308, 1997590414), new $Int64(2103305448, 2402795971), new $Int64(1663160183, 1140819369), new $Int64(1120601685, 1788868961), new $Int64(1848035537, 1089001426), new $Int64(1235702047, 873593504), new $Int64(1911387977, 581324885), new $Int64(-1654874170, 1609182556), new $Int64(1069394745, 1241596776), new $Int64(1895445337, 1771189259), new $Int64(-1374618802, 3467012610), new $Int64(-140526423, 2344407434), new $Int64(-1745367887, 782467244), new $Int64(26335124, 3404933915), new $Int64(1063924276, 618867887), new $Int64(-968700782, 520164395), new $Int64(-1591572833, 1341358184), new $Int64(-1515085039, 665794848), new $Int64(1527227641, 3183648150), new $Int64(1781176124, 696329606), new $Int64(1789146075, 4151988961), new $Int64(-2087444114, 998951326), new $Int64(-612324923, 1364957564), new $Int64(63173359, 4090230633), new $Int64(-1498029007, 4009697548), new $Int64(248009524, 2569622517), new $Int64(778703922, 3742421481), new $Int64(-1109106023, 1506914633), new $Int64(1738099768, 1983412561), new $Int64(236311649, 1436266083), new $Int64(-1111517500, 3922894967), new $Int64(-1336974714, 1792680179), new $Int64(563141142, 1188796351), new $Int64(1349617468, 405968250), new $Int64(1044074554, 433754187), new $Int64(870549669, 4073162024), new $Int64(-1094251604, 433121399), new $Int64(2451824, 4162580594), new $Int64(-137262572, 4132415622), new $Int64(-1536231048, 3033822028), new $Int64(2016407895, 824682382), new $Int64(2366218, 3583765414), new $Int64(-624604839, 535386927), new $Int64(1637219058, 2286693689), new $Int64(1453075389, 2968466525), new $Int64(193683513, 1351410206), new $Int64(-283806096, 1412813499), new $Int64(492736522, 4126267639), new $Int64(512765208, 2105529399), new $Int64(2132966268, 2413882233), new $Int64(947457634, 32226200), new $Int64(1149341356, 2032329073), new $Int64(106485445, 1356518208), new $Int64(-2067810156, 3430061722), new $Int64(-1484435135, 3820169661), new $Int64(-1665985194, 2981816134), new $Int64(1017155588, 4184371017), new $Int64(206574701, 2119206761), new $Int64(-852109057, 2472200560), new $Int64(-560457548, 2853524696), new $Int64(1307803389, 1681119904), new $Int64(-174986835, 95608918), new $Int64(392686347, 3690479145), new $Int64(-1205570926, 1397922290), new $Int64(-1159314025, 1516129515), new $Int64(-320178155, 1547420459), new $Int64(1311333971, 1470949486), new $Int64(-1953469798, 1336785672), new $Int64(-45086614, 4131677129), new $Int64(-1392278100, 4246329084), new $Int64(-1142500187, 3788585631), new $Int64(-66478285, 3080389532), new $Int64(-646438364, 2215402037), new $Int64(391002300, 1171593935), new $Int64(1408774047, 1423855166), new $Int64(-519177718, 2276716302), new $Int64(-368453140, 2068027241), new $Int64(1369359303, 3427553297), new $Int64(189241615, 3289637845), new $Int64(1057480830, 3486407650), new $Int64(-1512910664, 3071877822), new $Int64(1159653919, 3363620705), new $Int64(-934256930, 4159821533), new $Int64(-76621938, 1894661), new $Int64(-674493898, 1156868282), new $Int64(348271067, 776219088), new $Int64(-501428838, 2425634259), new $Int64(1716021749, 680510161), new $Int64(-574263456, 1310101429), new $Int64(1095885995, 2964454134), new $Int64(-325695512, 3467098407), new $Int64(1990672920, 2109628894), new $Int64(-2139648704, 1232604732), new $Int64(-1838070714, 3261916179), new $Int64(1699175360, 434597899), new $Int64(235436061, 1624796439), new $Int64(-1626402839, 3589632480), new $Int64(1198416575, 864579159), new $Int64(-1938748161, 1380889830), new $Int64(619206309, 2654509477), new $Int64(1419738251, 1468209306), new $Int64(-1744284772, 100794388), new $Int64(-1191421458, 2991674471), new $Int64(-208666741, 2224662036), new $Int64(-173659161, 977097250), new $Int64(1351320195, 726419512), new $Int64(-183459897, 1747974366), new $Int64(-753095183, 1556430604), new $Int64(-1049492215, 1080776742), new $Int64(-385846958, 280794874), new $Int64(117767733, 919835643), new $Int64(-967009426, 3434019658), new $Int64(-1951414480, 2461941785), new $Int64(133215641, 3615001066), new $Int64(417204809, 3103414427), new $Int64(790056561, 3380809712), new $Int64(-1267681408, 2724693469), new $Int64(547796833, 598827710), new $Int64(-1846559452, 3452273442), new $Int64(-75778224, 649274915), new $Int64(-801301329, 2585724112), new $Int64(-1510934263, 3165579553), new $Int64(1185578221, 2635894283), new $Int64(-52910178, 2053289721), new $Int64(985976581, 3169337108), new $Int64(1170569632, 144717764), new $Int64(1079216270, 1383666384), new $Int64(-124804942, 681540375), new $Int64(1375448925, 537050586), new $Int64(-1964768344, 315246468), new $Int64(226402871, 849323088), new $Int64(-885062465, 45543944), new $Int64(-946445250, 2319052083), new $Int64(-40708194, 3613090841), new $Int64(560472520, 2992171180), new $Int64(-381863169, 2068244785), new $Int64(917538188, 4239862634), new $Int64(-1369555809, 3892253031), new $Int64(720683925, 958186149), new $Int64(-423297785, 1877702262), new $Int64(1357886971, 837674867), new $Int64(1837048883, 1507589294), new $Int64(1905518400, 873336795), new $Int64(-1879761037, 2764496274), new $Int64(-1806480530, 4196182374), new $Int64(-1066765755, 550964545), new $Int64(818747069, 420611474), new $Int64(-1924830376, 204265180), new $Int64(1549974541, 1787046383), new $Int64(1215581865, 3102292318), new $Int64(418321538, 1552199393), new $Int64(1243493047, 980542004), new $Int64(267284263, 3293718720), new $Int64(1179528763, 3771917473), new $Int64(599484404, 2195808264), new $Int64(252818753, 3894702887), new $Int64(-1367475956, 2099949527), new $Int64(1424094358, 338442522), new $Int64(490737398, 637158004), new $Int64(-1727621530, 281976339), new $Int64(574970164, 3619802330), new $Int64(-431930823, 3084554784), new $Int64(-1264611183, 4129772886), new $Int64(-2104399043, 1680378557), new $Int64(-1621962591, 3339087776), new $Int64(1680500332, 4220317857), new $Int64(-1935828963, 2959322499), new $Int64(1675600481, 1488354890), new $Int64(-834863562, 3958162143), new $Int64(-1226511573, 2773705983), new $Int64(1876039582, 225908689), new $Int64(-1183735113, 908216283), new $Int64(-605696219, 3574646075), new $Int64(-1827723091, 1936937569), new $Int64(1519770881, 75492235), new $Int64(816689472, 1935193178), new $Int64(2142521206, 2018250883), new $Int64(455141620, 3943126022), new $Int64(-601399488, 3066544345), new $Int64(1932392669, 2793082663), new $Int64(-1239009361, 3297036421), new $Int64(1640597065, 2206987825), new $Int64(-553246738, 807894872), new $Int64(-1781325307, 766252117), new $Int64(2060649606, 3833114345), new $Int64(845619743, 1255067973), new $Int64(1201145605, 741697208), new $Int64(-1476242608, 2810093753), new $Int64(1109032642, 4229340371), new $Int64(1462188720, 1361684224), new $Int64(-1159399429, 1906263026), new $Int64(475781207, 3904421704), new $Int64(-623537128, 1769075545), new $Int64(1062308525, 2621599764), new $Int64(1279509432, 3431891480), new $Int64(-1742751146, 1871896503), new $Int64(128756421, 1412808876), new $Int64(1605404688, 952876175), new $Int64(-230443691, 1824438899), new $Int64(1662295856, 1005035476), new $Int64(-156574141, 527508597), new $Int64(1288873303, 3066806859), new $Int64(565995893, 3244940914), new $Int64(-889746188, 209092916), new $Int64(-247669406, 1242699167), new $Int64(-713830396, 456723774), new $Int64(1776978905, 1001252870), new $Int64(1468772157, 2026725874), new $Int64(857254202, 2137562569), new $Int64(765939740, 3183366709), new $Int64(1533887628, 2612072960), new $Int64(56977098, 1727148468), new $Int64(-1197583895, 3803658212), new $Int64(1883670356, 479946959), new $Int64(685713571, 1562982345), new $Int64(-1946242443, 1766109365), new $Int64(700596547, 3257093788), new $Int64(-184714929, 2365720207), new $Int64(93384808, 3742754173), new $Int64(-458385235, 2878193673), new $Int64(1096135042, 2174002182), new $Int64(-834260953, 3573511231), new $Int64(-754572527, 1760299077), new $Int64(-1375627191, 2260779833), new $Int64(-866019274, 1452805722), new $Int64(-1229671918, 2940011802), new $Int64(1890251082, 1886183802), new $Int64(893897673, 2514369088), new $Int64(1644345561, 3924317791), new $Int64(-1974867432, 500935732), new $Int64(1403501753, 676580929), new $Int64(-1565912283, 1184984890), new $Int64(-691968413, 1271474274), new $Int64(-1828754738, 3163791473), new $Int64(2051027584, 2842487377), new $Int64(1511537551, 2170968612), new $Int64(573262976, 3535856740), new $Int64(-2053227187, 1488599718), new $Int64(-1180531831, 3408913763), new $Int64(-2086531912, 2501050084), new $Int64(-875130448, 1639124157), new $Int64(-2009482504, 4088176393), new $Int64(1574896563, 3989947576), new $Int64(-165243708, 3414355209), new $Int64(-792329287, 2275136352), new $Int64(-2057774345, 2151835223), new $Int64(-931144933, 1654534827), new $Int64(-679921451, 377892833), new $Int64(-482716010, 660204544), new $Int64(85706799, 390828249), new $Int64(-1422172693, 3402783878), new $Int64(-1468634160, 3717936603), new $Int64(1113532086, 2211058823), new $Int64(1564224320, 2692150867), new $Int64(1952770442, 1928910388), new $Int64(788716862, 3931011137), new $Int64(1083670504, 1112701047), new $Int64(-68150572, 2452299106), new $Int64(-896164822, 2337204777), new $Int64(1774877857, 273889282), new $Int64(1798719843, 1462008793), new $Int64(2138834788, 1554494002), new $Int64(-1194967131, 182675323), new $Int64(-1598554764, 1882802136), new $Int64(589279648, 3700220025), new $Int64(381039426, 3083431543), new $Int64(-851859191, 3622207527), new $Int64(338126939, 432729309), new $Int64(-1667470126, 2391914317), new $Int64(-1849558151, 235747924), new $Int64(2120733629, 3088823825), new $Int64(-745079795, 2314658321), new $Int64(1165929723, 2957634338), new $Int64(501323675, 4117056981), new $Int64(1564699815, 1482500298), new $Int64(-740826490, 840489337), new $Int64(799522364, 3483178565), new $Int64(532129761, 2074004656), new $Int64(724246478, 3643392642), new $Int64(-665153481, 1583624461), new $Int64(-885822954, 287473085), new $Int64(1667835381, 3136843981), new $Int64(1138806821, 1266970974), new $Int64(135185781, 1998688839), new $Int64(392094735, 1492900209), new $Int64(1031326774, 1538112737), new $Int64(-2070568842, 2207265429), new $Int64(-1886797613, 963263315), new $Int64(1671145500, 2295892134), new $Int64(1068469660, 2002560897), new $Int64(-356250305, 1369254035), new $Int64(33436120, 3353312708), new $Int64(57507843, 947771099), new $Int64(-1945755145, 1747061399), new $Int64(1507240140, 2047354631), new $Int64(720000810, 4165367136), new $Int64(479265078, 3388864963), new $Int64(-952181250, 286492130), new $Int64(2045622690, 2795735007), new $Int64(-715730566, 3703961339), new $Int64(-148436487, 1797825479), new $Int64(1429039600, 1116589674), new $Int64(-1665420098, 2593309206), new $Int64(1329049334, 3404995677), new $Int64(-750579440, 3453462936), new $Int64(1014767077, 3016498634), new $Int64(75698599, 1650371545), new $Int64(1592007860, 212344364), new $Int64(1127766888, 3843932156), new $Int64(-748019856, 3573129983), new $Int64(-890581831, 665897820), new $Int64(1071492673, 1675628772), new $Int64(243225682, 2831752928), new $Int64(2120298836, 1486294219), new $Int64(-1954407413, 268782709), new $Int64(-1002123503, 4186179080), new $Int64(624342951, 1613720397), new $Int64(857179861, 2703686015), new $Int64(-911618704, 2205342611), new $Int64(-672703993, 1411666394), new $Int64(-1528454899, 677744900), new $Int64(-1876628533, 4172867247), new $Int64(135494707, 2163418403), new $Int64(849547544, 2841526879), new $Int64(-1117516959, 1082141470), new $Int64(-1770111792, 4046134367), new $Int64(51415528, 2142943655), new $Int64(-249824333, 3124627521), new $Int64(998228909, 219992939), new $Int64(-1078790951, 1756846531), new $Int64(1283749206, 1225118210), new $Int64(-525858006, 1647770243), new $Int64(-2035959705, 444807907), new $Int64(2036369448, 3952076173), new $Int64(53201823, 1461839639), new $Int64(315761893, 3699250910), new $Int64(702974850, 1373688981), new $Int64(734022261, 147523747), new $Int64(-2047330906, 1211276581), new $Int64(1294440951, 2548832680), new $Int64(1144696256, 1995631888), new $Int64(-1992983070, 2011457303), new $Int64(-1351022674, 3057425772), new $Int64(667839456, 81484597), new $Int64(-1681980888, 3646681560), new $Int64(-1372462725, 635548515), new $Int64(602489502, 2508044581), new $Int64(-1794220117, 1014917157), new $Int64(719992433, 3214891315), new $Int64(-1294799037, 959582252), new $Int64(226415134, 3347040449), new $Int64(-362868096, 4102971975), new $Int64(397887437, 4078022210), new $Int64(-536803826, 2851767182), new $Int64(-1398321012, 1540160644), new $Int64(-1549098876, 1057290595), new $Int64(-112592988, 3907769253), new $Int64(579300318, 4248952684), new $Int64(-1054576049, 132554364), new $Int64(-1085862414, 1029351092), new $Int64(697840928, 2583007416), new $Int64(298619124, 1486185789), new $Int64(55905697, 2871589073), new $Int64(2017643612, 723203291), new $Int64(146250550, 2494333952), new $Int64(-1082993397, 2230939180), new $Int64(-1804568072, 3943232912), new $Int64(1768732449, 2181367922), new $Int64(-729261111, 2889274791), new $Int64(1824032949, 2046728161), new $Int64(1653899792, 1376052477), new $Int64(1022327048, 381236993), new $Int64(-1113097690, 3188942166), new $Int64(-74480109, 350070824), new $Int64(144881592, 61758415), new $Int64(-741824226, 3492950336), new $Int64(-2030042720, 3093818430), new $Int64(-453590535, 2962480613), new $Int64(-1912050708, 3154871160), new $Int64(-1636478569, 3228564679), new $Int64(610731502, 888276216), new $Int64(-946702974, 3574998604), new $Int64(-1277068380, 1967526716), new $Int64(-1556147941, 1554691298), new $Int64(-1573024234, 339944798), new $Int64(1223764147, 1154515356), new $Int64(1825645307, 967516237), new $Int64(1546195135, 596588202), new $Int64(-1867600880, 3764362170), new $Int64(-1655392592, 266611402), new $Int64(-393255880, 2047856075), new $Int64(-1000726433, 21444105), new $Int64(-949424754, 3065563181), new $Int64(-232418803, 1140663212), new $Int64(633187674, 2323741028), new $Int64(2126290159, 3103873707), new $Int64(1008658319, 2766828349), new $Int64(-485587503, 1970872996), new $Int64(1628585413, 3766615585), new $Int64(-595148528, 2036813414), new $Int64(-1994877121, 3105536507), new $Int64(13954645, 3396176938), new $Int64(-721402003, 1377154485), new $Int64(-61839181, 3807014186), new $Int64(543009040, 3710110597), new $Int64(-1751425519, 916420443), new $Int64(734556788, 2103831255), new $Int64(-1766161494, 717331943), new $Int64(-1574598896, 3550505941), new $Int64(45939673, 378749927), new $Int64(-1997615719, 611017331), new $Int64(592130075, 758907650), new $Int64(1012992349, 154266815), new $Int64(-1040454942, 1407468696), new $Int64(-1678191250, 970098704), new $Int64(-285057486, 1971660656), new $Int64(998365243, 3332747885), new $Int64(1947089649, 1935189867), new $Int64(1510248801, 203520055), new $Int64(-1305165746, 3916463034), new $Int64(-388598655, 3474113316), new $Int64(1036101639, 316544223), new $Int64(-1773744891, 1650844677), new $Int64(-907191419, 4267565603), new $Int64(-1070275024, 2501167616), new $Int64(-1520651863, 3929401789), new $Int64(-2091360852, 337170252), new $Int64(-960502090, 2061966842), new $Int64(-304190848, 2508461464), new $Int64(-1941471116, 2791377107), new $Int64(1240791848, 1227227588), new $Int64(1813978778, 1709681848), new $Int64(1153692192, 3768820575), new $Int64(-1002297449, 2887126398), new $Int64(-1447111334, 296561685), new $Int64(700300844, 3729960077), new $Int64(-1572311344, 372833036), new $Int64(2078875613, 2409779288), new $Int64(1829161290, 555274064), new $Int64(-1105595719, 4239804901), new $Int64(1839403216, 3723486978), new $Int64(-1649093095, 2145871984), new $Int64(-1582765715, 3565480803), new $Int64(-1568653827, 2197313814), new $Int64(974785092, 3613674566), new $Int64(438638731, 3042093666), new $Int64(-96556264, 3324034321), new $Int64(869420878, 3708873369), new $Int64(946682149, 1698090092), new $Int64(1618900382, 4213940712), new $Int64(-1843479747, 2087477361), new $Int64(-1766167800, 2407950639), new $Int64(-1296225558, 3942568569), new $Int64(-1223900450, 4088074412), new $Int64(723260036, 2964773675), new $Int64(-673921829, 1539178386), new $Int64(1062961552, 2694849566), new $Int64(460977733, 2120273838), new $Int64(-1604570740, 2484608657), new $Int64(880846449, 2956190677), new $Int64(1970902366, 4223313749), new $Int64(662161910, 3502682327), new $Int64(705634754, 4133891139), new $Int64(-1031359300, 1166449596), new $Int64(1038247601, 3362705993), new $Int64(93734798, 3892921029), new $Int64(1876124043, 786869787), new $Int64(1057490746, 1046342263), new $Int64(242763728, 493777327), new $Int64(-853573201, 3304827646), new $Int64(616460742, 125356352), new $Int64(499300063, 74094113), new $Int64(-795586925, 2500816079), new $Int64(-490248444, 514015239), new $Int64(1377565129, 543520454), new $Int64(-2039776725, 3614531153), new $Int64(2056746300, 2356753985), new $Int64(1390062617, 2018141668), new $Int64(131272971, 2087974891), new $Int64(-1502927041, 3166972343), new $Int64(372256200, 1517638666), new $Int64(-935275664, 173466846), new $Int64(-695774461, 4241513471), new $Int64(-1413550842, 2783126920), new $Int64(1972004134, 4167264826), new $Int64(29260506, 3907395640), new $Int64(-910901561, 1539634186), new $Int64(-595957298, 178241987), new $Int64(-113277636, 182168164), new $Int64(-1102530459, 2386154934), new $Int64(1379126408, 4077374341), new $Int64(-2114679722, 1732699140), new $Int64(-421057745, 1041306002), new $Int64(1860414813, 2068001749), new $Int64(1005320202, 3208962910), new $Int64(844054010, 697710380), new $Int64(-1509359403, 2228431183), new $Int64(-810313977, 3554678728), new $Int64(-750989047, 173470263), new $Int64(-85886265, 3848297795), new $Int64(-926936977, 246236185), new $Int64(-1984190461, 2066374846), new $Int64(1771673660, 312890749), new $Int64(703378057, 3573310289), new $Int64(-598851901, 143166754), new $Int64(613554316, 2081511079), new $Int64(1197802104, 486038032), new $Int64(-1906483789, 2982218564), new $Int64(364901986, 1000939191), new $Int64(1902782651, 2750454885), new $Int64(-671844857, 3375313137), new $Int64(-1643868040, 881302957), new $Int64(-1508784745, 2514186393), new $Int64(-1703622845, 360024739), new $Int64(1399671872, 292500025), new $Int64(1381210821, 2276300752), new $Int64(521803381, 4069087683), new $Int64(-1938982667, 1637778212), new $Int64(720490469, 1676670893), new $Int64(1067262482, 3855174429), new $Int64(2114075974, 2067248671), new $Int64(-89426259, 2884561259), new $Int64(-805741095, 2456511185), new $Int64(983726246, 561175414), new $Int64(-1719489563, 432588903), new $Int64(885133709, 4059399550), new $Int64(-93096266, 1075014784), new $Int64(-1733832628, 2728058415), new $Int64(1839142064, 1299703678), new $Int64(1262333188, 2347583393), new $Int64(1285481956, 2468164145), new $Int64(-1158354011, 1140014346), new $Int64(2033889184, 1936972070), new $Int64(-1737578993, 3870530098), new $Int64(-484494257, 1717789158), new $Int64(-232997156, 1153452491), new $Int64(-990424416, 3948827651), new $Int64(-1357145630, 2101413152), new $Int64(1495744672, 3854091229), new $Int64(83644069, 4215565463), new $Int64(-1385277313, 1202710438), new $Int64(-564909037, 2072216740), new $Int64(705690639, 2066751068), new $Int64(-2113583312, 173902580), new $Int64(-741983806, 142459001), new $Int64(172391592, 1889151926), new $Int64(-498943125, 3034199774), new $Int64(1618587731, 516490102), new $Int64(93114264, 3692577783), new $Int64(-2078821353, 2953948865), new $Int64(-320938673, 4041040923), new $Int64(-1942517976, 592046130), new $Int64(-705643640, 384297211), new $Int64(-2051649464, 265863924), new $Int64(2101717619, 1333136237), new $Int64(1499611781, 1406273556), new $Int64(1074670496, 426305476), new $Int64(125704633, 2750898176), new $Int64(488068495, 1633944332), new $Int64(2037723464, 3236349343), new $Int64(-1703423246, 4013676611), new $Int64(1718532237, 2265047407), new $Int64(1433593806, 875071080), new $Int64(-343047503, 1418843655), new $Int64(2009228711, 451657300), new $Int64(1229446621, 1866374663), new $Int64(1653472867, 1551455622), new $Int64(577191481, 3560962459), new $Int64(1669204077, 3347903778), new $Int64(-298327194, 2675874918), new $Int64(-1831355577, 2762991672), new $Int64(530492383, 3689068477), new $Int64(844089962, 4071997905), new $Int64(1508155730, 1381702441), new $Int64(2089931018, 2373284878), new $Int64(-864267462, 2143983064), new $Int64(308739063, 1938207195), new $Int64(1754949306, 1188152253), new $Int64(1272345009, 615870490), new $Int64(742653194, 2662252621), new $Int64(1477718295, 3839976789), new $Int64(-2091334213, 306752547), new $Int64(-1426688067, 2162363077), new $Int64(-57052633, 2767224719), new $Int64(-1471624099, 2628837712), new $Int64(1678405918, 2967771969), new $Int64(1694285728, 499792248), new $Int64(-1744131281, 4285253508), new $Int64(962357072, 2856511070), new $Int64(679471692, 2526409716), new $Int64(-1793706473, 1240875658), new $Int64(-914893422, 2577342868), new $Int64(-1001298215, 4136853496), new $Int64(-1477114974, 2403540137), new $Int64(1372824515, 1371410668), new $Int64(-176562048, 371758825), new $Int64(-441063112, 1528834084), new $Int64(-71688630, 1504757260), new $Int64(-1461820072, 699052551), new $Int64(-505543539, 3347789870), new $Int64(1951619734, 3430604759), new $Int64(2119672219, 1935601723), new $Int64(966789690, 834676166)]);
            P = N(new AG.ptr(new B.Mutex.ptr(false), $assertType(L(new $Int64(0, 1)), K)));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["math/big"] = (function() {
    var $pkg = {},
      $init, H, G, J, C, K, E, D, B, I, A, F, L, AN, AS, AT, AV, AW, AX, BL, BW, BX, CX, DA, DP, DQ, DR, DT, DU, DV, DW, DX, DY, DZ, EA, EB, EC, ED, M, BF, BM, BY, BZ, CA, CE, CM, CN, CQ, CW, CY, DJ, DK, DL, DM, b, c, d, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AO, AP, AQ, AR, AU, AY, AZ, BA, BB, BC, BD, BH, BI, BJ, BK, BN, BO, BP, BQ, BR, BS, BT, BU, BV, CB, CC, CD, CF, CG, CH, CI, CJ, CK, CL, CO, CP, CR, CS, CT, CU, CV, CZ, DC, DD, DE, DF, DG, DI, DN;
    H = $packages["bytes"];
    G = $packages["encoding/binary"];
    J = $packages["errors"];
    C = $packages["fmt"];
    K = $packages["github.com/gopherjs/gopherjs/nosync"];
    E = $packages["io"];
    D = $packages["math"];
    B = $packages["math/bits"];
    I = $packages["math/rand"];
    A = $packages["strconv"];
    F = $packages["strings"];
    L = $pkg.Word = $newType(4, $kindUintptr, "big.Word", true, "math/big", true, null);
    AN = $pkg.decimal = $newType(0, $kindStruct, "big.decimal", true, "math/big", false, function(mant_, exp_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.mant = DT.nil;
        this.exp = 0;
        return;
      }
      this.mant = mant_;
      this.exp = exp_;
    });
    AS = $pkg.Float = $newType(0, $kindStruct, "big.Float", true, "math/big", true, function(prec_, mode_, acc_, form_, neg_, mant_, exp_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.prec = 0;
        this.mode = 0;
        this.acc = 0;
        this.form = 0;
        this.neg = false;
        this.mant = BX.nil;
        this.exp = 0;
        return;
      }
      this.prec = prec_;
      this.mode = mode_;
      this.acc = acc_;
      this.form = form_;
      this.neg = neg_;
      this.mant = mant_;
      this.exp = exp_;
    });
    AT = $pkg.ErrNaN = $newType(0, $kindStruct, "big.ErrNaN", true, "math/big", true, function(msg_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.msg = "";
        return;
      }
      this.msg = msg_;
    });
    AV = $pkg.form = $newType(1, $kindUint8, "big.form", true, "math/big", false, null);
    AW = $pkg.RoundingMode = $newType(1, $kindUint8, "big.RoundingMode", true, "math/big", true, null);
    AX = $pkg.Accuracy = $newType(1, $kindInt8, "big.Accuracy", true, "math/big", true, null);
    BL = $pkg.Int = $newType(0, $kindStruct, "big.Int", true, "math/big", true, function(neg_, abs_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.neg = false;
        this.abs = BX.nil;
        return;
      }
      this.neg = neg_;
      this.abs = abs_;
    });
    BW = $pkg.byteReader = $newType(0, $kindStruct, "big.byteReader", true, "math/big", false, function(ScanState_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.ScanState = $ifaceNil;
        return;
      }
      this.ScanState = ScanState_;
    });
    BX = $pkg.nat = $newType(12, $kindSlice, "big.nat", true, "math/big", false, null);
    CX = $pkg.divisor = $newType(0, $kindStruct, "big.divisor", true, "math/big", false, function(bbb_, nbits_, ndigits_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.bbb = BX.nil;
        this.nbits = 0;
        this.ndigits = 0;
        return;
      }
      this.bbb = bbb_;
      this.nbits = nbits_;
      this.ndigits = ndigits_;
    });
    DA = $pkg.Rat = $newType(0, $kindStruct, "big.Rat", true, "math/big", true, function(a_, b_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.a = new BL.ptr(false, BX.nil);
        this.b = new BL.ptr(false, BX.nil);
        return;
      }
      this.a = a_;
      this.b = b_;
    });
    DP = $sliceType($emptyInterface);
    DQ = $arrayType(CX, 64);
    DR = $structType("math/big", [{
      prop: "Mutex",
      name: "Mutex",
      embedded: true,
      exported: true,
      typ: K.Mutex,
      tag: ""
    }, {
      prop: "table",
      name: "table",
      embedded: false,
      exported: false,
      typ: DQ,
      tag: ""
    }]);
    DT = $sliceType($Uint8);
    DU = $ptrType(AS);
    DV = $sliceType(L);
    DW = $ptrType(BL);
    DX = $ptrType(DA);
    DY = $ptrType(L);
    DZ = $ptrType(BX);
    EA = $arrayType(BX, 16);
    EB = $sliceType(CX);
    EC = $ptrType(AN);
    ED = $ptrType(I.Rand);
    AX.prototype.String = function() {
      var e, f;
      e = this.$val;
      e = e - (-1) << 24 >> 24;
      if (e < 0 || e >= 3) {
        return "Accuracy(" + A.FormatInt((new $Int64(0, (e + -1 << 24 >> 24))), 10) + ")";
      }
      return $substring("BelowExactAbove", ((e < 0 || e >= M.length) ? ($throwRuntimeError("index out of range"), undefined) : M[e]), (f = e + 1 << 24 >> 24, ((f < 0 || f >= M.length) ? ($throwRuntimeError("index out of range"), undefined) : M[f])));
    };
    $ptrType(AX).prototype.String = function() {
      return new AX(this.$get()).String();
    };
    N = function(e, f, g) {
      var e, f, g, h, i, j;
      h = 0;
      i = 0;
      j = f + g >>> 0;
      i = e + j >>> 0;
      if (i < e || j < f) {
        h = 1;
      }
      return [h, i];
    };
    O = function(e, f, g) {
      var e, f, g, h, i, j;
      h = 0;
      i = 0;
      j = f + g >>> 0;
      i = e - j >>> 0;
      if (i > e || j < f) {
        h = 1;
      }
      return [h, i];
    };
    P = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p;
      g = 0;
      h = 0;
      i = (e & 65535) >>> 0;
      j = e >>> 16 >>> 0;
      k = (f & 65535) >>> 0;
      l = f >>> 16 >>> 0;
      m = $imul(i, k) >>> 0;
      n = ($imul(j, k) >>> 0) + (m >>> 16 >>> 0) >>> 0;
      o = (n & 65535) >>> 0;
      p = n >>> 16 >>> 0;
      o = o + (($imul(i, l) >>> 0)) >>> 0;
      g = (($imul(j, l) >>> 0) + p >>> 0) + (o >>> 16 >>> 0) >>> 0;
      h = $imul(e, f) >>> 0;
      return [g, h];
    };
    Q = function(e, f, g) {
      var e, f, g, h, i, j, k;
      h = 0;
      i = 0;
      j = P(e, f);
      h = j[0];
      k = j[1];
      i = k + g >>> 0;
      if (i < k) {
        h = h + (1) >>> 0;
      }
      return [h, i];
    };
    R = function(e) {
      var e;
      return ((B.LeadingZeros(((e >>> 0))) >>> 0));
    };
    S = function(e, f, g) {
      var aa, ab, ac, ad, ae, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      h = 0;
      i = 0;
      if (e >= g) {
        j = 4294967295;
        k = 4294967295;
        h = j;
        i = k;
        return [h, i];
      }
      l = R(g);
      g = (m = (l), m < 32 ? (g << m) : 0) >>> 0;
      n = g >>> 16 >>> 0;
      o = (g & 65535) >>> 0;
      r = (((p = l, p < 32 ? (e << p) : 0) >>> 0) | ((q = ((32 - l >>> 0)), q < 32 ? (f >>> q) : 0) >>> 0)) >>> 0;
      t = (s = l, s < 32 ? (f << s) : 0) >>> 0;
      u = t >>> 16 >>> 0;
      v = (t & 65535) >>> 0;
      x = (w = r / n, (w === w && w !== 1 / 0 && w !== -1 / 0) ? w >>> 0 : $throwRuntimeError("integer divide by zero"));
      y = r - ($imul(x, n) >>> 0) >>> 0;
      while (true) {
        if (!(x >= 65536 || ($imul(x, o) >>> 0) > (($imul(65536, y) >>> 0) + u >>> 0))) {
          break;
        }
        x = x - (1) >>> 0;
        y = y + (n) >>> 0;
        if (y >= 65536) {
          break;
        }
      }
      z = (($imul(r, 65536) >>> 0) + u >>> 0) - ($imul(x, g) >>> 0) >>> 0;
      ab = (aa = z / n, (aa === aa && aa !== 1 / 0 && aa !== -1 / 0) ? aa >>> 0 : $throwRuntimeError("integer divide by zero"));
      y = z - ($imul(ab, n) >>> 0) >>> 0;
      while (true) {
        if (!(ab >= 65536 || ($imul(ab, o) >>> 0) > (($imul(65536, y) >>> 0) + v >>> 0))) {
          break;
        }
        ab = ab - (1) >>> 0;
        y = y + (n) >>> 0;
        if (y >= 65536) {
          break;
        }
      }
      ac = ($imul(x, 65536) >>> 0) + ab >>> 0;
      ad = (ae = l, ae < 32 ? ((((($imul(z, 65536) >>> 0) + v >>> 0) - ($imul(ab, g) >>> 0) >>> 0)) >>> ae) : 0) >>> 0;
      h = ac;
      i = ad;
      return [h, i];
    };
    T = function(e, f, g) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r;
      h = 0;
      if (false) {
        i = e;
        j = 0;
        while (true) {
          if (!(j < i.$length)) {
            break;
          }
          k = j;
          l = N(((k < 0 || k >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + k]), ((k < 0 || k >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + k]), h);
          h = l[0];
          ((k < 0 || k >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + k] = l[1]);
          j++;
        }
        return h;
      }
      m = $subslice(f, 0, e.$length);
      n = 0;
      while (true) {
        if (!(n < m.$length)) {
          break;
        }
        o = n;
        p = ((n < 0 || n >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + n]);
        q = ((o < 0 || o >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + o]);
        r = (p + q >>> 0) + h >>> 0;
        ((o < 0 || o >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + o] = r);
        h = (((((p & q) >>> 0) | (((((p | q) >>> 0)) & ~r) >>> 0)) >>> 0)) >>> 31 >>> 0;
        n++;
      }
      return h;
    };
    U = function(e, f, g) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r;
      h = 0;
      if (false) {
        i = e;
        j = 0;
        while (true) {
          if (!(j < i.$length)) {
            break;
          }
          k = j;
          l = O(((k < 0 || k >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + k]), ((k < 0 || k >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + k]), h);
          h = l[0];
          ((k < 0 || k >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + k] = l[1]);
          j++;
        }
        return h;
      }
      m = $subslice(f, 0, e.$length);
      n = 0;
      while (true) {
        if (!(n < m.$length)) {
          break;
        }
        o = n;
        p = ((n < 0 || n >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + n]);
        q = ((o < 0 || o >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + o]);
        r = (p - q >>> 0) - h >>> 0;
        ((o < 0 || o >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + o] = r);
        h = (((((q & ~p) >>> 0) | (((((q | (~p >>> 0)) >>> 0)) & r) >>> 0)) >>> 0)) >>> 31 >>> 0;
        n++;
      }
      return h;
    };
    V = function(e, f, g) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q;
      h = 0;
      if (false) {
        h = g;
        i = e;
        j = 0;
        while (true) {
          if (!(j < i.$length)) {
            break;
          }
          k = j;
          l = N(((k < 0 || k >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + k]), h, 0);
          h = l[0];
          ((k < 0 || k >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + k] = l[1]);
          j++;
        }
        return h;
      }
      h = g;
      m = $subslice(f, 0, e.$length);
      n = 0;
      while (true) {
        if (!(n < m.$length)) {
          break;
        }
        o = n;
        p = ((n < 0 || n >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + n]);
        q = p + h >>> 0;
        ((o < 0 || o >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + o] = q);
        h = ((p & ~q) >>> 0) >>> 31 >>> 0;
        n++;
      }
      return h;
    };
    W = function(e, f, g) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q;
      h = 0;
      if (false) {
        h = g;
        i = e;
        j = 0;
        while (true) {
          if (!(j < i.$length)) {
            break;
          }
          k = j;
          l = O(((k < 0 || k >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + k]), h, 0);
          h = l[0];
          ((k < 0 || k >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + k] = l[1]);
          j++;
        }
        return h;
      }
      h = g;
      m = $subslice(f, 0, e.$length);
      n = 0;
      while (true) {
        if (!(n < m.$length)) {
          break;
        }
        o = n;
        p = ((n < 0 || n >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + n]);
        q = p - h >>> 0;
        ((o < 0 || o >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + o] = q);
        h = (((q & ~p) >>> 0)) >>> 31 >>> 0;
        n++;
      }
      return h;
    };
    X = function(e, f, g) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s;
      h = 0;
      i = e.$length;
      if (i > 0) {
        j = 32 - g >>> 0;
        l = (k = i - 1 >> 0, ((k < 0 || k >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + k]));
        h = (m = j, m < 32 ? (l >>> m) : 0) >>> 0;
        n = i - 1 >> 0;
        while (true) {
          if (!(n > 0)) {
            break;
          }
          o = l;
          l = (p = n - 1 >> 0, ((p < 0 || p >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + p]));
          ((n < 0 || n >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + n] = ((((q = g, q < 32 ? (o << q) : 0) >>> 0) | ((r = j, r < 32 ? (l >>> r) : 0) >>> 0)) >>> 0));
          n = n - (1) >> 0;
        }(0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0] = ((s = g, s < 32 ? (l << s) : 0) >>> 0));
      }
      return h;
    };
    Y = function(e, f, g) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s;
      h = 0;
      i = e.$length;
      if (i > 0) {
        j = 32 - g >>> 0;
        k = (0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0]);
        h = (l = j, l < 32 ? (k << l) : 0) >>> 0;
        m = 0;
        while (true) {
          if (!(m < (i - 1 >> 0))) {
            break;
          }
          n = k;
          k = (o = m + 1 >> 0, ((o < 0 || o >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + o]));
          ((m < 0 || m >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + m] = ((((p = g, p < 32 ? (n >>> p) : 0) >>> 0) | ((q = j, q < 32 ? (k << q) : 0) >>> 0)) >>> 0));
          m = m + (1) >> 0;
        }(s = i - 1 >> 0, ((s < 0 || s >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + s] = ((r = g, r < 32 ? (k >>> r) : 0) >>> 0)));
      }
      return h;
    };
    Z = function(e, f, g, h) {
      var e, f, g, h, i, j, k, l, m;
      i = 0;
      i = h;
      j = e;
      k = 0;
      while (true) {
        if (!(k < j.$length)) {
          break;
        }
        l = k;
        m = Q(((l < 0 || l >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + l]), g, i);
        i = m[0];
        ((l < 0 || l >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + l] = m[1]);
        k++;
      }
      return i;
    };
    AA = function(e, f, g) {
      var e, f, g, h, i, j, k, l, m, n, o;
      h = 0;
      i = e;
      j = 0;
      while (true) {
        if (!(j < i.$length)) {
          break;
        }
        k = j;
        l = Q(((k < 0 || k >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + k]), g, ((k < 0 || k >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + k]));
        m = l[0];
        n = l[1];
        o = N(n, h, 0);
        h = o[0];
        ((k < 0 || k >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + k] = o[1]);
        h = h + (m) >>> 0;
        j++;
      }
      return h;
    };
    AB = function(e, f, g, h) {
      var e, f, g, h, i, j, k;
      i = 0;
      i = f;
      j = e.$length - 1 >> 0;
      while (true) {
        if (!(j >= 0)) {
          break;
        }
        k = S(i, ((j < 0 || j >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + j]), h);
        ((j < 0 || j >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + j] = k[0]);
        i = k[1];
        j = j - (1) >> 0;
      }
      return i;
    };
    AC = function(e, f) {
      var e, f, g, h, i;
      g = 0;
      h = 0;
      i = P(e, f);
      g = i[0];
      h = i[1];
      return [g, h];
    };
    AD = function(e, f, g) {
      var e, f, g, h, i, j;
      h = 0;
      i = 0;
      j = S(e, f, g);
      h = j[0];
      i = j[1];
      return [h, i];
    };
    AE = function(e, f, g) {
      var e, f, g, h;
      h = 0;
      h = T(e, f, g);
      return h;
    };
    AF = function(e, f, g) {
      var e, f, g, h;
      h = 0;
      h = U(e, f, g);
      return h;
    };
    AG = function(e, f, g) {
      var e, f, g, h;
      h = 0;
      h = V(e, f, g);
      return h;
    };
    AH = function(e, f, g) {
      var e, f, g, h;
      h = 0;
      h = W(e, f, g);
      return h;
    };
    AI = function(e, f, g) {
      var e, f, g, h;
      h = 0;
      h = X(e, f, g);
      return h;
    };
    AJ = function(e, f, g) {
      var e, f, g, h;
      h = 0;
      h = Y(e, f, g);
      return h;
    };
    AK = function(e, f, g, h) {
      var e, f, g, h, i;
      i = 0;
      i = Z(e, f, g, h);
      return i;
    };
    AL = function(e, f, g) {
      var e, f, g, h;
      h = 0;
      h = AA(e, f, g);
      return h;
    };
    AM = function(e, f, g, h) {
      var e, f, g, h, i;
      i = 0;
      i = AB(e, f, g, h);
      return i;
    };
    AN.ptr.prototype.at = function(e) {
      var e, f, g;
      f = this;
      if (0 <= e && e < f.mant.$length) {
        return (g = f.mant, ((e < 0 || e >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + e]));
      }
      return 48;
    };
    AN.prototype.at = function(e) {
      return this.$val.at(e);
    };
    AN.ptr.prototype.init = function(e, f) {
      var e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if (e.$length === 0) {
              g.mant = $subslice(g.mant, 0, 0);
              g.exp = 0;
              $s = -1;
              return;
            }
            if (f < 0) {
              h = e.trailingZeroBits();
              i = ((-f >>> 0));
              if (i >= h) {
                i = h;
              }
              e = (BX.nil).shr(e, i);
              f = f + (((i >> 0))) >> 0;
            }
            if (f > 0) {
              e = (BX.nil).shl(e, ((f >>> 0)));
              f = 0;
            }
            j = e.utoa(10);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            k = j;
            l = k.$length;
            g.exp = l;
            while (true) {
              if (!(l > 0 && ((m = l - 1 >> 0, ((m < 0 || m >= k.$length) ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + m])) === 48))) {
                break;
              }
              l = l - (1) >> 0;
            }
            g.mant = $appendSlice($subslice(g.mant, 0, 0), $subslice(k, 0, l));
            if (f < 0) {
              while (true) {
                if (!(f < -28)) {
                  break;
                }
                AO(g, 28);
                f = f + (28) >> 0;
              }
              AO(g, ((-f >>> 0)));
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.init
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.init = function(e, f) {
      return this.$val.init(e, f);
    };
    AO = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y;
      g = 0;
      h = 0;
      while (true) {
        if (!((((i = f, i < 32 ? (h >>> i) : 0) >>> 0) === 0) && g < e.mant.$length)) {
          break;
        }
        k = (((j = e.mant, ((g < 0 || g >= j.$length) ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + g])) >>> 0));
        g = g + (1) >> 0;
        h = (($imul(h, 10) >>> 0) + k >>> 0) - 48 >>> 0;
      }
      if (h === 0) {
        e.mant = $subslice(e.mant, 0, 0);
        return;
      }
      while (true) {
        if (!(((l = f, l < 32 ? (h >>> l) : 0) >>> 0) === 0)) {
          break;
        }
        g = g + (1) >> 0;
        h = $imul(h, (10)) >>> 0;
      }
      e.exp = e.exp + ((1 - g >> 0)) >> 0;
      m = 0;
      o = ((n = f, n < 32 ? (1 << n) : 0) >>> 0) - 1 >>> 0;
      while (true) {
        if (!(g < e.mant.$length)) {
          break;
        }
        q = (((p = e.mant, ((g < 0 || g >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + g])) >>> 0));
        g = g + (1) >> 0;
        s = (r = f, r < 32 ? (h >>> r) : 0) >>> 0;
        h = (h & (o)) >>> 0;
        (t = e.mant, ((m < 0 || m >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + m] = (((s + 48 >>> 0) << 24 >>> 24))));
        m = m + (1) >> 0;
        h = (($imul(h, 10) >>> 0) + q >>> 0) - 48 >>> 0;
      }
      while (true) {
        if (!(h > 0 && m < e.mant.$length)) {
          break;
        }
        v = (u = f, u < 32 ? (h >>> u) : 0) >>> 0;
        h = (h & (o)) >>> 0;
        (w = e.mant, ((m < 0 || m >= w.$length) ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + m] = (((v + 48 >>> 0) << 24 >>> 24))));
        m = m + (1) >> 0;
        h = $imul(h, 10) >>> 0;
      }
      e.mant = $subslice(e.mant, 0, m);
      while (true) {
        if (!(h > 0)) {
          break;
        }
        y = (x = f, x < 32 ? (h >>> x) : 0) >>> 0;
        h = (h & (o)) >>> 0;
        e.mant = $append(e.mant, (((y + 48 >>> 0) << 24 >>> 24)));
        h = $imul(h, 10) >>> 0;
      }
      AR(e);
    };
    AN.ptr.prototype.String = function() {
      var e, f;
      e = this;
      if (e.mant.$length === 0) {
        return "0";
      }
      f = DT.nil;
      if (e.exp <= 0) {
        f = $appendSlice(f, "0.");
        f = AP(f, -e.exp);
        f = $appendSlice(f, e.mant);
      } else if (e.exp < e.mant.$length) {
        f = $appendSlice(f, $subslice(e.mant, 0, e.exp));
        f = $append(f, 46);
        f = $appendSlice(f, $subslice(e.mant, e.exp));
      } else {
        f = $appendSlice(f, e.mant);
        f = AP(f, e.exp - e.mant.$length >> 0);
      }
      return ($bytesToString(f));
    };
    AN.prototype.String = function() {
      return this.$val.String();
    };
    AP = function(e, f) {
      var e, f;
      while (true) {
        if (!(f > 0)) {
          break;
        }
        e = $append(e, 48);
        f = f - (1) >> 0;
      }
      return e;
    };
    AQ = function(e, f) {
      var e, f, g, h, i, j;
      if (((g = e.mant, ((f < 0 || f >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + f])) === 53) && ((f + 1 >> 0) === e.mant.$length)) {
        return f > 0 && !(((((((h = e.mant, i = f - 1 >> 0, ((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i])) - 48 << 24 >>> 24)) & 1) >>> 0) === 0));
      }
      return (j = e.mant, ((f < 0 || f >= j.$length) ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + f])) >= 53;
    };
    AN.ptr.prototype.round = function(e) {
      var e, f;
      f = this;
      if (e < 0 || e >= f.mant.$length) {
        return;
      }
      if (AQ(f, e)) {
        f.roundUp(e);
      } else {
        f.roundDown(e);
      }
    };
    AN.prototype.round = function(e) {
      return this.$val.round(e);
    };
    AN.ptr.prototype.roundUp = function(e) {
      var e, f, g, h, i, j, k, l;
      f = this;
      if (e < 0 || e >= f.mant.$length) {
        return;
      }
      while (true) {
        if (!(e > 0 && (g = f.mant, h = e - 1 >> 0, ((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h])) >= 57)) {
          break;
        }
        e = e - (1) >> 0;
      }
      if (e === 0) {
        (i = f.mant, (0 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 0] = 49));
        f.mant = $subslice(f.mant, 0, 1);
        f.exp = f.exp + (1) >> 0;
        return;
      }
      j = e - 1 >> 0;
      (l = f.mant, ((j < 0 || j >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + j] = ((k = f.mant, ((j < 0 || j >= k.$length) ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + j])) + (1) << 24 >>> 24)));
      f.mant = $subslice(f.mant, 0, e);
    };
    AN.prototype.roundUp = function(e) {
      return this.$val.roundUp(e);
    };
    AN.ptr.prototype.roundDown = function(e) {
      var e, f;
      f = this;
      if (e < 0 || e >= f.mant.$length) {
        return;
      }
      f.mant = $subslice(f.mant, 0, e);
      AR(f);
    };
    AN.prototype.roundDown = function(e) {
      return this.$val.roundDown(e);
    };
    AR = function(e) {
      var e, f, g, h;
      f = e.mant.$length;
      while (true) {
        if (!(f > 0 && ((g = e.mant, h = f - 1 >> 0, ((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h])) === 48))) {
          break;
        }
        f = f - (1) >> 0;
      }
      e.mant = $subslice(e.mant, 0, f);
      if (f === 0) {
        e.exp = 0;
      }
    };
    AT.ptr.prototype.Error = function() {
      var e;
      e = this;
      return e.msg;
    };
    AT.prototype.Error = function() {
      return this.$val.Error();
    };
    AU = function(e) {
      var e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (D.IsNaN(e)) {
              $panic((f = new AT.ptr("NewFloat(NaN)"), new f.constructor.elem(f)));
            }
            g = new AS.ptr(0, 0, 0, 0, false, BX.nil, 0).SetFloat64(e);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AU
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.NewFloat = AU;
    AS.ptr.prototype.SetPrec = function(e) {
      var e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            f.acc = 0;
            if (e === 0) {
              f.prec = 0;
              if (f.form === 1) {
                f.acc = AY(f.neg);
                f.form = 0;
              }
              $s = -1;
              return f;
            }
            if (e > 4294967295) {
              e = 4294967295;
            }
            g = f.prec;
            f.prec = ((e >>> 0));
            if (f.prec < g) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = f.round(0);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.SetPrec
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.SetPrec = function(e) {
      return this.$val.SetPrec(e);
    };
    AY = function(e) {
      var e;
      if (e) {
        return 1;
      }
      return -1;
    };
    AS.ptr.prototype.SetMode = function(e) {
      var e, f;
      f = this;
      f.mode = e;
      f.acc = 0;
      return f;
    };
    AS.prototype.SetMode = function(e) {
      return this.$val.SetMode(e);
    };
    AS.ptr.prototype.Prec = function() {
      var e;
      e = this;
      return ((e.prec >>> 0));
    };
    AS.prototype.Prec = function() {
      return this.$val.Prec();
    };
    AS.ptr.prototype.MinPrec = function() {
      var e;
      e = this;
      if (!((e.form === 1))) {
        return 0;
      }
      return (((e.mant.$length >>> 0)) * 32 >>> 0) - e.mant.trailingZeroBits() >>> 0;
    };
    AS.prototype.MinPrec = function() {
      return this.$val.MinPrec();
    };
    AS.ptr.prototype.Mode = function() {
      var e;
      e = this;
      return e.mode;
    };
    AS.prototype.Mode = function() {
      return this.$val.Mode();
    };
    AS.ptr.prototype.Acc = function() {
      var e;
      e = this;
      return e.acc;
    };
    AS.prototype.Acc = function() {
      return this.$val.Acc();
    };
    AS.ptr.prototype.Sign = function() {
      var e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = e.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            if (e.form === 0) {
              $s = -1;
              return 0;
            }
            if (e.neg) {
              $s = -1;
              return -1;
            }
            $s = -1;
            return 1;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Sign
        };
      }
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Sign = function() {
      return this.$val.Sign();
    };
    AS.ptr.prototype.MantExp = function(e) {
      var e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = 0;
            g = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = g.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            if (g.form === 1) {
              f = ((g.exp >> 0));
            }
            if (!(e === DU.nil)) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            h = e.Copy(g);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            h;
            if (e.form === 1) {
              e.exp = 0;
            }
          case 5:
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.MantExp
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.MantExp = function(e) {
      return this.$val.MantExp(e);
    };
    AS.ptr.prototype.setExpAndRound = function(e, f) {
      var e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if ((e.$high < -1 || (e.$high === -1 && e.$low < 2147483648))) {
              g.acc = AY(g.neg);
              g.form = 0;
              $s = -1;
              return;
            }
            if ((e.$high > 0 || (e.$high === 0 && e.$low > 2147483647))) {
              g.acc = AY(!g.neg);
              g.form = 2;
              $s = -1;
              return;
            }
            g.form = 1;
            g.exp = (((e.$low + ((e.$high >> 31) * 4294967296)) >> 0));
            $r = g.round(f);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.setExpAndRound
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.setExpAndRound = function(e, f) {
      return this.$val.setExpAndRound(e, f);
    };
    AS.ptr.prototype.SetMantExp = function(e, f) {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = g.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = e.validate();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            h = g.Copy(e);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            h;
            if (!((g.form === 1))) {
              $s = -1;
              return g;
            }
            $r = g.setExpAndRound((i = (new $Int64(0, g.exp)), j = (new $Int64(0, f)), new $Int64(i.$high + j.$high, i.$low + j.$low)), 0);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.SetMantExp
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.SetMantExp = function(e, f) {
      return this.$val.SetMantExp(e, f);
    };
    AS.ptr.prototype.Signbit = function() {
      var e;
      e = this;
      return e.neg;
    };
    AS.prototype.Signbit = function() {
      return this.$val.Signbit();
    };
    AS.ptr.prototype.IsInf = function() {
      var e;
      e = this;
      return e.form === 2;
    };
    AS.prototype.IsInf = function() {
      return this.$val.IsInf();
    };
    AS.ptr.prototype.IsInt = function() {
      var e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = e.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            if (!((e.form === 1))) {
              $s = -1;
              return e.form === 0;
            }
            if (e.exp <= 0) {
              $s = -1;
              return false;
            }
            $s = -1;
            return e.prec <= ((e.exp >>> 0)) || e.MinPrec() <= ((e.exp >>> 0));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.IsInt
        };
      }
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.IsInt = function() {
      return this.$val.IsInt();
    };
    AS.ptr.prototype.validate = function() {
      var e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            if (true) {
              $panic(new $String("validate called but debugFloat is not set"));
            }
            if (!((e.form === 1))) {
              $s = -1;
              return;
            }
            f = e.mant.$length;
            if (f === 0) {
              $panic(new $String("nonzero finite number with empty mantissa"));
            }
            if ((((g = e.mant, h = f - 1 >> 0, ((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h])) & 2147483648) >>> 0) === 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            k = new L((i = e.mant, j = f - 1 >> 0, ((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j])));
            l = e.Text(112, 0);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            m = new $String(l);
            n = C.Sprintf("msb not set in last word %#x of %s", new DP([k, m]));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            $panic(new $String(n));
          case 2:
            if (e.prec === 0) {
              $panic(new $String("zero precision finite number"));
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.validate
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.validate = function() {
      return this.$val.validate();
    };
    AS.ptr.prototype.round = function(e) {
      var aa, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = f.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            f.acc = 0;
            if (!((f.form === 1))) {
              $s = -1;
              return;
            }
            g = ((f.mant.$length >>> 0));
            h = $imul(g, 32) >>> 0;
            if (h <= f.prec) {
              $s = -1;
              return;
            }
            i = ((((h - f.prec >>> 0) - 1 >>> 0) >>> 0));
            j = (f.mant.bit(i) & 1) >>> 0;
            if ((e === 0) && ((j === 0) || (f.mode === 0))) {
              e = f.mant.sticky(i);
            }
            e = (e & (1)) >>> 0;
            l = (k = ((f.prec + 31 >>> 0)) / 32, (k === k && k !== 1 / 0 && k !== -1 / 0) ? k >>> 0 : $throwRuntimeError("integer divide by zero"));
            if (g > l) {
              $copySlice(f.mant, $subslice(f.mant, (g - l >>> 0)));
              f.mant = $subslice(f.mant, 0, l);
            }
            m = ($imul(l, 32) >>> 0) - f.prec >>> 0;
            o = (n = m, n < 32 ? (1 << n) : 0) >>> 0;
            if (!((((j | e) >>> 0) === 0))) {
              p = false;
              q = f.mode;
              if (q === (4)) {
                p = f.neg;
              } else if (q === (2)) {} else if (q === (0)) {
                p = !((j === 0)) && (!((e === 0)) || !(((((r = f.mant, (0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0])) & o) >>> 0) === 0)));
              } else if (q === (1)) {
                p = !((j === 0));
              } else if (q === (3)) {
                p = true;
              } else if (q === (5)) {
                p = !f.neg;
              } else {
                $panic(new $String("unreachable"));
              }
              f.acc = AY(!(p === f.neg));
              if (p) {
                if (!((AG((s = f.mant, $subslice(new DV(s.$array), s.$offset, s.$offset + s.$length)), (t = f.mant, $subslice(new DV(t.$array), t.$offset, t.$offset + t.$length)), o) === 0))) {
                  if (f.exp >= 2147483647) {
                    f.form = 2;
                    $s = -1;
                    return;
                  }
                  f.exp = f.exp + (1) >> 0;
                  AJ((u = f.mant, $subslice(new DV(u.$array), u.$offset, u.$offset + u.$length)), (v = f.mant, $subslice(new DV(v.$array), v.$offset, v.$offset + v.$length)), 1);
                  w = l - 1 >>> 0;
                  (y = f.mant, ((w < 0 || w >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + w] = (((x = f.mant, ((w < 0 || w >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + w])) | (2147483648)) >>> 0)));
                }
              }
            }(aa = f.mant, (0 >= aa.$length ? ($throwRuntimeError("index out of range"), undefined) : aa.$array[aa.$offset + 0] = (((z = f.mant, (0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0])) & ~((o - 1 >>> 0))) >>> 0)));
            if (false) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            $r = f.validate();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 5:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.round
        };
      }
      $f.aa = aa;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.round = function(e) {
      return this.$val.round(e);
    };
    AS.ptr.prototype.setBits64 = function(e, f) {
      var e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if (g.prec === 0) {
              g.prec = 64;
            }
            g.acc = 0;
            g.neg = e;
            if ((f.$high === 0 && f.$low === 0)) {
              g.form = 0;
              $s = -1;
              return g;
            }
            g.form = 1;
            h = B.LeadingZeros64(f);
            g.mant = g.mant.setUint64($shiftLeft64(f, ((h >>> 0))));
            g.exp = (((64 - h >> 0) >> 0));
            if (g.prec < 64) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = g.round(0);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.setBits64
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.setBits64 = function(e, f) {
      return this.$val.setBits64(e, f);
    };
    AS.ptr.prototype.SetUint64 = function(e) {
      var e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            g = f.setBits64(false, e);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.SetUint64
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.SetUint64 = function(e) {
      return this.$val.SetUint64(e);
    };
    AS.ptr.prototype.SetInt64 = function(e) {
      var e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            g = e;
            if ((g.$high < 0 || (g.$high === 0 && g.$low < 0))) {
              g = new $Int64(-g.$high, -g.$low);
            }
            h = f.setBits64((e.$high < 0 || (e.$high === 0 && e.$low < 0)), (new $Uint64(g.$high, g.$low)));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return h;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.SetInt64
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.SetInt64 = function(e) {
      return this.$val.SetInt64(e);
    };
    AS.ptr.prototype.SetFloat64 = function(e) {
      var e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (f.prec === 0) {
              f.prec = 53;
            }
            if (D.IsNaN(e)) {
              $panic((g = new AT.ptr("Float.SetFloat64(NaN)"), new g.constructor.elem(g)));
            }
            f.acc = 0;
            f.neg = D.Signbit(e);
            if (e === 0) {
              f.form = 0;
              $s = -1;
              return f;
            }
            if (D.IsInf(e, 0)) {
              f.form = 2;
              $s = -1;
              return f;
            }
            f.form = 1;
            h = D.Frexp(e);
            i = h[0];
            j = h[1];
            f.mant = f.mant.setUint64((k = $shiftLeft64(D.Float64bits(i), 11), new $Uint64(2147483648 | k.$high, (0 | k.$low) >>> 0)));
            f.exp = ((j >> 0));
            if (f.prec < 53) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = f.round(0);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.SetFloat64
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.SetFloat64 = function(e) {
      return this.$val.SetFloat64(e);
    };
    AZ = function(e) {
      var e, f, g, h, i;
      if (false && ((e.$length === 0) || ((f = e.$length - 1 >> 0, ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f])) === 0))) {
        $panic(new $String("msw of mantissa is 0"));
      }
      h = R((g = e.$length - 1 >> 0, ((g < 0 || g >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + g])));
      if (h > 0) {
        i = AI($subslice(new DV(e.$array), e.$offset, e.$offset + e.$length), $subslice(new DV(e.$array), e.$offset, e.$offset + e.$length), h);
        if (false && !((i === 0))) {
          $panic(new $String("nlz or shlVU incorrect"));
        }
      }
      return (new $Int64(0, h));
    };
    AS.ptr.prototype.SetInt = function(e) {
      var e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            g = ((e.BitLen() >>> 0));
            if (f.prec === 0) {
              f.prec = BD(g, 64);
            }
            f.acc = 0;
            f.neg = e.neg;
            if (e.abs.$length === 0) {
              f.form = 0;
              $s = -1;
              return f;
            }
            f.mant = f.mant.set(e.abs);
            AZ(f.mant);
            $r = f.setExpAndRound((new $Int64(0, g)), 0);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.SetInt
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.SetInt = function(e) {
      return this.$val.SetInt(e);
    };
    AS.ptr.prototype.SetRat = function(e) {
      var e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = [f];
            g = [g];
            h = this;
            if (e.IsInt()) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            i = h.SetInt(e.Num());
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return i;
          case 2:
            j = new AS.ptr(0, 0, 0, 0, false, BX.nil, 0);
            k = new AS.ptr(0, 0, 0, 0, false, BX.nil, 0);
            f[0] = $clone(j, AS);
            g[0] = $clone(k, AS);
            l = f[0].SetInt(e.Num());
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            l;
            m = g[0].SetInt(e.Denom());
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            m;
            if (h.prec === 0) {
              h.prec = BD(f[0].prec, g[0].prec);
            }
            n = h.Quo(f[0], g[0]);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return n;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.SetRat
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.SetRat = function(e) {
      return this.$val.SetRat(e);
    };
    AS.ptr.prototype.SetInf = function(e) {
      var e, f;
      f = this;
      f.acc = 0;
      f.form = 2;
      f.neg = e;
      return f;
    };
    AS.prototype.SetInf = function(e) {
      return this.$val.SetInf(e);
    };
    AS.ptr.prototype.Set = function(e) {
      var e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = e.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            f.acc = 0;
            if (!(f === e)) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            f.form = e.form;
            f.neg = e.neg;
            if (e.form === 1) {
              f.exp = e.exp;
              f.mant = f.mant.set(e.mant);
            }
            if (f.prec === 0) {
              $s = 6;
              continue;
            }
            if (f.prec < e.prec) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 6:
            f.prec = e.prec;
            $s = 8;
            continue;
          case 7:
            $r = f.round(0);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 8:
          case 5:
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Set
        };
      }
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Set = function(e) {
      return this.$val.Set(e);
    };
    AS.ptr.prototype.Copy = function(e) {
      var e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = e.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            if (!(f === e)) {
              f.prec = e.prec;
              f.mode = e.mode;
              f.acc = e.acc;
              f.form = e.form;
              f.neg = e.neg;
              if (f.form === 1) {
                f.mant = f.mant.set(e.mant);
                f.exp = e.exp;
              }
            }
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Copy
        };
      }
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Copy = function(e) {
      return this.$val.Copy(e);
    };
    BA = function(e) {
      var e, f, g;
      f = e.$length - 1 >> 0;
      if (f < 0) {
        return 0;
      }
      if (false && (((((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]) & 2147483648) >>> 0) === 0)) {
        $panic(new $String("x not normalized"));
      }
      g = 32;
      if (g === (32)) {
        return ((((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]) >>> 0));
      } else if (g === (64)) {
        return ((0 >>> 0));
      }
      $panic(new $String("unreachable"));
    };
    BB = function(e) {
      var e, f, g, h, i, j, k, l, m;
      f = e.$length - 1 >> 0;
      if (f < 0) {
        return new $Uint64(0, 0);
      }
      if (false && (((((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]) & 2147483648) >>> 0) === 0)) {
        $panic(new $String("x not normalized"));
      }
      g = 32;
      if (g === (32)) {
        i = $shiftLeft64(((h = ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]), new $Uint64(0, h.constructor === Number ? h : 1))), 32);
        if (f > 0) {
          i = (j = ((k = (l = f - 1 >> 0, ((l < 0 || l >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + l])), new $Uint64(0, k.constructor === Number ? k : 1))), new $Uint64(i.$high | j.$high, (i.$low | j.$low) >>> 0));
        }
        return i;
      } else if (g === (64)) {
        return ((m = ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]), new $Uint64(0, m.constructor === Number ? m : 1)));
      }
      $panic(new $String("unreachable"));
    };
    AS.ptr.prototype.Uint64 = function() {
      var e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = e.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            f = e.form;
            if (f === (1)) {
              if (e.neg) {
                $s = -1;
                return [new $Uint64(0, 0), 1];
              }
              if (e.exp <= 0) {
                $s = -1;
                return [new $Uint64(0, 0), -1];
              }
              if (e.exp <= 64) {
                g = $shiftRightUint64(BB(e.mant), ((64 - ((e.exp >>> 0)) >>> 0)));
                if (e.MinPrec() <= 64) {
                  $s = -1;
                  return [g, 0];
                }
                $s = -1;
                return [g, -1];
              }
              $s = -1;
              return [new $Uint64(4294967295, 4294967295), -1];
            } else if (f === (0)) {
              $s = -1;
              return [new $Uint64(0, 0), 0];
            } else if (f === (2)) {
              if (e.neg) {
                $s = -1;
                return [new $Uint64(0, 0), 1];
              }
              $s = -1;
              return [new $Uint64(4294967295, 4294967295), -1];
            }
            $panic(new $String("unreachable"));
            $s = -1;
            return [new $Uint64(0, 0), 0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Uint64
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Uint64 = function() {
      return this.$val.Uint64();
    };
    AS.ptr.prototype.Int64 = function() {
      var e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = e.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            f = e.form;
            if (f === (1)) {
              g = AY(e.neg);
              if (e.exp <= 0) {
                $s = -1;
                return [new $Int64(0, 0), g];
              }
              if (e.exp <= 63) {
                i = ((h = $shiftRightUint64(BB(e.mant), ((64 - ((e.exp >>> 0)) >>> 0))), new $Int64(h.$high, h.$low)));
                if (e.neg) {
                  i = new $Int64(-i.$high, -i.$low);
                }
                if (e.MinPrec() <= ((e.exp >>> 0))) {
                  $s = -1;
                  return [i, 0];
                }
                $s = -1;
                return [i, g];
              }
              if (e.neg) {
                if ((e.exp === 64) && (e.MinPrec() === 1)) {
                  g = 0;
                }
                $s = -1;
                return [new $Int64(-2147483648, 0), g];
              }
              $s = -1;
              return [new $Int64(2147483647, 4294967295), -1];
            } else if (f === (0)) {
              $s = -1;
              return [new $Int64(0, 0), 0];
            } else if (f === (2)) {
              if (e.neg) {
                $s = -1;
                return [new $Int64(-2147483648, 0), 1];
              }
              $s = -1;
              return [new $Int64(2147483647, 4294967295), -1];
            }
            $panic(new $String("unreachable"));
            $s = -1;
            return [new $Int64(0, 0), 0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Int64
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Int64 = function() {
      return this.$val.Int64();
    };
    AS.ptr.prototype.Float32 = function() {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = e.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            f = e.form;
            if (f === (1)) {
              $s = 5;
              continue;
            }
            if (f === (0)) {
              $s = 6;
              continue;
            }
            if (f === (2)) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 5:
            g = e.exp - 1 >> 0;
            h = 24;
            if (g < -126) {
              h = 150 + ((g >> 0)) >> 0;
              if (h < 0 || (h === 0) && (e.mant.sticky((((e.mant.$length >>> 0)) * 32 >>> 0) - 1 >>> 0) === 0)) {
                if (e.neg) {
                  i = 0;
                  $s = -1;
                  return [-i, 1];
                }
                $s = -1;
                return [0, -1];
              }
              if (h === 0) {
                if (e.neg) {
                  $s = -1;
                  return [-1.401298464324817e-45, -1];
                }
                $s = -1;
                return [1.401298464324817e-45, 1];
              }
            }
            j = new AS.ptr(0, 0, 0, 0, false, BX.nil, 0);
            j.prec = ((h >>> 0));
            k = j.Set(e);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            k;
            g = j.exp - 1 >> 0;
            if ((j.form === 2) || g > 127) {
              if (e.neg) {
                $s = -1;
                return [($fround(D.Inf(-1))), -1];
              }
              $s = -1;
              return [($fround(D.Inf(1))), 1];
            }
            l = 0;
            m = 0;
            n = 0;
            o = l;
            p = m;
            q = n;
            if (e.neg) {
              o = 2147483648;
            }
            if (g < -126) {
              h = 150 + ((g >> 0)) >> 0;
              q = (r = (((32 - h >> 0) >>> 0)), r < 32 ? (BA(j.mant) >>> r) : 0) >>> 0;
            } else {
              p = (((g + 127 >> 0) >>> 0)) << 23 >>> 0;
              q = ((BA(j.mant) >>> 8 >>> 0) & 8388607) >>> 0;
            }
            $s = -1;
            return [D.Float32frombits((((o | p) >>> 0) | q) >>> 0), j.acc];
          case 6:
            if (e.neg) {
              s = 0;
              $s = -1;
              return [-s, 0];
            }
            $s = -1;
            return [0, 0];
          case 7:
            if (e.neg) {
              $s = -1;
              return [($fround(D.Inf(-1))), 0];
            }
            $s = -1;
            return [($fround(D.Inf(1))), 0];
          case 8:
          case 4:
            $panic(new $String("unreachable"));
            $s = -1;
            return [0, 0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Float32
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Float32 = function() {
      return this.$val.Float32();
    };
    AS.ptr.prototype.Float64 = function() {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = e.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            f = e.form;
            if (f === (1)) {
              $s = 5;
              continue;
            }
            if (f === (0)) {
              $s = 6;
              continue;
            }
            if (f === (2)) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 5:
            g = e.exp - 1 >> 0;
            h = 53;
            if (g < -1022) {
              h = 1075 + ((g >> 0)) >> 0;
              if (h < 0 || (h === 0) && (e.mant.sticky((((e.mant.$length >>> 0)) * 32 >>> 0) - 1 >>> 0) === 0)) {
                if (e.neg) {
                  i = 0;
                  $s = -1;
                  return [-i, 1];
                }
                $s = -1;
                return [0, -1];
              }
              if (h === 0) {
                if (e.neg) {
                  $s = -1;
                  return [-5e-324, -1];
                }
                $s = -1;
                return [5e-324, 1];
              }
            }
            j = new AS.ptr(0, 0, 0, 0, false, BX.nil, 0);
            j.prec = ((h >>> 0));
            k = j.Set(e);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            k;
            g = j.exp - 1 >> 0;
            if ((j.form === 2) || g > 1023) {
              if (e.neg) {
                $s = -1;
                return [D.Inf(-1), -1];
              }
              $s = -1;
              return [D.Inf(1), 1];
            }
            l = new $Uint64(0, 0);
            m = new $Uint64(0, 0);
            n = new $Uint64(0, 0);
            o = l;
            p = m;
            q = n;
            if (e.neg) {
              o = new $Uint64(2147483648, 0);
            }
            if (g < -1022) {
              h = 1075 + ((g >> 0)) >> 0;
              q = $shiftRightUint64(BB(j.mant), (((64 - h >> 0) >>> 0)));
            } else {
              p = $shiftLeft64((new $Uint64(0, (g + 1023 >> 0))), 52);
              q = (r = $shiftRightUint64(BB(j.mant), 11), new $Uint64(r.$high & 1048575, (r.$low & 4294967295) >>> 0));
            }
            $s = -1;
            return [D.Float64frombits((s = new $Uint64(o.$high | p.$high, (o.$low | p.$low) >>> 0), new $Uint64(s.$high | q.$high, (s.$low | q.$low) >>> 0))), j.acc];
          case 6:
            if (e.neg) {
              t = 0;
              $s = -1;
              return [-t, 0];
            }
            $s = -1;
            return [0, 0];
          case 7:
            if (e.neg) {
              $s = -1;
              return [D.Inf(-1), 0];
            }
            $s = -1;
            return [D.Inf(1), 0];
          case 8:
          case 4:
            $panic(new $String("unreachable"));
            $s = -1;
            return [0, 0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Float64
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Float64 = function() {
      return this.$val.Float64();
    };
    AS.ptr.prototype.Int = function(e) {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = f.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            if (e === DW.nil && f.form <= 1) {
              e = new BL.ptr(false, BX.nil);
            }
            g = f.form;
            if (g === (1)) {
              h = AY(f.neg);
              if (f.exp <= 0) {
                $s = -1;
                return [e.SetInt64(new $Int64(0, 0)), h];
              }
              i = ((f.mant.$length >>> 0)) * 32 >>> 0;
              j = ((f.exp >>> 0));
              if (f.MinPrec() <= j) {
                h = 0;
              }
              if (e === DW.nil) {
                e = new BL.ptr(false, BX.nil);
              }
              e.neg = f.neg;
              if (j > i) {
                e.abs = e.abs.shl(f.mant, j - i >>> 0);
              } else if (j < i) {
                e.abs = e.abs.shr(f.mant, i - j >>> 0);
              } else {
                e.abs = e.abs.set(f.mant);
              }
              $s = -1;
              return [e, h];
            } else if (g === (0)) {
              $s = -1;
              return [e.SetInt64(new $Int64(0, 0)), 0];
            } else if (g === (2)) {
              $s = -1;
              return [DW.nil, AY(f.neg)];
            }
            $panic(new $String("unreachable"));
            $s = -1;
            return [DW.nil, 0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Int
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Int = function(e) {
      return this.$val.Int(e);
    };
    AS.ptr.prototype.Rat = function(e) {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = f.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            if (e === DX.nil && f.form <= 1) {
              e = new DA.ptr(new BL.ptr(false, BX.nil), new BL.ptr(false, BX.nil));
            }
            g = f.form;
            if (g === (1)) {
              $s = 5;
              continue;
            }
            if (g === (0)) {
              $s = 6;
              continue;
            }
            if (g === (2)) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 5:
            h = $imul(((f.mant.$length >> 0)), 32);
            e.a.neg = f.neg;
            if (f.exp > h) {
              $s = 10;
              continue;
            }
            if (f.exp < h) {
              $s = 11;
              continue;
            }
            $s = 12;
            continue;
          case 10:
            e.a.abs = e.a.abs.shl(f.mant, (((f.exp - h >> 0) >>> 0)));
            e.b.abs = $subslice(e.b.abs, 0, 0);
            $s = 13;
            continue;
          case 11:
            e.a.abs = e.a.abs.set(f.mant);
            i = e.b.abs.setUint64(new $Uint64(0, 1));
            e.b.abs = i.shl(i, (((h - f.exp >> 0) >>> 0)));
            j = e.norm();
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            j;
            $s = 13;
            continue;
          case 12:
            e.a.abs = e.a.abs.set(f.mant);
            e.b.abs = $subslice(e.b.abs, 0, 0);
          case 13:
          case 9:
            $s = -1;
            return [e, 0];
          case 6:
            $s = -1;
            return [e.SetInt64(new $Int64(0, 0)), 0];
          case 7:
            $s = -1;
            return [DX.nil, AY(f.neg)];
          case 8:
          case 4:
            $panic(new $String("unreachable"));
            $s = -1;
            return [DX.nil, 0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Rat
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Rat = function(e) {
      return this.$val.Rat(e);
    };
    AS.ptr.prototype.Abs = function(e) {
      var e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            g = f.Set(e);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            g;
            f.neg = false;
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Abs
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Abs = function(e) {
      return this.$val.Abs(e);
    };
    AS.ptr.prototype.Neg = function(e) {
      var e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            g = f.Set(e);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            g;
            f.neg = !f.neg;
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Neg
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Neg = function(e) {
      return this.$val.Neg(e);
    };
    BC = function(e, f) {
      var e, f;
      if (true) {
        $panic(new $String("validateBinaryOperands called but debugFloat is not set"));
      }
      if (e.mant.$length === 0) {
        $panic(new $String("empty mantissa for x"));
      }
      if (f.mant.$length === 0) {
        $panic(new $String("empty mantissa for y"));
      }
    };
    AS.ptr.prototype.uadd = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if (false) {
              BC(e, f);
            }
            j = (h = (new $Int64(0, e.exp)), i = $mul64((new $Int64(0, e.mant.$length)), new $Int64(0, 32)), new $Int64(h.$high - i.$high, h.$low - i.$low));
            m = (k = (new $Int64(0, f.exp)), l = $mul64((new $Int64(0, f.mant.$length)), new $Int64(0, 32)), new $Int64(k.$high - l.$high, k.$low - l.$low));
            n = CG(g.mant, e.mant) || CG(g.mant, f.mant);
            if ((j.$high < m.$high || (j.$high === m.$high && j.$low < m.$low))) {
              if (n) {
                o = (BX.nil).shl(f.mant, ((new $Int64(m.$high - j.$high, m.$low - j.$low).$low >>> 0)));
                g.mant = g.mant.add(e.mant, o);
              } else {
                g.mant = g.mant.shl(f.mant, ((new $Int64(m.$high - j.$high, m.$low - j.$low).$low >>> 0)));
                g.mant = g.mant.add(e.mant, g.mant);
              }
            } else if ((j.$high > m.$high || (j.$high === m.$high && j.$low > m.$low))) {
              if (n) {
                p = (BX.nil).shl(e.mant, ((new $Int64(j.$high - m.$high, j.$low - m.$low).$low >>> 0)));
                g.mant = g.mant.add(p, f.mant);
              } else {
                g.mant = g.mant.shl(e.mant, ((new $Int64(j.$high - m.$high, j.$low - m.$low).$low >>> 0)));
                g.mant = g.mant.add(g.mant, f.mant);
              }
              j = m;
            } else {
              g.mant = g.mant.add(e.mant, f.mant);
            }
            $r = g.setExpAndRound((q = (r = $mul64((new $Int64(0, g.mant.$length)), new $Int64(0, 32)), new $Int64(j.$high + r.$high, j.$low + r.$low)), s = AZ(g.mant), new $Int64(q.$high - s.$high, q.$low - s.$low)), 0);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.uadd
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.uadd = function(e, f) {
      return this.$val.uadd(e, f);
    };
    AS.ptr.prototype.usub = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if (false) {
              BC(e, f);
            }
            j = (h = (new $Int64(0, e.exp)), i = $mul64((new $Int64(0, e.mant.$length)), new $Int64(0, 32)), new $Int64(h.$high - i.$high, h.$low - i.$low));
            m = (k = (new $Int64(0, f.exp)), l = $mul64((new $Int64(0, f.mant.$length)), new $Int64(0, 32)), new $Int64(k.$high - l.$high, k.$low - l.$low));
            n = CG(g.mant, e.mant) || CG(g.mant, f.mant);
            if ((j.$high < m.$high || (j.$high === m.$high && j.$low < m.$low))) {
              if (n) {
                o = (BX.nil).shl(f.mant, ((new $Int64(m.$high - j.$high, m.$low - j.$low).$low >>> 0)));
                g.mant = o.sub(e.mant, o);
              } else {
                g.mant = g.mant.shl(f.mant, ((new $Int64(m.$high - j.$high, m.$low - j.$low).$low >>> 0)));
                g.mant = g.mant.sub(e.mant, g.mant);
              }
            } else if ((j.$high > m.$high || (j.$high === m.$high && j.$low > m.$low))) {
              if (n) {
                p = (BX.nil).shl(e.mant, ((new $Int64(j.$high - m.$high, j.$low - m.$low).$low >>> 0)));
                g.mant = p.sub(p, f.mant);
              } else {
                g.mant = g.mant.shl(e.mant, ((new $Int64(j.$high - m.$high, j.$low - m.$low).$low >>> 0)));
                g.mant = g.mant.sub(g.mant, f.mant);
              }
              j = m;
            } else {
              g.mant = g.mant.sub(e.mant, f.mant);
            }
            if (g.mant.$length === 0) {
              g.acc = 0;
              g.form = 0;
              g.neg = false;
              $s = -1;
              return;
            }
            $r = g.setExpAndRound((q = (r = $mul64((new $Int64(0, g.mant.$length)), new $Int64(0, 32)), new $Int64(j.$high + r.$high, j.$low + r.$low)), s = AZ(g.mant), new $Int64(q.$high - s.$high, q.$low - s.$low)), 0);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.usub
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.usub = function(e, f) {
      return this.$val.usub(e, f);
    };
    AS.ptr.prototype.umul = function(e, f) {
      var e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if (false) {
              BC(e, f);
            }
            j = (h = (new $Int64(0, e.exp)), i = (new $Int64(0, f.exp)), new $Int64(h.$high + i.$high, h.$low + i.$low));
            if (e === f) {
              g.mant = g.mant.sqr(e.mant);
            } else {
              g.mant = g.mant.mul(e.mant, f.mant);
            }
            $r = g.setExpAndRound((k = AZ(g.mant), new $Int64(j.$high - k.$high, j.$low - k.$low)), 0);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.umul
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.umul = function(e, f) {
      return this.$val.umul(e, f);
    };
    AS.ptr.prototype.uquo = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if (false) {
              BC(e, f);
            }
            i = (((h = g.prec / 32, (h === h && h !== 1 / 0 && h !== -1 / 0) ? h >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) + 1 >> 0;
            j = e.mant;
            k = (i - e.mant.$length >> 0) + f.mant.$length >> 0;
            if (k > 0) {
              j = $makeSlice(BX, (e.mant.$length + k >> 0));
              $copySlice($subslice(j, k), e.mant);
            }
            l = j.$length - f.mant.$length >> 0;
            m = BX.nil;
            o = g.mant.div(BX.nil, j, f.mant);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            n = o;
            g.mant = n[0];
            m = n[1];
            t = (p = (q = (new $Int64(0, e.exp)), r = (new $Int64(0, f.exp)), new $Int64(q.$high - r.$high, q.$low - r.$low)), s = $mul64((new $Int64(0, (l - g.mant.$length >> 0))), new $Int64(0, 32)), new $Int64(p.$high - s.$high, p.$low - s.$low));
            u = 0;
            if (m.$length > 0) {
              u = 1;
            }
            $r = g.setExpAndRound((v = AZ(g.mant), new $Int64(t.$high - v.$high, t.$low - v.$low)), u);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.uquo
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.uquo = function(e, f) {
      return this.$val.uquo(e, f);
    };
    AS.ptr.prototype.ucmp = function(e) {
      var e, f, g, h, i, j, k, l, m, n;
      f = this;
      if (false) {
        BC(f, e);
      }
      if (f.exp < e.exp) {
        return -1;
      } else if (f.exp > e.exp) {
        return 1;
      }
      g = f.mant.$length;
      h = e.mant.$length;
      while (true) {
        if (!(g > 0 || h > 0)) {
          break;
        }
        i = 0;
        j = 0;
        k = i;
        l = j;
        if (g > 0) {
          g = g - (1) >> 0;
          k = (m = f.mant, ((g < 0 || g >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + g]));
        }
        if (h > 0) {
          h = h - (1) >> 0;
          l = (n = e.mant, ((h < 0 || h >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + h]));
        }
        if (k < l) {
          return -1;
        } else if (k > l) {
          return 1;
        }
      }
      return 0;
    };
    AS.prototype.ucmp = function(e) {
      return this.$val.ucmp(e);
    };
    AS.ptr.prototype.Add = function(e, f) {
      var e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = e.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = f.validate();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            if (g.prec === 0) {
              g.prec = BD(e.prec, f.prec);
            }
            if ((e.form === 1) && (f.form === 1)) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            h = f.neg;
            g.neg = e.neg;
            if (e.neg === h) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            $r = g.uadd(e, f);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 9;
            continue;
          case 8:
            if (e.ucmp(f) > 0) {
              $s = 11;
              continue;
            }
            $s = 12;
            continue;
          case 11:
            $r = g.usub(e, f);
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 13;
            continue;
          case 12:
            g.neg = !g.neg;
            $r = g.usub(f, e);
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 13:
          case 9:
            if ((g.form === 0) && (g.mode === 4) && (g.acc === 0)) {
              g.neg = true;
            }
            $s = -1;
            return g;
          case 6:
            if ((e.form === 2) && (f.form === 2) && !(e.neg === f.neg)) {
              g.acc = 0;
              g.form = 0;
              g.neg = false;
              $panic((i = new AT.ptr("addition of infinities with opposite signs"), new i.constructor.elem(i)));
            }
            if ((e.form === 0) && (f.form === 0)) {
              g.acc = 0;
              g.form = 0;
              g.neg = e.neg && f.neg;
              $s = -1;
              return g;
            }
            if ((e.form === 2) || (f.form === 0)) {
              $s = 16;
              continue;
            }
            $s = 17;
            continue;
          case 16:
            j = g.Set(e);
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return j;
          case 17:
            k = g.Set(f);
            $s = 19;
          case 19:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return k;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Add
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Add = function(e, f) {
      return this.$val.Add(e, f);
    };
    AS.ptr.prototype.Sub = function(e, f) {
      var e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = e.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = f.validate();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            if (g.prec === 0) {
              g.prec = BD(e.prec, f.prec);
            }
            if ((e.form === 1) && (f.form === 1)) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            h = f.neg;
            g.neg = e.neg;
            if (!(e.neg === h)) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            $r = g.uadd(e, f);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 9;
            continue;
          case 8:
            if (e.ucmp(f) > 0) {
              $s = 11;
              continue;
            }
            $s = 12;
            continue;
          case 11:
            $r = g.usub(e, f);
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 13;
            continue;
          case 12:
            g.neg = !g.neg;
            $r = g.usub(f, e);
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 13:
          case 9:
            if ((g.form === 0) && (g.mode === 4) && (g.acc === 0)) {
              g.neg = true;
            }
            $s = -1;
            return g;
          case 6:
            if ((e.form === 2) && (f.form === 2) && e.neg === f.neg) {
              g.acc = 0;
              g.form = 0;
              g.neg = false;
              $panic((i = new AT.ptr("subtraction of infinities with equal signs"), new i.constructor.elem(i)));
            }
            if ((e.form === 0) && (f.form === 0)) {
              g.acc = 0;
              g.form = 0;
              g.neg = e.neg && !f.neg;
              $s = -1;
              return g;
            }
            if ((e.form === 2) || (f.form === 0)) {
              $s = 16;
              continue;
            }
            $s = 17;
            continue;
          case 16:
            j = g.Set(e);
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return j;
          case 17:
            k = g.Neg(f);
            $s = 19;
          case 19:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return k;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Sub
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Sub = function(e, f) {
      return this.$val.Sub(e, f);
    };
    AS.ptr.prototype.Mul = function(e, f) {
      var e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = e.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = f.validate();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            if (g.prec === 0) {
              g.prec = BD(e.prec, f.prec);
            }
            g.neg = !(e.neg === f.neg);
            if ((e.form === 1) && (f.form === 1)) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            $r = g.umul(e, f);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return g;
          case 6:
            g.acc = 0;
            if ((e.form === 0) && (f.form === 2) || (e.form === 2) && (f.form === 0)) {
              g.form = 0;
              g.neg = false;
              $panic((h = new AT.ptr("multiplication of zero with infinity"), new h.constructor.elem(h)));
            }
            if ((e.form === 2) || (f.form === 2)) {
              g.form = 2;
              $s = -1;
              return g;
            }
            g.form = 0;
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Mul
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Mul = function(e, f) {
      return this.$val.Mul(e, f);
    };
    AS.ptr.prototype.Quo = function(e, f) {
      var e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = e.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = f.validate();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            if (g.prec === 0) {
              g.prec = BD(e.prec, f.prec);
            }
            g.neg = !(e.neg === f.neg);
            if ((e.form === 1) && (f.form === 1)) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            $r = g.uquo(e, f);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return g;
          case 6:
            g.acc = 0;
            if ((e.form === 0) && (f.form === 0) || (e.form === 2) && (f.form === 2)) {
              g.form = 0;
              g.neg = false;
              $panic((h = new AT.ptr("division of zero by zero or infinity by infinity"), new h.constructor.elem(h)));
            }
            if ((e.form === 0) || (f.form === 2)) {
              g.form = 0;
              $s = -1;
              return g;
            }
            g.form = 2;
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Quo
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Quo = function(e, f) {
      return this.$val.Quo(e, f);
    };
    AS.ptr.prototype.Cmp = function(e) {
      var e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = f.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = e.validate();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            g = f.ord();
            h = e.ord();
            if (g < h) {
              $s = -1;
              return -1;
            } else if (g > h) {
              $s = -1;
              return 1;
            }
            i = g;
            if (i === (-1)) {
              $s = -1;
              return e.ucmp(f);
            } else if (i === (1)) {
              $s = -1;
              return f.ucmp(e);
            }
            $s = -1;
            return 0;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Cmp
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Cmp = function(e) {
      return this.$val.Cmp(e);
    };
    AS.ptr.prototype.ord = function() {
      var e, f, g;
      e = this;
      f = 0;
      g = e.form;
      if (g === (1)) {
        f = 1;
      } else if (g === (0)) {
        return 0;
      } else if (g === (2)) {
        f = 2;
      }
      if (e.neg) {
        f = -f;
      }
      return f;
    };
    AS.prototype.ord = function() {
      return this.$val.ord();
    };
    BD = function(e, f) {
      var e, f;
      if (e > f) {
        return e;
      }
      return f;
    };
    AS.ptr.prototype.SetString = function(e) {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            h = f.Parse(e, 0);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = h;
            i = g[0];
            j = g[2];
            if ($interfaceIsEqual(j, $ifaceNil)) {
              $s = -1;
              return [i, true];
            }
            $s = -1;
            return [DU.nil, false];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.SetString
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.SetString = function(e) {
      return this.$val.SetString(e);
    };
    AS.ptr.prototype.scan = function(e, f) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = DU.nil;
            h = 0;
            i = $ifaceNil;
            j = this;
            k = j.prec;
            if (k === 0) {
              k = 64;
            }
            j.form = 0;
            m = BV(e);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            l = m;
            j.neg = l[0];
            i = l[1];
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              $s = -1;
              return [g, h, i];
            }
            n = 0;
            p = j.mant.scan(e, f, true);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            o = p;
            j.mant = o[0];
            h = o[1];
            n = o[2];
            i = o[3];
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              $s = -1;
              return [g, h, i];
            }
            q = new $Int64(0, 0);
            r = 0;
            t = DI(e, true);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            s = t;
            q = s[0];
            r = s[1];
            i = s[2];
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              $s = -1;
              return [g, h, i];
            }
            if (j.mant.$length === 0) {
              j.prec = k;
              j.acc = 0;
              j.form = 0;
              g = j;
              $s = -1;
              return [g, h, i];
            }
            w = (u = $mul64((new $Int64(0, j.mant.$length)), new $Int64(0, 32)), v = AZ(j.mant), new $Int64(u.$high - v.$high, u.$low - v.$low));
            x = new $Int64(0, 0);
            if (n < 0) {
              y = (new $Int64(0, n));
              z = h;
              if (z === (10)) {
                x = y;
                w = (aa = y, new $Int64(w.$high + aa.$high, w.$low + aa.$low));
              } else if (z === (2)) {
                w = (ab = y, new $Int64(w.$high + ab.$high, w.$low + ab.$low));
              } else if (z === (16)) {
                w = (ac = $mul64(y, new $Int64(0, 4)), new $Int64(w.$high + ac.$high, w.$low + ac.$low));
              } else {
                $panic(new $String("unexpected mantissa base"));
              }
            }
            ad = r;
            if (ad === (10)) {
              x = (ae = q, new $Int64(x.$high + ae.$high, x.$low + ae.$low));
              w = (af = q, new $Int64(w.$high + af.$high, w.$low + af.$low));
            } else if (ad === (2)) {
              w = (ag = q, new $Int64(w.$high + ag.$high, w.$low + ag.$low));
            } else {
              $panic(new $String("unexpected exponent base"));
            }
            if ((-1 < w.$high || (-1 === w.$high && 2147483648 <= w.$low)) && (w.$high < 0 || (w.$high === 0 && w.$low <= 2147483647))) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            j.prec = k;
            j.form = 1;
            j.exp = (((w.$low + ((w.$high >> 31) * 4294967296)) >> 0));
            g = j;
            $s = 6;
            continue;
          case 5:
            ah = C.Errorf("exponent overflow", new DP([]));
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              ah = ah.$blk();
            }
            if (ah && ah.$blk !== undefined) {
              break s;
            }
            i = ah;
            $s = -1;
            return [g, h, i];
          case 6:
            if ((x.$high === 0 && x.$low === 0)) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            $r = j.round(0);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [g, h, i];
          case 9:
            ai = new AS.ptr(0, 0, 0, 0, false, BX.nil, 0).SetPrec(j.Prec() + 64 >>> 0);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              ai = ai.$blk();
            }
            if (ai && ai.$blk !== undefined) {
              break s;
            }
            aj = ai;
            if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 12:
            ak = j;
            am = aj.pow5(((al = new $Int64(-x.$high, -x.$low), new $Uint64(al.$high, al.$low))));
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              am = am.$blk();
            }
            if (am && am.$blk !== undefined) {
              break s;
            }
            an = am;
            ao = j.Quo(ak, an);
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            ao;
            $s = 14;
            continue;
          case 13:
            ap = j;
            aq = aj.pow5((new $Uint64(x.$high, x.$low)));
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            ar = aq;
            as = j.Mul(ap, ar);
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            as;
          case 14:
            $s = -1;
            return [g, h, i];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.scan
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.scan = function(e, f) {
      return this.$val.scan(e, f);
    };
    AS.ptr.prototype.pow5 = function(e) {
      var e, f, g, h, i, j, k, l, m, n, o, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if ((e.$high < 0 || (e.$high === 0 && e.$low <= 27))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            g = f.SetUint64((($flatten64(e) < 0 || $flatten64(e) >= BF.length) ? ($throwRuntimeError("index out of range"), undefined) : BF[$flatten64(e)]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return g;
          case 2:
            h = f.SetUint64(BF[27]);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            h;
            e = (i = new $Uint64(0, 27), new $Uint64(e.$high - i.$high, e.$low - i.$low));
            j = new AS.ptr(0, 0, 0, 0, false, BX.nil, 0).SetPrec(f.Prec() + 64 >>> 0);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            k = j.SetUint64(new $Uint64(0, 5));
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = k;
          case 7:
            if (!((e.$high > 0 || (e.$high === 0 && e.$low > 0)))) {
              $s = 8;
              continue;
            }
            if (!((m = new $Uint64(e.$high & 0, (e.$low & 1) >>> 0), (m.$high === 0 && m.$low === 0)))) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            n = f.Mul(f, l);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            n;
          case 10:
            o = l.Mul(l, l);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            o;
            e = $shiftRightUint64(e, (1));
            $s = 7;
            continue;
          case 8:
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.pow5
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.pow5 = function(e) {
      return this.$val.pow5(e);
    };
    AS.ptr.prototype.Parse = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = DU.nil;
            h = 0;
            i = $ifaceNil;
            j = this;
            if ((e.length === 3) && (e === "Inf" || e === "inf")) {
              g = j.SetInf(false);
              $s = -1;
              return [g, h, i];
            }
            if ((e.length === 4) && ((e.charCodeAt(0) === 43) || (e.charCodeAt(0) === 45)) && ($substring(e, 1) === "Inf" || $substring(e, 1) === "inf")) {
              g = j.SetInf(e.charCodeAt(0) === 45);
              $s = -1;
              return [g, h, i];
            }
            k = F.NewReader(e);
            m = j.scan(k, f);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            l = m;
            g = l[0];
            h = l[1];
            i = l[2];
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              $s = -1;
              return [g, h, i];
            }
            n = k.ReadByte();
            o = n[0];
            p = n[1];
            if ($interfaceIsEqual(p, $ifaceNil)) {
              $s = 2;
              continue;
            }
            if (!($interfaceIsEqual(p, E.EOF))) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 2:
            q = C.Errorf("expected end of string, found %q", new DP([new $Uint8(o)]));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            i = q;
            $s = 4;
            continue;
          case 3:
            i = p;
          case 4:
            $s = -1;
            return [g, h, i];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Parse
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Parse = function(e, f) {
      return this.$val.Parse(e, f);
    };
    AS.ptr.prototype.Scan = function(e, f) {
      var e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            $r = e.SkipSpace();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            j = g.scan((i = new BW.ptr(e), new i.constructor.elem(i)), 0);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            h = j;
            k = h[2];
            $s = -1;
            return k;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Scan
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Scan = function(e, f) {
      return this.$val.Scan(e, f);
    };
    AS.ptr.prototype.GobEncode = function() {
      var e, f, g, h, i, j;
      e = this;
      if (e === DU.nil) {
        return [DT.nil, $ifaceNil];
      }
      f = 6;
      g = 0;
      if (e.form === 1) {
        g = (((h = ((e.prec + 31 >>> 0)) / 32, (h === h && h !== 1 / 0 && h !== -1 / 0) ? h >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
        if (e.mant.$length < g) {
          g = e.mant.$length;
        }
        f = f + ((4 + ($imul(g, 4)) >> 0)) >> 0;
      }
      i = $makeSlice(DT, f);
      (0 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 0] = 1);
      j = ((((((((e.mode & 7) >>> 0) << 24 >>> 24)) << 5 << 24 >>> 24) | ((((((e.acc + 1 << 24 >> 24)) & 3) << 24 >>> 24)) << 3 << 24 >>> 24)) >>> 0) | (((((e.form & 3) >>> 0) << 24 >>> 24)) << 1 << 24 >>> 24)) >>> 0;
      if (e.neg) {
        j = (j | (1)) >>> 0;
      }(1 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 1] = j);
      $clone(G.BigEndian, G.bigEndian).PutUint32($subslice(i, 2), e.prec);
      if (e.form === 1) {
        $clone(G.BigEndian, G.bigEndian).PutUint32($subslice(i, 6), ((e.exp >>> 0)));
        $subslice(e.mant, (e.mant.$length - g >> 0)).bytes($subslice(i, 10));
      }
      return [i, $ifaceNil];
    };
    AS.prototype.GobEncode = function() {
      return this.$val.GobEncode();
    };
    AS.ptr.prototype.GobDecode = function(e) {
      var e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (e.$length === 0) {
              AS.copy(f, new AS.ptr(0, 0, 0, 0, false, BX.nil, 0));
              $s = -1;
              return $ifaceNil;
            }
            if (!(((0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]) === 1))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            g = C.Errorf("Float.GobDecode: encoding version %d not supported", new DP([new $Uint8((0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]))]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return g;
          case 2:
            h = f.prec;
            i = f.mode;
            j = (1 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 1]);
            f.mode = ((((((j >>> 5 << 24 >>> 24)) & 7) >>> 0) << 24 >>> 24));
            f.acc = ((((((j >>> 3 << 24 >>> 24)) & 3) >>> 0) << 24 >> 24)) - 1 << 24 >> 24;
            f.form = ((((((j >>> 1 << 24 >>> 24)) & 3) >>> 0) << 24 >>> 24));
            f.neg = !((((j & 1) >>> 0) === 0));
            f.prec = $clone(G.BigEndian, G.bigEndian).Uint32($subslice(e, 2));
            if (f.form === 1) {
              f.exp = (($clone(G.BigEndian, G.bigEndian).Uint32($subslice(e, 6)) >> 0));
              f.mant = f.mant.setBytes($subslice(e, 10));
            }
            if (!((h === 0))) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            f.mode = i;
            k = f.SetPrec(((h >>> 0)));
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            k;
          case 5:
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.GobDecode
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.GobDecode = function(e) {
      return this.$val.GobDecode(e);
    };
    AS.ptr.prototype.MarshalText = function() {
      var e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = DT.nil;
            f = $ifaceNil;
            g = this;
            if (g === DU.nil) {
              h = (new DT($stringToBytes("<nil>")));
              i = $ifaceNil;
              e = h;
              f = i;
              $s = -1;
              return [e, f];
            }
            j = DT.nil;
            l = g.Append(j, 103, -1);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            k = l;
            m = $ifaceNil;
            e = k;
            f = m;
            $s = -1;
            return [e, f];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.MarshalText
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.MarshalText = function() {
      return this.$val.MarshalText();
    };
    AS.ptr.prototype.UnmarshalText = function(e) {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            h = f.Parse(($bytesToString(e)), 0);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = h;
            i = g[2];
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            j = C.Errorf("math/big: cannot unmarshal %q into a *big.Float (%v)", new DP([e, i]));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            i = j;
          case 3:
            $s = -1;
            return i;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.UnmarshalText
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.UnmarshalText = function(e) {
      return this.$val.UnmarshalText(e);
    };
    AS.ptr.prototype.Text = function(e, f) {
      var e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = 10;
            if (f > 0) {
              h = h + (f) >> 0;
            }
            i = g.Append($makeSlice(DT, 0, h), e, f);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ($bytesToString(i));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Text
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Text = function(e, f) {
      return this.$val.Text(e, f);
    };
    AS.ptr.prototype.String = function() {
      var e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            f = e.Text(103, 10);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.String
        };
      }
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.String = function() {
      return this.$val.String();
    };
    AS.ptr.prototype.Append = function(e, f, g) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = [h];
            i = this;
            if (i.neg) {
              e = $append(e, 45);
            }
            if (i.form === 2) {
              if (!i.neg) {
                e = $append(e, 43);
              }
              $s = -1;
              return $appendSlice(e, "Inf");
            }
            j = f;
            if (j === (98)) {
              $s = 2;
              continue;
            }
            if (j === (112)) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 2:
            k = i.fmtB(e);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return k;
          case 3:
            l = i.fmtP(e);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return l;
          case 4:
          case 1:
            h[0] = new AN.ptr(DT.nil, 0);
            if (i.form === 1) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            $r = h[0].init(i.mant, ((i.exp >> 0)) - i.mant.bitLen() >> 0);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 8:
            m = false;
            if (g < 0) {
              $s = 10;
              continue;
            }
            $s = 11;
            continue;
          case 10:
            m = true;
            $r = BH(h[0], i);
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            n = f;
            if ((n === (101)) || (n === (69))) {
              g = h[0].mant.$length - 1 >> 0;
            } else if (n === (102)) {
              g = CI(h[0].mant.$length - h[0].exp >> 0, 0);
            } else if ((n === (103)) || (n === (71))) {
              g = h[0].mant.$length;
            }
            $s = 12;
            continue;
          case 11:
            o = f;
            if ((o === (101)) || (o === (69))) {
              h[0].round(1 + g >> 0);
            } else if (o === (102)) {
              h[0].round(h[0].exp + g >> 0);
            } else if ((o === (103)) || (o === (71))) {
              if (g === 0) {
                g = 1;
              }
              h[0].round(g);
            }
          case 12:
            p = f;
            if ((p === (101)) || (p === (69))) {
              $s = -1;
              return BI(e, f, g, $clone(h[0], AN));
            } else if (p === (102)) {
              $s = -1;
              return BJ(e, g, $clone(h[0], AN));
            } else if ((p === (103)) || (p === (71))) {
              q = g;
              if (q > h[0].mant.$length && h[0].mant.$length >= h[0].exp) {
                q = h[0].mant.$length;
              }
              if (m) {
                q = 6;
              }
              r = h[0].exp - 1 >> 0;
              if (r < -4 || r >= q) {
                if (g > h[0].mant.$length) {
                  g = h[0].mant.$length;
                }
                $s = -1;
                return BI(e, (f + 101 << 24 >>> 24) - 103 << 24 >>> 24, g - 1 >> 0, $clone(h[0], AN));
              }
              if (g > h[0].exp) {
                g = h[0].mant.$length;
              }
              $s = -1;
              return BJ(e, CI(g - h[0].exp >> 0, 0), $clone(h[0], AN));
            }
            if (i.neg) {
              e = $subslice(e, 0, (e.$length - 1 >> 0));
            }
            $s = -1;
            return $append(e, 37, f);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Append
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Append = function(e, f, g) {
      return this.$val.Append(e, f, g);
    };
    BH = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (e.mant.$length === 0) {
              $s = -1;
              return;
            }
            g = (BX.nil).set(f.mant);
            h = ((f.exp >> 0)) - g.bitLen() >> 0;
            i = g.bitLen() - (((f.prec + 1 >>> 0) >> 0)) >> 0;
            if (i < 0) {
              g = g.shl(g, ((-i >>> 0)));
            } else if (i > 0) {
              g = g.shr(g, ((i >>> 0)));
            }
            h = h + (i) >> 0;
            j = new AN.ptr(DT.nil, 0);
            k = BX.nil;
            $r = j.init(k.sub(g, BY), h);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            l = new AN.ptr(DT.nil, 0);
            $r = l.init(k.add(g, BY), h);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            m = (((0 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 0]) & 2) >>> 0) === 0;
            n = e.mant;
            o = 0;
            while (true) {
              if (!(o < n.$length)) {
                break;
              }
              p = o;
              q = ((o < 0 || o >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + o]);
              r = j.at(p);
              s = l.at(p);
              t = !((r === q)) || m && ((p + 1 >> 0) === j.mant.$length);
              u = !((q === s)) && (m || (q + 1 << 24 >>> 24) < s || (p + 1 >> 0) < l.mant.$length);
              if (t && u) {
                e.round(p + 1 >> 0);
                $s = -1;
                return;
              } else if (t) {
                e.roundDown(p + 1 >> 0);
                $s = -1;
                return;
              } else if (u) {
                e.roundUp(p + 1 >> 0);
                $s = -1;
                return;
              }
              o++;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BH
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BI = function(e, f, g, h) {
      var e, f, g, h, i, j, k, l, m, n;
      i = 48;
      if (h.mant.$length > 0) {
        i = (j = h.mant, (0 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 0]));
      }
      e = $append(e, i);
      if (g > 0) {
        e = $append(e, 46);
        k = 1;
        l = BK(h.mant.$length, g + 1 >> 0);
        if (k < l) {
          e = $appendSlice(e, $subslice(h.mant, k, l));
          k = l;
        }
        while (true) {
          if (!(k <= g)) {
            break;
          }
          e = $append(e, 48);
          k = k + (1) >> 0;
        }
      }
      e = $append(e, f);
      m = new $Int64(0, 0);
      if (h.mant.$length > 0) {
        m = (n = (new $Int64(0, h.exp)), new $Int64(n.$high - 0, n.$low - 1));
      }
      if ((m.$high < 0 || (m.$high === 0 && m.$low < 0))) {
        i = 45;
        m = new $Int64(-m.$high, -m.$low);
      } else {
        i = 43;
      }
      e = $append(e, i);
      if ((m.$high < 0 || (m.$high === 0 && m.$low < 10))) {
        e = $append(e, 48);
      }
      return A.AppendInt(e, m, 10);
    };
    BJ = function(e, f, g) {
      var e, f, g, h, i;
      if (g.exp > 0) {
        h = BK(g.mant.$length, g.exp);
        e = $appendSlice(e, $subslice(g.mant, 0, h));
        while (true) {
          if (!(h < g.exp)) {
            break;
          }
          e = $append(e, 48);
          h = h + (1) >> 0;
        }
      } else {
        e = $append(e, 48);
      }
      if (f > 0) {
        e = $append(e, 46);
        i = 0;
        while (true) {
          if (!(i < f)) {
            break;
          }
          e = $append(e, g.at(g.exp + i >> 0));
          i = i + (1) >> 0;
        }
      }
      return e;
    };
    AS.ptr.prototype.fmtB = function(e) {
      var e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (f.form === 0) {
              $s = -1;
              return $append(e, 48);
            }
            if (false && !((f.form === 1))) {
              $panic(new $String("non-finite float"));
            }
            g = f.mant;
            h = $imul(((f.mant.$length >>> 0)), 32) >>> 0;
            if (h < f.prec) {
              g = (BX.nil).shl(g, (((f.prec - h >>> 0) >>> 0)));
            } else if (h > f.prec) {
              g = (BX.nil).shr(g, (((h - f.prec >>> 0) >>> 0)));
            }
            i = e;
            j = g.utoa(10);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            k = j;
            e = $appendSlice(i, k);
            e = $append(e, 112);
            n = (l = (new $Int64(0, f.exp)), m = (new $Int64(0, f.prec)), new $Int64(l.$high - m.$high, l.$low - m.$low));
            if ((n.$high > 0 || (n.$high === 0 && n.$low >= 0))) {
              e = $append(e, 43);
            }
            $s = -1;
            return A.AppendInt(e, n, 10);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.fmtB
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.fmtB = function(e) {
      return this.$val.fmtB(e);
    };
    AS.ptr.prototype.fmtP = function(e) {
      var e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (f.form === 0) {
              $s = -1;
              return $append(e, 48);
            }
            if (false && !((f.form === 1))) {
              $panic(new $String("non-finite float"));
            }
            g = f.mant;
            h = 0;
            while (true) {
              if (!(h < g.$length && (((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h]) === 0))) {
                break;
              }
              h = h + (1) >> 0;
            }
            g = $subslice(g, h);
            e = $appendSlice(e, "0x.");
            i = e;
            j = g.utoa(16);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            k = H.TrimRight(j, "0");
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = k;
            e = $appendSlice(i, l);
            e = $append(e, 112);
            if (f.exp >= 0) {
              e = $append(e, 43);
            }
            $s = -1;
            return A.AppendInt(e, (new $Int64(0, f.exp)), 10);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.fmtP
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.fmtP = function(e) {
      return this.$val.fmtP(e);
    };
    BK = function(e, f) {
      var e, f;
      if (e < f) {
        return e;
      }
      return f;
    };
    AS.ptr.prototype.Format = function(e, f) {
      var aa, ab, ac, ad, ae, af, ag, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            i = e.Precision();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            j = h[0];
            k = h[1];
            if (!k) {
              j = 6;
            }
            l = f;
            if ((l === (101)) || (l === (69)) || (l === (102)) || (l === (98)) || (l === (112))) {
              $s = 3;
              continue;
            }
            if (l === (70)) {
              $s = 4;
              continue;
            }
            if (l === (118)) {
              $s = 5;
              continue;
            }
            if ((l === (103)) || (l === (71))) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 3:
            $s = 8;
            continue;
          case 4:
            f = 102;
            $s = 8;
            continue;
          case 5:
            f = 103;
            if (!k) {
              j = -1;
            }
            $s = 8;
            continue;
          case 6:
            if (!k) {
              j = -1;
            }
            $s = 8;
            continue;
          case 7:
            m = e;
            n = new $Int32(f);
            o = g.String();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            p = new $String(o);
            q = C.Fprintf(m, "%%!%c(*big.Float=%s)", new DP([n, p]));
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            q;
            $s = -1;
            return;
          case 8:
          case 2:
            r = DT.nil;
            s = g.Append(r, ((f << 24 >>> 24)), j);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            r = s;
            if (r.$length === 0) {
              r = (new DT($stringToBytes("?")));
            }
            t = "";
            if (((0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0]) === 45)) {
              $s = 13;
              continue;
            }
            if (((0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0]) === 43)) {
              $s = 14;
              continue;
            }
            u = e.Flag(43);
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              u = u.$blk();
            }
            if (u && u.$blk !== undefined) {
              break s;
            }
            if (u) {
              $s = 15;
              continue;
            }
            v = e.Flag(32);
            $s = 19;
          case 19:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            if (v) {
              $s = 16;
              continue;
            }
            $s = 17;
            continue;
          case 13:
            t = "-";
            r = $subslice(r, 1);
            $s = 17;
            continue;
          case 14:
            t = "+";
            w = e.Flag(32);
            $s = 22;
          case 22:
            if ($c) {
              $c = false;
              w = w.$blk();
            }
            if (w && w.$blk !== undefined) {
              break s;
            }
            if (w) {
              $s = 20;
              continue;
            }
            $s = 21;
            continue;
          case 20:
            t = " ";
          case 21:
            r = $subslice(r, 1);
            $s = 17;
            continue;
          case 15:
            t = "+";
            $s = 17;
            continue;
          case 16:
            t = " ";
          case 17:
          case 12:
            x = 0;
            z = e.Width();
            $s = 23;
          case 23:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            y = z;
            aa = y[0];
            ab = y[1];
            if (ab && aa > (t.length + r.$length >> 0)) {
              x = (aa - t.length >> 0) - r.$length >> 0;
            }
            ac = e.Flag(48);
            $s = 29;
          case 29:
            if ($c) {
              $c = false;
              ac = ac.$blk();
            }
            if (ac && ac.$blk !== undefined) {
              break s;
            }
            if (ac && !g.IsInf()) {
              $s = 25;
              continue;
            }
            ad = e.Flag(45);
            $s = 30;
          case 30:
            if ($c) {
              $c = false;
              ad = ad.$blk();
            }
            if (ad && ad.$blk !== undefined) {
              break s;
            }
            if (ad) {
              $s = 26;
              continue;
            }
            $s = 27;
            continue;
          case 25:
            $r = BU(e, t, 1);
            $s = 31;
          case 31:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = BU(e, "0", x);
            $s = 32;
          case 32:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            ae = e.Write(r);
            $s = 33;
          case 33:
            if ($c) {
              $c = false;
              ae = ae.$blk();
            }
            if (ae && ae.$blk !== undefined) {
              break s;
            }
            ae;
            $s = 28;
            continue;
          case 26:
            $r = BU(e, t, 1);
            $s = 34;
          case 34:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            af = e.Write(r);
            $s = 35;
          case 35:
            if ($c) {
              $c = false;
              af = af.$blk();
            }
            if (af && af.$blk !== undefined) {
              break s;
            }
            af;
            $r = BU(e, " ", x);
            $s = 36;
          case 36:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 28;
            continue;
          case 27:
            $r = BU(e, " ", x);
            $s = 37;
          case 37:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = BU(e, t, 1);
            $s = 38;
          case 38:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            ag = e.Write(r);
            $s = 39;
          case 39:
            if ($c) {
              $c = false;
              ag = ag.$blk();
            }
            if (ag && ag.$blk !== undefined) {
              break s;
            }
            ag;
          case 28:
          case 24:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Format
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Format = function(e, f) {
      return this.$val.Format(e, f);
    };
    BL.ptr.prototype.Sign = function() {
      var e;
      e = this;
      if (e.abs.$length === 0) {
        return 0;
      }
      if (e.neg) {
        return -1;
      }
      return 1;
    };
    BL.prototype.Sign = function() {
      return this.$val.Sign();
    };
    BL.ptr.prototype.SetInt64 = function(e) {
      var e, f, g;
      f = this;
      g = false;
      if ((e.$high < 0 || (e.$high === 0 && e.$low < 0))) {
        g = true;
        e = new $Int64(-e.$high, -e.$low);
      }
      f.abs = f.abs.setUint64((new $Uint64(e.$high, e.$low)));
      f.neg = g;
      return f;
    };
    BL.prototype.SetInt64 = function(e) {
      return this.$val.SetInt64(e);
    };
    BL.ptr.prototype.SetUint64 = function(e) {
      var e, f;
      f = this;
      f.abs = f.abs.setUint64(e);
      f.neg = false;
      return f;
    };
    BL.prototype.SetUint64 = function(e) {
      return this.$val.SetUint64(e);
    };
    BN = function(e) {
      var e;
      return new BL.ptr(false, BX.nil).SetInt64(e);
    };
    $pkg.NewInt = BN;
    BL.ptr.prototype.Set = function(e) {
      var e, f;
      f = this;
      if (!(f === e)) {
        f.abs = f.abs.set(e.abs);
        f.neg = e.neg;
      }
      return f;
    };
    BL.prototype.Set = function(e) {
      return this.$val.Set(e);
    };
    BL.ptr.prototype.Bits = function() {
      var e, f;
      e = this;
      return (f = e.abs, $subslice(new DV(f.$array), f.$offset, f.$offset + f.$length));
    };
    BL.prototype.Bits = function() {
      return this.$val.Bits();
    };
    BL.ptr.prototype.SetBits = function(e) {
      var e, f;
      f = this;
      f.abs = ($subslice(new BX(e.$array), e.$offset, e.$offset + e.$length)).norm();
      f.neg = false;
      return f;
    };
    BL.prototype.SetBits = function(e) {
      return this.$val.SetBits(e);
    };
    BL.ptr.prototype.Abs = function(e) {
      var e, f;
      f = this;
      f.Set(e);
      f.neg = false;
      return f;
    };
    BL.prototype.Abs = function(e) {
      return this.$val.Abs(e);
    };
    BL.ptr.prototype.Neg = function(e) {
      var e, f;
      f = this;
      f.Set(e);
      f.neg = f.abs.$length > 0 && !f.neg;
      return f;
    };
    BL.prototype.Neg = function(e) {
      return this.$val.Neg(e);
    };
    BL.ptr.prototype.Add = function(e, f) {
      var e, f, g, h;
      g = this;
      h = e.neg;
      if (e.neg === f.neg) {
        g.abs = g.abs.add(e.abs, f.abs);
      } else {
        if (e.abs.cmp(f.abs) >= 0) {
          g.abs = g.abs.sub(e.abs, f.abs);
        } else {
          h = !h;
          g.abs = g.abs.sub(f.abs, e.abs);
        }
      }
      g.neg = g.abs.$length > 0 && h;
      return g;
    };
    BL.prototype.Add = function(e, f) {
      return this.$val.Add(e, f);
    };
    BL.ptr.prototype.Sub = function(e, f) {
      var e, f, g, h;
      g = this;
      h = e.neg;
      if (!(e.neg === f.neg)) {
        g.abs = g.abs.add(e.abs, f.abs);
      } else {
        if (e.abs.cmp(f.abs) >= 0) {
          g.abs = g.abs.sub(e.abs, f.abs);
        } else {
          h = !h;
          g.abs = g.abs.sub(f.abs, e.abs);
        }
      }
      g.neg = g.abs.$length > 0 && h;
      return g;
    };
    BL.prototype.Sub = function(e, f) {
      return this.$val.Sub(e, f);
    };
    BL.ptr.prototype.Mul = function(e, f) {
      var e, f, g;
      g = this;
      if (e === f) {
        g.abs = g.abs.sqr(e.abs);
        g.neg = false;
        return g;
      }
      g.abs = g.abs.mul(e.abs, f.abs);
      g.neg = g.abs.$length > 0 && !(e.neg === f.neg);
      return g;
    };
    BL.prototype.Mul = function(e, f) {
      return this.$val.Mul(e, f);
    };
    BL.ptr.prototype.MulRange = function(e, f) {
      var e, f, g, h, i, j, k, l;
      g = this;
      if ((e.$high > f.$high || (e.$high === f.$high && e.$low > f.$low))) {
        return g.SetInt64(new $Int64(0, 1));
      } else if ((e.$high < 0 || (e.$high === 0 && e.$low <= 0)) && (f.$high > 0 || (f.$high === 0 && f.$low >= 0))) {
        return g.SetInt64(new $Int64(0, 0));
      }
      h = false;
      if ((e.$high < 0 || (e.$high === 0 && e.$low < 0))) {
        h = (i = (j = new $Int64(f.$high - e.$high, f.$low - e.$low), new $Int64(j.$high & 0, (j.$low & 1) >>> 0)), (i.$high === 0 && i.$low === 0));
        k = new $Int64(-f.$high, -f.$low);
        l = new $Int64(-e.$high, -e.$low);
        e = k;
        f = l;
      }
      g.abs = g.abs.mulRange((new $Uint64(e.$high, e.$low)), (new $Uint64(f.$high, f.$low)));
      g.neg = h;
      return g;
    };
    BL.prototype.MulRange = function(e, f) {
      return this.$val.MulRange(e, f);
    };
    BL.ptr.prototype.Binomial = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = [g];
            h = [h];
            i = this;
            if ((j = $div64(e, new $Int64(0, 2), false), (j.$high < f.$high || (j.$high === f.$high && j.$low < f.$low))) && (f.$high < e.$high || (f.$high === e.$high && f.$low <= e.$low))) {
              f = new $Int64(e.$high - f.$high, e.$low - f.$low);
            }
            k = new BL.ptr(false, BX.nil);
            l = new BL.ptr(false, BX.nil);
            g[0] = $clone(k, BL);
            h[0] = $clone(l, BL);
            g[0].MulRange((m = new $Int64(e.$high - f.$high, e.$low - f.$low), new $Int64(m.$high + 0, m.$low + 1)), e);
            h[0].MulRange(new $Int64(0, 1), f);
            n = i.Quo(g[0], h[0]);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return n;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Binomial
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Binomial = function(e, f) {
      return this.$val.Binomial(e, f);
    };
    BL.ptr.prototype.Quo = function(e, f) {
      var e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            i = g.abs.div(BX.nil, e.abs, f.abs);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            g.abs = h[0];
            g.neg = g.abs.$length > 0 && !(e.neg === f.neg);
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Quo
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Quo = function(e, f) {
      return this.$val.Quo(e, f);
    };
    BL.ptr.prototype.Rem = function(e, f) {
      var e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            i = (BX.nil).div(g.abs, e.abs, f.abs);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            g.abs = h[1];
            g.neg = g.abs.$length > 0 && e.neg;
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Rem
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Rem = function(e, f) {
      return this.$val.Rem(e, f);
    };
    BL.ptr.prototype.QuoRem = function(e, f, g) {
      var e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = this;
            j = h.abs.div(g.abs, e.abs, f.abs);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            i = j;
            h.abs = i[0];
            g.abs = i[1];
            k = h.abs.$length > 0 && !(e.neg === f.neg);
            l = g.abs.$length > 0 && e.neg;
            h.neg = k;
            g.neg = l;
            $s = -1;
            return [h, g];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.QuoRem
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.QuoRem = function(e, f, g) {
      return this.$val.QuoRem(e, f, g);
    };
    BL.ptr.prototype.Div = function(e, f) {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = [g];
            h = this;
            i = f.neg;
            g[0] = new BL.ptr(false, BX.nil);
            j = h.QuoRem(e, f, g[0]);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            j;
            if (g[0].neg) {
              if (i) {
                h.Add(h, BM);
              } else {
                h.Sub(h, BM);
              }
            }
            $s = -1;
            return h;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Div
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Div = function(e, f) {
      return this.$val.Div(e, f);
    };
    BL.ptr.prototype.Mod = function(e, f) {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = f;
            if (g === f || CG(g.abs, f.abs)) {
              h = new BL.ptr(false, BX.nil).Set(f);
            }
            i = new BL.ptr(false, BX.nil);
            j = i.QuoRem(e, f, g);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            j;
            if (g.neg) {
              if (h.neg) {
                g.Sub(g, h);
              } else {
                g.Add(g, h);
              }
            }
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Mod
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Mod = function(e, f) {
      return this.$val.Mod(e, f);
    };
    BL.ptr.prototype.DivMod = function(e, f, g) {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = this;
            i = f;
            if (h === f || CG(h.abs, f.abs)) {
              i = new BL.ptr(false, BX.nil).Set(f);
            }
            j = h.QuoRem(e, f, g);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            j;
            if (g.neg) {
              if (i.neg) {
                h.Add(h, BM);
                g.Sub(g, i);
              } else {
                h.Sub(h, BM);
                g.Add(g, i);
              }
            }
            $s = -1;
            return [h, g];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.DivMod
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.DivMod = function(e, f, g) {
      return this.$val.DivMod(e, f, g);
    };
    BL.ptr.prototype.Cmp = function(e) {
      var e, f, g;
      f = 0;
      g = this;
      if (g.neg === e.neg) {
        f = g.abs.cmp(e.abs);
        if (g.neg) {
          f = -f;
        }
      } else if (g.neg) {
        f = -1;
      } else {
        f = 1;
      }
      return f;
    };
    BL.prototype.Cmp = function(e) {
      return this.$val.Cmp(e);
    };
    BL.ptr.prototype.CmpAbs = function(e) {
      var e, f;
      f = this;
      return f.abs.cmp(e.abs);
    };
    BL.prototype.CmpAbs = function(e) {
      return this.$val.CmpAbs(e);
    };
    BO = function(e) {
      var e;
      if (e.$length === 0) {
        return 0;
      }
      return (((0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]) >>> 0));
    };
    BP = function(e) {
      var e, f, g, h, i;
      if (e.$length === 0) {
        return new $Uint64(0, 0);
      }
      g = ((f = (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]), new $Uint64(0, f.constructor === Number ? f : 1)));
      if (true && e.$length > 1) {
        return (h = $shiftLeft64(((i = (1 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 1]), new $Uint64(0, i.constructor === Number ? i : 1))), 32), new $Uint64(h.$high | g.$high, (h.$low | g.$low) >>> 0));
      }
      return g;
    };
    BL.ptr.prototype.Int64 = function() {
      var e, f, g;
      e = this;
      g = ((f = BP(e.abs), new $Int64(f.$high, f.$low)));
      if (e.neg) {
        g = new $Int64(-g.$high, -g.$low);
      }
      return g;
    };
    BL.prototype.Int64 = function() {
      return this.$val.Int64();
    };
    BL.ptr.prototype.Uint64 = function() {
      var e;
      e = this;
      return BP(e.abs);
    };
    BL.prototype.Uint64 = function() {
      return this.$val.Uint64();
    };
    BL.ptr.prototype.IsInt64 = function() {
      var e, f, g, h;
      e = this;
      if (e.abs.$length <= 2) {
        g = ((f = BP(e.abs), new $Int64(f.$high, f.$low)));
        return (g.$high > 0 || (g.$high === 0 && g.$low >= 0)) || e.neg && (h = new $Int64(-g.$high, -g.$low), (g.$high === h.$high && g.$low === h.$low));
      }
      return false;
    };
    BL.prototype.IsInt64 = function() {
      return this.$val.IsInt64();
    };
    BL.ptr.prototype.IsUint64 = function() {
      var e;
      e = this;
      return !e.neg && e.abs.$length <= 2;
    };
    BL.prototype.IsUint64 = function() {
      return this.$val.IsUint64();
    };
    BL.ptr.prototype.SetString = function(e, f) {
      var e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = g.setFromScanner(F.NewReader(e), f);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return h;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.SetString
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.SetString = function(e, f) {
      return this.$val.SetString(e, f);
    };
    BL.ptr.prototype.setFromScanner = function(e, f) {
      var e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            i = g.scan(e, f);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            j = h[2];
            if (!($interfaceIsEqual(j, $ifaceNil))) {
              $s = -1;
              return [DW.nil, false];
            }
            l = e.ReadByte();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            k = l;
            m = k[1];
            if (!($interfaceIsEqual(m, E.EOF))) {
              $s = -1;
              return [DW.nil, false];
            }
            $s = -1;
            return [g, true];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.setFromScanner
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.setFromScanner = function(e, f) {
      return this.$val.setFromScanner(e, f);
    };
    BL.ptr.prototype.SetBytes = function(e) {
      var e, f;
      f = this;
      f.abs = f.abs.setBytes(e);
      f.neg = false;
      return f;
    };
    BL.prototype.SetBytes = function(e) {
      return this.$val.SetBytes(e);
    };
    BL.ptr.prototype.Bytes = function() {
      var e, f;
      e = this;
      f = $makeSlice(DT, ($imul(e.abs.$length, 4)));
      return $subslice(f, e.abs.bytes(f));
    };
    BL.prototype.Bytes = function() {
      return this.$val.Bytes();
    };
    BL.ptr.prototype.BitLen = function() {
      var e;
      e = this;
      return e.abs.bitLen();
    };
    BL.prototype.BitLen = function() {
      return this.$val.BitLen();
    };
    BL.ptr.prototype.Exp = function(e, f, g) {
      var e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = this;
            i = e.abs;
            if (f.neg) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            if (g === DW.nil || (g.abs.$length === 0)) {
              $s = -1;
              return h.SetInt64(new $Int64(0, 1));
            }
            j = new BL.ptr(false, BX.nil).ModInverse(e, g);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            i = j.abs;
          case 2:
            k = f.abs;
            l = BX.nil;
            if (!(g === DW.nil)) {
              l = g.abs;
            }
            m = h.abs.expNN(i, k, l);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            h.abs = m;
            h.neg = h.abs.$length > 0 && e.neg && k.$length > 0 && ((((0 >= k.$length ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + 0]) & 1) >>> 0) === 1);
            if (h.neg && l.$length > 0) {
              h.abs = h.abs.sub(l, h.abs);
              h.neg = false;
            }
            $s = -1;
            return h;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Exp
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Exp = function(e, f, g) {
      return this.$val.Exp(e, f, g);
    };
    BL.ptr.prototype.GCD = function(e, f, g, h) {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            i = this;
            if (g.Sign() <= 0 || h.Sign() <= 0) {
              i.SetInt64(new $Int64(0, 0));
              if (!(e === DW.nil)) {
                e.SetInt64(new $Int64(0, 0));
              }
              if (!(f === DW.nil)) {
                f.SetInt64(new $Int64(0, 0));
              }
              $s = -1;
              return i;
            }
            j = i.lehmerGCD(e, f, g, h);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return j;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.GCD
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.GCD = function(e, f, g, h) {
      return this.$val.GCD(e, f, g, h);
    };
    BQ = function(e, f) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      g = 0;
      h = 0;
      i = 0;
      j = 0;
      k = false;
      l = 0;
      m = 0;
      n = 0;
      o = 0;
      p = l;
      q = m;
      r = n;
      s = o;
      t = f.abs.$length;
      u = e.abs.$length;
      x = R((v = e.abs, w = u - 1 >> 0, ((w < 0 || w >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + w])));
      p = (((y = x, y < 32 ? ((z = e.abs, aa = u - 1 >> 0, ((aa < 0 || aa >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + aa])) << y) : 0) >>> 0) | ((ab = ((32 - x >>> 0)), ab < 32 ? ((ac = e.abs, ad = u - 2 >> 0, ((ad < 0 || ad >= ac.$length) ? ($throwRuntimeError("index out of range"), undefined) : ac.$array[ac.$offset + ad])) >>> ab) : 0) >>> 0)) >>> 0;
      if ((u === t)) {
        q = (((ae = x, ae < 32 ? ((af = f.abs, ag = u - 1 >> 0, ((ag < 0 || ag >= af.$length) ? ($throwRuntimeError("index out of range"), undefined) : af.$array[af.$offset + ag])) << ae) : 0) >>> 0) | ((ah = ((32 - x >>> 0)), ah < 32 ? ((ai = f.abs, aj = u - 2 >> 0, ((aj < 0 || aj >= ai.$length) ? ($throwRuntimeError("index out of range"), undefined) : ai.$array[ai.$offset + aj])) >>> ah) : 0) >>> 0)) >>> 0;
      } else if ((u === (t + 1 >> 0))) {
        q = (ak = ((32 - x >>> 0)), ak < 32 ? ((al = f.abs, am = u - 2 >> 0, ((am < 0 || am >= al.$length) ? ($throwRuntimeError("index out of range"), undefined) : al.$array[al.$offset + am])) >>> ak) : 0) >>> 0;
      } else {
        q = 0;
      }
      k = false;
      an = 0;
      ao = 1;
      ap = 0;
      g = an;
      h = ao;
      r = ap;
      aq = 0;
      ar = 0;
      as = 1;
      i = aq;
      j = ar;
      s = as;
      while (true) {
        if (!(q >= s && (p - q >>> 0) >= (j + s >>> 0))) {
          break;
        }
        at = (au = p / q, (au === au && au !== 1 / 0 && au !== -1 / 0) ? au >>> 0 : $throwRuntimeError("integer divide by zero"));
        av = (aw = p % q, aw === aw ? aw : $throwRuntimeError("integer divide by zero"));
        ax = at;
        ay = av;
        az = q;
        ba = ay;
        p = az;
        q = ba;
        bb = h;
        bc = r;
        bd = h + ($imul(ax, r) >>> 0) >>> 0;
        g = bb;
        h = bc;
        r = bd;
        be = j;
        bf = s;
        bg = j + ($imul(ax, s) >>> 0) >>> 0;
        i = be;
        j = bf;
        s = bg;
        k = !k;
      }
      return [g, h, i, j, k];
    };
    BR = function(e, f, g, h, i, j, k, l, m, n, o) {
      var e, f, g, h, i, j, k, l, m, n, o;
      j.abs = j.abs.setWord(k);
      i.abs = i.abs.setWord(m);
      j.neg = !o;
      i.neg = o;
      j.Mul(e, j);
      i.Mul(f, i);
      h.abs = h.abs.setWord(l);
      g.abs = g.abs.setWord(n);
      h.neg = o;
      g.neg = !o;
      h.Mul(e, h);
      g.Mul(f, g);
      e.Add(j, i);
      f.Add(h, g);
    };
    BS = function(e, f, g, h, i, j, k, l, m) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            o = i.QuoRem(e, f, j);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            n = o;
            i = n[0];
            j = n[1];
            p = $clone(f, BL);
            q = $clone(j, BL);
            r = $clone(e, BL);
            BL.copy(e, p);
            BL.copy(f, q);
            BL.copy(j, r);
            if (m) {
              l.Set(h);
              k.Mul(h, i);
              h.Sub(g, k);
              g.Set(l);
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BS
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.ptr.prototype.lehmerGCD = function(e, f, g, h) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        ba = $f.ba;
        bb = $f.bb;
        bc = $f.bc;
        bd = $f.bd;
        be = $f.be;
        bf = $f.bf;
        bg = $f.bg;
        bh = $f.bh;
        bi = $f.bi;
        bj = $f.bj;
        bk = $f.bk;
        bl = $f.bl;
        bm = $f.bm;
        bn = $f.bn;
        bo = $f.bo;
        bp = $f.bp;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            i = this;
            j = DW.nil;
            k = DW.nil;
            l = DW.nil;
            m = DW.nil;
            n = j;
            o = k;
            p = l;
            q = m;
            n = new BL.ptr(false, BX.nil).Set(g);
            o = new BL.ptr(false, BX.nil).Set(h);
            r = !(e === DW.nil) || !(f === DW.nil);
            if (r) {
              p = new BL.ptr(false, BX.nil).SetInt64(new $Int64(0, 1));
              q = new BL.ptr(false, BX.nil);
            }
            s = new BL.ptr(false, BX.nil);
            t = new BL.ptr(false, BX.nil);
            u = new BL.ptr(false, BX.nil);
            v = new BL.ptr(false, BX.nil);
            if (n.abs.cmp(o.abs) < 0) {
              w = o;
              x = n;
              n = w;
              o = x;
              y = p;
              z = q;
              q = y;
              p = z;
            }
          case 1:
            if (!(o.abs.$length > 1)) {
              $s = 2;
              continue;
            }
            aa = BQ(n, o);
            ab = aa[0];
            ac = aa[1];
            ad = aa[2];
            ae = aa[3];
            af = aa[4];
            if (!((ad === 0))) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            BR(n, o, s, t, u, v, ab, ac, ad, ae, af);
            if (r) {
              BR(p, q, s, t, u, v, ab, ac, ad, ae, af);
            }
            $s = 5;
            continue;
          case 4:
            $r = BS(n, o, p, q, s, t, u, v, r);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 5:
            $s = 1;
            continue;
          case 2:
            if (o.abs.$length > 0) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            if (n.abs.$length > 1) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            $r = BS(n, o, p, q, s, t, u, v, r);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 10:
            if (o.abs.$length > 0) {
              ag = (ah = n.abs, (0 >= ah.$length ? ($throwRuntimeError("index out of range"), undefined) : ah.$array[ah.$offset + 0]));
              ai = (aj = o.abs, (0 >= aj.$length ? ($throwRuntimeError("index out of range"), undefined) : aj.$array[aj.$offset + 0]));
              ak = ag;
              al = ai;
              if (r) {
                am = 0;
                an = 0;
                ao = 0;
                ap = 0;
                aq = am;
                ar = an;
                as = ao;
                at = ap;
                au = 1;
                av = 0;
                aq = au;
                ar = av;
                aw = 0;
                ax = 1;
                as = aw;
                at = ax;
                ay = true;
                while (true) {
                  if (!(!((al === 0)))) {
                    break;
                  }
                  az = (ba = ak / al, (ba === ba && ba !== 1 / 0 && ba !== -1 / 0) ? ba >>> 0 : $throwRuntimeError("integer divide by zero"));
                  bb = (bc = ak % al, bc === bc ? bc : $throwRuntimeError("integer divide by zero"));
                  bd = az;
                  be = bb;
                  bf = al;
                  bg = be;
                  ak = bf;
                  al = bg;
                  bh = ar;
                  bi = aq + ($imul(bd, ar) >>> 0) >>> 0;
                  aq = bh;
                  ar = bi;
                  bj = at;
                  bk = as + ($imul(bd, at) >>> 0) >>> 0;
                  as = bj;
                  at = bk;
                  ay = !ay;
                }
                v.abs = v.abs.setWord(aq);
                u.abs = u.abs.setWord(as);
                v.neg = !ay;
                u.neg = ay;
                v.Mul(p, v);
                u.Mul(q, u);
                p.Add(v, u);
              } else {
                while (true) {
                  if (!(!((al === 0)))) {
                    break;
                  }
                  bl = al;
                  bm = (bn = ak % al, bn === bn ? bn : $throwRuntimeError("integer divide by zero"));
                  ak = bl;
                  al = bm;
                }
              }(bo = n.abs, (0 >= bo.$length ? ($throwRuntimeError("index out of range"), undefined) : bo.$array[bo.$offset + 0] = ak));
            }
          case 8:
            if (!(e === DW.nil)) {
              BL.copy(e, p);
            }
            if (!(f === DW.nil)) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 12:
            f.Mul(g, p);
            f.Sub(n, f);
            bp = f.Div(f, h);
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              bp = bp.$blk();
            }
            if (bp && bp.$blk !== undefined) {
              break s;
            }
            bp;
          case 13:
            BL.copy(i, n);
            $s = -1;
            return i;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.lehmerGCD
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.ba = ba;
      $f.bb = bb;
      $f.bc = bc;
      $f.bd = bd;
      $f.be = be;
      $f.bf = bf;
      $f.bg = bg;
      $f.bh = bh;
      $f.bi = bi;
      $f.bj = bj;
      $f.bk = bk;
      $f.bl = bl;
      $f.bm = bm;
      $f.bn = bn;
      $f.bo = bo;
      $f.bp = bp;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.lehmerGCD = function(e, f, g, h) {
      return this.$val.lehmerGCD(e, f, g, h);
    };
    BL.ptr.prototype.Rand = function(e, f) {
      var e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            g.neg = false;
            if (f.neg || (f.abs.$length === 0)) {
              g.abs = BX.nil;
              $s = -1;
              return g;
            }
            h = g.abs.random(e, f.abs, f.abs.bitLen());
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g.abs = h;
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Rand
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Rand = function(e, f) {
      return this.$val.Rand(e, f);
    };
    BL.ptr.prototype.ModInverse = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = [g];
            h = this;
            if (f.neg) {
              i = new BL.ptr(false, BX.nil);
              f = i.Neg(f);
            }
            if (e.neg) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            j = new BL.ptr(false, BX.nil);
            k = j.Mod(e, f);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            e = k;
          case 2:
            l = new BL.ptr(false, BX.nil);
            m = new BL.ptr(false, BX.nil);
            n = $clone(l, BL);
            g[0] = $clone(m, BL);
            o = n.GCD(g[0], DW.nil, e, f);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            o;
            if (!((n.Cmp(BM) === 0))) {
              $s = -1;
              return DW.nil;
            }
            if (g[0].neg) {
              h.Add(g[0], f);
            } else {
              h.Set(g[0]);
            }
            $s = -1;
            return h;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.ModInverse
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.ModInverse = function(e, f) {
      return this.$val.ModInverse(e, f);
    };
    BT = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = [g];
            h = [h];
            i = [i];
            if ((f.abs.$length === 0) || ((((j = f.abs, (0 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 0])) & 1) >>> 0) === 0)) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            k = C.Sprintf("big: invalid 2nd argument to Int.Jacobi: need odd integer but got %s", new DP([f]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            $panic(new $String(k));
          case 2:
            l = new BL.ptr(false, BX.nil);
            m = new BL.ptr(false, BX.nil);
            n = new BL.ptr(false, BX.nil);
            g[0] = $clone(l, BL);
            h[0] = $clone(m, BL);
            i[0] = $clone(n, BL);
            g[0].Set(e);
            h[0].Set(f);
            o = 1;
            if (h[0].neg) {
              if (g[0].neg) {
                o = -1;
              }
              h[0].neg = false;
            }
          case 4:
            if (h[0].Cmp(BM) === 0) {
              $s = -1;
              return o;
            }
            if (g[0].abs.$length === 0) {
              $s = -1;
              return 0;
            }
            p = g[0].Mod(g[0], h[0]);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            p;
            if (g[0].abs.$length === 0) {
              $s = -1;
              return 0;
            }
            q = g[0].abs.trailingZeroBits();
            if (!((((q & 1) >>> 0) === 0))) {
              s = ((r = h[0].abs, (0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0])) & 7) >>> 0;
              if ((s === 3) || (s === 5)) {
                o = -o;
              }
            }
            i[0].Rsh(g[0], q);
            if (((((t = h[0].abs, (0 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 0])) & 3) >>> 0) === 3) && ((((u = i[0].abs, (0 >= u.$length ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + 0])) & 3) >>> 0) === 3)) {
              o = -o;
            }
            g[0].Set(h[0]);
            h[0].Set(i[0]);
            $s = 4;
            continue;
          case 5:
            $s = -1;
            return 0;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BT
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Jacobi = BT;
    BL.ptr.prototype.modSqrt3Mod4Prime = function(e, f) {
      var e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = new BL.ptr(false, BX.nil).Add(f, BM);
            h.Rsh(h, 2);
            i = g.Exp(e, h, f);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            i;
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.modSqrt3Mod4Prime
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.modSqrt3Mod4Prime = function(e, f) {
      return this.$val.modSqrt3Mod4Prime(e, f);
    };
    BL.ptr.prototype.modSqrt5Mod8Prime = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = new BL.ptr(false, BX.nil).Rsh(f, 3);
            i = new BL.ptr(false, BX.nil).Lsh(e, 1);
            j = new BL.ptr(false, BX.nil).Exp(i, h, f);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            k = j;
            l = new BL.ptr(false, BX.nil).Mul(k, k);
            m = l.Mod(l, f);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            m;
            l.Mul(l, i);
            n = l.Mod(l, f);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            n;
            l.Sub(l, BM);
            l.Mul(l, e);
            o = l.Mod(l, f);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            o;
            l.Mul(l, k);
            p = g.Mod(l, f);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            p;
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.modSqrt5Mod8Prime
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.modSqrt5Mod8Prime = function(e, f) {
      return this.$val.modSqrt5Mod8Prime(e, f);
    };
    BL.ptr.prototype.modSqrtTonelliShanks = function(e, f) {
      var aa, ab, ac, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = [g];
            h = [h];
            i = [i];
            j = [j];
            k = [k];
            l = [l];
            m = this;
            j[0] = new BL.ptr(false, BX.nil);
            j[0].Sub(f, BM);
            n = j[0].abs.trailingZeroBits();
            j[0].Rsh(j[0], n);
            i[0] = new BL.ptr(false, BX.nil);
            i[0].SetInt64(new $Int64(0, 2));
          case 1:
            o = BT(i[0], f);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            if (!(!((o === -1)))) {
              $s = 2;
              continue;
            }
            i[0].Add(i[0], BM);
            $s = 1;
            continue;
          case 2:
            p = new BL.ptr(false, BX.nil);
            q = new BL.ptr(false, BX.nil);
            r = new BL.ptr(false, BX.nil);
            s = new BL.ptr(false, BX.nil);
            l[0] = $clone(p, BL);
            g[0] = $clone(q, BL);
            h[0] = $clone(r, BL);
            k[0] = $clone(s, BL);
            l[0].Add(j[0], BM);
            l[0].Rsh(l[0], 1);
            t = l[0].Exp(e, l[0], f);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            t;
            u = g[0].Exp(e, j[0], f);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              u = u.$blk();
            }
            if (u && u.$blk !== undefined) {
              break s;
            }
            u;
            v = h[0].Exp(i[0], j[0], f);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            v;
            w = n;
          case 7:
            x = 0;
            k[0].Set(g[0]);
          case 9:
            if (!(!((k[0].Cmp(BM) === 0)))) {
              $s = 10;
              continue;
            }
            y = k[0].Mul(k[0], k[0]).Mod(k[0], f);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              y = y.$blk();
            }
            if (y && y.$blk !== undefined) {
              break s;
            }
            y;
            x = x + (1) >>> 0;
            $s = 9;
            continue;
          case 10:
            if (x === 0) {
              $s = -1;
              return m.Set(l[0]);
            }
            z = k[0].SetInt64(new $Int64(0, 0)).SetBit(k[0], ((((w - x >>> 0) - 1 >>> 0) >> 0)), 1).Exp(h[0], k[0], f);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            z;
            aa = h[0].Mul(k[0], k[0]).Mod(h[0], f);
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              aa = aa.$blk();
            }
            if (aa && aa.$blk !== undefined) {
              break s;
            }
            aa;
            ab = l[0].Mul(l[0], k[0]).Mod(l[0], f);
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              ab = ab.$blk();
            }
            if (ab && ab.$blk !== undefined) {
              break s;
            }
            ab;
            ac = g[0].Mul(g[0], h[0]).Mod(g[0], f);
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              ac = ac.$blk();
            }
            if (ac && ac.$blk !== undefined) {
              break s;
            }
            ac;
            w = x;
            $s = 7;
            continue;
          case 8:
            $s = -1;
            return DW.nil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.modSqrtTonelliShanks
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.modSqrtTonelliShanks = function(e, f) {
      return this.$val.modSqrtTonelliShanks(e, f);
    };
    BL.ptr.prototype.ModSqrt = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = BT(e, f);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            i = h;
            if (i === (-1)) {
              $s = -1;
              return DW.nil;
            } else if (i === (0)) {
              $s = -1;
              return g.SetInt64(new $Int64(0, 0));
            } else if (i === (1)) {
              $s = 1;
              continue;
            }
          case 1:
            if (e.neg || e.Cmp(f) >= 0) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            j = new BL.ptr(false, BX.nil).Mod(e, f);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            e = j;
          case 4:
            if (((k = (l = f.abs, (0 >= l.$length ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + 0])) % 4, k === k ? k : $throwRuntimeError("integer divide by zero")) === 3)) {
              $s = 7;
              continue;
            }
            if (((m = (n = f.abs, (0 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 0])) % 8, m === m ? m : $throwRuntimeError("integer divide by zero")) === 5)) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 7:
            o = g.modSqrt3Mod4Prime(e, f);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return o;
          case 8:
            p = g.modSqrt5Mod8Prime(e, f);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return p;
          case 9:
            q = g.modSqrtTonelliShanks(e, f);
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return q;
          case 10:
          case 6:
            $s = -1;
            return DW.nil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.ModSqrt
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.ModSqrt = function(e, f) {
      return this.$val.ModSqrt(e, f);
    };
    BL.ptr.prototype.Lsh = function(e, f) {
      var e, f, g;
      g = this;
      g.abs = g.abs.shl(e.abs, f);
      g.neg = e.neg;
      return g;
    };
    BL.prototype.Lsh = function(e, f) {
      return this.$val.Lsh(e, f);
    };
    BL.ptr.prototype.Rsh = function(e, f) {
      var e, f, g, h;
      g = this;
      if (e.neg) {
        h = g.abs.sub(e.abs, BY);
        h = h.shr(h, f);
        g.abs = h.add(h, BY);
        g.neg = true;
        return g;
      }
      g.abs = g.abs.shr(e.abs, f);
      g.neg = false;
      return g;
    };
    BL.prototype.Rsh = function(e, f) {
      return this.$val.Rsh(e, f);
    };
    BL.ptr.prototype.Bit = function(e) {
      var e, f, g, h;
      f = this;
      if (e === 0) {
        if (f.abs.$length > 0) {
          return (((((g = f.abs, (0 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 0])) & 1) >>> 0) >>> 0));
        }
        return 0;
      }
      if (e < 0) {
        $panic(new $String("negative bit index"));
      }
      if (f.neg) {
        h = (BX.nil).sub(f.abs, BY);
        return (h.bit(((e >>> 0))) ^ 1) >>> 0;
      }
      return f.abs.bit(((e >>> 0)));
    };
    BL.prototype.Bit = function(e) {
      return this.$val.Bit(e);
    };
    BL.ptr.prototype.SetBit = function(e, f, g) {
      var e, f, g, h, i;
      h = this;
      if (f < 0) {
        $panic(new $String("negative bit index"));
      }
      if (e.neg) {
        i = h.abs.sub(e.abs, BY);
        i = i.setBit(i, ((f >>> 0)), (g ^ 1) >>> 0);
        h.abs = i.add(i, BY);
        h.neg = h.abs.$length > 0;
        return h;
      }
      h.abs = h.abs.setBit(e.abs, ((f >>> 0)), g);
      h.neg = false;
      return h;
    };
    BL.prototype.SetBit = function(e, f, g) {
      return this.$val.SetBit(e, f, g);
    };
    BL.ptr.prototype.And = function(e, f) {
      var e, f, g, h, i, j, k, l;
      g = this;
      if (e.neg === f.neg) {
        if (e.neg) {
          h = (BX.nil).sub(e.abs, BY);
          i = (BX.nil).sub(f.abs, BY);
          g.abs = g.abs.add(g.abs.or(h, i), BY);
          g.neg = true;
          return g;
        }
        g.abs = g.abs.and(e.abs, f.abs);
        g.neg = false;
        return g;
      }
      if (e.neg) {
        j = f;
        k = e;
        e = j;
        f = k;
      }
      l = (BX.nil).sub(f.abs, BY);
      g.abs = g.abs.andNot(e.abs, l);
      g.neg = false;
      return g;
    };
    BL.prototype.And = function(e, f) {
      return this.$val.And(e, f);
    };
    BL.ptr.prototype.AndNot = function(e, f) {
      var e, f, g, h, i, j, k;
      g = this;
      if (e.neg === f.neg) {
        if (e.neg) {
          h = (BX.nil).sub(e.abs, BY);
          i = (BX.nil).sub(f.abs, BY);
          g.abs = g.abs.andNot(i, h);
          g.neg = false;
          return g;
        }
        g.abs = g.abs.andNot(e.abs, f.abs);
        g.neg = false;
        return g;
      }
      if (e.neg) {
        j = (BX.nil).sub(e.abs, BY);
        g.abs = g.abs.add(g.abs.or(j, f.abs), BY);
        g.neg = true;
        return g;
      }
      k = (BX.nil).sub(f.abs, BY);
      g.abs = g.abs.and(e.abs, k);
      g.neg = false;
      return g;
    };
    BL.prototype.AndNot = function(e, f) {
      return this.$val.AndNot(e, f);
    };
    BL.ptr.prototype.Or = function(e, f) {
      var e, f, g, h, i, j, k, l;
      g = this;
      if (e.neg === f.neg) {
        if (e.neg) {
          h = (BX.nil).sub(e.abs, BY);
          i = (BX.nil).sub(f.abs, BY);
          g.abs = g.abs.add(g.abs.and(h, i), BY);
          g.neg = true;
          return g;
        }
        g.abs = g.abs.or(e.abs, f.abs);
        g.neg = false;
        return g;
      }
      if (e.neg) {
        j = f;
        k = e;
        e = j;
        f = k;
      }
      l = (BX.nil).sub(f.abs, BY);
      g.abs = g.abs.add(g.abs.andNot(l, e.abs), BY);
      g.neg = true;
      return g;
    };
    BL.prototype.Or = function(e, f) {
      return this.$val.Or(e, f);
    };
    BL.ptr.prototype.Xor = function(e, f) {
      var e, f, g, h, i, j, k, l;
      g = this;
      if (e.neg === f.neg) {
        if (e.neg) {
          h = (BX.nil).sub(e.abs, BY);
          i = (BX.nil).sub(f.abs, BY);
          g.abs = g.abs.xor(h, i);
          g.neg = false;
          return g;
        }
        g.abs = g.abs.xor(e.abs, f.abs);
        g.neg = false;
        return g;
      }
      if (e.neg) {
        j = f;
        k = e;
        e = j;
        f = k;
      }
      l = (BX.nil).sub(f.abs, BY);
      g.abs = g.abs.add(g.abs.xor(e.abs, l), BY);
      g.neg = true;
      return g;
    };
    BL.prototype.Xor = function(e, f) {
      return this.$val.Xor(e, f);
    };
    BL.ptr.prototype.Not = function(e) {
      var e, f;
      f = this;
      if (e.neg) {
        f.abs = f.abs.sub(e.abs, BY);
        f.neg = false;
        return f;
      }
      f.abs = f.abs.add(e.abs, BY);
      f.neg = true;
      return f;
    };
    BL.prototype.Not = function(e) {
      return this.$val.Not(e);
    };
    BL.ptr.prototype.Sqrt = function(e) {
      var e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (e.neg) {
              $panic(new $String("square root of negative number"));
            }
            f.neg = false;
            g = f.abs.sqrt(e.abs);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f.abs = g;
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Sqrt
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Sqrt = function(e) {
      return this.$val.Sqrt(e);
    };
    BL.ptr.prototype.Text = function(e) {
      var e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (f === DW.nil) {
              $s = -1;
              return "<nil>";
            }
            g = f.abs.itoa(f.neg, e);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ($bytesToString(g));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Text
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Text = function(e) {
      return this.$val.Text(e);
    };
    BL.ptr.prototype.Append = function(e, f) {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if (g === DW.nil) {
              $s = -1;
              return $appendSlice(e, "<nil>");
            }
            h = e;
            i = g.abs.itoa(g.neg, f);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            j = i;
            $s = -1;
            return $appendSlice(h, j);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Append
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Append = function(e, f) {
      return this.$val.Append(e, f);
    };
    BL.ptr.prototype.String = function() {
      var e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            f = e.Text(10);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.String
        };
      }
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.String = function() {
      return this.$val.String();
    };
    BU = function(e, f, g) {
      var e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (f.length > 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            h = (new DT($stringToBytes(f)));
          case 3:
            if (!(g > 0)) {
              $s = 4;
              continue;
            }
            i = e.Write(h);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            i;
            g = g - (1) >> 0;
            $s = 3;
            continue;
          case 4:
          case 2:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BU
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.ptr.prototype.Format = function(e, f) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = 0;
            i = f;
            if (i === (98)) {
              $s = 2;
              continue;
            }
            if (i === (111)) {
              $s = 3;
              continue;
            }
            if ((i === (100)) || (i === (115)) || (i === (118))) {
              $s = 4;
              continue;
            }
            if ((i === (120)) || (i === (88))) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 2:
            h = 2;
            $s = 7;
            continue;
          case 3:
            h = 8;
            $s = 7;
            continue;
          case 4:
            h = 10;
            $s = 7;
            continue;
          case 5:
            h = 16;
            $s = 7;
            continue;
          case 6:
            j = e;
            k = new $Int32(f);
            l = g.String();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            m = new $String(l);
            n = C.Fprintf(j, "%%!%c(big.Int=%s)", new DP([k, m]));
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            n;
            $s = -1;
            return;
          case 7:
          case 1:
            if (g === DW.nil) {
              $s = 10;
              continue;
            }
            $s = 11;
            continue;
          case 10:
            o = C.Fprint(e, new DP([new $String("<nil>")]));
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            o;
            $s = -1;
            return;
          case 11:
            p = "";
            if (g.neg) {
              $s = 14;
              continue;
            }
            q = e.Flag(43);
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            if (q) {
              $s = 15;
              continue;
            }
            r = e.Flag(32);
            $s = 19;
          case 19:
            if ($c) {
              $c = false;
              r = r.$blk();
            }
            if (r && r.$blk !== undefined) {
              break s;
            }
            if (r) {
              $s = 16;
              continue;
            }
            $s = 17;
            continue;
          case 14:
            p = "-";
            $s = 17;
            continue;
          case 15:
            p = "+";
            $s = 17;
            continue;
          case 16:
            p = " ";
          case 17:
          case 13:
            s = "";
            t = e.Flag(35);
            $s = 22;
          case 22:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            if (t) {
              $s = 20;
              continue;
            }
            $s = 21;
            continue;
          case 20:
            u = f;
            if (u === (111)) {
              s = "0";
            } else if (u === (120)) {
              s = "0x";
            } else if (u === (88)) {
              s = "0X";
            }
          case 21:
            v = g.abs.utoa(h);
            $s = 23;
          case 23:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            w = v;
            if (f === 88) {
              x = w;
              y = 0;
              while (true) {
                if (!(y < x.$length)) {
                  break;
                }
                z = y;
                aa = ((y < 0 || y >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + y]);
                if (97 <= aa && aa <= 122) {
                  ((z < 0 || z >= w.$length) ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + z] = (65 + ((aa - 97 << 24 >>> 24)) << 24 >>> 24));
                }
                y++;
              }
            }
            ab = 0;
            ac = 0;
            ad = 0;
            af = e.Precision();
            $s = 24;
          case 24:
            if ($c) {
              $c = false;
              af = af.$blk();
            }
            if (af && af.$blk !== undefined) {
              break s;
            }
            ae = af;
            ag = ae[0];
            ah = ae[1];
            if (ah) {
              if (w.$length < ag) {
                ac = ag - w.$length >> 0;
              } else if ((w.$length === 1) && ((0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]) === 48) && (ag === 0)) {
                $s = -1;
                return;
              }
            }
            ai = ((p.length + s.length >> 0) + ac >> 0) + w.$length >> 0;
            ak = e.Width();
            $s = 25;
          case 25:
            if ($c) {
              $c = false;
              ak = ak.$blk();
            }
            if (ak && ak.$blk !== undefined) {
              break s;
            }
            aj = ak;
            al = aj[0];
            am = aj[1];
            if (am && ai < al) {
              $s = 26;
              continue;
            }
            $s = 27;
            continue;
          case 26:
            an = al - ai >> 0;
            ao = e.Flag(45);
            $s = 33;
          case 33:
            if ($c) {
              $c = false;
              ao = ao.$blk();
            }
            if (ao && ao.$blk !== undefined) {
              break s;
            }
            if (ao) {
              $s = 29;
              continue;
            }
            ap = e.Flag(48);
            $s = 34;
          case 34:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            if (ap && !ah) {
              $s = 30;
              continue;
            }
            $s = 31;
            continue;
          case 29:
            ad = an;
            $s = 32;
            continue;
          case 30:
            ac = an;
            $s = 32;
            continue;
          case 31:
            ab = an;
          case 32:
          case 28:
          case 27:
            $r = BU(e, " ", ab);
            $s = 35;
          case 35:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = BU(e, p, 1);
            $s = 36;
          case 36:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = BU(e, s, 1);
            $s = 37;
          case 37:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = BU(e, "0", ac);
            $s = 38;
          case 38:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            aq = e.Write(w);
            $s = 39;
          case 39:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            aq;
            $r = BU(e, " ", ad);
            $s = 40;
          case 40:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Format
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Format = function(e, f) {
      return this.$val.Format(e, f);
    };
    BL.ptr.prototype.scan = function(e, f) {
      var e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            i = BV(e);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            j = h[0];
            k = h[1];
            if (!($interfaceIsEqual(k, $ifaceNil))) {
              $s = -1;
              return [DW.nil, 0, k];
            }
            m = g.abs.scan(e, f, false);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            l = m;
            g.abs = l[0];
            f = l[1];
            k = l[3];
            if (!($interfaceIsEqual(k, $ifaceNil))) {
              $s = -1;
              return [DW.nil, f, k];
            }
            g.neg = g.abs.$length > 0 && j;
            $s = -1;
            return [g, f, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.scan
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.scan = function(e, f) {
      return this.$val.scan(e, f);
    };
    BV = function(e) {
      var e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = false;
            g = $ifaceNil;
            h = 0;
            j = e.ReadByte();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            i = j;
            h = i[0];
            g = i[1];
            if (!($interfaceIsEqual(g, $ifaceNil))) {
              k = false;
              l = g;
              f = k;
              g = l;
              $s = -1;
              return [f, g];
            }
            m = h;
            if (m === (45)) {
              $s = 3;
              continue;
            }
            if (m === (43)) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 3:
            f = true;
            $s = 6;
            continue;
          case 4:
            $s = 6;
            continue;
          case 5:
            n = e.UnreadByte();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            n;
          case 6:
          case 2:
            $s = -1;
            return [f, g];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BV
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BW.ptr.prototype.ReadByte = function() {
      var e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            g = e.ScanState.ReadRune();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
            h = f[0];
            i = f[1];
            j = f[2];
            if (!((i === 1)) && $interfaceIsEqual(j, $ifaceNil)) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            k = C.Errorf("invalid rune %#U", new DP([new $Int32(h)]));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
          case 3:
            $s = -1;
            return [((h << 24 >>> 24)), j];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BW.ptr.prototype.ReadByte
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BW.prototype.ReadByte = function() {
      return this.$val.ReadByte();
    };
    BW.ptr.prototype.UnreadByte = function() {
      var e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            f = e.ScanState.UnreadRune();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BW.ptr.prototype.UnreadByte
        };
      }
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BW.prototype.UnreadByte = function() {
      return this.$val.UnreadByte();
    };
    BL.ptr.prototype.Scan = function(e, f) {
      var e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            $r = e.SkipSpace();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            h = 0;
            i = f;
            if (i === (98)) {
              h = 2;
            } else if (i === (111)) {
              h = 8;
            } else if (i === (100)) {
              h = 10;
            } else if ((i === (120)) || (i === (88))) {
              h = 16;
            } else if ((i === (115)) || (i === (118))) {} else {
              $s = -1;
              return J.New("Int.Scan: invalid verb");
            }
            l = g.scan((k = new BW.ptr(e), new k.constructor.elem(k)), h);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            j = l;
            m = j[2];
            $s = -1;
            return m;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.Scan
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.Scan = function(e, f) {
      return this.$val.Scan(e, f);
    };
    BL.ptr.prototype.GobEncode = function() {
      var e, f, g, h;
      e = this;
      if (e === DW.nil) {
        return [DT.nil, $ifaceNil];
      }
      f = $makeSlice(DT, (1 + ($imul(e.abs.$length, 4)) >> 0));
      g = e.abs.bytes(f) - 1 >> 0;
      h = 2;
      if (e.neg) {
        h = (h | (1)) >>> 0;
      }((g < 0 || g >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + g] = h);
      return [$subslice(f, g), $ifaceNil];
    };
    BL.prototype.GobEncode = function() {
      return this.$val.GobEncode();
    };
    BL.ptr.prototype.GobDecode = function(e) {
      var e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (e.$length === 0) {
              BL.copy(f, new BL.ptr(false, BX.nil));
              $s = -1;
              return $ifaceNil;
            }
            g = (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]);
            if (!(((g >>> 1 << 24 >>> 24) === 1))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            h = C.Errorf("Int.GobDecode: encoding version %d not supported", new DP([new $Uint8((g >>> 1 << 24 >>> 24))]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return h;
          case 2:
            f.neg = !((((g & 1) >>> 0) === 0));
            f.abs = f.abs.setBytes($subslice(e, 1));
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.GobDecode
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.GobDecode = function(e) {
      return this.$val.GobDecode(e);
    };
    BL.ptr.prototype.MarshalText = function() {
      var e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = DT.nil;
            f = $ifaceNil;
            g = this;
            if (g === DW.nil) {
              h = (new DT($stringToBytes("<nil>")));
              i = $ifaceNil;
              e = h;
              f = i;
              $s = -1;
              return [e, f];
            }
            k = g.abs.itoa(g.neg, 10);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            l = $ifaceNil;
            e = j;
            f = l;
            $s = -1;
            return [e, f];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.MarshalText
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.MarshalText = function() {
      return this.$val.MarshalText();
    };
    BL.ptr.prototype.UnmarshalText = function(e) {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            h = f.setFromScanner(H.NewReader(e), 0);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = h;
            i = g[1];
            if (!i) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            j = C.Errorf("math/big: cannot unmarshal %q into a *big.Int", new DP([e]));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return j;
          case 3:
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.UnmarshalText
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.UnmarshalText = function(e) {
      return this.$val.UnmarshalText(e);
    };
    BL.ptr.prototype.MarshalJSON = function() {
      var e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            f = e.MarshalText();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.MarshalJSON
        };
      }
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.MarshalJSON = function() {
      return this.$val.MarshalJSON();
    };
    BL.ptr.prototype.UnmarshalJSON = function(e) {
      var e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (($bytesToString(e)) === "null") {
              $s = -1;
              return $ifaceNil;
            }
            g = f.UnmarshalText(e);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.UnmarshalJSON
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.UnmarshalJSON = function(e) {
      return this.$val.UnmarshalJSON(e);
    };
    BX.prototype.clear = function() {
      var e, f, g, h;
      e = this;
      f = e;
      g = 0;
      while (true) {
        if (!(g < f.$length)) {
          break;
        }
        h = g;
        ((h < 0 || h >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + h] = 0);
        g++;
      }
    };
    $ptrType(BX).prototype.clear = function() {
      return this.$get().clear();
    };
    BX.prototype.norm = function() {
      var e, f, g;
      e = this;
      f = e.$length;
      while (true) {
        if (!(f > 0 && ((g = f - 1 >> 0, ((g < 0 || g >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + g])) === 0))) {
          break;
        }
        f = f - (1) >> 0;
      }
      return $subslice(e, 0, f);
    };
    $ptrType(BX).prototype.norm = function() {
      return this.$get().norm();
    };
    BX.prototype.make = function(e) {
      var e, f;
      f = this;
      if (e <= f.$capacity) {
        return $subslice(f, 0, e);
      }
      return $makeSlice(BX, e, (e + 4 >> 0));
    };
    $ptrType(BX).prototype.make = function(e) {
      return this.$get().make(e);
    };
    BX.prototype.setWord = function(e) {
      var e, f;
      f = this;
      if (e === 0) {
        return $subslice(f, 0, 0);
      }
      f = f.make(1);
      (0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0] = e);
      return f;
    };
    $ptrType(BX).prototype.setWord = function(e) {
      return this.$get().setWord(e);
    };
    BX.prototype.setUint64 = function(e) {
      var e, f, g, h;
      f = this;
      g = ((e.$low >>> 0));
      if ((h = (new $Uint64(0, g.constructor === Number ? g : 1)), (h.$high === e.$high && h.$low === e.$low))) {
        return f.setWord(g);
      }
      f = f.make(2);
      (1 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 1] = (($shiftRightUint64(e, 32).$low >>> 0)));
      (0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0] = ((e.$low >>> 0)));
      return f;
    };
    $ptrType(BX).prototype.setUint64 = function(e) {
      return this.$get().setUint64(e);
    };
    BX.prototype.set = function(e) {
      var e, f;
      f = this;
      f = f.make(e.$length);
      $copySlice(f, e);
      return f;
    };
    $ptrType(BX).prototype.set = function(e) {
      return this.$get().set(e);
    };
    BX.prototype.add = function(e, f) {
      var e, f, g, h, i, j, k, l, m;
      g = this;
      h = e.$length;
      i = f.$length;
      if (h < i) {
        return g.add(f, e);
      } else if ((h === 0)) {
        return $subslice(g, 0, 0);
      } else if ((i === 0)) {
        return g.set(e);
      }
      g = g.make(h + 1 >> 0);
      k = AE((j = $subslice(g, 0, i), $subslice(new DV(j.$array), j.$offset, j.$offset + j.$length)), $subslice(new DV(e.$array), e.$offset, e.$offset + e.$length), $subslice(new DV(f.$array), f.$offset, f.$offset + f.$length));
      if (h > i) {
        k = AG((l = $subslice(g, i, h), $subslice(new DV(l.$array), l.$offset, l.$offset + l.$length)), (m = $subslice(e, i), $subslice(new DV(m.$array), m.$offset, m.$offset + m.$length)), k);
      }((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h] = k);
      return g.norm();
    };
    $ptrType(BX).prototype.add = function(e, f) {
      return this.$get().add(e, f);
    };
    BX.prototype.sub = function(e, f) {
      var e, f, g, h, i, j, k, l, m;
      g = this;
      h = e.$length;
      i = f.$length;
      if (h < i) {
        $panic(new $String("underflow"));
      } else if ((h === 0)) {
        return $subslice(g, 0, 0);
      } else if ((i === 0)) {
        return g.set(e);
      }
      g = g.make(h);
      k = AF((j = $subslice(g, 0, i), $subslice(new DV(j.$array), j.$offset, j.$offset + j.$length)), $subslice(new DV(e.$array), e.$offset, e.$offset + e.$length), $subslice(new DV(f.$array), f.$offset, f.$offset + f.$length));
      if (h > i) {
        k = AH((l = $subslice(g, i), $subslice(new DV(l.$array), l.$offset, l.$offset + l.$length)), (m = $subslice(e, i), $subslice(new DV(m.$array), m.$offset, m.$offset + m.$length)), k);
      }
      if (!((k === 0))) {
        $panic(new $String("underflow"));
      }
      return g.norm();
    };
    $ptrType(BX).prototype.sub = function(e, f) {
      return this.$get().sub(e, f);
    };
    BX.prototype.cmp = function(e) {
      var e, f, g, h, i, j;
      f = 0;
      g = this;
      h = g.$length;
      i = e.$length;
      if (!((h === i)) || (h === 0)) {
        if (h < i) {
          f = -1;
        } else if (h > i) {
          f = 1;
        }
        return f;
      }
      j = h - 1 >> 0;
      while (true) {
        if (!(j > 0 && (((j < 0 || j >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + j]) === ((j < 0 || j >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + j])))) {
          break;
        }
        j = j - (1) >> 0;
      }
      if (((j < 0 || j >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + j]) < ((j < 0 || j >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + j])) {
        f = -1;
      } else if (((j < 0 || j >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + j]) > ((j < 0 || j >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + j])) {
        f = 1;
      }
      return f;
    };
    $ptrType(BX).prototype.cmp = function(e) {
      return this.$get().cmp(e);
    };
    BX.prototype.mulAddWW = function(e, f, g) {
      var e, f, g, h, i, j;
      h = this;
      i = e.$length;
      if ((i === 0) || (f === 0)) {
        return h.setWord(g);
      }
      h = h.make(i + 1 >> 0);
      ((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i] = AK((j = $subslice(h, 0, i), $subslice(new DV(j.$array), j.$offset, j.$offset + j.$length)), $subslice(new DV(e.$array), e.$offset, e.$offset + e.$length), f, g));
      return h.norm();
    };
    $ptrType(BX).prototype.mulAddWW = function(e, f, g) {
      return this.$get().mulAddWW(e, f, g);
    };
    CB = function(e, f, g) {
      var e, f, g, h, i, j, k, l, m;
      $subslice(e, 0, (f.$length + g.$length >> 0)).clear();
      h = g;
      i = 0;
      while (true) {
        if (!(i < h.$length)) {
          break;
        }
        j = i;
        k = ((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i]);
        if (!((k === 0))) {
          (m = f.$length + j >> 0, ((m < 0 || m >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + m] = AL((l = $subslice(e, j, (j + f.$length >> 0)), $subslice(new DV(l.$array), l.$offset, l.$offset + l.$length)), $subslice(new DV(f.$array), f.$offset, f.$offset + f.$length), k)));
        }
        i++;
      }
    };
    BX.prototype.montgomery = function(e, f, g, h, i) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w;
      j = this;
      if (!((e.$length === i)) || !((f.$length === i)) || !((g.$length === i))) {
        $panic(new $String("math/big: mismatched montgomery number lengths"));
      }
      j = j.make($imul(i, 2));
      j.clear();
      k = 0;
      l = 0;
      while (true) {
        if (!(l < i)) {
          break;
        }
        m = ((l < 0 || l >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + l]);
        o = AL((n = $subslice(j, l, (i + l >> 0)), $subslice(new DV(n.$array), n.$offset, n.$offset + n.$length)), $subslice(new DV(e.$array), e.$offset, e.$offset + e.$length), m);
        p = $imul(((l < 0 || l >= j.$length) ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + l]), h) >>> 0;
        r = AL((q = $subslice(j, l, (i + l >> 0)), $subslice(new DV(q.$array), q.$offset, q.$offset + q.$length)), $subslice(new DV(g.$array), g.$offset, g.$offset + g.$length), p);
        s = k + o >>> 0;
        t = s + r >>> 0;
        (u = i + l >> 0, ((u < 0 || u >= j.$length) ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + u] = t));
        if (s < o || t < r) {
          k = 1;
        } else {
          k = 0;
        }
        l = l + (1) >> 0;
      }
      if (!((k === 0))) {
        AF((v = $subslice(j, 0, i), $subslice(new DV(v.$array), v.$offset, v.$offset + v.$length)), (w = $subslice(j, i), $subslice(new DV(w.$array), w.$offset, w.$offset + w.$length)), $subslice(new DV(g.$array), g.$offset, g.$offset + g.$length));
      } else {
        $copySlice($subslice(j, 0, i), $subslice(j, i));
      }
      return $subslice(j, 0, i);
    };
    $ptrType(BX).prototype.montgomery = function(e, f, g, h, i) {
      return this.$get().montgomery(e, f, g, h, i);
    };
    CC = function(e, f, g) {
      var e, f, g, h, i, j, k;
      i = AE((h = $subslice(e, 0, g), $subslice(new DV(h.$array), h.$offset, h.$offset + h.$length)), $subslice(new DV(e.$array), e.$offset, e.$offset + e.$length), $subslice(new DV(f.$array), f.$offset, f.$offset + f.$length));
      if (!((i === 0))) {
        AG((j = $subslice(e, g, (g + (g >> 1 >> 0) >> 0)), $subslice(new DV(j.$array), j.$offset, j.$offset + j.$length)), (k = $subslice(e, g), $subslice(new DV(k.$array), k.$offset, k.$offset + k.$length)), i);
      }
    };
    CD = function(e, f, g) {
      var e, f, g, h, i, j, k;
      i = AF((h = $subslice(e, 0, g), $subslice(new DV(h.$array), h.$offset, h.$offset + h.$length)), $subslice(new DV(e.$array), e.$offset, e.$offset + e.$length), $subslice(new DV(f.$array), f.$offset, f.$offset + f.$length));
      if (!((i === 0))) {
        AH((j = $subslice(e, g, (g + (g >> 1 >> 0) >> 0)), $subslice(new DV(j.$array), j.$offset, j.$offset + j.$length)), (k = $subslice(e, g), $subslice(new DV(k.$array), k.$offset, k.$offset + k.$length)), i);
      }
    };
    CF = function(e, f, g) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v;
      h = g.$length;
      if (!(((h & 1) === 0)) || h < CE || h < 2) {
        CB(e, f, g);
        return;
      }
      i = h >> 1 >> 0;
      j = $subslice(f, i);
      k = $subslice(f, 0, i);
      l = j;
      m = k;
      n = $subslice(g, i);
      o = $subslice(g, 0, i);
      p = n;
      q = o;
      CF(e, m, q);
      CF($subslice(e, h), l, p);
      r = 1;
      s = $subslice(e, ($imul(2, h)), (($imul(2, h)) + i >> 0));
      if (!((AF($subslice(new DV(s.$array), s.$offset, s.$offset + s.$length), $subslice(new DV(l.$array), l.$offset, l.$offset + l.$length), $subslice(new DV(m.$array), m.$offset, m.$offset + m.$length)) === 0))) {
        r = -r;
        AF($subslice(new DV(s.$array), s.$offset, s.$offset + s.$length), $subslice(new DV(m.$array), m.$offset, m.$offset + m.$length), $subslice(new DV(l.$array), l.$offset, l.$offset + l.$length));
      }
      t = $subslice(e, (($imul(2, h)) + i >> 0), ($imul(3, h)));
      if (!((AF($subslice(new DV(t.$array), t.$offset, t.$offset + t.$length), $subslice(new DV(q.$array), q.$offset, q.$offset + q.$length), $subslice(new DV(p.$array), p.$offset, p.$offset + p.$length)) === 0))) {
        r = -r;
        AF($subslice(new DV(t.$array), t.$offset, t.$offset + t.$length), $subslice(new DV(p.$array), p.$offset, p.$offset + p.$length), $subslice(new DV(q.$array), q.$offset, q.$offset + q.$length));
      }
      u = $subslice(e, ($imul(h, 3)));
      CF(u, s, t);
      v = $subslice(e, ($imul(h, 4)));
      $copySlice(v, $subslice(e, 0, ($imul(h, 2))));
      CC($subslice(e, i), v, h);
      CC($subslice(e, i), $subslice(v, h), h);
      if (r > 0) {
        CC($subslice(e, i), u, h);
      } else {
        CD($subslice(e, i), u, h);
      }
    };
    CG = function(e, f) {
      var e, f, g, h;
      return e.$capacity > 0 && f.$capacity > 0 && (g = $subslice(e, 0, e.$capacity), $indexPtr(g.$array, g.$offset + (e.$capacity - 1 >> 0), DY)) === (h = $subslice(f, 0, f.$capacity), $indexPtr(h.$array, h.$offset + (f.$capacity - 1 >> 0), DY));
    };
    CH = function(e, f, g) {
      var e, f, g, h, i, j, k, l, m, n;
      h = f.$length;
      if (h > 0) {
        k = AE((i = $subslice(e, g, (g + h >> 0)), $subslice(new DV(i.$array), i.$offset, i.$offset + i.$length)), (j = $subslice(e, g), $subslice(new DV(j.$array), j.$offset, j.$offset + j.$length)), $subslice(new DV(f.$array), f.$offset, f.$offset + f.$length));
        if (!((k === 0))) {
          l = g + h >> 0;
          if (l < e.$length) {
            AG((m = $subslice(e, l), $subslice(new DV(m.$array), m.$offset, m.$offset + m.$length)), (n = $subslice(e, l), $subslice(new DV(n.$array), n.$offset, n.$offset + n.$length)), k);
          }
        }
      }
    };
    CI = function(e, f) {
      var e, f;
      if (e > f) {
        return e;
      }
      return f;
    };
    CJ = function(e, f) {
      var e, f, g, h;
      g = 0;
      while (true) {
        if (!(e > f)) {
          break;
        }
        e = (e >> $min((1), 31)) >> 0;
        g = g + (1) >>> 0;
      }
      return (h = g, h < 32 ? (e << h) : 0) >> 0;
    };
    BX.prototype.mul = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r;
      g = this;
      h = e.$length;
      i = f.$length;
      if (h < i) {
        return g.mul(f, e);
      } else if ((h === 0) || (i === 0)) {
        return $subslice(g, 0, 0);
      } else if ((i === 1)) {
        return g.mulAddWW(e, (0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0]), 0);
      }
      if (CG(g, e) || CG(g, f)) {
        g = BX.nil;
      }
      if (i < CE) {
        g = g.make(h + i >> 0);
        CB(g, e, f);
        return g.norm();
      }
      j = CJ(i, CE);
      k = $subslice(e, 0, j);
      l = $subslice(f, 0, j);
      g = g.make(CI($imul(6, j), h + i >> 0));
      CF(g, k, l);
      g = $subslice(g, 0, (h + i >> 0));
      $subslice(g, ($imul(2, j))).clear();
      if (j < i || !((h === i))) {
        m = BX.nil;
        n = k.norm();
        o = $subslice(f, j);
        m = m.mul(n, o);
        CH(g, m, j);
        p = l.norm();
        q = j;
        while (true) {
          if (!(q < e.$length)) {
            break;
          }
          r = $subslice(e, q);
          if (r.$length > j) {
            r = $subslice(r, 0, j);
          }
          r = r.norm();
          m = m.mul(r, p);
          CH(g, m, q);
          m = m.mul(r, o);
          CH(g, m, q + j >> 0);
          q = q + (j) >> 0;
        }
      }
      return g.norm();
    };
    $ptrType(BX).prototype.mul = function(e, f) {
      return this.$get().mul(e, f);
    };
    CK = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t;
      g = f.$length;
      h = $makeSlice(BX, ($imul(2, g)));
      i = AC((0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0]), (0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0]));
      (1 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 1] = i[0]);
      (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0] = i[1]);
      j = 1;
      while (true) {
        if (!(j < g)) {
          break;
        }
        k = ((j < 0 || j >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + j]);
        l = AC(k, k);
        (m = ($imul(2, j)) + 1 >> 0, ((m < 0 || m >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + m] = l[0]));
        (n = $imul(2, j), ((n < 0 || n >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + n] = l[1]));
        (q = $imul(2, j), ((q < 0 || q >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + q] = AL((o = $subslice(h, j, ($imul(2, j))), $subslice(new DV(o.$array), o.$offset, o.$offset + o.$length)), (p = $subslice(f, 0, j), $subslice(new DV(p.$array), p.$offset, p.$offset + p.$length)), k)));
        j = j + (1) >> 0;
      }(t = ($imul(2, g)) - 1 >> 0, ((t < 0 || t >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + t] = AI((r = $subslice(h, 1, (($imul(2, g)) - 1 >> 0)), $subslice(new DV(r.$array), r.$offset, r.$offset + r.$length)), (s = $subslice(h, 1, (($imul(2, g)) - 1 >> 0)), $subslice(new DV(s.$array), s.$offset, s.$offset + s.$length)), 1)));
      AE($subslice(new DV(e.$array), e.$offset, e.$offset + e.$length), $subslice(new DV(e.$array), e.$offset, e.$offset + e.$length), $subslice(new DV(h.$array), h.$offset, h.$offset + h.$length));
    };
    CL = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o;
      g = f.$length;
      if (!(((g & 1) === 0)) || g < CN || g < 2) {
        CK($subslice(e, 0, ($imul(2, g))), f);
        return;
      }
      h = g >> 1 >> 0;
      i = $subslice(f, h);
      j = $subslice(f, 0, h);
      k = i;
      l = j;
      CL(e, l);
      CL($subslice(e, g), k);
      m = $subslice(e, ($imul(2, g)), (($imul(2, g)) + h >> 0));
      if (!((AF($subslice(new DV(m.$array), m.$offset, m.$offset + m.$length), $subslice(new DV(k.$array), k.$offset, k.$offset + k.$length), $subslice(new DV(l.$array), l.$offset, l.$offset + l.$length)) === 0))) {
        AF($subslice(new DV(m.$array), m.$offset, m.$offset + m.$length), $subslice(new DV(l.$array), l.$offset, l.$offset + l.$length), $subslice(new DV(k.$array), k.$offset, k.$offset + k.$length));
      }
      n = $subslice(e, ($imul(g, 3)));
      CL(n, m);
      o = $subslice(e, ($imul(g, 4)));
      $copySlice(o, $subslice(e, 0, ($imul(g, 2))));
      CC($subslice(e, h), o, g);
      CC($subslice(e, h), $subslice(o, g), g);
      CD($subslice(e, h), n, g);
    };
    BX.prototype.sqr = function(e) {
      var e, f, g, h, i, j, k, l, m, n;
      f = this;
      g = e.$length;
      if ((g === 0)) {
        return $subslice(f, 0, 0);
      } else if ((g === 1)) {
        h = (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]);
        f = f.make(2);
        i = AC(h, h);
        (1 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 1] = i[0]);
        (0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0] = i[1]);
        return f.norm();
      }
      if (CG(f, e)) {
        f = BX.nil;
      }
      if (g < CM) {
        f = f.make($imul(2, g));
        CB(f, e, e);
        return f.norm();
      }
      if (g < CN) {
        f = f.make($imul(2, g));
        CK(f, e);
        return f.norm();
      }
      j = CJ(g, CN);
      k = $subslice(e, 0, j);
      f = f.make(CI($imul(6, j), $imul(2, g)));
      CL(f, k);
      f = $subslice(f, 0, ($imul(2, g)));
      $subslice(f, ($imul(2, j))).clear();
      if (j < g) {
        l = BX.nil;
        m = k.norm();
        n = $subslice(e, j);
        l = l.mul(m, n);
        CH(f, l, j);
        CH(f, l, j);
        l = l.sqr(n);
        CH(f, l, $imul(2, j));
      }
      return f.norm();
    };
    $ptrType(BX).prototype.sqr = function(e) {
      return this.$get().sqr(e);
    };
    BX.prototype.mulRange = function(e, f) {
      var e, f, g, h, i;
      g = this;
      if ((e.$high === 0 && e.$low === 0)) {
        return g.setUint64(new $Uint64(0, 0));
      } else if ((e.$high > f.$high || (e.$high === f.$high && e.$low > f.$low))) {
        return g.setUint64(new $Uint64(0, 1));
      } else if ((e.$high === f.$high && e.$low === f.$low)) {
        return g.setUint64(e);
      } else if ((h = new $Uint64(e.$high + 0, e.$low + 1), (h.$high === f.$high && h.$low === f.$low))) {
        return g.mul((BX.nil).setUint64(e), (BX.nil).setUint64(f));
      }
      i = $div64((new $Uint64(e.$high + f.$high, e.$low + f.$low)), new $Uint64(0, 2), false);
      return g.mul((BX.nil).mulRange(e, i), (BX.nil).mulRange(new $Uint64(i.$high + 0, i.$low + 1), f));
    };
    $ptrType(BX).prototype.mulRange = function(e, f) {
      return this.$get().mulRange(e, f);
    };
    BX.prototype.divW = function(e, f) {
      var e, f, g, h, i, j;
      g = BX.nil;
      h = 0;
      i = this;
      j = e.$length;
      if ((f === 0)) {
        $panic(new $String("division by zero"));
      } else if ((f === 1)) {
        g = i.set(e);
        return [g, h];
      } else if ((j === 0)) {
        g = $subslice(i, 0, 0);
        return [g, h];
      }
      i = i.make(j);
      h = AM($subslice(new DV(i.$array), i.$offset, i.$offset + i.$length), 0, $subslice(new DV(e.$array), e.$offset, e.$offset + e.$length), f);
      g = i.norm();
      return [g, h];
    };
    $ptrType(BX).prototype.divW = function(e, f) {
      return this.$get().divW(e, f);
    };
    BX.prototype.div = function(e, f, g) {
      var e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = BX.nil;
            i = BX.nil;
            j = this;
            if (g.$length === 0) {
              $panic(new $String("division by zero"));
            }
            if (f.cmp(g) < 0) {
              h = $subslice(j, 0, 0);
              i = e.set(f);
              $s = -1;
              return [h, i];
            }
            if (g.$length === 1) {
              k = 0;
              l = j.divW(f, (0 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 0]));
              h = l[0];
              k = l[1];
              i = e.setWord(k);
              $s = -1;
              return [h, i];
            }
            n = j.divLarge(e, f, g);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            m = n;
            h = m[0];
            i = m[1];
            $s = -1;
            return [h, i];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BX.prototype.div
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(BX).prototype.div = function(e, f, g) {
      return this.$get().div(e, f, g);
    };
    CO = function(e) {
      var e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = DZ.nil;
            g = CQ.Get();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = g;
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              f = $assertType(h, DZ);
            }
            if (f === DZ.nil) {
              f = $newDataPointer(BX.nil, DZ);
            }
            f.$set(f.make(e));
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CO
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    CP = function(e) {
      var e;
      CQ.Put(e);
    };
    BX.prototype.divLarge = function(e, f, g) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = BX.nil;
            i = BX.nil;
            j = this;
            k = g.$length;
            l = f.$length - k >> 0;
            if (CG(j, e) || CG(j, f) || CG(j, g)) {
              j = BX.nil;
            }
            h = j.make(l + 1 >> 0);
            m = CO(k + 1 >> 0);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            n = m;
            o = n.$get();
            if (CG(e, f) || CG(e, g)) {
              e = BX.nil;
            }
            e = e.make(f.$length + 1 >> 0);
            e.clear();
            p = DZ.nil;
            r = R((q = k - 1 >> 0, ((q < 0 || q >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + q])));
            if (r > 0) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            s = CO(k);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            p = s;
            t = p.$get();
            AI($subslice(new DV(t.$array), t.$offset, t.$offset + t.$length), $subslice(new DV(g.$array), g.$offset, g.$offset + g.$length), r);
            g = t;
          case 3:
            (v = f.$length, ((v < 0 || v >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + v] = AI((u = $subslice(e, 0, f.$length), $subslice(new DV(u.$array), u.$offset, u.$offset + u.$length)), $subslice(new DV(f.$array), f.$offset, f.$offset + f.$length), r)));
            x = (w = k - 1 >> 0, ((w < 0 || w >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + w]));
            y = l;
            while (true) {
              if (!(y >= 0)) {
                break;
              }
              z = 4294967295;
              ab = (aa = y + k >> 0, ((aa < 0 || aa >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + aa]));
              if (!((ab === x))) {
                ac = 0;
                ad = AD(ab, (ae = (y + k >> 0) - 1 >> 0, ((ae < 0 || ae >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + ae])), x);
                z = ad[0];
                ac = ad[1];
                ag = (af = k - 2 >> 0, ((af < 0 || af >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + af]));
                ah = AC(z, ag);
                ai = ah[0];
                aj = ah[1];
                al = (ak = (y + k >> 0) - 2 >> 0, ((ak < 0 || ak >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + ak]));
                while (true) {
                  if (!(CS(ai, aj, ac, al))) {
                    break;
                  }
                  z = z - (1) >>> 0;
                  am = ac;
                  ac = ac + (x) >>> 0;
                  if (ac < am) {
                    break;
                  }
                  an = AC(z, ag);
                  ai = an[0];
                  aj = an[1];
                }
              }((k < 0 || k >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + k] = AK((ao = $subslice(o, 0, k), $subslice(new DV(ao.$array), ao.$offset, ao.$offset + ao.$length)), $subslice(new DV(g.$array), g.$offset, g.$offset + g.$length), z, 0));
              ar = AF((ap = $subslice(e, y, (y + o.$length >> 0)), $subslice(new DV(ap.$array), ap.$offset, ap.$offset + ap.$length)), (aq = $subslice(e, y), $subslice(new DV(aq.$array), aq.$offset, aq.$offset + aq.$length)), $subslice(new DV(o.$array), o.$offset, o.$offset + o.$length));
              if (!((ar === 0))) {
                au = AE((as = $subslice(e, y, (y + k >> 0)), $subslice(new DV(as.$array), as.$offset, as.$offset + as.$length)), (at = $subslice(e, y), $subslice(new DV(at.$array), at.$offset, at.$offset + at.$length)), $subslice(new DV(g.$array), g.$offset, g.$offset + g.$length));
                av = y + k >> 0;
                ((av < 0 || av >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + av] = (((av < 0 || av >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + av]) + (au) >>> 0));
                z = z - (1) >>> 0;
              }((y < 0 || y >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + y] = z);
              y = y - (1) >> 0;
            }
            if (!(p === DZ.nil)) {
              CP(p);
            }
            CP(n);
            h = h.norm();
            AJ($subslice(new DV(e.$array), e.$offset, e.$offset + e.$length), $subslice(new DV(e.$array), e.$offset, e.$offset + e.$length), r);
            i = e.norm();
            aw = h;
            ax = i;
            h = aw;
            i = ax;
            $s = -1;
            return [h, i];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BX.prototype.divLarge
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(BX).prototype.divLarge = function(e, f, g) {
      return this.$get().divLarge(e, f, g);
    };
    BX.prototype.bitLen = function() {
      var e, f;
      e = this;
      f = e.$length - 1 >> 0;
      if (f >= 0) {
        return ($imul(f, 32)) + B.Len(((((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]) >>> 0))) >> 0;
      }
      return 0;
    };
    $ptrType(BX).prototype.bitLen = function() {
      return this.$get().bitLen();
    };
    BX.prototype.trailingZeroBits = function() {
      var e, f;
      e = this;
      if (e.$length === 0) {
        return 0;
      }
      f = 0;
      while (true) {
        if (!(((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]) === 0)) {
          break;
        }
        f = f + (1) >>> 0;
      }
      return (f * 32 >>> 0) + ((B.TrailingZeros(((((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]) >>> 0))) >>> 0)) >>> 0;
    };
    $ptrType(BX).prototype.trailingZeroBits = function() {
      return this.$get().trailingZeroBits();
    };
    CR = function(e, f) {
      var e, f;
      return (e.$length === f.$length) && e.$length > 0 && $indexPtr(e.$array, e.$offset + 0, DY) === $indexPtr(f.$array, f.$offset + 0, DY);
    };
    BX.prototype.shl = function(e, f) {
      var e, f, g, h, i, j, k, l;
      g = this;
      if (f === 0) {
        if (CR(g, e)) {
          return g;
        }
        if (!CG(g, e)) {
          return g.set(e);
        }
      }
      h = e.$length;
      if (h === 0) {
        return $subslice(g, 0, 0);
      }
      j = h + (((i = f / 32, (i === i && i !== 1 / 0 && i !== -1 / 0) ? i >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
      g = g.make(j + 1 >> 0);
      ((j < 0 || j >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + j] = AI((k = $subslice(g, (j - h >> 0), j), $subslice(new DV(k.$array), k.$offset, k.$offset + k.$length)), $subslice(new DV(e.$array), e.$offset, e.$offset + e.$length), (l = f % 32, l === l ? l : $throwRuntimeError("integer divide by zero"))));
      $subslice(g, 0, (j - h >> 0)).clear();
      return g.norm();
    };
    $ptrType(BX).prototype.shl = function(e, f) {
      return this.$get().shl(e, f);
    };
    BX.prototype.shr = function(e, f) {
      var e, f, g, h, i, j, k, l;
      g = this;
      if (f === 0) {
        if (CR(g, e)) {
          return g;
        }
        if (!CG(g, e)) {
          return g.set(e);
        }
      }
      h = e.$length;
      j = h - (((i = f / 32, (i === i && i !== 1 / 0 && i !== -1 / 0) ? i >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
      if (j <= 0) {
        return $subslice(g, 0, 0);
      }
      g = g.make(j);
      AJ($subslice(new DV(g.$array), g.$offset, g.$offset + g.$length), (k = $subslice(e, (h - j >> 0)), $subslice(new DV(k.$array), k.$offset, k.$offset + k.$length)), (l = f % 32, l === l ? l : $throwRuntimeError("integer divide by zero")));
      return g.norm();
    };
    $ptrType(BX).prototype.shr = function(e, f) {
      return this.$get().shr(e, f);
    };
    BX.prototype.setBit = function(e, f, g) {
      var e, f, g, h, i, j, k, l, m, n, o;
      h = this;
      j = (((i = f / 32, (i === i && i !== 1 / 0 && i !== -1 / 0) ? i >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
      m = (k = ((l = f % 32, l === l ? l : $throwRuntimeError("integer divide by zero"))), k < 32 ? (1 << k) : 0) >>> 0;
      n = e.$length;
      o = g;
      if (o === (0)) {
        h = h.make(n);
        $copySlice(h, e);
        if (j >= n) {
          return h;
        }((j < 0 || j >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + j] = ((((j < 0 || j >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + j]) & ~(m)) >>> 0));
        return h.norm();
      } else if (o === (1)) {
        if (j >= n) {
          h = h.make(j + 1 >> 0);
          $subslice(h, n).clear();
        } else {
          h = h.make(n);
        }
        $copySlice(h, e);
        ((j < 0 || j >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + j] = ((((j < 0 || j >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + j]) | (m)) >>> 0));
        return h;
      }
      $panic(new $String("set bit is not 0 or 1"));
    };
    $ptrType(BX).prototype.setBit = function(e, f, g) {
      return this.$get().setBit(e, f, g);
    };
    BX.prototype.bit = function(e) {
      var e, f, g, h, i, j;
      f = this;
      h = (g = e / 32, (g === g && g !== 1 / 0 && g !== -1 / 0) ? g >>> 0 : $throwRuntimeError("integer divide by zero"));
      if (h >= ((f.$length >>> 0))) {
        return 0;
      }
      return ((((((i = ((j = e % 32, j === j ? j : $throwRuntimeError("integer divide by zero"))), i < 32 ? (((h < 0 || h >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + h]) >>> i) : 0) >>> 0) & 1) >>> 0) >>> 0));
    };
    $ptrType(BX).prototype.bit = function(e) {
      return this.$get().bit(e);
    };
    BX.prototype.sticky = function(e) {
      var e, f, g, h, i, j, k, l, m;
      f = this;
      h = (g = e / 32, (g === g && g !== 1 / 0 && g !== -1 / 0) ? g >>> 0 : $throwRuntimeError("integer divide by zero"));
      if (h >= ((f.$length >>> 0))) {
        if (f.$length === 0) {
          return 0;
        }
        return 1;
      }
      i = $subslice(f, 0, h);
      j = 0;
      while (true) {
        if (!(j < i.$length)) {
          break;
        }
        k = ((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j]);
        if (!((k === 0))) {
          return 1;
        }
        j++;
      }
      if (!((((l = ((32 - (m = e % 32, m === m ? m : $throwRuntimeError("integer divide by zero")) >>> 0)), l < 32 ? (((h < 0 || h >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + h]) << l) : 0) >>> 0) === 0))) {
        return 1;
      }
      return 0;
    };
    $ptrType(BX).prototype.sticky = function(e) {
      return this.$get().sticky(e);
    };
    BX.prototype.and = function(e, f) {
      var e, f, g, h, i, j;
      g = this;
      h = e.$length;
      i = f.$length;
      if (h > i) {
        h = i;
      }
      g = g.make(h);
      j = 0;
      while (true) {
        if (!(j < h)) {
          break;
        }((j < 0 || j >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + j] = ((((j < 0 || j >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + j]) & ((j < 0 || j >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + j])) >>> 0));
        j = j + (1) >> 0;
      }
      return g.norm();
    };
    $ptrType(BX).prototype.and = function(e, f) {
      return this.$get().and(e, f);
    };
    BX.prototype.andNot = function(e, f) {
      var e, f, g, h, i, j;
      g = this;
      h = e.$length;
      i = f.$length;
      if (i > h) {
        i = h;
      }
      g = g.make(h);
      j = 0;
      while (true) {
        if (!(j < i)) {
          break;
        }((j < 0 || j >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + j] = ((((j < 0 || j >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + j]) & ~((j < 0 || j >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + j])) >>> 0));
        j = j + (1) >> 0;
      }
      $copySlice($subslice(g, i, h), $subslice(e, i, h));
      return g.norm();
    };
    $ptrType(BX).prototype.andNot = function(e, f) {
      return this.$get().andNot(e, f);
    };
    BX.prototype.or = function(e, f) {
      var e, f, g, h, i, j, k, l, m;
      g = this;
      h = e.$length;
      i = f.$length;
      j = e;
      if (h < i) {
        k = h;
        l = i;
        i = k;
        h = l;
        j = f;
      }
      g = g.make(h);
      m = 0;
      while (true) {
        if (!(m < i)) {
          break;
        }((m < 0 || m >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + m] = ((((m < 0 || m >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + m]) | ((m < 0 || m >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + m])) >>> 0));
        m = m + (1) >> 0;
      }
      $copySlice($subslice(g, i, h), $subslice(j, i, h));
      return g.norm();
    };
    $ptrType(BX).prototype.or = function(e, f) {
      return this.$get().or(e, f);
    };
    BX.prototype.xor = function(e, f) {
      var e, f, g, h, i, j, k, l, m;
      g = this;
      h = e.$length;
      i = f.$length;
      j = e;
      if (h < i) {
        k = h;
        l = i;
        i = k;
        h = l;
        j = f;
      }
      g = g.make(h);
      m = 0;
      while (true) {
        if (!(m < i)) {
          break;
        }((m < 0 || m >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + m] = ((((m < 0 || m >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + m]) ^ ((m < 0 || m >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + m])) >>> 0));
        m = m + (1) >> 0;
      }
      $copySlice($subslice(g, i, h), $subslice(j, i, h));
      return g.norm();
    };
    $ptrType(BX).prototype.xor = function(e, f) {
      return this.$get().xor(e, f);
    };
    CS = function(e, f, g, h) {
      var e, f, g, h;
      return e > g || (e === g) && f > h;
    };
    BX.prototype.modW = function(e) {
      var e, f, g, h;
      f = 0;
      g = this;
      h = BX.nil;
      h = h.make(g.$length);
      f = AM($subslice(new DV(h.$array), h.$offset, h.$offset + h.$length), 0, $subslice(new DV(g.$array), g.$offset, g.$offset + g.$length), e);
      return f;
    };
    $ptrType(BX).prototype.modW = function(e) {
      return this.$get().modW(e);
    };
    BX.prototype.random = function(e, f, g) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = this;
            if (CG(h, f)) {
              h = BX.nil;
            }
            h = h.make(f.$length);
            j = (((i = g % 32, i === i ? i : $throwRuntimeError("integer divide by zero")) >>> 0));
            if (j === 0) {
              j = 32;
            }
            l = (((((k = j, k < 32 ? (1 << k) : 0) >>> 0)) - 1 >>> 0));
          case 1:
            m = 32;
            if (m === (32)) {
              $s = 4;
              continue;
            }
            if (m === (64)) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 4:
            n = h;
            o = 0;
          case 8:
            if (!(o < n.$length)) {
              $s = 9;
              continue;
            }
            p = o;
            q = e.Uint32();
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }((p < 0 || p >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + p] = ((q >>> 0)));
            o++;
            $s = 8;
            continue;
          case 9:
            $s = 7;
            continue;
          case 5:
            r = h;
            s = 0;
          case 11:
            if (!(s < r.$length)) {
              $s = 12;
              continue;
            }
            t = s;
            u = e.Uint32();
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              u = u.$blk();
            }
            if (u && u.$blk !== undefined) {
              break s;
            }((t < 0 || t >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + t] = ((((u >>> 0)) | 0) >>> 0));
            s++;
            $s = 11;
            continue;
          case 12:
            $s = 7;
            continue;
          case 6:
            $panic(new $String("unknown word size"));
          case 7:
          case 3:
            v = f.$length - 1 >> 0;
            ((v < 0 || v >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + v] = ((((v < 0 || v >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + v]) & (l)) >>> 0));
            if (h.cmp(f) < 0) {
              $s = 2;
              continue;
            }
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return h.norm();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BX.prototype.random
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(BX).prototype.random = function(e, f, g) {
      return this.$get().random(e, f, g);
    };
    BX.prototype.expNN = function(e, f, g) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = this;
            if (CG(h, e) || CG(h, f)) {
              h = BX.nil;
            }
            if ((g.$length === 1) && ((0 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 0]) === 1)) {
              $s = -1;
              return h.setWord(0);
            }
            if (f.$length === 0) {
              $s = -1;
              return h.setWord(1);
            }
            if ((f.$length === 1) && ((0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0]) === 1) && !((g.$length === 0))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            j = (BX.nil).div(h, e, g);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            i = j;
            h = i[1];
            $s = -1;
            return h;
          case 2:
            if (!((g.$length === 0))) {
              h = h.make(g.$length);
            }
            h = h.set(e);
            if (e.cmp(BY) > 0 && f.$length > 1 && g.$length > 0) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            if ((((0 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 0]) & 1) >>> 0) === 1) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            k = h.expNNMontgomery(e, f, g);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return k;
          case 7:
            l = h.expNNWindowed(e, f, g);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return l;
          case 5:
            n = (m = f.$length - 1 >> 0, ((m < 0 || m >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + m]));
            o = R(n) + 1 >>> 0;
            n = (p = (o), p < 32 ? (n << p) : 0) >>> 0;
            q = BX.nil;
            r = 32 - ((o >> 0)) >> 0;
            s = BX.nil;
            t = BX.nil;
            u = s;
            v = t;
            w = 0;
          case 10:
            if (!(w < r)) {
              $s = 11;
              continue;
            }
            u = u.sqr(h);
            x = h;
            y = u;
            u = x;
            h = y;
            if (!((((n & 2147483648) >>> 0) === 0))) {
              u = u.mul(h, e);
              z = h;
              aa = u;
              u = z;
              h = aa;
            }
            if (!((g.$length === 0))) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 12:
            ac = u.div(v, h, g);
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              ac = ac.$blk();
            }
            if (ac && ac.$blk !== undefined) {
              break s;
            }
            ab = ac;
            u = ab[0];
            v = ab[1];
            ad = q;
            ae = h;
            af = u;
            ag = v;
            u = ad;
            v = ae;
            q = af;
            h = ag;
          case 13:
            n = (ah = (1), ah < 32 ? (n << ah) : 0) >>> 0;
            w = w + (1) >> 0;
            $s = 10;
            continue;
          case 11:
            ai = f.$length - 2 >> 0;
          case 15:
            if (!(ai >= 0)) {
              $s = 16;
              continue;
            }
            n = ((ai < 0 || ai >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + ai]);
            aj = 0;
          case 17:
            if (!(aj < 32)) {
              $s = 18;
              continue;
            }
            u = u.sqr(h);
            ak = h;
            al = u;
            u = ak;
            h = al;
            if (!((((n & 2147483648) >>> 0) === 0))) {
              u = u.mul(h, e);
              am = h;
              an = u;
              u = am;
              h = an;
            }
            if (!((g.$length === 0))) {
              $s = 19;
              continue;
            }
            $s = 20;
            continue;
          case 19:
            ap = u.div(v, h, g);
            $s = 21;
          case 21:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            ao = ap;
            u = ao[0];
            v = ao[1];
            aq = q;
            ar = h;
            as = u;
            at = v;
            u = aq;
            v = ar;
            q = as;
            h = at;
          case 20:
            n = (au = (1), au < 32 ? (n << au) : 0) >>> 0;
            aj = aj + (1) >> 0;
            $s = 17;
            continue;
          case 18:
            ai = ai - (1) >> 0;
            $s = 15;
            continue;
          case 16:
            $s = -1;
            return h.norm();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BX.prototype.expNN
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(BX).prototype.expNN = function(e, f, g) {
      return this.$get().expNN(e, f, g);
    };
    BX.prototype.expNNWindowed = function(e, f, g) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        ba = $f.ba;
        bb = $f.bb;
        bc = $f.bc;
        bd = $f.bd;
        be = $f.be;
        bf = $f.bf;
        bg = $f.bg;
        bh = $f.bh;
        bi = $f.bi;
        bj = $f.bj;
        bk = $f.bk;
        bl = $f.bl;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = this;
            i = BX.nil;
            j = BX.nil;
            k = i;
            l = j;
            m = EA.zero();
            m[0] = BY;
            m[1] = e;
            n = 2;
          case 1:
            if (!(n < 16)) {
              $s = 2;
              continue;
            }
            o = $indexPtr(m, (p = n / 2, (p === p && p !== 1 / 0 && p !== -1 / 0) ? p >> 0 : $throwRuntimeError("integer divide by zero")), DZ);
            q = $indexPtr(m, n, DZ);
            r = $indexPtr(m, (n + 1 >> 0), DZ);
            s = o;
            t = q;
            u = r;
            t.$set(t.sqr(s.$get()));
            w = k.div(l, t.$get(), g);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              w = w.$blk();
            }
            if (w && w.$blk !== undefined) {
              break s;
            }
            v = w;
            k = v[0];
            l = v[1];
            x = l;
            y = t.$get();
            t.$set(x);
            l = y;
            u.$set(u.mul(t.$get(), e));
            aa = k.div(l, u.$get(), g);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              aa = aa.$blk();
            }
            if (aa && aa.$blk !== undefined) {
              break s;
            }
            z = aa;
            k = z[0];
            l = z[1];
            ab = l;
            ac = u.$get();
            u.$set(ab);
            l = ac;
            n = n + (2) >> 0;
            $s = 1;
            continue;
          case 2:
            h = h.setWord(1);
            ad = f.$length - 1 >> 0;
          case 5:
            if (!(ad >= 0)) {
              $s = 6;
              continue;
            }
            ae = ((ad < 0 || ad >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + ad]);
            af = 0;
          case 7:
            if (!(af < 32)) {
              $s = 8;
              continue;
            }
            if (!((ad === (f.$length - 1 >> 0))) || !((af === 0))) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            k = k.sqr(h);
            ag = h;
            ah = k;
            k = ag;
            h = ah;
            aj = k.div(l, h, g);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              aj = aj.$blk();
            }
            if (aj && aj.$blk !== undefined) {
              break s;
            }
            ai = aj;
            k = ai[0];
            l = ai[1];
            ak = l;
            al = h;
            h = ak;
            l = al;
            k = k.sqr(h);
            am = h;
            an = k;
            k = am;
            h = an;
            ap = k.div(l, h, g);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              ap = ap.$blk();
            }
            if (ap && ap.$blk !== undefined) {
              break s;
            }
            ao = ap;
            k = ao[0];
            l = ao[1];
            aq = l;
            ar = h;
            h = aq;
            l = ar;
            k = k.sqr(h);
            as = h;
            at = k;
            k = as;
            h = at;
            av = k.div(l, h, g);
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              av = av.$blk();
            }
            if (av && av.$blk !== undefined) {
              break s;
            }
            au = av;
            k = au[0];
            l = au[1];
            aw = l;
            ax = h;
            h = aw;
            l = ax;
            k = k.sqr(h);
            ay = h;
            az = k;
            k = ay;
            h = az;
            bb = k.div(l, h, g);
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              bb = bb.$blk();
            }
            if (bb && bb.$blk !== undefined) {
              break s;
            }
            ba = bb;
            k = ba[0];
            l = ba[1];
            bc = l;
            bd = h;
            h = bc;
            l = bd;
          case 10:
            k = k.mul(h, (be = ae >>> 28 >>> 0, ((be < 0 || be >= m.length) ? ($throwRuntimeError("index out of range"), undefined) : m[be])));
            bf = h;
            bg = k;
            k = bf;
            h = bg;
            bi = k.div(l, h, g);
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              bi = bi.$blk();
            }
            if (bi && bi.$blk !== undefined) {
              break s;
            }
            bh = bi;
            k = bh[0];
            l = bh[1];
            bj = l;
            bk = h;
            h = bj;
            l = bk;
            ae = (bl = (4), bl < 32 ? (ae << bl) : 0) >>> 0;
            af = af + (4) >> 0;
            $s = 7;
            continue;
          case 8:
            ad = ad - (1) >> 0;
            $s = 5;
            continue;
          case 6:
            $s = -1;
            return h.norm();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BX.prototype.expNNWindowed
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.ba = ba;
      $f.bb = bb;
      $f.bc = bc;
      $f.bd = bd;
      $f.be = be;
      $f.bf = bf;
      $f.bg = bg;
      $f.bh = bh;
      $f.bi = bi;
      $f.bj = bj;
      $f.bk = bk;
      $f.bl = bl;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(BX).prototype.expNNWindowed = function(e, f, g) {
      return this.$get().expNNWindowed(e, f, g);
    };
    BX.prototype.expNNMontgomery = function(e, f, g) {
      var aa, ab, ac, ad, ae, af, ag, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = this;
            i = g.$length;
            if (e.$length > i) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            k = (BX.nil).div(BX.nil, e, g);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            e = j[1];
          case 2:
            if (e.$length < i) {
              l = $makeSlice(BX, i);
              $copySlice(l, e);
              e = l;
            }
            m = 2 - (0 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 0]) >>> 0;
            n = (0 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 0]) - 1 >>> 0;
            o = 1;
            while (true) {
              if (!(o < 32)) {
                break;
              }
              n = $imul(n, (n)) >>> 0;
              m = $imul(m, (((n + 1 >>> 0)))) >>> 0;
              o = (p = (1), p < 32 ? (o << p) : 0) >> 0;
            }
            m = -m >>> 0;
            q = (BX.nil).setWord(1);
            r = (BX.nil).shl(q, ((($imul(($imul(2, i)), 32)) >>> 0)));
            t = (BX.nil).div(q, r, g);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            s = t;
            q = s[1];
            if (q.$length < i) {
              r = r.make(i);
              $copySlice(r, q);
              q = r;
            }
            u = $makeSlice(BX, i);
            (0 >= u.$length ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + 0] = 1);
            v = EA.zero();
            v[0] = v[0].montgomery(u, q, g, m, i);
            v[1] = v[1].montgomery(e, q, g, m, i);
            w = 2;
            while (true) {
              if (!(w < 16)) {
                break;
              }((w < 0 || w >= v.length) ? ($throwRuntimeError("index out of range"), undefined) : v[w] = ((w < 0 || w >= v.length) ? ($throwRuntimeError("index out of range"), undefined) : v[w]).montgomery((x = w - 1 >> 0, ((x < 0 || x >= v.length) ? ($throwRuntimeError("index out of range"), undefined) : v[x])), v[1], g, m, i));
              w = w + (1) >> 0;
            }
            h = h.make(i);
            $copySlice(h, v[0]);
            r = r.make(i);
            y = f.$length - 1 >> 0;
            while (true) {
              if (!(y >= 0)) {
                break;
              }
              z = ((y < 0 || y >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + y]);
              aa = 0;
              while (true) {
                if (!(aa < 32)) {
                  break;
                }
                if (!((y === (f.$length - 1 >> 0))) || !((aa === 0))) {
                  r = r.montgomery(h, h, g, m, i);
                  h = h.montgomery(r, r, g, m, i);
                  r = r.montgomery(h, h, g, m, i);
                  h = h.montgomery(r, r, g, m, i);
                }
                r = r.montgomery(h, (ab = z >>> 28 >>> 0, ((ab < 0 || ab >= v.length) ? ($throwRuntimeError("index out of range"), undefined) : v[ab])), g, m, i);
                ac = r;
                ad = h;
                h = ac;
                r = ad;
                z = (ae = (4), ae < 32 ? (z << ae) : 0) >>> 0;
                aa = aa + (4) >> 0;
              }
              y = y - (1) >> 0;
            }
            r = r.montgomery(h, u, g, m, i);
            if (r.cmp(g) >= 0) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            r = r.sub(r, g);
            if (r.cmp(g) >= 0) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            ag = (BX.nil).div(BX.nil, r, g);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              ag = ag.$blk();
            }
            if (ag && ag.$blk !== undefined) {
              break s;
            }
            af = ag;
            r = af[1];
          case 8:
          case 6:
            $s = -1;
            return r.norm();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BX.prototype.expNNMontgomery
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(BX).prototype.expNNMontgomery = function(e, f, g) {
      return this.$get().expNNMontgomery(e, f, g);
    };
    BX.prototype.bytes = function(e) {
      var e, f, g, h, i, j, k, l;
      f = 0;
      g = this;
      f = e.$length;
      h = g;
      i = 0;
      while (true) {
        if (!(i < h.$length)) {
          break;
        }
        j = ((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i]);
        k = 0;
        while (true) {
          if (!(k < 4)) {
            break;
          }
          f = f - (1) >> 0;
          ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f] = ((j << 24 >>> 24)));
          j = (l = (8), l < 32 ? (j >>> l) : 0) >>> 0;
          k = k + (1) >> 0;
        }
        i++;
      }
      while (true) {
        if (!(f < e.$length && (((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]) === 0))) {
          break;
        }
        f = f + (1) >> 0;
      }
      return f;
    };
    $ptrType(BX).prototype.bytes = function(e) {
      return this.$get().bytes(e);
    };
    CT = function(e) {
      var e;
      if (false) {
        return (($clone(G.BigEndian, G.bigEndian).Uint64(e).$low >>> 0));
      }
      return (($clone(G.BigEndian, G.bigEndian).Uint32(e) >>> 0));
    };
    BX.prototype.setBytes = function(e) {
      var e, f, g, h, i, j, k, l, m, n;
      f = this;
      f = f.make((g = (((e.$length + 4 >> 0) - 1 >> 0)) / 4, (g === g && g !== 1 / 0 && g !== -1 / 0) ? g >> 0 : $throwRuntimeError("integer divide by zero")));
      h = e.$length;
      i = 0;
      while (true) {
        if (!(h >= 4)) {
          break;
        }((i < 0 || i >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + i] = CT($subslice(e, (h - 4 >> 0), h)));
        h = h - (4) >> 0;
        i = i + (1) >> 0;
      }
      if (h > 0) {
        j = 0;
        k = 0;
        while (true) {
          if (!(h > 0)) {
            break;
          }
          j = (j | (((l = k, l < 32 ? ((((m = h - 1 >> 0, ((m < 0 || m >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + m])) >>> 0)) << l) : 0) >>> 0))) >>> 0;
          h = h - (1) >> 0;
          k = k + (8) >>> 0;
        }(n = f.$length - 1 >> 0, ((n < 0 || n >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + n] = j));
      }
      return f.norm();
    };
    $ptrType(BX).prototype.setBytes = function(e) {
      return this.$get().setBytes(e);
    };
    BX.prototype.sqrt = function(e) {
      var e, f, g, h, i, j, k, l, m, n, o, p, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (e.cmp(BY) <= 0) {
              $s = -1;
              return f.set(e);
            }
            if (CG(f, e)) {
              f = BX.nil;
            }
            g = BX.nil;
            h = BX.nil;
            i = g;
            j = h;
            i = f;
            i = i.setUint64(new $Uint64(0, 1));
            i = i.shl(i, ((((k = e.bitLen() / 2, (k === k && k !== 1 / 0 && k !== -1 / 0) ? k >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0) >>> 0)));
            l = 0;
          case 1:
            n = j.div(BX.nil, e, i);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            m = n;
            j = m[0];
            j = j.add(j, i);
            j = j.shr(j, 1);
            if (j.cmp(i) >= 0) {
              if ((l & 1) === 0) {
                $s = -1;
                return i;
              }
              $s = -1;
              return f.set(i);
            }
            o = j;
            p = i;
            i = o;
            j = p;
            l = l + (1) >> 0;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return BX.nil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BX.prototype.sqrt
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(BX).prototype.sqrt = function(e) {
      return this.$get().sqrt(e);
    };
    CU = function(e) {
      var e, f, g, h, i, j, k;
      f = 0;
      g = 0;
      h = e;
      i = 1;
      f = h;
      g = i;
      k = (j = 4294967295 / e, (j === j && j !== 1 / 0 && j !== -1 / 0) ? j >>> 0 : $throwRuntimeError("integer divide by zero"));
      while (true) {
        if (!(f <= k)) {
          break;
        }
        f = $imul(f, (e)) >>> 0;
        g = g + (1) >> 0;
      }
      return [f, g];
    };
    CV = function(e, f) {
      var e, f, g;
      g = 0;
      g = 1;
      while (true) {
        if (!(f > 0)) {
          break;
        }
        if (!(((f & 1) === 0))) {
          g = $imul(g, (e)) >>> 0;
        }
        e = $imul(e, (e)) >>> 0;
        f = (f >> $min((1), 31)) >> 0;
      }
      return g;
    };
    BX.prototype.scan = function(e, f, g) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            h = BX.nil;
            i = 0;
            j = 0;
            k = $ifaceNil;
            l = this;
            m = (f === 0) || !g && 2 <= f && f <= 62 || g && ((f === 2) || (f === 10) || (f === 16));
            if (!m) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            n = C.Sprintf("illegal number base %d", new DP([new $Int(f)]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            $panic(new $String(n));
          case 2:
            p = e.ReadByte();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            o = p;
            q = o[0];
            k = o[1];
            if (!($interfaceIsEqual(k, $ifaceNil))) {
              $s = -1;
              return [h, i, j, k];
            }
            i = f;
            if (f === 0) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            i = 10;
            if (q === 48) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            j = 1;
            s = e.ReadByte();
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            r = s;
            q = r[0];
            k = r[1];
            t = k;
            if ($interfaceIsEqual(t, $ifaceNil)) {
              $s = 11;
              continue;
            }
            if ($interfaceIsEqual(t, (E.EOF))) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 11:
            if (!g) {
              i = 8;
            }
            u = q;
            if ((u === (120)) || (u === (88))) {
              i = 16;
            } else if ((u === (98)) || (u === (66))) {
              i = 2;
            }
            v = i;
            if ((v === (16)) || (v === (2))) {
              $s = 16;
              continue;
            }
            if (v === (8)) {
              $s = 17;
              continue;
            }
            $s = 18;
            continue;
          case 16:
            j = 0;
            x = e.ReadByte();
            $s = 19;
          case 19:
            if ($c) {
              $c = false;
              x = x.$blk();
            }
            if (x && x.$blk !== undefined) {
              break s;
            }
            w = x;
            q = w[0];
            k = w[1];
            if (!($interfaceIsEqual(k, $ifaceNil))) {
              $s = -1;
              return [h, i, j, k];
            }
            $s = 18;
            continue;
          case 17:
            j = 0;
          case 18:
          case 15:
            $s = 14;
            continue;
          case 12:
            h = $subslice(l, 0, 0);
            k = $ifaceNil;
            $s = -1;
            return [h, i, j, k];
          case 13:
            $s = -1;
            return [h, i, j, k];
          case 14:
          case 9:
          case 8:
          case 6:
            l = $subslice(l, 0, 0);
            y = ((i >>> 0));
            z = CU(y);
            aa = z[0];
            ab = z[1];
            ac = 0;
            ad = 0;
            ae = -1;
          case 20:
            if (g && (q === 46)) {
              $s = 22;
              continue;
            }
            $s = 23;
            continue;
          case 22:
            g = false;
            ae = j;
            ag = e.ReadByte();
            $s = 24;
          case 24:
            if ($c) {
              $c = false;
              ag = ag.$blk();
            }
            if (ag && ag.$blk !== undefined) {
              break s;
            }
            af = ag;
            q = af[0];
            k = af[1];
            if (!($interfaceIsEqual(k, $ifaceNil))) {
              if ($interfaceIsEqual(k, E.EOF)) {
                k = $ifaceNil;
                $s = 21;
                continue;
              }
              $s = -1;
              return [h, i, j, k];
            }
          case 23:
            ah = 0;
            if (48 <= q && q <= 57) {
              ah = (((q - 48 << 24 >>> 24) >>> 0));
            } else if (97 <= q && q <= 122) {
              ah = ((((q - 97 << 24 >>> 24) + 10 << 24 >>> 24) >>> 0));
            } else if (65 <= q && q <= 90) {
              if (i <= 36) {
                ah = ((((q - 65 << 24 >>> 24) + 10 << 24 >>> 24) >>> 0));
              } else {
                ah = ((((q - 65 << 24 >>> 24) + 36 << 24 >>> 24) >>> 0));
              }
            } else {
              ah = 63;
            }
            if (ah >= y) {
              $s = 25;
              continue;
            }
            $s = 26;
            continue;
          case 25:
            ai = e.UnreadByte();
            $s = 27;
          case 27:
            if ($c) {
              $c = false;
              ai = ai.$blk();
            }
            if (ai && ai.$blk !== undefined) {
              break s;
            }
            ai;
            $s = 21;
            continue;
          case 26:
            j = j + (1) >> 0;
            ac = ($imul(ac, y) >>> 0) + ah >>> 0;
            ad = ad + (1) >> 0;
            if (ad === ab) {
              l = l.mulAddWW(l, aa, ac);
              ac = 0;
              ad = 0;
            }
            ak = e.ReadByte();
            $s = 28;
          case 28:
            if ($c) {
              $c = false;
              ak = ak.$blk();
            }
            if (ak && ak.$blk !== undefined) {
              break s;
            }
            aj = ak;
            q = aj[0];
            k = aj[1];
            if (!($interfaceIsEqual(k, $ifaceNil))) {
              if ($interfaceIsEqual(k, E.EOF)) {
                k = $ifaceNil;
                $s = 21;
                continue;
              }
              $s = -1;
              return [h, i, j, k];
            }
            $s = 20;
            continue;
          case 21:
            if (j === 0) {
              if ((f === 0) && (i === 8)) {
                j = 1;
                i = 10;
              } else if (!((f === 0)) || !((i === 8))) {
                k = J.New("syntax error scanning number");
              }
              $s = -1;
              return [h, i, j, k];
            }
            if (ad > 0) {
              l = l.mulAddWW(l, CV(y, ad), ac);
            }
            h = l.norm();
            if (ae >= 0) {
              j = ae - j >> 0;
            }
            $s = -1;
            return [h, i, j, k];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BX.prototype.scan
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(BX).prototype.scan = function(e, f, g) {
      return this.$get().scan(e, f, g);
    };
    BX.prototype.utoa = function(e) {
      var e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            g = f.itoa(false, e);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BX.prototype.utoa
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(BX).prototype.utoa = function(e) {
      return this.$get().utoa(e);
    };
    BX.prototype.itoa = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if (f < 2 || f > 62) {
              $panic(new $String("invalid base"));
            }
            if (g.$length === 0) {
              $s = -1;
              return (new DT($stringToBytes("0")));
            }
            h = (((g.bitLen()) / D.Log2((f)) >> 0)) + 1 >> 0;
            if (e) {
              h = h + (1) >> 0;
            }
            i = $makeSlice(DT, h);
            j = ((f >>> 0));
            if (j === ((j & (-j >>> 0)) >>> 0)) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            k = ((B.TrailingZeros(((j >>> 0))) >>> 0));
            m = ((((l = k, l < 32 ? (1 << l) : 0) >>> 0) - 1 >>> 0));
            n = (0 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 0]);
            o = 32;
            p = 1;
            while (true) {
              if (!(p < g.$length)) {
                break;
              }
              while (true) {
                if (!(o >= k)) {
                  break;
                }
                h = h - (1) >> 0;
                ((h < 0 || h >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + h] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charCodeAt(((n & m) >>> 0)));
                n = (q = (k), q < 32 ? (n >>> q) : 0) >>> 0;
                o = o - (k) >>> 0;
              }
              if (o === 0) {
                n = ((p < 0 || p >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + p]);
                o = 32;
              } else {
                n = (n | (((r = o, r < 32 ? (((p < 0 || p >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + p]) << r) : 0) >>> 0))) >>> 0;
                h = h - (1) >> 0;
                ((h < 0 || h >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + h] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charCodeAt(((n & m) >>> 0)));
                n = (s = ((k - o >>> 0)), s < 32 ? (((p < 0 || p >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + p]) >>> s) : 0) >>> 0;
                o = 32 - ((k - o >>> 0)) >>> 0;
              }
              p = p + (1) >> 0;
            }
            while (true) {
              if (!(!((n === 0)))) {
                break;
              }
              h = h - (1) >> 0;
              ((h < 0 || h >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + h] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charCodeAt(((n & m) >>> 0)));
              n = (t = (k), t < 32 ? (n >>> t) : 0) >>> 0;
            }
            $s = 3;
            continue;
          case 2:
            u = CU(j);
            v = u[0];
            w = u[1];
            x = CZ(g.$length, j, w, v);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              x = x.$blk();
            }
            if (x && x.$blk !== undefined) {
              break s;
            }
            y = x;
            z = (BX.nil).set(g);
            $r = z.convertWords(i, j, w, v, y);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            h = 0;
            while (true) {
              if (!(((h < 0 || h >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + h]) === 48)) {
                break;
              }
              h = h + (1) >> 0;
            }
          case 3:
            if (e) {
              h = h - (1) >> 0;
              ((h < 0 || h >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + h] = 45);
            }
            $s = -1;
            return $subslice(i, h);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BX.prototype.itoa
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(BX).prototype.itoa = function(e, f) {
      return this.$get().itoa(e, f);
    };
    BX.prototype.convertWords = function(e, f, g, h, i) {
      var aa, ab, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            j = this;
            if (!(i === EB.nil)) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            k = BX.nil;
            l = i.$length - 1 >> 0;
          case 3:
            if (!(j.$length > CW)) {
              $s = 4;
              continue;
            }
            m = j.bitLen();
            n = m >> 1 >> 0;
            while (true) {
              if (!(l > 0 && (o = l - 1 >> 0, ((o < 0 || o >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + o])).nbits > n)) {
                break;
              }
              l = l - (1) >> 0;
            }
            if (((l < 0 || l >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + l]).nbits >= m && ((l < 0 || l >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + l]).bbb.cmp(j) >= 0) {
              l = l - (1) >> 0;
              if (l < 0) {
                $panic(new $String("internal inconsistency"));
              }
            }
            q = j.div(k, j, ((l < 0 || l >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + l]).bbb);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            p = q;
            j = p[0];
            k = p[1];
            r = e.$length - ((l < 0 || l >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + l]).ndigits >> 0;
            $r = k.convertWords($subslice(e, r), f, g, h, $subslice(i, 0, l));
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            e = $subslice(e, 0, r);
            $s = 3;
            continue;
          case 4:
          case 2:
            s = e.$length;
            t = 0;
            if (f === 10) {
              while (true) {
                if (!(j.$length > 0)) {
                  break;
                }
                u = j.divW(j, h);
                j = u[0];
                t = u[1];
                v = 0;
                while (true) {
                  if (!(v < g && s > 0)) {
                    break;
                  }
                  s = s - (1) >> 0;
                  x = (w = t / 10, (w === w && w !== 1 / 0 && w !== -1 / 0) ? w >>> 0 : $throwRuntimeError("integer divide by zero"));
                  ((s < 0 || s >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + s] = (48 + (((t - ($imul(x, 10) >>> 0) >>> 0) << 24 >>> 24)) << 24 >>> 24));
                  t = x;
                  v = v + (1) >> 0;
                }
              }
            } else {
              while (true) {
                if (!(j.$length > 0)) {
                  break;
                }
                y = j.divW(j, h);
                j = y[0];
                t = y[1];
                z = 0;
                while (true) {
                  if (!(z < g && s > 0)) {
                    break;
                  }
                  s = s - (1) >> 0;
                  ((s < 0 || s >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + s] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charCodeAt((aa = t % f, aa === aa ? aa : $throwRuntimeError("integer divide by zero"))));
                  t = (ab = t / (f), (ab === ab && ab !== 1 / 0 && ab !== -1 / 0) ? ab >>> 0 : $throwRuntimeError("integer divide by zero"));
                  z = z + (1) >> 0;
                }
              }
            }
            while (true) {
              if (!(s > 0)) {
                break;
              }
              s = s - (1) >> 0;
              ((s < 0 || s >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + s] = 48);
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BX.prototype.convertWords
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(BX).prototype.convertWords = function(e, f, g, h, i) {
      return this.$get().convertWords(e, f, g, h, i);
    };
    BX.prototype.expWW = function(e, f) {
      var e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = g.expNN((BX.nil).setWord(e), (BX.nil).setWord(f), BX.nil);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return h;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BX.prototype.expWW
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(BX).prototype.expWW = function(e, f) {
      return this.$get().expWW(e, f);
    };
    CZ = function(e, f, g, h) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if ((CW === 0) || e <= CW) {
              $s = -1;
              return EB.nil;
            }
            i = 1;
            j = CW;
            while (true) {
              if (!(j < (e >> 1 >> 0) && i < 64)) {
                break;
              }
              i = i + (1) >> 0;
              j = (k = (1), k < 32 ? (j << k) : 0) >> 0;
            }
            l = EB.nil;
            if (f === 10) {
              CY.Mutex.Lock();
              l = $subslice(new EB(CY.table), 0, i);
            } else {
              l = $makeSlice(EB, i);
            }
            if ((m = i - 1 >> 0, ((m < 0 || m >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + m])).ndigits === 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            n = BX.nil;
            o = 0;
          case 3:
            if (!(o < i)) {
              $s = 4;
              continue;
            }
            if (((o < 0 || o >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + o]).ndigits === 0) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            if (o === 0) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            p = (BX.nil).expWW(h, ((CW >>> 0)));
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }(0 >= l.$length ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + 0]).bbb = p;
            (0 >= l.$length ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + 0]).ndigits = $imul(g, CW);
            $s = 9;
            continue;
          case 8:
            ((o < 0 || o >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + o]).bbb = (BX.nil).sqr((q = o - 1 >> 0, ((q < 0 || q >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + q])).bbb);
            ((o < 0 || o >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + o]).ndigits = $imul(2, (r = o - 1 >> 0, ((r < 0 || r >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + r])).ndigits);
          case 9:
            n = (BX.nil).set(((o < 0 || o >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + o]).bbb);
            while (true) {
              if (!(AK($subslice(new DV(n.$array), n.$offset, n.$offset + n.$length), $subslice(new DV(n.$array), n.$offset, n.$offset + n.$length), f, 0) === 0)) {
                break;
              }((o < 0 || o >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + o]).bbb = ((o < 0 || o >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + o]).bbb.set(n);
              ((o < 0 || o >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + o]).ndigits = ((o < 0 || o >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + o]).ndigits + (1) >> 0;
            }((o < 0 || o >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + o]).nbits = ((o < 0 || o >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + o]).bbb.bitLen();
          case 6:
            o = o + (1) >> 0;
            $s = 3;
            continue;
          case 4:
          case 2:
            if (f === 10) {
              CY.Mutex.Unlock();
            }
            $s = -1;
            return l;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: CZ
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.ptr.prototype.ProbablyPrime = function(e) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (e < 0) {
              $panic(new $String("negative n for ProbablyPrime"));
            }
            if (f.neg || (f.abs.$length === 0)) {
              $s = -1;
              return false;
            }
            h = (g = f.abs, (0 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 0]));
            if ((f.abs.$length === 1) && h < 64) {
              $s = -1;
              return !((i = (j = $shiftLeft64(new $Uint64(0, 1), h), new $Uint64(673221152 & j.$high, (2693408940 & j.$low) >>> 0)), (i.$high === 0 && i.$low === 0)));
            }
            if (((h & 1) >>> 0) === 0) {
              $s = -1;
              return false;
            }
            k = 0;
            l = 0;
            m = k;
            n = l;
            o = 32;
            if (o === (32)) {
              m = ((f.abs.modW(4127218095) >>> 0));
              n = ((f.abs.modW(3948078067) >>> 0));
            } else if (o === (64)) {
              p = f.abs.modW(820596253);
              m = (((q = p % 4127218095, q === q ? q : $throwRuntimeError("integer divide by zero")) >>> 0));
              n = (((r = p % 3948078067, r === r ? r : $throwRuntimeError("integer divide by zero")) >>> 0));
            } else {
              $panic(new $String("math/big: invalid word size"));
            }
            if (((s = m % 3, s === s ? s : $throwRuntimeError("integer divide by zero")) === 0) || ((t = m % 5, t === t ? t : $throwRuntimeError("integer divide by zero")) === 0) || ((u = m % 7, u === u ? u : $throwRuntimeError("integer divide by zero")) === 0) || ((v = m % 11, v === v ? v : $throwRuntimeError("integer divide by zero")) === 0) || ((w = m % 13, w === w ? w : $throwRuntimeError("integer divide by zero")) === 0) || ((x = m % 17, x === x ? x : $throwRuntimeError("integer divide by zero")) === 0) || ((y = m % 19, y === y ? y : $throwRuntimeError("integer divide by zero")) === 0) || ((z = m % 23, z === z ? z : $throwRuntimeError("integer divide by zero")) === 0) || ((aa = m % 37, aa === aa ? aa : $throwRuntimeError("integer divide by zero")) === 0) || ((ab = n % 29, ab === ab ? ab : $throwRuntimeError("integer divide by zero")) === 0) || ((ac = n % 31, ac === ac ? ac : $throwRuntimeError("integer divide by zero")) === 0) || ((ad = n % 41, ad === ad ? ad : $throwRuntimeError("integer divide by zero")) === 0) || ((ae = n % 43, ae === ae ? ae : $throwRuntimeError("integer divide by zero")) === 0) || ((af = n % 47, af === af ? af : $throwRuntimeError("integer divide by zero")) === 0) || ((ag = n % 53, ag === ag ? ag : $throwRuntimeError("integer divide by zero")) === 0)) {
              $s = -1;
              return false;
            }
            ai = f.abs.probablyPrimeMillerRabin(e + 1 >> 0, true);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              ai = ai.$blk();
            }
            if (ai && ai.$blk !== undefined) {
              break s;
            }
            if (!(ai)) {
              ah = false;
              $s = 1;
              continue s;
            }
            aj = f.abs.probablyPrimeLucas();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              aj = aj.$blk();
            }
            if (aj && aj.$blk !== undefined) {
              break s;
            }
            ah = aj;
          case 1:
            $s = -1;
            return ah;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BL.ptr.prototype.ProbablyPrime
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    BL.prototype.ProbablyPrime = function(e) {
      return this.$val.ProbablyPrime(e);
    };
    BX.prototype.probablyPrimeMillerRabin = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = (BX.nil).sub(g, BY);
            i = h.trailingZeroBits();
            j = (BX.nil).shr(h, i);
            k = (BX.nil).sub(h, BZ);
            m = I.New(I.NewSource(((l = (0 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 0]), new $Int64(0, l.constructor === Number ? l : 1)))));
            n = BX.nil;
            o = BX.nil;
            p = BX.nil;
            q = n;
            r = o;
            s = p;
            t = k.bitLen();
            u = 0;
          case 1:
            if (!(u < e)) {
              $s = 2;
              continue;
            }
            if ((u === (e - 1 >> 0)) && f) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            q = q.set(BZ);
            $s = 5;
            continue;
          case 4:
            v = q.random(m, k, t);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            q = v;
            q = q.add(q, BZ);
          case 5:
            w = r.expNN(q, j, g);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              w = w.$blk();
            }
            if (w && w.$blk !== undefined) {
              break s;
            }
            r = w;
            if ((r.cmp(BY) === 0) || (r.cmp(h) === 0)) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            u = u + (1) >> 0;
            $s = 1;
            continue;
          case 9:
            x = 1;
          case 10:
            if (!(x < i)) {
              $s = 11;
              continue;
            }
            r = r.sqr(r);
            z = s.div(r, r, g);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            y = z;
            s = y[0];
            r = y[1];
            if (r.cmp(h) === 0) {
              u = u + (1) >> 0;
              $s = 1;
              continue s;
            }
            if (r.cmp(BY) === 0) {
              $s = -1;
              return false;
            }
            x = x + (1) >>> 0;
            $s = 10;
            continue;
          case 11:
            $s = -1;
            return false;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return true;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BX.prototype.probablyPrimeMillerRabin
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(BX).prototype.probablyPrimeMillerRabin = function(e, f) {
      return this.$get().probablyPrimeMillerRabin(e, f);
    };
    BX.prototype.probablyPrimeLucas = function() {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            if ((e.$length === 0) || (e.cmp(BY) === 0)) {
              $s = -1;
              return false;
            }
            if ((((0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]) & 1) >>> 0) === 0) {
              $s = -1;
              return e.cmp(BZ) === 0;
            }
            f = 3;
            g = new BX([1]);
            h = (BX.nil);
            i = new BL.ptr(false, g);
            j = new BL.ptr(false, e);
          case 1:
            if (f > 10000) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            k = j.String();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            $panic(new $String("math/big: internal error: cannot find (D/n) = -1 for " + k));
          case 4:
            (0 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 0] = (($imul(f, f) >>> 0) - 4 >>> 0));
            l = BT(i, j);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            m = l;
            if (m === -1) {
              $s = 2;
              continue;
            }
            if (m === 0) {
              $s = -1;
              return (e.$length === 1) && ((0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]) === (f + 2 >>> 0));
            }
            if (f === 40) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            n = h.sqrt(e);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            h = n;
            h = h.sqr(h);
            if (h.cmp(e) === 0) {
              $s = -1;
              return false;
            }
          case 8:
            f = f + (1) >>> 0;
            $s = 1;
            continue;
          case 2:
            o = (BX.nil).add(e, BY);
            p = ((o.trailingZeroBits() >> 0));
            o = o.shr(o, ((p >>> 0)));
            q = (BX.nil).sub(e, BZ);
            r = (BX.nil).setWord(f);
            s = (BX.nil).setWord(2);
            t = (BX.nil).setWord(f);
            u = (BX.nil);
            v = (o.bitLen());
          case 10:
            if (!(v >= 0)) {
              $s = 11;
              continue;
            }
            if (!((o.bit(((v >>> 0))) === 0))) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 12:
            h = h.mul(s, t);
            h = h.add(h, e);
            h = h.sub(h, r);
            x = u.div(s, h, e);
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              x = x.$blk();
            }
            if (x && x.$blk !== undefined) {
              break s;
            }
            w = x;
            u = w[0];
            s = w[1];
            h = h.sqr(t);
            h = h.add(h, q);
            z = u.div(t, h, e);
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            y = z;
            u = y[0];
            t = y[1];
            $s = 14;
            continue;
          case 13:
            h = h.mul(s, t);
            h = h.add(h, e);
            h = h.sub(h, r);
            ab = u.div(t, h, e);
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              ab = ab.$blk();
            }
            if (ab && ab.$blk !== undefined) {
              break s;
            }
            aa = ab;
            u = aa[0];
            t = aa[1];
            h = h.sqr(s);
            h = h.add(h, q);
            ad = u.div(s, h, e);
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              ad = ad.$blk();
            }
            if (ad && ad.$blk !== undefined) {
              break s;
            }
            ac = ad;
            u = ac[0];
            s = ac[1];
          case 14:
            v = v - (1) >> 0;
            $s = 10;
            continue;
          case 11:
            if ((s.cmp(BZ) === 0) || (s.cmp(q) === 0)) {
              $s = 19;
              continue;
            }
            $s = 20;
            continue;
          case 19:
            ae = h.mul(s, r);
            af = u.shl(t, 1);
            if (ae.cmp(af) < 0) {
              ag = af;
              ah = ae;
              ae = ag;
              af = ah;
            }
            ae = ae.sub(ae, af);
            ai = t;
            t = BX.nil;
            $unused(t);
            ak = af.div(ai, ae, e);
            $s = 21;
          case 21:
            if ($c) {
              $c = false;
              ak = ak.$blk();
            }
            if (ak && ak.$blk !== undefined) {
              break s;
            }
            aj = ak;
            af = aj[0];
            ai = aj[1];
            if (ai.$length === 0) {
              $s = -1;
              return true;
            }
          case 20:
            al = 0;
          case 22:
            if (!(al < (p - 1 >> 0))) {
              $s = 23;
              continue;
            }
            if (s.$length === 0) {
              $s = -1;
              return true;
            }
            if ((s.$length === 1) && ((0 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 0]) === 2)) {
              $s = -1;
              return false;
            }
            h = h.sqr(s);
            h = h.sub(h, BZ);
            an = u.div(s, h, e);
            $s = 24;
          case 24:
            if ($c) {
              $c = false;
              an = an.$blk();
            }
            if (an && an.$blk !== undefined) {
              break s;
            }
            am = an;
            u = am[0];
            s = am[1];
            al = al + (1) >> 0;
            $s = 22;
            continue;
          case 23:
            $s = -1;
            return false;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: BX.prototype.probablyPrimeLucas
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(BX).prototype.probablyPrimeLucas = function() {
      return this.$get().probablyPrimeLucas();
    };
    DA.ptr.prototype.SetFloat64 = function(e) {
      var e, f, g, h, i, j, k, l, m, n, o, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            g = D.Float64bits(e);
            h = new $Uint64(g.$high & 1048575, (g.$low & 4294967295) >>> 0);
            j = (((i = $shiftRightUint64(g, 52), new $Uint64(i.$high & 0, (i.$low & 2047) >>> 0)).$low >> 0));
            k = j;
            if (k === (2047)) {
              $s = -1;
              return DX.nil;
            } else if (k === (0)) {
              j = j - (1022) >> 0;
            } else {
              h = (l = new $Uint64(1048576, 0), new $Uint64(h.$high | l.$high, (h.$low | l.$low) >>> 0));
              j = j - (1023) >> 0;
            }
            m = 52 - j >> 0;
            while (true) {
              if (!((n = new $Uint64(h.$high & 0, (h.$low & 1) >>> 0), (n.$high === 0 && n.$low === 0)) && m > 0)) {
                break;
              }
              h = $shiftRightUint64(h, (1));
              m = m - (1) >> 0;
            }
            f.a.SetUint64(h);
            f.a.neg = e < 0;
            f.b.Set(BM);
            if (m > 0) {
              f.b.Lsh(f.b, ((m >>> 0)));
            } else {
              f.a.Lsh(f.a, ((-m >>> 0)));
            }
            o = f.norm();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return o;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.SetFloat64
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.SetFloat64 = function(e) {
      return this.$val.SetFloat64(e);
    };
    DC = function(e, f) {
      var aa, ab, ac, ad, ae, af, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = 0;
            h = false;
            i = e.bitLen();
            if (i === 0) {
              j = 0;
              k = true;
              g = j;
              h = k;
              $s = -1;
              return [g, h];
            }
            l = f.bitLen();
            if (l === 0) {
              $panic(new $String("division by zero"));
            }
            m = i - l >> 0;
            n = BX.nil;
            o = BX.nil;
            p = n;
            q = o;
            p = p.set(e);
            q = q.set(f);
            r = 25 - m >> 0;
            if (r > 0) {
              p = p.shl(p, ((r >>> 0)));
            } else if (r < 0) {
              q = q.shl(q, ((-r >>> 0)));
            }
            s = BX.nil;
            u = s.div(p, p, q);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              u = u.$blk();
            }
            if (u && u.$blk !== undefined) {
              break s;
            }
            t = u;
            s = t[0];
            v = t[1];
            w = BO(s);
            x = v.$length > 0;
            if ((w >>> 25 >>> 0) === 1) {
              if (((w & 1) >>> 0) === 1) {
                x = true;
              }
              w = (y = (1), y < 32 ? (w >>> y) : 0) >>> 0;
              m = m + (1) >> 0;
            }
            if (!(((w >>> 24 >>> 0) === 1))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            z = C.Sprintf("expected exactly %d bits of result", new DP([new $Int(25)]));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            $panic(new $String(z));
          case 3:
            if (-149 <= m && m <= -126) {
              aa = (((-126 - ((m - 1 >> 0)) >> 0) >>> 0));
              ac = (w & ((((ab = aa, ab < 32 ? (1 << ab) : 0) >>> 0) - 1 >>> 0))) >>> 0;
              x = x || !((ac === 0));
              w = (ad = (aa), ad < 32 ? (w >>> ad) : 0) >>> 0;
              m = -125;
            }
            h = !x;
            if (!((((w & 1) >>> 0) === 0))) {
              h = false;
              if (x || !((((w & 2) >>> 0) === 0))) {
                w = w + (1) >>> 0;
                if (w >= 33554432) {
                  w = (ae = (1), ae < 32 ? (w >>> ae) : 0) >>> 0;
                  m = m + (1) >> 0;
                }
              }
            }
            w = (af = (1), af < 32 ? (w >>> af) : 0) >>> 0;
            g = ($fround(D.Ldexp((w), m - 24 >> 0)));
            if (D.IsInf((g), 0)) {
              h = false;
            }
            $s = -1;
            return [g, h];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DC
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DD = function(e, f) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = 0;
            h = false;
            i = e.bitLen();
            if (i === 0) {
              j = 0;
              k = true;
              g = j;
              h = k;
              $s = -1;
              return [g, h];
            }
            l = f.bitLen();
            if (l === 0) {
              $panic(new $String("division by zero"));
            }
            m = i - l >> 0;
            n = BX.nil;
            o = BX.nil;
            p = n;
            q = o;
            p = p.set(e);
            q = q.set(f);
            r = 54 - m >> 0;
            if (r > 0) {
              p = p.shl(p, ((r >>> 0)));
            } else if (r < 0) {
              q = q.shl(q, ((-r >>> 0)));
            }
            s = BX.nil;
            u = s.div(p, p, q);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              u = u.$blk();
            }
            if (u && u.$blk !== undefined) {
              break s;
            }
            t = u;
            s = t[0];
            v = t[1];
            w = BP(s);
            x = v.$length > 0;
            if ((y = $shiftRightUint64(w, 54), (y.$high === 0 && y.$low === 1))) {
              if ((z = new $Uint64(w.$high & 0, (w.$low & 1) >>> 0), (z.$high === 0 && z.$low === 1))) {
                x = true;
              }
              w = $shiftRightUint64(w, (1));
              m = m + (1) >> 0;
            }
            if (!((aa = $shiftRightUint64(w, 53), (aa.$high === 0 && aa.$low === 1)))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            ab = C.Sprintf("expected exactly %d bits of result", new DP([new $Int(54)]));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              ab = ab.$blk();
            }
            if (ab && ab.$blk !== undefined) {
              break s;
            }
            $panic(new $String(ab));
          case 3:
            if (-1074 <= m && m <= -1022) {
              ac = (((-1022 - ((m - 1 >> 0)) >> 0) >>> 0));
              af = (ad = (ae = $shiftLeft64(new $Uint64(0, 1), ac), new $Uint64(ae.$high - 0, ae.$low - 1)), new $Uint64(w.$high & ad.$high, (w.$low & ad.$low) >>> 0));
              x = x || !((af.$high === 0 && af.$low === 0));
              w = $shiftRightUint64(w, (ac));
              m = -1021;
            }
            h = !x;
            if (!((ag = new $Uint64(w.$high & 0, (w.$low & 1) >>> 0), (ag.$high === 0 && ag.$low === 0)))) {
              h = false;
              if (x || !((ah = new $Uint64(w.$high & 0, (w.$low & 2) >>> 0), (ah.$high === 0 && ah.$low === 0)))) {
                w = (ai = new $Uint64(0, 1), new $Uint64(w.$high + ai.$high, w.$low + ai.$low));
                if ((w.$high > 4194304 || (w.$high === 4194304 && w.$low >= 0))) {
                  w = $shiftRightUint64(w, (1));
                  m = m + (1) >> 0;
                }
              }
            }
            w = $shiftRightUint64(w, (1));
            g = D.Ldexp(($flatten64(w)), m - 53 >> 0);
            if (D.IsInf(g, 0)) {
              h = false;
            }
            $s = -1;
            return [g, h];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DD
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.ptr.prototype.Float32 = function() {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = 0;
            f = false;
            g = this;
            h = g.b.abs;
            if (h.$length === 0) {
              h = h.set(BY);
            }
            j = DC(g.a.abs, h);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            i = j;
            e = i[0];
            f = i[1];
            if (g.a.neg) {
              e = -e;
            }
            $s = -1;
            return [e, f];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.Float32
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.Float32 = function() {
      return this.$val.Float32();
    };
    DA.ptr.prototype.Float64 = function() {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = 0;
            f = false;
            g = this;
            h = g.b.abs;
            if (h.$length === 0) {
              h = h.set(BY);
            }
            j = DD(g.a.abs, h);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            i = j;
            e = i[0];
            f = i[1];
            if (g.a.neg) {
              e = -e;
            }
            $s = -1;
            return [e, f];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.Float64
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.Float64 = function() {
      return this.$val.Float64();
    };
    DA.ptr.prototype.SetFrac = function(e, f) {
      var e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            g.a.neg = !(e.neg === f.neg);
            h = f.abs;
            if (h.$length === 0) {
              $panic(new $String("division by zero"));
            }
            if (g.a === f || CG(g.a.abs, h)) {
              h = (BX.nil).set(h);
            }
            g.a.abs = g.a.abs.set(e.abs);
            g.b.abs = g.b.abs.set(h);
            i = g.norm();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return i;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.SetFrac
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.SetFrac = function(e, f) {
      return this.$val.SetFrac(e, f);
    };
    DA.ptr.prototype.SetFrac64 = function(e, f) {
      var e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            g.a.SetInt64(e);
            if ((f.$high === 0 && f.$low === 0)) {
              $panic(new $String("division by zero"));
            }
            if ((f.$high < 0 || (f.$high === 0 && f.$low < 0))) {
              f = new $Int64(-f.$high, -f.$low);
              g.a.neg = !g.a.neg;
            }
            g.b.abs = g.b.abs.setUint64((new $Uint64(f.$high, f.$low)));
            h = g.norm();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return h;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.SetFrac64
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.SetFrac64 = function(e, f) {
      return this.$val.SetFrac64(e, f);
    };
    DA.ptr.prototype.SetInt = function(e) {
      var e, f;
      f = this;
      f.a.Set(e);
      f.b.abs = $subslice(f.b.abs, 0, 0);
      return f;
    };
    DA.prototype.SetInt = function(e) {
      return this.$val.SetInt(e);
    };
    DA.ptr.prototype.SetInt64 = function(e) {
      var e, f;
      f = this;
      f.a.SetInt64(e);
      f.b.abs = $subslice(f.b.abs, 0, 0);
      return f;
    };
    DA.prototype.SetInt64 = function(e) {
      return this.$val.SetInt64(e);
    };
    DA.ptr.prototype.Set = function(e) {
      var e, f;
      f = this;
      if (!(f === e)) {
        f.a.Set(e.a);
        f.b.Set(e.b);
      }
      return f;
    };
    DA.prototype.Set = function(e) {
      return this.$val.Set(e);
    };
    DA.ptr.prototype.Abs = function(e) {
      var e, f;
      f = this;
      f.Set(e);
      f.a.neg = false;
      return f;
    };
    DA.prototype.Abs = function(e) {
      return this.$val.Abs(e);
    };
    DA.ptr.prototype.Neg = function(e) {
      var e, f;
      f = this;
      f.Set(e);
      f.a.neg = f.a.abs.$length > 0 && !f.a.neg;
      return f;
    };
    DA.prototype.Neg = function(e) {
      return this.$val.Neg(e);
    };
    DA.ptr.prototype.Inv = function(e) {
      var e, f, g, h, i, j;
      f = this;
      if (e.a.abs.$length === 0) {
        $panic(new $String("division by zero"));
      }
      f.Set(e);
      g = f.b.abs;
      if (g.$length === 0) {
        g = g.set(BY);
      }
      h = f.a.abs;
      if (h.cmp(BY) === 0) {
        h = $subslice(h, 0, 0);
      }
      i = g;
      j = h;
      f.a.abs = i;
      f.b.abs = j;
      return f;
    };
    DA.prototype.Inv = function(e) {
      return this.$val.Inv(e);
    };
    DA.ptr.prototype.Sign = function() {
      var e;
      e = this;
      return e.a.Sign();
    };
    DA.prototype.Sign = function() {
      return this.$val.Sign();
    };
    DA.ptr.prototype.IsInt = function() {
      var e;
      e = this;
      return (e.b.abs.$length === 0) || (e.b.abs.cmp(BY) === 0);
    };
    DA.prototype.IsInt = function() {
      return this.$val.IsInt();
    };
    DA.ptr.prototype.Num = function() {
      var e;
      e = this;
      return e.a;
    };
    DA.prototype.Num = function() {
      return this.$val.Num();
    };
    DA.ptr.prototype.Denom = function() {
      var e;
      e = this;
      e.b.neg = false;
      if (e.b.abs.$length === 0) {
        e.b.abs = e.b.abs.set(BY);
      }
      return e.b;
    };
    DA.prototype.Denom = function() {
      return this.$val.Denom();
    };
    DA.ptr.prototype.norm = function() {
      var e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            if ((e.a.abs.$length === 0)) {
              $s = 2;
              continue;
            }
            if ((e.b.abs.$length === 0)) {
              $s = 3;
              continue;
            }
            if ((e.b.abs.cmp(BY) === 0)) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 2:
            e.a.neg = false;
            e.b.abs = $subslice(e.b.abs, 0, 0);
            $s = 6;
            continue;
          case 3:
            $s = 6;
            continue;
          case 4:
            e.b.abs = $subslice(e.b.abs, 0, 0);
            $s = 6;
            continue;
          case 5:
            f = e.a.neg;
            e.a.neg = false;
            e.b.neg = false;
            g = BN(new $Int64(0, 0)).lehmerGCD(DW.nil, DW.nil, e.a, e.b);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = g;
            if (!((h.Cmp(BM) === 0))) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            j = e.a.abs.div(BX.nil, e.a.abs, h.abs);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            i = j;
            e.a.abs = i[0];
            l = e.b.abs.div(BX.nil, e.b.abs, h.abs);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            k = l;
            e.b.abs = k[0];
            if (e.b.abs.cmp(BY) === 0) {
              e.b.abs = $subslice(e.b.abs, 0, 0);
            }
          case 9:
            e.a.neg = f;
          case 6:
          case 1:
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.norm
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.norm = function() {
      return this.$val.norm();
    };
    DE = function(e, f, g) {
      var e, f, g;
      if ((f.$length === 0)) {
        return e.set(g);
      } else if ((g.$length === 0)) {
        return e.set(f);
      }
      return e.mul(f, g);
    };
    DF = function(e, f) {
      var e, f, g;
      g = new BL.ptr(false, BX.nil);
      if (f.$length === 0) {
        return g.Set(e);
      }
      g.abs = g.abs.mul(e.abs, f);
      g.neg = e.neg;
      return g;
    };
    DA.ptr.prototype.Cmp = function(e) {
      var e, f;
      f = this;
      return DF(f.a, e.b.abs).Cmp(DF(e.a, f.b.abs));
    };
    DA.prototype.Cmp = function(e) {
      return this.$val.Cmp(e);
    };
    DA.ptr.prototype.Add = function(e, f) {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = DF(e.a, f.b.abs);
            i = DF(f.a, e.b.abs);
            g.a.Add(h, i);
            g.b.abs = DE(g.b.abs, e.b.abs, f.b.abs);
            j = g.norm();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return j;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.Add
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.Add = function(e, f) {
      return this.$val.Add(e, f);
    };
    DA.ptr.prototype.Sub = function(e, f) {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = DF(e.a, f.b.abs);
            i = DF(f.a, e.b.abs);
            g.a.Sub(h, i);
            g.b.abs = DE(g.b.abs, e.b.abs, f.b.abs);
            j = g.norm();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return j;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.Sub
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.Sub = function(e, f) {
      return this.$val.Sub(e, f);
    };
    DA.ptr.prototype.Mul = function(e, f) {
      var e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if (e === f) {
              g.a.neg = false;
              g.a.abs = g.a.abs.sqr(e.a.abs);
              g.b.abs = g.b.abs.sqr(e.b.abs);
              $s = -1;
              return g;
            }
            g.a.Mul(e.a, f.a);
            g.b.abs = DE(g.b.abs, e.b.abs, f.b.abs);
            h = g.norm();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return h;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.Mul
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.Mul = function(e, f) {
      return this.$val.Mul(e, f);
    };
    DA.ptr.prototype.Quo = function(e, f) {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            if (f.a.abs.$length === 0) {
              $panic(new $String("division by zero"));
            }
            h = DF(e.a, f.b.abs);
            i = DF(f.a, e.b.abs);
            g.a.abs = h.abs;
            g.b.abs = i.abs;
            g.a.neg = !(h.neg === i.neg);
            j = g.norm();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return j;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.Quo
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.Quo = function(e, f) {
      return this.$val.Quo(e, f);
    };
    DG = function(e) {
      var e;
      return F.ContainsRune("+-/0123456789.eE", e);
    };
    DA.ptr.prototype.Scan = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            i = e.Token(true, DG);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            j = h[0];
            k = h[1];
            if (!($interfaceIsEqual(k, $ifaceNil))) {
              $s = -1;
              return k;
            }
            if (!F.ContainsRune("efgEFGv", f)) {
              $s = -1;
              return J.New("Rat.Scan: invalid verb");
            }
            m = g.SetString(($bytesToString(j)));
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            l = m;
            n = l[1];
            if (!n) {
              $s = -1;
              return J.New("Rat.Scan: invalid syntax");
            }
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.Scan
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.Scan = function(e, f) {
      return this.$val.Scan(e, f);
    };
    DA.ptr.prototype.SetString = function(e) {
      var aa, ab, ac, ad, ae, af, ag, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (e.length === 0) {
              $s = -1;
              return [DX.nil, false];
            }
            g = F.Index(e, "/");
            if (g >= 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            i = f.a.SetString($substring(e, 0, g), 0);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            j = h[1];
            if (!j) {
              $s = -1;
              return [DX.nil, false];
            }
            k = F.NewReader($substring(e, (g + 1 >> 0)));
            l = $ifaceNil;
            n = f.b.abs.scan(k, 0, false);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            m = n;
            f.b.abs = m[0];
            l = m[3];
            if (!($interfaceIsEqual(l, $ifaceNil))) {
              $s = -1;
              return [DX.nil, false];
            }
            o = k.ReadByte();
            l = o[1];
            if (!($interfaceIsEqual(l, E.EOF))) {
              $s = -1;
              return [DX.nil, false];
            }
            if (f.b.abs.$length === 0) {
              $s = -1;
              return [DX.nil, false];
            }
            p = f.norm();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [p, true];
          case 2:
            q = F.NewReader(e);
            s = BV(q);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            r = s;
            t = r[0];
            u = r[1];
            if (!($interfaceIsEqual(u, $ifaceNil))) {
              $s = -1;
              return [DX.nil, false];
            }
            v = 0;
            x = f.a.abs.scan(q, 10, true);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              x = x.$blk();
            }
            if (x && x.$blk !== undefined) {
              break s;
            }
            w = x;
            f.a.abs = w[0];
            v = w[2];
            u = w[3];
            if (!($interfaceIsEqual(u, $ifaceNil))) {
              $s = -1;
              return [DX.nil, false];
            }
            y = new $Int64(0, 0);
            aa = DI(q, false);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              aa = aa.$blk();
            }
            if (aa && aa.$blk !== undefined) {
              break s;
            }
            z = aa;
            y = z[0];
            u = z[2];
            if (!($interfaceIsEqual(u, $ifaceNil))) {
              $s = -1;
              return [DX.nil, false];
            }
            ab = q.ReadByte();
            u = ab[1];
            if (!($interfaceIsEqual(u, E.EOF))) {
              $s = -1;
              return [DX.nil, false];
            }
            if (f.a.abs.$length === 0) {
              $s = -1;
              return [f, true];
            }
            if (v < 0) {
              y = (ac = (new $Int64(0, v)), new $Int64(y.$high + ac.$high, y.$low + ac.$low));
            }
            ad = y;
            if ((ad.$high < 0 || (ad.$high === 0 && ad.$low < 0))) {
              ad = new $Int64(-ad.$high, -ad.$low);
            }
            ae = (BX.nil).expNN(CA, (BX.nil).setWord(((ad.$low >>> 0))), BX.nil);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              ae = ae.$blk();
            }
            if (ae && ae.$blk !== undefined) {
              break s;
            }
            af = ae;
            if ((y.$high < 0 || (y.$high === 0 && y.$low < 0))) {
              $s = 10;
              continue;
            }
            $s = 11;
            continue;
          case 10:
            f.b.abs = af;
            ag = f.norm();
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              ag = ag.$blk();
            }
            if (ag && ag.$blk !== undefined) {
              break s;
            }
            ag;
            $s = 12;
            continue;
          case 11:
            f.a.abs = f.a.abs.mul(f.a.abs, af);
            f.b.abs = $subslice(f.b.abs, 0, 0);
          case 12:
            f.a.neg = t && f.a.abs.$length > 0;
            $s = -1;
            return [f, true];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.SetString
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.SetString = function(e) {
      return this.$val.SetString(e);
    };
    DI = function(e, f) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = new $Int64(0, 0);
            h = 0;
            i = $ifaceNil;
            h = 10;
            j = 0;
            l = e.ReadByte();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            k = l;
            j = k[0];
            i = k[1];
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              if ($interfaceIsEqual(i, E.EOF)) {
                i = $ifaceNil;
              }
              $s = -1;
              return [g, h, i];
            }
            m = j;
            if ((m === (101)) || (m === (69))) {
              $s = 3;
              continue;
            }
            if (m === (112)) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 3:
            $s = 6;
            continue;
          case 4:
            if (f) {
              h = 2;
              $s = 2;
              continue;
            }
            n = e.UnreadByte();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            n;
            $s = -1;
            return [g, h, i];
          case 5:
            o = e.UnreadByte();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            o;
            $s = -1;
            return [g, h, i];
          case 6:
          case 2:
            p = false;
            r = BV(e);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              r = r.$blk();
            }
            if (r && r.$blk !== undefined) {
              break s;
            }
            q = r;
            p = q[0];
            i = q[1];
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              $s = -1;
              return [g, h, i];
            }
            s = DT.nil;
            if (p) {
              s = $append(s, 45);
            }
            t = 0;
          case 10:
            v = e.ReadByte();
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            u = v;
            j = u[0];
            i = u[1];
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              if (!($interfaceIsEqual(i, E.EOF)) || (t === 0)) {
                $s = -1;
                return [g, h, i];
              }
              i = $ifaceNil;
              $s = 11;
              continue;
            }
            if (j < 48 || 57 < j) {
              $s = 13;
              continue;
            }
            $s = 14;
            continue;
          case 13:
            if (t === 0) {
              $s = 15;
              continue;
            }
            $s = 16;
            continue;
          case 15:
            w = e.UnreadByte();
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              w = w.$blk();
            }
            if (w && w.$blk !== undefined) {
              break s;
            }
            w;
            x = C.Errorf("invalid exponent (missing digits)", new DP([]));
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              x = x.$blk();
            }
            if (x && x.$blk !== undefined) {
              break s;
            }
            i = x;
            $s = -1;
            return [g, h, i];
          case 16:
            $s = 11;
            continue;
          case 14:
            s = $append(s, j);
            t = t + (1) >> 0;
            $s = 10;
            continue;
          case 11:
            y = A.ParseInt(($bytesToString(s)), 10, 64);
            g = y[0];
            i = y[1];
            $s = -1;
            return [g, h, i];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DI
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.ptr.prototype.String = function() {
      var e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            f = e.marshal();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ($bytesToString(f));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.String
        };
      }
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.String = function() {
      return this.$val.String();
    };
    DA.ptr.prototype.marshal = function() {
      var e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            f = DT.nil;
            g = e.a.Append(f, 10);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
            f = $append(f, 47);
            if (!((e.b.abs.$length === 0))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            h = e.b.Append(f, 10);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            f = h;
            $s = 4;
            continue;
          case 3:
            f = $append(f, 49);
          case 4:
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.marshal
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.marshal = function() {
      return this.$val.marshal();
    };
    DA.ptr.prototype.RatString = function() {
      var e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            if (e.IsInt()) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            f = e.a.String();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return f;
          case 2:
            g = e.String();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.RatString
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.RatString = function() {
      return this.$val.RatString();
    };
    DA.ptr.prototype.FloatString = function(e) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            g = DT.nil;
            if (f.IsInt()) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            h = f.a.Append(g, 10);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = h;
            if (e > 0) {
              g = $append(g, 46);
              i = e;
              while (true) {
                if (!(i > 0)) {
                  break;
                }
                g = $append(g, 48);
                i = i - (1) >> 0;
              }
            }
            $s = -1;
            return ($bytesToString(g));
          case 2:
            k = (BX.nil).div((BX.nil), f.a.abs, f.b.abs);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            l = j[0];
            m = j[1];
            n = BY;
            if (e > 0) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            o = (BX.nil).expNN(CA, (BX.nil).setUint64((new $Uint64(0, e))), BX.nil);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            n = o;
          case 6:
            m = m.mul(m, n);
            q = m.div((BX.nil), m, f.b.abs);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            p = q;
            m = p[0];
            r = p[1];
            r = r.add(r, r);
            if (f.b.abs.cmp(r) <= 0) {
              m = m.add(m, BY);
              if (m.cmp(n) >= 0) {
                l = (BX.nil).add(l, BY);
                m = (BX.nil).sub(m, n);
              }
            }
            if (f.a.neg) {
              g = $append(g, 45);
            }
            s = g;
            t = l.utoa(10);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            u = t;
            g = $appendSlice(s, u);
            if (e > 0) {
              $s = 10;
              continue;
            }
            $s = 11;
            continue;
          case 10:
            g = $append(g, 46);
            v = m.utoa(10);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            w = v;
            x = e - w.$length >> 0;
            while (true) {
              if (!(x > 0)) {
                break;
              }
              g = $append(g, 48);
              x = x - (1) >> 0;
            }
            g = $appendSlice(g, w);
          case 11:
            $s = -1;
            return ($bytesToString(g));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.FloatString
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.FloatString = function(e) {
      return this.$val.FloatString(e);
    };
    DA.ptr.prototype.GobEncode = function() {
      var e, f, g, h, i, j;
      e = this;
      if (e === DX.nil) {
        return [DT.nil, $ifaceNil];
      }
      f = $makeSlice(DT, (5 + ($imul(((e.a.abs.$length + e.b.abs.$length >> 0)), 4)) >> 0));
      g = e.b.abs.bytes(f);
      h = e.a.abs.bytes($subslice(f, 0, g));
      i = g - h >> 0;
      if (!((((((i >>> 0)) >> 0)) === i))) {
        return [DT.nil, J.New("Rat.GobEncode: numerator too large")];
      }
      $clone(G.BigEndian, G.bigEndian).PutUint32($subslice(f, (h - 4 >> 0), h), ((i >>> 0)));
      h = h - (5) >> 0;
      j = 2;
      if (e.a.neg) {
        j = (j | (1)) >>> 0;
      }((h < 0 || h >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + h] = j);
      return [$subslice(f, h), $ifaceNil];
    };
    DA.prototype.GobEncode = function() {
      return this.$val.GobEncode();
    };
    DA.ptr.prototype.GobDecode = function(e) {
      var e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (e.$length === 0) {
              DA.copy(f, new DA.ptr(new BL.ptr(false, BX.nil), new BL.ptr(false, BX.nil)));
              $s = -1;
              return $ifaceNil;
            }
            g = (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]);
            if (!(((g >>> 1 << 24 >>> 24) === 1))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            h = C.Errorf("Rat.GobDecode: encoding version %d not supported", new DP([new $Uint8((g >>> 1 << 24 >>> 24))]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return h;
          case 2:
            i = 5 + $clone(G.BigEndian, G.bigEndian).Uint32($subslice(e, 1, 5)) >>> 0;
            f.a.neg = !((((g & 1) >>> 0) === 0));
            f.a.abs = f.a.abs.setBytes($subslice(e, 5, i));
            f.b.abs = f.b.abs.setBytes($subslice(e, i));
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.GobDecode
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.GobDecode = function(e) {
      return this.$val.GobDecode(e);
    };
    DA.ptr.prototype.MarshalText = function() {
      var e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = DT.nil;
            f = $ifaceNil;
            g = this;
            if (g.IsInt()) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            i = g.a.MarshalText();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            e = h[0];
            f = h[1];
            $s = -1;
            return [e, f];
          case 2:
            k = g.marshal();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            l = $ifaceNil;
            e = j;
            f = l;
            $s = -1;
            return [e, f];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.MarshalText
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.MarshalText = function() {
      return this.$val.MarshalText();
    };
    DA.ptr.prototype.UnmarshalText = function(e) {
      var e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            h = f.SetString(($bytesToString(e)));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = h;
            i = g[1];
            if (!i) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            j = C.Errorf("math/big: cannot unmarshal %q into a *big.Rat", new DP([e]));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return j;
          case 3:
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: DA.ptr.prototype.UnmarshalText
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    DA.prototype.UnmarshalText = function(e) {
      return this.$val.UnmarshalText(e);
    };
    AW.prototype.String = function() {
      var e, f;
      e = this.$val;
      if (e >= 6) {
        return "RoundingMode(" + A.FormatInt((new $Int64(0, e)), 10) + ")";
      }
      return $substring("ToNearestEvenToNearestAwayToZeroAwayFromZeroToNegativeInfToPositiveInf", ((e < 0 || e >= DJ.length) ? ($throwRuntimeError("index out of range"), undefined) : DJ[e]), (f = e + 1 << 24 >>> 24, ((f < 0 || f >= DJ.length) ? ($throwRuntimeError("index out of range"), undefined) : DJ[f])));
    };
    $ptrType(AW).prototype.String = function() {
      return new AW(this.$get()).String();
    };
    AS.ptr.prototype.Sqrt = function(e) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = this;
            if (false) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = e.validate();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            if (f.prec === 0) {
              f.prec = e.prec;
            }
            g = e.Sign();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            if (g === -1) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            $panic((h = new AT.ptr("square root of negative operand"), new h.constructor.elem(h)));
          case 5:
            if (!((e.form === 1))) {
              f.acc = 0;
              f.form = e.form;
              f.neg = e.neg;
              $s = -1;
              return f;
            }
            i = f.prec;
            j = e.MantExp(f);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            k = j;
            f.prec = i;
            m = (l = k % 2, l === l ? l : $throwRuntimeError("integer divide by zero"));
            if (m === (0)) {
              $s = 9;
              continue;
            }
            if (m === (1)) {
              $s = 10;
              continue;
            }
            if (m === (-1)) {
              $s = 11;
              continue;
            }
            $s = 12;
            continue;
          case 9:
            $s = 12;
            continue;
          case 10:
            n = f.Mul(DL, f);
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            n;
            $s = 12;
            continue;
          case 11:
            o = f.Mul(DK, f);
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            o;
          case 12:
          case 8:
            if (f.prec <= 128) {
              $s = 15;
              continue;
            }
            $s = 16;
            continue;
          case 15:
            $r = f.sqrtDirect(f);
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = 17;
            continue;
          case 16:
            $r = f.sqrtInverse(f);
            $s = 19;
          case 19:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 17:
            q = f.SetMantExp(f, (p = k / 2, (p === p && p !== 1 / 0 && p !== -1 / 0) ? p >> 0 : $throwRuntimeError("integer divide by zero")));
            $s = 20;
          case 20:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return q;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.Sqrt
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.Sqrt = function(e) {
      return this.$val.Sqrt(e);
    };
    AS.ptr.prototype.sqrtDirect = function(e) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = [e];
            f = [f];
            g = this;
            f[0] = new AS.ptr(0, 0, 0, 0, false, BX.nil, 0);
            h = (function(e, f) {
              return function $b(h) {
                var h, i, j, k, l, $s, $r;
                $s = 0;
                var $f, $c = false;
                if (this !== undefined && this.$blk !== undefined) {
                  $f = this;
                  $c = true;
                  h = $f.h;
                  i = $f.i;
                  j = $f.j;
                  k = $f.k;
                  l = $f.l;
                  $s = $f.$s;
                  $r = $f.$r;
                }
                s: while (true) {
                  switch ($s) {
                    case 0:
                      f[0].prec = h.prec;
                      i = f[0].Mul(h, h);
                      $s = 1;
                    case 1:
                      if ($c) {
                        $c = false;
                        i = i.$blk();
                      }
                      if (i && i.$blk !== undefined) {
                        break s;
                      }
                      i;
                      j = f[0].Add(f[0], e[0]);
                      $s = 2;
                    case 2:
                      if ($c) {
                        $c = false;
                        j = j.$blk();
                      }
                      if (j && j.$blk !== undefined) {
                        break s;
                      }
                      j;
                      k = f[0].Mul(DK, f[0]);
                      $s = 3;
                    case 3:
                      if ($c) {
                        $c = false;
                        k = k.$blk();
                      }
                      if (k && k.$blk !== undefined) {
                        break s;
                      }
                      k;
                      l = h.Quo(f[0], h);
                      $s = 4;
                    case 4:
                      if ($c) {
                        $c = false;
                        l = l.$blk();
                      }
                      if (l && l.$blk !== undefined) {
                        break s;
                      }
                      $s = -1;
                      return l;
                  }
                  return;
                }
                if ($f === undefined) {
                  $f = {
                    $blk: $b
                  };
                }
                $f.h = h;
                $f.i = i;
                $f.j = j;
                $f.k = k;
                $f.l = l;
                $f.$s = $s;
                $f.$r = $r;
                return $f;
              };
            })(e, f);
            j = e[0].Float64();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            i = j;
            k = i[0];
            l = AU(D.Sqrt(k));
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            m = l;
            if (g.prec > 128) {
              $s = 4;
              continue;
            }
            if (g.prec > 64) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 4:
            $panic(new $String("sqrtDirect: only for z.prec <= 128"));
            $s = 7;
            continue;
          case 5:
            m.prec = $imul(m.prec, (2)) >>> 0;
            n = h(m);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            m = n;
            m.prec = $imul(m.prec, (2)) >>> 0;
            o = h(m);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            m = o;
            $s = 7;
            continue;
          case 6:
            m.prec = $imul(m.prec, (2)) >>> 0;
            p = h(m);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            m = p;
          case 7:
          case 3:
            q = g.Set(m);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            q;
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.sqrtDirect
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.sqrtDirect = function(e) {
      return this.$val.sqrtDirect(e);
    };
    AS.ptr.prototype.sqrtInverse = function(e) {
      var e, f, g, h, i, j, k, l, m, n, o, p, q, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = [e];
            f = [f];
            g = [g];
            h = this;
            f[0] = DN(h.prec);
            g[0] = DN(h.prec);
            i = (function(e, f, g) {
              return function $b(i) {
                var i, j, k, l, m, n, $s, $r;
                $s = 0;
                var $f, $c = false;
                if (this !== undefined && this.$blk !== undefined) {
                  $f = this;
                  $c = true;
                  i = $f.i;
                  j = $f.j;
                  k = $f.k;
                  l = $f.l;
                  m = $f.m;
                  n = $f.n;
                  $s = $f.$s;
                  $r = $f.$r;
                }
                s: while (true) {
                  switch ($s) {
                    case 0:
                      f[0].prec = i.prec;
                      g[0].prec = i.prec;
                      j = f[0].Mul(i, i);
                      $s = 1;
                    case 1:
                      if ($c) {
                        $c = false;
                        j = j.$blk();
                      }
                      if (j && j.$blk !== undefined) {
                        break s;
                      }
                      j;
                      k = f[0].Mul(e[0], f[0]);
                      $s = 2;
                    case 2:
                      if ($c) {
                        $c = false;
                        k = k.$blk();
                      }
                      if (k && k.$blk !== undefined) {
                        break s;
                      }
                      k;
                      l = g[0].Sub(DM, f[0]);
                      $s = 3;
                    case 3:
                      if ($c) {
                        $c = false;
                        l = l.$blk();
                      }
                      if (l && l.$blk !== undefined) {
                        break s;
                      }
                      l;
                      m = f[0].Mul(i, g[0]);
                      $s = 4;
                    case 4:
                      if ($c) {
                        $c = false;
                        m = m.$blk();
                      }
                      if (m && m.$blk !== undefined) {
                        break s;
                      }
                      m;
                      n = i.Mul(DK, f[0]);
                      $s = 5;
                    case 5:
                      if ($c) {
                        $c = false;
                        n = n.$blk();
                      }
                      if (n && n.$blk !== undefined) {
                        break s;
                      }
                      $s = -1;
                      return n;
                  }
                  return;
                }
                if ($f === undefined) {
                  $f = {
                    $blk: $b
                  };
                }
                $f.i = i;
                $f.j = j;
                $f.k = k;
                $f.l = l;
                $f.m = m;
                $f.n = n;
                $f.$s = $s;
                $f.$r = $r;
                return $f;
              };
            })(e, f, g);
            k = e[0].Float64();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            l = j[0];
            m = DN(h.prec);
            n = m.SetFloat64(1 / D.Sqrt(l));
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            n;
            o = h.prec + 32 >>> 0;
          case 3:
            if (!(m.prec < o)) {
              $s = 4;
              continue;
            }
            m.prec = $imul(m.prec, (2)) >>> 0;
            p = i(m);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            m = p;
            $s = 3;
            continue;
          case 4:
            q = h.Mul(e[0], m);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            q;
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS.ptr.prototype.sqrtInverse
        };
      }
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AS.prototype.sqrtInverse = function(e) {
      return this.$val.sqrtInverse(e);
    };
    DN = function(e) {
      var e, f, g;
      f = new AS.ptr(0, 0, 0, 0, false, BX.nil, 0);
      f.mant = f.mant.make($imul((((g = e / 32, (g === g && g !== 1 / 0 && g !== -1 / 0) ? g >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), 2));
      return f;
    };
    EC.methods = [{
      prop: "at",
      name: "at",
      pkg: "math/big",
      typ: $funcType([$Int], [$Uint8], false)
    }, {
      prop: "init",
      name: "init",
      pkg: "math/big",
      typ: $funcType([BX, $Int], [], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "round",
      name: "round",
      pkg: "math/big",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "roundUp",
      name: "roundUp",
      pkg: "math/big",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "roundDown",
      name: "roundDown",
      pkg: "math/big",
      typ: $funcType([$Int], [], false)
    }];
    DU.methods = [{
      prop: "SetPrec",
      name: "SetPrec",
      pkg: "",
      typ: $funcType([$Uint], [DU], false)
    }, {
      prop: "SetMode",
      name: "SetMode",
      pkg: "",
      typ: $funcType([AW], [DU], false)
    }, {
      prop: "Prec",
      name: "Prec",
      pkg: "",
      typ: $funcType([], [$Uint], false)
    }, {
      prop: "MinPrec",
      name: "MinPrec",
      pkg: "",
      typ: $funcType([], [$Uint], false)
    }, {
      prop: "Mode",
      name: "Mode",
      pkg: "",
      typ: $funcType([], [AW], false)
    }, {
      prop: "Acc",
      name: "Acc",
      pkg: "",
      typ: $funcType([], [AX], false)
    }, {
      prop: "Sign",
      name: "Sign",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "MantExp",
      name: "MantExp",
      pkg: "",
      typ: $funcType([DU], [$Int], false)
    }, {
      prop: "setExpAndRound",
      name: "setExpAndRound",
      pkg: "math/big",
      typ: $funcType([$Int64, $Uint], [], false)
    }, {
      prop: "SetMantExp",
      name: "SetMantExp",
      pkg: "",
      typ: $funcType([DU, $Int], [DU], false)
    }, {
      prop: "Signbit",
      name: "Signbit",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsInf",
      name: "IsInf",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsInt",
      name: "IsInt",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "validate",
      name: "validate",
      pkg: "math/big",
      typ: $funcType([], [], false)
    }, {
      prop: "round",
      name: "round",
      pkg: "math/big",
      typ: $funcType([$Uint], [], false)
    }, {
      prop: "setBits64",
      name: "setBits64",
      pkg: "math/big",
      typ: $funcType([$Bool, $Uint64], [DU], false)
    }, {
      prop: "SetUint64",
      name: "SetUint64",
      pkg: "",
      typ: $funcType([$Uint64], [DU], false)
    }, {
      prop: "SetInt64",
      name: "SetInt64",
      pkg: "",
      typ: $funcType([$Int64], [DU], false)
    }, {
      prop: "SetFloat64",
      name: "SetFloat64",
      pkg: "",
      typ: $funcType([$Float64], [DU], false)
    }, {
      prop: "SetInt",
      name: "SetInt",
      pkg: "",
      typ: $funcType([DW], [DU], false)
    }, {
      prop: "SetRat",
      name: "SetRat",
      pkg: "",
      typ: $funcType([DX], [DU], false)
    }, {
      prop: "SetInf",
      name: "SetInf",
      pkg: "",
      typ: $funcType([$Bool], [DU], false)
    }, {
      prop: "Set",
      name: "Set",
      pkg: "",
      typ: $funcType([DU], [DU], false)
    }, {
      prop: "Copy",
      name: "Copy",
      pkg: "",
      typ: $funcType([DU], [DU], false)
    }, {
      prop: "Uint64",
      name: "Uint64",
      pkg: "",
      typ: $funcType([], [$Uint64, AX], false)
    }, {
      prop: "Int64",
      name: "Int64",
      pkg: "",
      typ: $funcType([], [$Int64, AX], false)
    }, {
      prop: "Float32",
      name: "Float32",
      pkg: "",
      typ: $funcType([], [$Float32, AX], false)
    }, {
      prop: "Float64",
      name: "Float64",
      pkg: "",
      typ: $funcType([], [$Float64, AX], false)
    }, {
      prop: "Int",
      name: "Int",
      pkg: "",
      typ: $funcType([DW], [DW, AX], false)
    }, {
      prop: "Rat",
      name: "Rat",
      pkg: "",
      typ: $funcType([DX], [DX, AX], false)
    }, {
      prop: "Abs",
      name: "Abs",
      pkg: "",
      typ: $funcType([DU], [DU], false)
    }, {
      prop: "Neg",
      name: "Neg",
      pkg: "",
      typ: $funcType([DU], [DU], false)
    }, {
      prop: "uadd",
      name: "uadd",
      pkg: "math/big",
      typ: $funcType([DU, DU], [], false)
    }, {
      prop: "usub",
      name: "usub",
      pkg: "math/big",
      typ: $funcType([DU, DU], [], false)
    }, {
      prop: "umul",
      name: "umul",
      pkg: "math/big",
      typ: $funcType([DU, DU], [], false)
    }, {
      prop: "uquo",
      name: "uquo",
      pkg: "math/big",
      typ: $funcType([DU, DU], [], false)
    }, {
      prop: "ucmp",
      name: "ucmp",
      pkg: "math/big",
      typ: $funcType([DU], [$Int], false)
    }, {
      prop: "Add",
      name: "Add",
      pkg: "",
      typ: $funcType([DU, DU], [DU], false)
    }, {
      prop: "Sub",
      name: "Sub",
      pkg: "",
      typ: $funcType([DU, DU], [DU], false)
    }, {
      prop: "Mul",
      name: "Mul",
      pkg: "",
      typ: $funcType([DU, DU], [DU], false)
    }, {
      prop: "Quo",
      name: "Quo",
      pkg: "",
      typ: $funcType([DU, DU], [DU], false)
    }, {
      prop: "Cmp",
      name: "Cmp",
      pkg: "",
      typ: $funcType([DU], [$Int], false)
    }, {
      prop: "ord",
      name: "ord",
      pkg: "math/big",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "SetString",
      name: "SetString",
      pkg: "",
      typ: $funcType([$String], [DU, $Bool], false)
    }, {
      prop: "scan",
      name: "scan",
      pkg: "math/big",
      typ: $funcType([E.ByteScanner, $Int], [DU, $Int, $error], false)
    }, {
      prop: "pow5",
      name: "pow5",
      pkg: "math/big",
      typ: $funcType([$Uint64], [DU], false)
    }, {
      prop: "Parse",
      name: "Parse",
      pkg: "",
      typ: $funcType([$String, $Int], [DU, $Int, $error], false)
    }, {
      prop: "Scan",
      name: "Scan",
      pkg: "",
      typ: $funcType([C.ScanState, $Int32], [$error], false)
    }, {
      prop: "GobEncode",
      name: "GobEncode",
      pkg: "",
      typ: $funcType([], [DT, $error], false)
    }, {
      prop: "GobDecode",
      name: "GobDecode",
      pkg: "",
      typ: $funcType([DT], [$error], false)
    }, {
      prop: "MarshalText",
      name: "MarshalText",
      pkg: "",
      typ: $funcType([], [DT, $error], false)
    }, {
      prop: "UnmarshalText",
      name: "UnmarshalText",
      pkg: "",
      typ: $funcType([DT], [$error], false)
    }, {
      prop: "Text",
      name: "Text",
      pkg: "",
      typ: $funcType([$Uint8, $Int], [$String], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Append",
      name: "Append",
      pkg: "",
      typ: $funcType([DT, $Uint8, $Int], [DT], false)
    }, {
      prop: "fmtB",
      name: "fmtB",
      pkg: "math/big",
      typ: $funcType([DT], [DT], false)
    }, {
      prop: "fmtP",
      name: "fmtP",
      pkg: "math/big",
      typ: $funcType([DT], [DT], false)
    }, {
      prop: "Format",
      name: "Format",
      pkg: "",
      typ: $funcType([C.State, $Int32], [], false)
    }, {
      prop: "Sqrt",
      name: "Sqrt",
      pkg: "",
      typ: $funcType([DU], [DU], false)
    }, {
      prop: "sqrtDirect",
      name: "sqrtDirect",
      pkg: "math/big",
      typ: $funcType([DU], [], false)
    }, {
      prop: "sqrtInverse",
      name: "sqrtInverse",
      pkg: "math/big",
      typ: $funcType([DU], [], false)
    }];
    AT.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    AW.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    AX.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    DW.methods = [{
      prop: "Sign",
      name: "Sign",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "SetInt64",
      name: "SetInt64",
      pkg: "",
      typ: $funcType([$Int64], [DW], false)
    }, {
      prop: "SetUint64",
      name: "SetUint64",
      pkg: "",
      typ: $funcType([$Uint64], [DW], false)
    }, {
      prop: "Set",
      name: "Set",
      pkg: "",
      typ: $funcType([DW], [DW], false)
    }, {
      prop: "Bits",
      name: "Bits",
      pkg: "",
      typ: $funcType([], [DV], false)
    }, {
      prop: "SetBits",
      name: "SetBits",
      pkg: "",
      typ: $funcType([DV], [DW], false)
    }, {
      prop: "Abs",
      name: "Abs",
      pkg: "",
      typ: $funcType([DW], [DW], false)
    }, {
      prop: "Neg",
      name: "Neg",
      pkg: "",
      typ: $funcType([DW], [DW], false)
    }, {
      prop: "Add",
      name: "Add",
      pkg: "",
      typ: $funcType([DW, DW], [DW], false)
    }, {
      prop: "Sub",
      name: "Sub",
      pkg: "",
      typ: $funcType([DW, DW], [DW], false)
    }, {
      prop: "Mul",
      name: "Mul",
      pkg: "",
      typ: $funcType([DW, DW], [DW], false)
    }, {
      prop: "MulRange",
      name: "MulRange",
      pkg: "",
      typ: $funcType([$Int64, $Int64], [DW], false)
    }, {
      prop: "Binomial",
      name: "Binomial",
      pkg: "",
      typ: $funcType([$Int64, $Int64], [DW], false)
    }, {
      prop: "Quo",
      name: "Quo",
      pkg: "",
      typ: $funcType([DW, DW], [DW], false)
    }, {
      prop: "Rem",
      name: "Rem",
      pkg: "",
      typ: $funcType([DW, DW], [DW], false)
    }, {
      prop: "QuoRem",
      name: "QuoRem",
      pkg: "",
      typ: $funcType([DW, DW, DW], [DW, DW], false)
    }, {
      prop: "Div",
      name: "Div",
      pkg: "",
      typ: $funcType([DW, DW], [DW], false)
    }, {
      prop: "Mod",
      name: "Mod",
      pkg: "",
      typ: $funcType([DW, DW], [DW], false)
    }, {
      prop: "DivMod",
      name: "DivMod",
      pkg: "",
      typ: $funcType([DW, DW, DW], [DW, DW], false)
    }, {
      prop: "Cmp",
      name: "Cmp",
      pkg: "",
      typ: $funcType([DW], [$Int], false)
    }, {
      prop: "CmpAbs",
      name: "CmpAbs",
      pkg: "",
      typ: $funcType([DW], [$Int], false)
    }, {
      prop: "Int64",
      name: "Int64",
      pkg: "",
      typ: $funcType([], [$Int64], false)
    }, {
      prop: "Uint64",
      name: "Uint64",
      pkg: "",
      typ: $funcType([], [$Uint64], false)
    }, {
      prop: "IsInt64",
      name: "IsInt64",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsUint64",
      name: "IsUint64",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "SetString",
      name: "SetString",
      pkg: "",
      typ: $funcType([$String, $Int], [DW, $Bool], false)
    }, {
      prop: "setFromScanner",
      name: "setFromScanner",
      pkg: "math/big",
      typ: $funcType([E.ByteScanner, $Int], [DW, $Bool], false)
    }, {
      prop: "SetBytes",
      name: "SetBytes",
      pkg: "",
      typ: $funcType([DT], [DW], false)
    }, {
      prop: "Bytes",
      name: "Bytes",
      pkg: "",
      typ: $funcType([], [DT], false)
    }, {
      prop: "BitLen",
      name: "BitLen",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Exp",
      name: "Exp",
      pkg: "",
      typ: $funcType([DW, DW, DW], [DW], false)
    }, {
      prop: "GCD",
      name: "GCD",
      pkg: "",
      typ: $funcType([DW, DW, DW, DW], [DW], false)
    }, {
      prop: "lehmerGCD",
      name: "lehmerGCD",
      pkg: "math/big",
      typ: $funcType([DW, DW, DW, DW], [DW], false)
    }, {
      prop: "Rand",
      name: "Rand",
      pkg: "",
      typ: $funcType([ED, DW], [DW], false)
    }, {
      prop: "ModInverse",
      name: "ModInverse",
      pkg: "",
      typ: $funcType([DW, DW], [DW], false)
    }, {
      prop: "modSqrt3Mod4Prime",
      name: "modSqrt3Mod4Prime",
      pkg: "math/big",
      typ: $funcType([DW, DW], [DW], false)
    }, {
      prop: "modSqrt5Mod8Prime",
      name: "modSqrt5Mod8Prime",
      pkg: "math/big",
      typ: $funcType([DW, DW], [DW], false)
    }, {
      prop: "modSqrtTonelliShanks",
      name: "modSqrtTonelliShanks",
      pkg: "math/big",
      typ: $funcType([DW, DW], [DW], false)
    }, {
      prop: "ModSqrt",
      name: "ModSqrt",
      pkg: "",
      typ: $funcType([DW, DW], [DW], false)
    }, {
      prop: "Lsh",
      name: "Lsh",
      pkg: "",
      typ: $funcType([DW, $Uint], [DW], false)
    }, {
      prop: "Rsh",
      name: "Rsh",
      pkg: "",
      typ: $funcType([DW, $Uint], [DW], false)
    }, {
      prop: "Bit",
      name: "Bit",
      pkg: "",
      typ: $funcType([$Int], [$Uint], false)
    }, {
      prop: "SetBit",
      name: "SetBit",
      pkg: "",
      typ: $funcType([DW, $Int, $Uint], [DW], false)
    }, {
      prop: "And",
      name: "And",
      pkg: "",
      typ: $funcType([DW, DW], [DW], false)
    }, {
      prop: "AndNot",
      name: "AndNot",
      pkg: "",
      typ: $funcType([DW, DW], [DW], false)
    }, {
      prop: "Or",
      name: "Or",
      pkg: "",
      typ: $funcType([DW, DW], [DW], false)
    }, {
      prop: "Xor",
      name: "Xor",
      pkg: "",
      typ: $funcType([DW, DW], [DW], false)
    }, {
      prop: "Not",
      name: "Not",
      pkg: "",
      typ: $funcType([DW], [DW], false)
    }, {
      prop: "Sqrt",
      name: "Sqrt",
      pkg: "",
      typ: $funcType([DW], [DW], false)
    }, {
      prop: "Text",
      name: "Text",
      pkg: "",
      typ: $funcType([$Int], [$String], false)
    }, {
      prop: "Append",
      name: "Append",
      pkg: "",
      typ: $funcType([DT, $Int], [DT], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Format",
      name: "Format",
      pkg: "",
      typ: $funcType([C.State, $Int32], [], false)
    }, {
      prop: "scan",
      name: "scan",
      pkg: "math/big",
      typ: $funcType([E.ByteScanner, $Int], [DW, $Int, $error], false)
    }, {
      prop: "Scan",
      name: "Scan",
      pkg: "",
      typ: $funcType([C.ScanState, $Int32], [$error], false)
    }, {
      prop: "GobEncode",
      name: "GobEncode",
      pkg: "",
      typ: $funcType([], [DT, $error], false)
    }, {
      prop: "GobDecode",
      name: "GobDecode",
      pkg: "",
      typ: $funcType([DT], [$error], false)
    }, {
      prop: "MarshalText",
      name: "MarshalText",
      pkg: "",
      typ: $funcType([], [DT, $error], false)
    }, {
      prop: "UnmarshalText",
      name: "UnmarshalText",
      pkg: "",
      typ: $funcType([DT], [$error], false)
    }, {
      prop: "MarshalJSON",
      name: "MarshalJSON",
      pkg: "",
      typ: $funcType([], [DT, $error], false)
    }, {
      prop: "UnmarshalJSON",
      name: "UnmarshalJSON",
      pkg: "",
      typ: $funcType([DT], [$error], false)
    }, {
      prop: "ProbablyPrime",
      name: "ProbablyPrime",
      pkg: "",
      typ: $funcType([$Int], [$Bool], false)
    }];
    BW.methods = [{
      prop: "ReadByte",
      name: "ReadByte",
      pkg: "",
      typ: $funcType([], [$Uint8, $error], false)
    }, {
      prop: "UnreadByte",
      name: "UnreadByte",
      pkg: "",
      typ: $funcType([], [$error], false)
    }];
    BX.methods = [{
      prop: "clear",
      name: "clear",
      pkg: "math/big",
      typ: $funcType([], [], false)
    }, {
      prop: "norm",
      name: "norm",
      pkg: "math/big",
      typ: $funcType([], [BX], false)
    }, {
      prop: "make",
      name: "make",
      pkg: "math/big",
      typ: $funcType([$Int], [BX], false)
    }, {
      prop: "setWord",
      name: "setWord",
      pkg: "math/big",
      typ: $funcType([L], [BX], false)
    }, {
      prop: "setUint64",
      name: "setUint64",
      pkg: "math/big",
      typ: $funcType([$Uint64], [BX], false)
    }, {
      prop: "set",
      name: "set",
      pkg: "math/big",
      typ: $funcType([BX], [BX], false)
    }, {
      prop: "add",
      name: "add",
      pkg: "math/big",
      typ: $funcType([BX, BX], [BX], false)
    }, {
      prop: "sub",
      name: "sub",
      pkg: "math/big",
      typ: $funcType([BX, BX], [BX], false)
    }, {
      prop: "cmp",
      name: "cmp",
      pkg: "math/big",
      typ: $funcType([BX], [$Int], false)
    }, {
      prop: "mulAddWW",
      name: "mulAddWW",
      pkg: "math/big",
      typ: $funcType([BX, L, L], [BX], false)
    }, {
      prop: "montgomery",
      name: "montgomery",
      pkg: "math/big",
      typ: $funcType([BX, BX, BX, L, $Int], [BX], false)
    }, {
      prop: "mul",
      name: "mul",
      pkg: "math/big",
      typ: $funcType([BX, BX], [BX], false)
    }, {
      prop: "sqr",
      name: "sqr",
      pkg: "math/big",
      typ: $funcType([BX], [BX], false)
    }, {
      prop: "mulRange",
      name: "mulRange",
      pkg: "math/big",
      typ: $funcType([$Uint64, $Uint64], [BX], false)
    }, {
      prop: "divW",
      name: "divW",
      pkg: "math/big",
      typ: $funcType([BX, L], [BX, L], false)
    }, {
      prop: "div",
      name: "div",
      pkg: "math/big",
      typ: $funcType([BX, BX, BX], [BX, BX], false)
    }, {
      prop: "divLarge",
      name: "divLarge",
      pkg: "math/big",
      typ: $funcType([BX, BX, BX], [BX, BX], false)
    }, {
      prop: "bitLen",
      name: "bitLen",
      pkg: "math/big",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "trailingZeroBits",
      name: "trailingZeroBits",
      pkg: "math/big",
      typ: $funcType([], [$Uint], false)
    }, {
      prop: "shl",
      name: "shl",
      pkg: "math/big",
      typ: $funcType([BX, $Uint], [BX], false)
    }, {
      prop: "shr",
      name: "shr",
      pkg: "math/big",
      typ: $funcType([BX, $Uint], [BX], false)
    }, {
      prop: "setBit",
      name: "setBit",
      pkg: "math/big",
      typ: $funcType([BX, $Uint, $Uint], [BX], false)
    }, {
      prop: "bit",
      name: "bit",
      pkg: "math/big",
      typ: $funcType([$Uint], [$Uint], false)
    }, {
      prop: "sticky",
      name: "sticky",
      pkg: "math/big",
      typ: $funcType([$Uint], [$Uint], false)
    }, {
      prop: "and",
      name: "and",
      pkg: "math/big",
      typ: $funcType([BX, BX], [BX], false)
    }, {
      prop: "andNot",
      name: "andNot",
      pkg: "math/big",
      typ: $funcType([BX, BX], [BX], false)
    }, {
      prop: "or",
      name: "or",
      pkg: "math/big",
      typ: $funcType([BX, BX], [BX], false)
    }, {
      prop: "xor",
      name: "xor",
      pkg: "math/big",
      typ: $funcType([BX, BX], [BX], false)
    }, {
      prop: "modW",
      name: "modW",
      pkg: "math/big",
      typ: $funcType([L], [L], false)
    }, {
      prop: "random",
      name: "random",
      pkg: "math/big",
      typ: $funcType([ED, BX, $Int], [BX], false)
    }, {
      prop: "expNN",
      name: "expNN",
      pkg: "math/big",
      typ: $funcType([BX, BX, BX], [BX], false)
    }, {
      prop: "expNNWindowed",
      name: "expNNWindowed",
      pkg: "math/big",
      typ: $funcType([BX, BX, BX], [BX], false)
    }, {
      prop: "expNNMontgomery",
      name: "expNNMontgomery",
      pkg: "math/big",
      typ: $funcType([BX, BX, BX], [BX], false)
    }, {
      prop: "bytes",
      name: "bytes",
      pkg: "math/big",
      typ: $funcType([DT], [$Int], false)
    }, {
      prop: "setBytes",
      name: "setBytes",
      pkg: "math/big",
      typ: $funcType([DT], [BX], false)
    }, {
      prop: "sqrt",
      name: "sqrt",
      pkg: "math/big",
      typ: $funcType([BX], [BX], false)
    }, {
      prop: "scan",
      name: "scan",
      pkg: "math/big",
      typ: $funcType([E.ByteScanner, $Int, $Bool], [BX, $Int, $Int, $error], false)
    }, {
      prop: "utoa",
      name: "utoa",
      pkg: "math/big",
      typ: $funcType([$Int], [DT], false)
    }, {
      prop: "itoa",
      name: "itoa",
      pkg: "math/big",
      typ: $funcType([$Bool, $Int], [DT], false)
    }, {
      prop: "convertWords",
      name: "convertWords",
      pkg: "math/big",
      typ: $funcType([DT, L, $Int, L, EB], [], false)
    }, {
      prop: "expWW",
      name: "expWW",
      pkg: "math/big",
      typ: $funcType([L, L], [BX], false)
    }, {
      prop: "probablyPrimeMillerRabin",
      name: "probablyPrimeMillerRabin",
      pkg: "math/big",
      typ: $funcType([$Int, $Bool], [$Bool], false)
    }, {
      prop: "probablyPrimeLucas",
      name: "probablyPrimeLucas",
      pkg: "math/big",
      typ: $funcType([], [$Bool], false)
    }];
    DX.methods = [{
      prop: "SetFloat64",
      name: "SetFloat64",
      pkg: "",
      typ: $funcType([$Float64], [DX], false)
    }, {
      prop: "Float32",
      name: "Float32",
      pkg: "",
      typ: $funcType([], [$Float32, $Bool], false)
    }, {
      prop: "Float64",
      name: "Float64",
      pkg: "",
      typ: $funcType([], [$Float64, $Bool], false)
    }, {
      prop: "SetFrac",
      name: "SetFrac",
      pkg: "",
      typ: $funcType([DW, DW], [DX], false)
    }, {
      prop: "SetFrac64",
      name: "SetFrac64",
      pkg: "",
      typ: $funcType([$Int64, $Int64], [DX], false)
    }, {
      prop: "SetInt",
      name: "SetInt",
      pkg: "",
      typ: $funcType([DW], [DX], false)
    }, {
      prop: "SetInt64",
      name: "SetInt64",
      pkg: "",
      typ: $funcType([$Int64], [DX], false)
    }, {
      prop: "Set",
      name: "Set",
      pkg: "",
      typ: $funcType([DX], [DX], false)
    }, {
      prop: "Abs",
      name: "Abs",
      pkg: "",
      typ: $funcType([DX], [DX], false)
    }, {
      prop: "Neg",
      name: "Neg",
      pkg: "",
      typ: $funcType([DX], [DX], false)
    }, {
      prop: "Inv",
      name: "Inv",
      pkg: "",
      typ: $funcType([DX], [DX], false)
    }, {
      prop: "Sign",
      name: "Sign",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "IsInt",
      name: "IsInt",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Num",
      name: "Num",
      pkg: "",
      typ: $funcType([], [DW], false)
    }, {
      prop: "Denom",
      name: "Denom",
      pkg: "",
      typ: $funcType([], [DW], false)
    }, {
      prop: "norm",
      name: "norm",
      pkg: "math/big",
      typ: $funcType([], [DX], false)
    }, {
      prop: "Cmp",
      name: "Cmp",
      pkg: "",
      typ: $funcType([DX], [$Int], false)
    }, {
      prop: "Add",
      name: "Add",
      pkg: "",
      typ: $funcType([DX, DX], [DX], false)
    }, {
      prop: "Sub",
      name: "Sub",
      pkg: "",
      typ: $funcType([DX, DX], [DX], false)
    }, {
      prop: "Mul",
      name: "Mul",
      pkg: "",
      typ: $funcType([DX, DX], [DX], false)
    }, {
      prop: "Quo",
      name: "Quo",
      pkg: "",
      typ: $funcType([DX, DX], [DX], false)
    }, {
      prop: "Scan",
      name: "Scan",
      pkg: "",
      typ: $funcType([C.ScanState, $Int32], [$error], false)
    }, {
      prop: "SetString",
      name: "SetString",
      pkg: "",
      typ: $funcType([$String], [DX, $Bool], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "marshal",
      name: "marshal",
      pkg: "math/big",
      typ: $funcType([], [DT], false)
    }, {
      prop: "RatString",
      name: "RatString",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "FloatString",
      name: "FloatString",
      pkg: "",
      typ: $funcType([$Int], [$String], false)
    }, {
      prop: "GobEncode",
      name: "GobEncode",
      pkg: "",
      typ: $funcType([], [DT, $error], false)
    }, {
      prop: "GobDecode",
      name: "GobDecode",
      pkg: "",
      typ: $funcType([DT], [$error], false)
    }, {
      prop: "MarshalText",
      name: "MarshalText",
      pkg: "",
      typ: $funcType([], [DT, $error], false)
    }, {
      prop: "UnmarshalText",
      name: "UnmarshalText",
      pkg: "",
      typ: $funcType([DT], [$error], false)
    }];
    AN.init("math/big", [{
      prop: "mant",
      name: "mant",
      embedded: false,
      exported: false,
      typ: DT,
      tag: ""
    }, {
      prop: "exp",
      name: "exp",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }]);
    AS.init("math/big", [{
      prop: "prec",
      name: "prec",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "mode",
      name: "mode",
      embedded: false,
      exported: false,
      typ: AW,
      tag: ""
    }, {
      prop: "acc",
      name: "acc",
      embedded: false,
      exported: false,
      typ: AX,
      tag: ""
    }, {
      prop: "form",
      name: "form",
      embedded: false,
      exported: false,
      typ: AV,
      tag: ""
    }, {
      prop: "neg",
      name: "neg",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "mant",
      name: "mant",
      embedded: false,
      exported: false,
      typ: BX,
      tag: ""
    }, {
      prop: "exp",
      name: "exp",
      embedded: false,
      exported: false,
      typ: $Int32,
      tag: ""
    }]);
    AT.init("math/big", [{
      prop: "msg",
      name: "msg",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }]);
    BL.init("math/big", [{
      prop: "neg",
      name: "neg",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "abs",
      name: "abs",
      embedded: false,
      exported: false,
      typ: BX,
      tag: ""
    }]);
    BW.init("", [{
      prop: "ScanState",
      name: "ScanState",
      embedded: true,
      exported: true,
      typ: C.ScanState,
      tag: ""
    }]);
    BX.init(L);
    CX.init("math/big", [{
      prop: "bbb",
      name: "bbb",
      embedded: false,
      exported: false,
      typ: BX,
      tag: ""
    }, {
      prop: "nbits",
      name: "nbits",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "ndigits",
      name: "ndigits",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }]);
    DA.init("math/big", [{
      prop: "a",
      name: "a",
      embedded: false,
      exported: false,
      typ: BL,
      tag: ""
    }, {
      prop: "b",
      name: "b",
      embedded: false,
      exported: false,
      typ: BL,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = H.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = G.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = J.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = K.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = I.$init();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = F.$init();
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            CQ = new K.Pool.ptr(DP.nil, $throwNilPointerError);
            CY = new DR.ptr(new K.Mutex.ptr(false), DQ.zero());
            M = $toNativeArray($kindUint8, [0, 5, 10, 15]);
            BF = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 5), new $Uint64(0, 25), new $Uint64(0, 125), new $Uint64(0, 625), new $Uint64(0, 3125), new $Uint64(0, 15625), new $Uint64(0, 78125), new $Uint64(0, 390625), new $Uint64(0, 1953125), new $Uint64(0, 9765625), new $Uint64(0, 48828125), new $Uint64(0, 244140625), new $Uint64(0, 1220703125), new $Uint64(1, 1808548329), new $Uint64(7, 452807053), new $Uint64(35, 2264035265), new $Uint64(177, 2730241733), new $Uint64(888, 766306777), new $Uint64(4440, 3831533885), new $Uint64(22204, 1977800241), new $Uint64(111022, 1299066613), new $Uint64(555111, 2200365769), new $Uint64(2775557, 2411894253), new $Uint64(13877787, 3469536673), new $Uint64(69388939, 167814181), new $Uint64(346944695, 839070905), new $Uint64(1734723475, 4195354525)]);
            BY = new BX([1]);
            BM = new BL.ptr(false, BY);
            BZ = new BX([2]);
            CA = new BX([10]);
            CE = 40;
            CM = 20;
            CN = 260;
            CW = 8;
            DJ = $toNativeArray($kindUint8, [0, 13, 26, 32, 44, 57, 70]);
            b = AU(0.5);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            DK = b;
            c = AU(2);
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            DL = c;
            d = AU(3);
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            DM = d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["crypto/rand"] = (function() {
    var $pkg = {},
      $init, A, B, C, D, F, L, N, I, E, G;
    A = $packages["errors"];
    B = $packages["github.com/gopherjs/gopherjs/js"];
    C = $packages["io"];
    D = $packages["math/big"];
    F = $pkg.rngReader = $newType(0, $kindStruct, "rand.rngReader", true, "crypto/rand", false, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    L = $sliceType($Uint8);
    N = $ptrType(F);
    E = function() {
      $pkg.Reader = new F.ptr();
    };
    F.ptr.prototype.Read = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o;
      b = 0;
      c = $ifaceNil;
      d = this;
      e = a.$array;
      f = $parseInt(a.$offset) >> 0;
      g = $global.crypto;
      if (g === undefined) {
        g = $global.msCrypto;
      }
      if (!(g === undefined)) {
        if (!(g.getRandomValues === undefined)) {
          b = a.$length;
          if (b > 65536) {
            b = 65536;
          }
          g.getRandomValues(e.subarray(f, f + b >> 0));
          h = b;
          i = $ifaceNil;
          b = h;
          c = i;
          return [b, c];
        }
      }
      j = $global.require;
      if (!(j === undefined)) {
        k = j($externalize("crypto", $String)).randomBytes;
        if (!(k === undefined)) {
          e.set(k(a.$length), f);
          l = a.$length;
          m = $ifaceNil;
          b = l;
          c = m;
          return [b, c];
        }
      }
      n = 0;
      o = A.New("crypto/rand not available in this environment");
      b = n;
      c = o;
      return [b, c];
    };
    F.prototype.Read = function(a) {
      return this.$val.Read(a);
    };
    G = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = 0;
            c = $ifaceNil;
            e = C.ReadFull($pkg.Reader, a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            d = e;
            b = d[0];
            c = d[1];
            $s = -1;
            return [b, c];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: G
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Read = G;
    N.methods = [{
      prop: "Read",
      name: "Read",
      pkg: "",
      typ: $funcType([L], [$Int, $error], false)
    }];
    F.init("", []);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $pkg.Reader = $ifaceNil;
            I = new D.Int.ptr(false, D.nat.nil).SetUint64(new $Uint64(3793877372, 820596253));
            E();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["go.1password.io/xplatform/vendor/github.com/deckarep/golang-set"] = (function() {
    var $pkg = {},
      $init, B, C, D, E, F, A, G, I, O, Q, R, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, H, J, M, P, S;
    B = $packages["bytes"];
    C = $packages["encoding/json"];
    D = $packages["fmt"];
    E = $packages["reflect"];
    F = $packages["strings"];
    A = $packages["sync"];
    G = $pkg.Iterator = $newType(0, $kindStruct, "mapset.Iterator", true, "go.1password.io/xplatform/vendor/github.com/deckarep/golang-set", true, function(C_, stop_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.C = $chanNil;
        this.stop = $chanNil;
        return;
      }
      this.C = C_;
      this.stop = stop_;
    });
    I = $pkg.Set = $newType(8, $kindInterface, "mapset.Set", true, "go.1password.io/xplatform/vendor/github.com/deckarep/golang-set", true, null);
    O = $pkg.threadSafeSet = $newType(0, $kindStruct, "mapset.threadSafeSet", true, "go.1password.io/xplatform/vendor/github.com/deckarep/golang-set", false, function(s_, RWMutex_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.s = false;
        this.RWMutex = new A.RWMutex.ptr(new A.Mutex.ptr(0, 0), 0, 0, 0, 0);
        return;
      }
      this.s = s_;
      this.RWMutex = RWMutex_;
    });
    Q = $pkg.threadUnsafeSet = $newType(4, $kindMap, "mapset.threadUnsafeSet", true, "go.1password.io/xplatform/vendor/github.com/deckarep/golang-set", false, null);
    R = $pkg.OrderedPair = $newType(0, $kindStruct, "mapset.OrderedPair", true, "go.1password.io/xplatform/vendor/github.com/deckarep/golang-set", true, function(First_, Second_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.First = $ifaceNil;
        this.Second = $ifaceNil;
        return;
      }
      this.First = First_;
      this.Second = Second_;
    });
    T = $structType("", []);
    U = $ptrType(Q);
    V = $ptrType(O);
    W = $sliceType($emptyInterface);
    X = $sliceType($String);
    Y = $sliceType($Uint8);
    Z = $ptrType(W);
    AA = $mapType($String, $emptyInterface);
    AB = $ptrType(G);
    AC = $chanType($emptyInterface, false, true);
    AD = $chanType(T, false, false);
    AE = $funcType([$emptyInterface], [$Bool], false);
    AF = $ptrType(R);
    G.ptr.prototype.Stop = function() {
      var a, b, c, d, e, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              a = this;
              $deferred.push([(function() {
                $recover();
              }), []]);
              $close(a.stop);
              b = a.C;
            case 1:
              d = $recv(b);
              $s = 3;
            case 3:
              if ($c) {
                $c = false;
                d = d.$blk();
              }
              if (d && d.$blk !== undefined) {
                break s;
              }
              c = d;
              e = c[1];
              if (!e) {
                $s = 2;
                continue;
              }
              $s = 1;
              continue;
            case 2:
              $s = -1;
              return;
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: G.ptr.prototype.Stop
            };
          }
          $f.a = a;
          $f.b = b;
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    G.prototype.Stop = function() {
      return this.$val.Stop();
    };
    H = function() {
      var a, b;
      a = new $Chan($emptyInterface, 0);
      b = new $Chan(T, 0);
      return [new G.ptr(a, b), a, b];
    };
    J = function(a) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = [b];
            b[0] = $clone(P(), O);
            c = a;
            d = 0;
          case 1:
            if (!(d < c.$length)) {
              $s = 2;
              continue;
            }
            e = ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]);
            f = b[0].Add(e);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            f;
            d++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return b[0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: J
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.NewSet = J;
    M = function() {
      var a, b;
      a = S();
      return (b || (b = new U(function() {
        return a;
      }, function($v) {
        a = $v;
      })));
    };
    $pkg.NewThreadUnsafeSet = M;
    P = function() {
      return new O.ptr(S(), new A.RWMutex.ptr(new A.Mutex.ptr(0, 0), 0, 0, 0, 0));
    };
    O.ptr.prototype.Add = function(a) {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            $r = b.RWMutex.Lock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            c = (b.$ptr_s || (b.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, b))).Add(a);
            $r = b.RWMutex.Unlock();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.Add
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.Add = function(a) {
      return this.$val.Add(a);
    };
    O.ptr.prototype.Contains = function(a) {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            $r = b.RWMutex.RLock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            c = (b.$ptr_s || (b.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, b))).Contains(a);
            $r = b.RWMutex.RUnlock();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.Contains
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.Contains = function(a) {
      return this.$val.Contains(a);
    };
    O.ptr.prototype.IsSubset = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = $assertType(a, V);
            $r = b.RWMutex.RLock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = c.RWMutex.RLock();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d = (b.$ptr_s || (b.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, b))).IsSubset((c.$ptr_s || (c.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, c))));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            $r = b.RWMutex.RUnlock();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = c.RWMutex.RUnlock();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.IsSubset
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.IsSubset = function(a) {
      return this.$val.IsSubset(a);
    };
    O.ptr.prototype.IsProperSubset = function(a) {
      var a, b, c, d, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              b = this;
              c = $assertType(a, V);
              $r = b.RWMutex.RLock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              $deferred.push([$methodVal(b.RWMutex, "RUnlock"), []]);
              $r = c.RWMutex.RLock();
              $s = 2;
            case 2:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              $deferred.push([$methodVal(c.RWMutex, "RUnlock"), []]);
              d = (b.$ptr_s || (b.$ptr_s = new U(function() {
                return this.$target.s;
              }, function($v) {
                this.$target.s = $v;
              }, b))).IsProperSubset((c.$ptr_s || (c.$ptr_s = new U(function() {
                return this.$target.s;
              }, function($v) {
                this.$target.s = $v;
              }, c))));
              $s = 3;
            case 3:
              if ($c) {
                $c = false;
                d = d.$blk();
              }
              if (d && d.$blk !== undefined) {
                break s;
              }
              $s = -1;
              return d;
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return false;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: O.ptr.prototype.IsProperSubset
            };
          }
          $f.a = a;
          $f.b = b;
          $f.c = c;
          $f.d = d;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    O.prototype.IsProperSubset = function(a) {
      return this.$val.IsProperSubset(a);
    };
    O.ptr.prototype.IsSuperset = function(a) {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = a.IsSubset(b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.IsSuperset
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.IsSuperset = function(a) {
      return this.$val.IsSuperset(a);
    };
    O.ptr.prototype.IsProperSuperset = function(a) {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = a.IsProperSubset(b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.IsProperSuperset
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.IsProperSuperset = function(a) {
      return this.$val.IsProperSuperset(a);
    };
    O.ptr.prototype.Union = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = $assertType(a, V);
            $r = b.RWMutex.RLock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = c.RWMutex.RLock();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d = $assertType((b.$ptr_s || (b.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, b))).Union((c.$ptr_s || (c.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, c)))), U);
            e = new O.ptr(d.$get(), new A.RWMutex.ptr(new A.Mutex.ptr(0, 0), 0, 0, 0, 0));
            $r = b.RWMutex.RUnlock();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = c.RWMutex.RUnlock();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.Union
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.Union = function(a) {
      return this.$val.Union(a);
    };
    O.ptr.prototype.Intersect = function(a) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = $assertType(a, V);
            $r = b.RWMutex.RLock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = c.RWMutex.RLock();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d = (b.$ptr_s || (b.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, b))).Intersect((c.$ptr_s || (c.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, c))));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = $assertType(d, U);
            f = new O.ptr(e.$get(), new A.RWMutex.ptr(new A.Mutex.ptr(0, 0), 0, 0, 0, 0));
            $r = b.RWMutex.RUnlock();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = c.RWMutex.RUnlock();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.Intersect
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.Intersect = function(a) {
      return this.$val.Intersect(a);
    };
    O.ptr.prototype.Difference = function(a) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = $assertType(a, V);
            $r = b.RWMutex.RLock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = c.RWMutex.RLock();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d = (b.$ptr_s || (b.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, b))).Difference((c.$ptr_s || (c.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, c))));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = $assertType(d, U);
            f = new O.ptr(e.$get(), new A.RWMutex.ptr(new A.Mutex.ptr(0, 0), 0, 0, 0, 0));
            $r = b.RWMutex.RUnlock();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = c.RWMutex.RUnlock();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.Difference
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.Difference = function(a) {
      return this.$val.Difference(a);
    };
    O.ptr.prototype.SymmetricDifference = function(a) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = $assertType(a, V);
            $r = b.RWMutex.RLock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = c.RWMutex.RLock();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d = (b.$ptr_s || (b.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, b))).SymmetricDifference((c.$ptr_s || (c.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, c))));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = $assertType(d, U);
            f = new O.ptr(e.$get(), new A.RWMutex.ptr(new A.Mutex.ptr(0, 0), 0, 0, 0, 0));
            $r = b.RWMutex.RUnlock();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = c.RWMutex.RUnlock();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.SymmetricDifference
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.SymmetricDifference = function(a) {
      return this.$val.SymmetricDifference(a);
    };
    O.ptr.prototype.Clear = function() {
      var a, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            $r = a.RWMutex.Lock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            a.s = S();
            $r = a.RWMutex.Unlock();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.Clear
        };
      }
      $f.a = a;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.Clear = function() {
      return this.$val.Clear();
    };
    O.ptr.prototype.Remove = function(a) {
      var a, b, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            $r = b.RWMutex.Lock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            delete b.s[$emptyInterface.keyFor(a)];
            $r = b.RWMutex.Unlock();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.Remove
        };
      }
      $f.a = a;
      $f.b = b;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.Remove = function(a) {
      return this.$val.Remove(a);
    };
    O.ptr.prototype.Cardinality = function() {
      var a, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              a = this;
              $r = a.RWMutex.RLock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              $deferred.push([$methodVal(a.RWMutex, "RUnlock"), []]);
              $s = -1;
              return $keys(a.s).length;
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return 0;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: O.ptr.prototype.Cardinality
            };
          }
          $f.a = a;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    O.prototype.Cardinality = function() {
      return this.$val.Cardinality();
    };
    O.ptr.prototype.Each = function(a) {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            $r = b.RWMutex.RLock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            c = b.s;
            d = 0;
            e = $keys(c);
          case 2:
            if (!(d < e.length)) {
              $s = 3;
              continue;
            }
            f = c[e[d]];
            if (f === undefined) {
              d++;
              $s = 2;
              continue;
            }
            g = f.k;
            h = a(g);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            if (h) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            $s = 3;
            continue;
          case 5:
            d++;
            $s = 2;
            continue;
          case 3:
            $r = b.RWMutex.RUnlock();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.Each
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.Each = function(a) {
      return this.$val.Each(a);
    };
    O.ptr.prototype.Iter = function() {
      var a, b;
      a = this;
      b = new $Chan($emptyInterface, 0);
      $go((function $b() {
        var c, d, e, f, g, $s, $r;
        $s = 0;
        var $f, $c = false;
        if (this !== undefined && this.$blk !== undefined) {
          $f = this;
          $c = true;
          c = $f.c;
          d = $f.d;
          e = $f.e;
          f = $f.f;
          g = $f.g;
          $s = $f.$s;
          $r = $f.$r;
        }
        s: while (true) {
          switch ($s) {
            case 0:
              $r = a.RWMutex.RLock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              c = a.s;
              d = 0;
              e = $keys(c);
            case 2:
              if (!(d < e.length)) {
                $s = 3;
                continue;
              }
              f = c[e[d]];
              if (f === undefined) {
                d++;
                $s = 2;
                continue;
              }
              g = f.k;
              $r = $send(b, g);
              $s = 4;
            case 4:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              d++;
              $s = 2;
              continue;
            case 3:
              $close(b);
              $r = a.RWMutex.RUnlock();
              $s = 5;
            case 5:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              $s = -1;
              return;
          }
          return;
        }
        if ($f === undefined) {
          $f = {
            $blk: $b
          };
        }
        $f.c = c;
        $f.d = d;
        $f.e = e;
        $f.f = f;
        $f.g = g;
        $f.$s = $s;
        $f.$r = $r;
        return $f;
      }), []);
      return b;
    };
    O.prototype.Iter = function() {
      return this.$val.Iter();
    };
    O.ptr.prototype.Iterator = function() {
      var a, b, c, d, e;
      a = this;
      b = H();
      c = b[0];
      d = b[1];
      e = b[2];
      $go((function $b() {
        var f, g, h, i, j, k, l, $s, $r;
        $s = 0;
        var $f, $c = false;
        if (this !== undefined && this.$blk !== undefined) {
          $f = this;
          $c = true;
          f = $f.f;
          g = $f.g;
          h = $f.h;
          i = $f.i;
          j = $f.j;
          k = $f.k;
          l = $f.l;
          $s = $f.$s;
          $r = $f.$r;
        }
        s: while (true) {
          switch ($s) {
            case 0:
              $r = a.RWMutex.RLock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              f = a.s;
              g = 0;
              h = $keys(f);
            case 2:
              if (!(g < h.length)) {
                $s = 3;
                continue;
              }
              i = f[h[g]];
              if (i === undefined) {
                g++;
                $s = 2;
                continue;
              }
              j = i.k;
              l = $select([
                [e],
                [d, j]
              ]);
              $s = 4;
            case 4:
              if ($c) {
                $c = false;
                l = l.$blk();
              }
              if (l && l.$blk !== undefined) {
                break s;
              }
              k = l;
              if (k[0] === 0) {
                $s = 3;
                continue s;
              } else if (k[0] === 1) {}
              g++;
              $s = 2;
              continue;
            case 3:
              $close(d);
              $r = a.RWMutex.RUnlock();
              $s = 5;
            case 5:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              $s = -1;
              return;
          }
          return;
        }
        if ($f === undefined) {
          $f = {
            $blk: $b
          };
        }
        $f.f = f;
        $f.g = g;
        $f.h = h;
        $f.i = i;
        $f.j = j;
        $f.k = k;
        $f.l = l;
        $f.$s = $s;
        $f.$r = $r;
        return $f;
      }), []);
      return c;
    };
    O.prototype.Iterator = function() {
      return this.$val.Iterator();
    };
    O.ptr.prototype.Equal = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = $assertType(a, V);
            $r = b.RWMutex.RLock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = c.RWMutex.RLock();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d = (b.$ptr_s || (b.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, b))).Equal((c.$ptr_s || (c.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, c))));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            $r = b.RWMutex.RUnlock();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = c.RWMutex.RUnlock();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.Equal
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.Equal = function(a) {
      return this.$val.Equal(a);
    };
    O.ptr.prototype.Clone = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            $r = a.RWMutex.RLock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            b = $assertType((a.$ptr_s || (a.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, a))).Clone(), U);
            c = new O.ptr(b.$get(), new A.RWMutex.ptr(new A.Mutex.ptr(0, 0), 0, 0, 0, 0));
            $r = a.RWMutex.RUnlock();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.Clone
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.Clone = function() {
      return this.$val.Clone();
    };
    O.ptr.prototype.String = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            $r = a.RWMutex.RLock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            b = (a.$ptr_s || (a.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, a))).String();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            $r = a.RWMutex.RUnlock();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.String
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.String = function() {
      return this.$val.String();
    };
    O.ptr.prototype.PowerSet = function() {
      var a, b, c, d, e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            $r = a.RWMutex.RLock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            b = (a.$ptr_s || (a.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, a))).PowerSet();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = $assertType(b, U);
            $r = a.RWMutex.RUnlock();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d = new O.ptr(S(), new A.RWMutex.ptr(new A.Mutex.ptr(0, 0), 0, 0, 0, 0));
            e = c.Iter();
          case 4:
            g = $recv(e);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
            h = f[0];
            i = f[1];
            if (!i) {
              $s = 5;
              continue;
            }
            j = $assertType(h, U);
            k = d.Add(new O.ptr(j.$get(), new A.RWMutex.ptr(new A.Mutex.ptr(0, 0), 0, 0, 0, 0)));
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            k;
            $s = 4;
            continue;
          case 5:
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.PowerSet
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.PowerSet = function() {
      return this.$val.PowerSet();
    };
    O.ptr.prototype.Pop = function() {
      var a, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              a = this;
              $r = a.RWMutex.Lock();
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              $deferred.push([$methodVal(a.RWMutex, "Unlock"), []]);
              $s = -1;
              return (a.$ptr_s || (a.$ptr_s = new U(function() {
                return this.$target.s;
              }, function($v) {
                this.$target.s = $v;
              }, a))).Pop();
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: O.ptr.prototype.Pop
            };
          }
          $f.a = a;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    O.prototype.Pop = function() {
      return this.$val.Pop();
    };
    O.ptr.prototype.CartesianProduct = function(a) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = $assertType(a, V);
            $r = b.RWMutex.RLock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = c.RWMutex.RLock();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d = (b.$ptr_s || (b.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, b))).CartesianProduct((c.$ptr_s || (c.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, c))));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = $assertType(d, U);
            f = new O.ptr(e.$get(), new A.RWMutex.ptr(new A.Mutex.ptr(0, 0), 0, 0, 0, 0));
            $r = b.RWMutex.RUnlock();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = c.RWMutex.RUnlock();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.CartesianProduct
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.CartesianProduct = function(a) {
      return this.$val.CartesianProduct(a);
    };
    O.ptr.prototype.ToSlice = function() {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.Cardinality();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = $makeSlice(W, 0, b);
            $r = a.RWMutex.RLock();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d = a.s;
            e = 0;
            f = $keys(d);
            while (true) {
              if (!(e < f.length)) {
                break;
              }
              g = d[f[e]];
              if (g === undefined) {
                e++;
                continue;
              }
              h = g.k;
              c = $append(c, h);
              e++;
            }
            $r = a.RWMutex.RUnlock();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.ToSlice
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.ToSlice = function() {
      return this.$val.ToSlice();
    };
    O.ptr.prototype.MarshalJSON = function() {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            $r = a.RWMutex.RLock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            c = (a.$ptr_s || (a.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, a))).MarshalJSON();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            b = c;
            d = b[0];
            e = b[1];
            $r = a.RWMutex.RUnlock();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.MarshalJSON
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.MarshalJSON = function() {
      return this.$val.MarshalJSON();
    };
    O.ptr.prototype.UnmarshalJSON = function(a) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            $r = b.RWMutex.RLock();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            c = (b.$ptr_s || (b.$ptr_s = new U(function() {
              return this.$target.s;
            }, function($v) {
              this.$target.s = $v;
            }, b))).UnmarshalJSON(a);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
            $r = b.RWMutex.RUnlock();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.UnmarshalJSON
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.UnmarshalJSON = function(a) {
      return this.$val.UnmarshalJSON(a);
    };
    S = function() {
      return {};
    };
    R.ptr.prototype.Equal = function(a) {
      var a, b;
      b = this;
      if ($interfaceIsEqual(b.First, a.First) && $interfaceIsEqual(b.Second, a.Second)) {
        return true;
      }
      return false;
    };
    R.prototype.Equal = function(a) {
      return this.$val.Equal(a);
    };
    $ptrType(Q).prototype.Add = function(a) {
      var a, b, c, d, e, f;
      b = this;
      c = (d = (b.$get())[$emptyInterface.keyFor(a)], d !== undefined ? [d.v, true] : [new T.ptr(), false]);
      e = c[1];
      if (e) {
        return false;
      }
      f = a;
      (b.$get() || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(f)] = {
        k: f,
        v: new T.ptr()
      };
      return true;
    };
    $ptrType(Q).prototype.Contains = function(a) {
      var a, b, c, d, e, f, g, h;
      b = this;
      c = a;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]);
        f = (g = (b.$get())[$emptyInterface.keyFor(e)], g !== undefined ? [g.v, true] : [new T.ptr(), false]);
        h = f[1];
        if (!h) {
          return false;
        }
        d++;
      }
      return true;
    };
    $ptrType(Q).prototype.IsSubset = function(a) {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            $unused($assertType(a, U));
            c = b.$get();
            d = 0;
            e = $keys(c);
          case 1:
            if (!(d < e.length)) {
              $s = 2;
              continue;
            }
            f = c[e[d]];
            if (f === undefined) {
              d++;
              $s = 1;
              continue;
            }
            g = f.k;
            h = a.Contains(new W([g]));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            if (!h) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            $s = -1;
            return false;
          case 4:
            d++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return true;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $ptrType(Q).prototype.IsSubset
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(Q).prototype.IsProperSubset = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            d = b.IsSubset(a);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            if (!(d)) {
              c = false;
              $s = 1;
              continue s;
            }
            e = b.Equal(a);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            c = !e;
          case 1:
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $ptrType(Q).prototype.IsProperSubset
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(Q).prototype.IsSuperset = function(a) {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = a.IsSubset(b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $ptrType(Q).prototype.IsSuperset
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(Q).prototype.IsProperSuperset = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            d = b.IsSuperset(a);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            if (!(d)) {
              c = false;
              $s = 1;
              continue s;
            }
            e = b.Equal(a);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            c = !e;
          case 1:
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $ptrType(Q).prototype.IsProperSuperset
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(Q).prototype.Union = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o;
      b = this;
      c = $assertType(a, U);
      d = S();
      e = b.$get();
      f = 0;
      g = $keys(e);
      while (true) {
        if (!(f < g.length)) {
          break;
        }
        h = e[g[f]];
        if (h === undefined) {
          f++;
          continue;
        }
        i = h.k;
        (j || (j = new U(function() {
          return d;
        }, function($v) {
          d = $v;
        }))).Add(i);
        f++;
      }
      k = c.$get();
      l = 0;
      m = $keys(k);
      while (true) {
        if (!(l < m.length)) {
          break;
        }
        n = k[m[l]];
        if (n === undefined) {
          l++;
          continue;
        }
        o = n.k;
        (j || (j = new U(function() {
          return d;
        }, function($v) {
          d = $v;
        }))).Add(o);
        l++;
      }
      return (j || (j = new U(function() {
        return d;
      }, function($v) {
        d = $v;
      })));
    };
    $ptrType(Q).prototype.Intersect = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = [b];
            c = this;
            d = $assertType(a, U);
            b[0] = S();
            e = a.Cardinality();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            if (c.Cardinality() < e) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            f = c.$get();
            g = 0;
            h = $keys(f);
          case 5:
            if (!(g < h.length)) {
              $s = 6;
              continue;
            }
            i = f[h[g]];
            if (i === undefined) {
              g++;
              $s = 5;
              continue;
            }
            j = i.k;
            k = a.Contains(new W([j]));
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            if (k) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            (b.$ptr || (b.$ptr = new U(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, b))).Add(j);
          case 8:
            g++;
            $s = 5;
            continue;
          case 6:
            $s = 3;
            continue;
          case 2:
            l = d.$get();
            m = 0;
            n = $keys(l);
            while (true) {
              if (!(m < n.length)) {
                break;
              }
              o = l[n[m]];
              if (o === undefined) {
                m++;
                continue;
              }
              p = o.k;
              if (c.Contains(new W([p]))) {
                (b.$ptr || (b.$ptr = new U(function() {
                  return this.$target[0];
                }, function($v) {
                  this.$target[0] = $v;
                }, b))).Add(p);
              }
              m++;
            }
          case 3:
            $s = -1;
            return (b.$ptr || (b.$ptr = new U(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, b)));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $ptrType(Q).prototype.Intersect
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(Q).prototype.Difference = function(a) {
      var a, b, c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = [b];
            c = this;
            $unused($assertType(a, U));
            b[0] = S();
            d = c.$get();
            e = 0;
            f = $keys(d);
          case 1:
            if (!(e < f.length)) {
              $s = 2;
              continue;
            }
            g = d[f[e]];
            if (g === undefined) {
              e++;
              $s = 1;
              continue;
            }
            h = g.k;
            i = a.Contains(new W([h]));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            if (!i) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            (b.$ptr || (b.$ptr = new U(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, b))).Add(h);
          case 4:
            e++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return (b.$ptr || (b.$ptr = new U(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, b)));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $ptrType(Q).prototype.Difference
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(Q).prototype.SymmetricDifference = function(a) {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            $unused($assertType(a, U));
            c = b.Difference(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
            e = a.Difference(b);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            g = d.Union(f);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $ptrType(Q).prototype.SymmetricDifference
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(Q).prototype.Clear = function() {
      var a;
      a = this;
      a.$set(S());
    };
    $ptrType(Q).prototype.Remove = function(a) {
      var a, b;
      b = this;
      delete b.$get()[$emptyInterface.keyFor(a)];
    };
    $ptrType(Q).prototype.Cardinality = function() {
      var a;
      a = this;
      return $keys(a.$get()).length;
    };
    $ptrType(Q).prototype.Each = function(a) {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = b.$get();
            d = 0;
            e = $keys(c);
          case 1:
            if (!(d < e.length)) {
              $s = 2;
              continue;
            }
            f = c[e[d]];
            if (f === undefined) {
              d++;
              $s = 1;
              continue;
            }
            g = f.k;
            h = a(g);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            if (h) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            $s = 2;
            continue;
          case 4:
            d++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $ptrType(Q).prototype.Each
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(Q).prototype.Iter = function() {
      var a, b;
      a = this;
      b = new $Chan($emptyInterface, 0);
      $go((function $b() {
        var c, d, e, f, g, $s, $r;
        $s = 0;
        var $f, $c = false;
        if (this !== undefined && this.$blk !== undefined) {
          $f = this;
          $c = true;
          c = $f.c;
          d = $f.d;
          e = $f.e;
          f = $f.f;
          g = $f.g;
          $s = $f.$s;
          $r = $f.$r;
        }
        s: while (true) {
          switch ($s) {
            case 0:
              c = a.$get();
              d = 0;
              e = $keys(c);
            case 1:
              if (!(d < e.length)) {
                $s = 2;
                continue;
              }
              f = c[e[d]];
              if (f === undefined) {
                d++;
                $s = 1;
                continue;
              }
              g = f.k;
              $r = $send(b, g);
              $s = 3;
            case 3:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              d++;
              $s = 1;
              continue;
            case 2:
              $close(b);
              $s = -1;
              return;
          }
          return;
        }
        if ($f === undefined) {
          $f = {
            $blk: $b
          };
        }
        $f.c = c;
        $f.d = d;
        $f.e = e;
        $f.f = f;
        $f.g = g;
        $f.$s = $s;
        $f.$r = $r;
        return $f;
      }), []);
      return b;
    };
    $ptrType(Q).prototype.Iterator = function() {
      var a, b, c, d, e;
      a = this;
      b = H();
      c = b[0];
      d = b[1];
      e = b[2];
      $go((function $b() {
        var f, g, h, i, j, k, l, $s, $r;
        $s = 0;
        var $f, $c = false;
        if (this !== undefined && this.$blk !== undefined) {
          $f = this;
          $c = true;
          f = $f.f;
          g = $f.g;
          h = $f.h;
          i = $f.i;
          j = $f.j;
          k = $f.k;
          l = $f.l;
          $s = $f.$s;
          $r = $f.$r;
        }
        s: while (true) {
          switch ($s) {
            case 0:
              f = a.$get();
              g = 0;
              h = $keys(f);
            case 1:
              if (!(g < h.length)) {
                $s = 2;
                continue;
              }
              i = f[h[g]];
              if (i === undefined) {
                g++;
                $s = 1;
                continue;
              }
              j = i.k;
              l = $select([
                [e],
                [d, j]
              ]);
              $s = 3;
            case 3:
              if ($c) {
                $c = false;
                l = l.$blk();
              }
              if (l && l.$blk !== undefined) {
                break s;
              }
              k = l;
              if (k[0] === 0) {
                $s = 2;
                continue s;
              } else if (k[0] === 1) {}
              g++;
              $s = 1;
              continue;
            case 2:
              $close(d);
              $s = -1;
              return;
          }
          return;
        }
        if ($f === undefined) {
          $f = {
            $blk: $b
          };
        }
        $f.f = f;
        $f.g = g;
        $f.h = h;
        $f.i = i;
        $f.j = j;
        $f.k = k;
        $f.l = l;
        $f.$s = $s;
        $f.$r = $r;
        return $f;
      }), []);
      return c;
    };
    $ptrType(Q).prototype.Equal = function(a) {
      var a, b, c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            $unused($assertType(a, U));
            c = a.Cardinality();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            if (!((b.Cardinality() === c))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $s = -1;
            return false;
          case 2:
            d = b.$get();
            e = 0;
            f = $keys(d);
          case 4:
            if (!(e < f.length)) {
              $s = 5;
              continue;
            }
            g = d[f[e]];
            if (g === undefined) {
              e++;
              $s = 4;
              continue;
            }
            h = g.k;
            i = a.Contains(new W([h]));
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            if (!i) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            $s = -1;
            return false;
          case 7:
            e++;
            $s = 4;
            continue;
          case 5:
            $s = -1;
            return true;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $ptrType(Q).prototype.Equal
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(Q).prototype.Clone = function() {
      var a, b, c, d, e, f, g, h;
      a = this;
      b = S();
      c = a.$get();
      d = 0;
      e = $keys(c);
      while (true) {
        if (!(d < e.length)) {
          break;
        }
        f = c[e[d]];
        if (f === undefined) {
          d++;
          continue;
        }
        g = f.k;
        (h || (h = new U(function() {
          return b;
        }, function($v) {
          b = $v;
        }))).Add(g);
        d++;
      }
      return (h || (h = new U(function() {
        return b;
      }, function($v) {
        b = $v;
      })));
    };
    $ptrType(Q).prototype.String = function() {
      var a, b, c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = $makeSlice(X, 0, $keys(a.$get()).length);
            c = a.$get();
            d = 0;
            e = $keys(c);
          case 1:
            if (!(d < e.length)) {
              $s = 2;
              continue;
            }
            f = c[e[d]];
            if (f === undefined) {
              d++;
              $s = 1;
              continue;
            }
            g = f.k;
            h = D.Sprintf("%v", new W([g]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            b = $append(b, h);
            d++;
            $s = 1;
            continue;
          case 2:
            i = D.Sprintf("Set{%s}", new W([new $String(F.Join(b, ", "))]));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return i;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $ptrType(Q).prototype.String
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    R.ptr.prototype.String = function() {
      var a, b, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = D.Sprintf("(%v, %v)", new W([a.First, a.Second]));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return b;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: R.ptr.prototype.String
        };
      }
      $f.a = a;
      $f.b = b;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    R.prototype.String = function() {
      return this.$val.String();
    };
    $ptrType(Q).prototype.Pop = function() {
      var a, b, c, d, e, f;
      a = this;
      b = a.$get();
      c = 0;
      d = $keys(b);
      while (true) {
        if (!(c < d.length)) {
          break;
        }
        e = b[d[c]];
        if (e === undefined) {
          c++;
          continue;
        }
        f = e.k;
        delete a.$get()[$emptyInterface.keyFor(f)];
        return f;
      }
      return $ifaceNil;
    };
    $ptrType(Q).prototype.PowerSet = function() {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = [a];
            b = this;
            c = M();
            a[0] = S();
            d = c.Add((a.$ptr || (a.$ptr = new U(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, a))));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            d;
            e = b.$get();
            f = 0;
            g = $keys(e);
          case 2:
            if (!(f < g.length)) {
              $s = 3;
              continue;
            }
            h = [h];
            i = [i];
            j = e[g[f]];
            if (j === undefined) {
              f++;
              $s = 2;
              continue;
            }
            k = j.k;
            i[0] = S();
            l = c.Iter();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            m = l;
            n = m;
          case 5:
            p = $recv(n);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            o = p;
            q = o[0];
            r = o[1];
            if (!r) {
              $s = 6;
              continue;
            }
            h[0] = S();
            s = E.TypeOf(q).Name();
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            if (s === "") {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            t = $assertType(q, U);
            u = (t).$get();
            v = 0;
            w = $keys(u);
            while (true) {
              if (!(v < w.length)) {
                break;
              }
              x = u[w[v]];
              if (x === undefined) {
                v++;
                continue;
              }
              y = x.k;
              (h.$ptr || (h.$ptr = new U(function() {
                return this.$target[0];
              }, function($v) {
                this.$target[0] = $v;
              }, h))).Add(y);
              v++;
            }
            $s = 10;
            continue;
          case 9:
            (h.$ptr || (h.$ptr = new U(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, h))).Add(q);
          case 10:
            (h.$ptr || (h.$ptr = new U(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, h))).Add(k);
            (i.$ptr || (i.$ptr = new U(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, i))).Add((h.$ptr || (h.$ptr = new U(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, h))));
            $s = 5;
            continue;
          case 6:
            z = c.Union((i.$ptr || (i.$ptr = new U(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, i))));
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            c = z;
            f++;
            $s = 2;
            continue;
          case 3:
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $ptrType(Q).prototype.PowerSet
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(Q).prototype.CartesianProduct = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = $assertType(a, U);
            d = M();
            e = b.$get();
            f = 0;
            g = $keys(e);
          case 1:
            if (!(f < g.length)) {
              $s = 2;
              continue;
            }
            h = e[g[f]];
            if (h === undefined) {
              f++;
              $s = 1;
              continue;
            }
            i = h.k;
            j = c.$get();
            k = 0;
            l = $keys(j);
          case 3:
            if (!(k < l.length)) {
              $s = 4;
              continue;
            }
            m = j[l[k]];
            if (m === undefined) {
              k++;
              $s = 3;
              continue;
            }
            n = m.k;
            o = new R.ptr(i, n);
            p = d.Add(new o.constructor.elem(o));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            p;
            k++;
            $s = 3;
            continue;
          case 4:
            f++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $ptrType(Q).prototype.CartesianProduct
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(Q).prototype.ToSlice = function() {
      var a, b, c, d, e, f, g;
      a = this;
      b = $makeSlice(W, 0, a.Cardinality());
      c = a.$get();
      d = 0;
      e = $keys(c);
      while (true) {
        if (!(d < e.length)) {
          break;
        }
        f = c[e[d]];
        if (f === undefined) {
          d++;
          continue;
        }
        g = f.k;
        b = $append(b, g);
        d++;
      }
      return b;
    };
    $ptrType(Q).prototype.MarshalJSON = function() {
      var a, b, c, d, e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = $makeSlice(X, 0, a.Cardinality());
            c = a.$get();
            d = 0;
            e = $keys(c);
          case 1:
            if (!(d < e.length)) {
              $s = 2;
              continue;
            }
            f = c[e[d]];
            if (f === undefined) {
              d++;
              $s = 1;
              continue;
            }
            g = f.k;
            i = C.Marshal(g);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            j = h[0];
            k = h[1];
            if (!($interfaceIsEqual(k, $ifaceNil))) {
              $s = -1;
              return [Y.nil, k];
            }
            b = $append(b, ($bytesToString(j)));
            d++;
            $s = 1;
            continue;
          case 2:
            l = D.Sprintf("[%s]", new W([new $String(F.Join(b, ","))]));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [(new Y($stringToBytes(l))), $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $ptrType(Q).prototype.MarshalJSON
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(Q).prototype.UnmarshalJSON = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = [b];
            c = this;
            b[0] = W.nil;
            d = C.NewDecoder(B.NewReader(a));
            d.UseNumber();
            e = d.Decode((b.$ptr || (b.$ptr = new Z(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, b))));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            if (!($interfaceIsEqual(f, $ifaceNil))) {
              $s = -1;
              return f;
            }
            g = b[0];
            h = 0;
            while (true) {
              if (!(h < g.$length)) {
                break;
              }
              i = ((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h]);
              j = i;
              if ($assertType(j, W, true)[1] || $assertType(j, AA, true)[1]) {
                k = j;
                h++;
                continue;
              } else {
                l = j;
                c.Add(l);
              }
              h++;
            }
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $ptrType(Q).prototype.UnmarshalJSON
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AB.methods = [{
      prop: "Stop",
      name: "Stop",
      pkg: "",
      typ: $funcType([], [], false)
    }];
    V.methods = [{
      prop: "Add",
      name: "Add",
      pkg: "",
      typ: $funcType([$emptyInterface], [$Bool], false)
    }, {
      prop: "Contains",
      name: "Contains",
      pkg: "",
      typ: $funcType([W], [$Bool], true)
    }, {
      prop: "IsSubset",
      name: "IsSubset",
      pkg: "",
      typ: $funcType([I], [$Bool], false)
    }, {
      prop: "IsProperSubset",
      name: "IsProperSubset",
      pkg: "",
      typ: $funcType([I], [$Bool], false)
    }, {
      prop: "IsSuperset",
      name: "IsSuperset",
      pkg: "",
      typ: $funcType([I], [$Bool], false)
    }, {
      prop: "IsProperSuperset",
      name: "IsProperSuperset",
      pkg: "",
      typ: $funcType([I], [$Bool], false)
    }, {
      prop: "Union",
      name: "Union",
      pkg: "",
      typ: $funcType([I], [I], false)
    }, {
      prop: "Intersect",
      name: "Intersect",
      pkg: "",
      typ: $funcType([I], [I], false)
    }, {
      prop: "Difference",
      name: "Difference",
      pkg: "",
      typ: $funcType([I], [I], false)
    }, {
      prop: "SymmetricDifference",
      name: "SymmetricDifference",
      pkg: "",
      typ: $funcType([I], [I], false)
    }, {
      prop: "Clear",
      name: "Clear",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "Remove",
      name: "Remove",
      pkg: "",
      typ: $funcType([$emptyInterface], [], false)
    }, {
      prop: "Cardinality",
      name: "Cardinality",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Each",
      name: "Each",
      pkg: "",
      typ: $funcType([AE], [], false)
    }, {
      prop: "Iter",
      name: "Iter",
      pkg: "",
      typ: $funcType([], [AC], false)
    }, {
      prop: "Iterator",
      name: "Iterator",
      pkg: "",
      typ: $funcType([], [AB], false)
    }, {
      prop: "Equal",
      name: "Equal",
      pkg: "",
      typ: $funcType([I], [$Bool], false)
    }, {
      prop: "Clone",
      name: "Clone",
      pkg: "",
      typ: $funcType([], [I], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "PowerSet",
      name: "PowerSet",
      pkg: "",
      typ: $funcType([], [I], false)
    }, {
      prop: "Pop",
      name: "Pop",
      pkg: "",
      typ: $funcType([], [$emptyInterface], false)
    }, {
      prop: "CartesianProduct",
      name: "CartesianProduct",
      pkg: "",
      typ: $funcType([I], [I], false)
    }, {
      prop: "ToSlice",
      name: "ToSlice",
      pkg: "",
      typ: $funcType([], [W], false)
    }, {
      prop: "MarshalJSON",
      name: "MarshalJSON",
      pkg: "",
      typ: $funcType([], [Y, $error], false)
    }, {
      prop: "UnmarshalJSON",
      name: "UnmarshalJSON",
      pkg: "",
      typ: $funcType([Y], [$error], false)
    }];
    U.methods = [{
      prop: "Add",
      name: "Add",
      pkg: "",
      typ: $funcType([$emptyInterface], [$Bool], false)
    }, {
      prop: "Contains",
      name: "Contains",
      pkg: "",
      typ: $funcType([W], [$Bool], true)
    }, {
      prop: "IsSubset",
      name: "IsSubset",
      pkg: "",
      typ: $funcType([I], [$Bool], false)
    }, {
      prop: "IsProperSubset",
      name: "IsProperSubset",
      pkg: "",
      typ: $funcType([I], [$Bool], false)
    }, {
      prop: "IsSuperset",
      name: "IsSuperset",
      pkg: "",
      typ: $funcType([I], [$Bool], false)
    }, {
      prop: "IsProperSuperset",
      name: "IsProperSuperset",
      pkg: "",
      typ: $funcType([I], [$Bool], false)
    }, {
      prop: "Union",
      name: "Union",
      pkg: "",
      typ: $funcType([I], [I], false)
    }, {
      prop: "Intersect",
      name: "Intersect",
      pkg: "",
      typ: $funcType([I], [I], false)
    }, {
      prop: "Difference",
      name: "Difference",
      pkg: "",
      typ: $funcType([I], [I], false)
    }, {
      prop: "SymmetricDifference",
      name: "SymmetricDifference",
      pkg: "",
      typ: $funcType([I], [I], false)
    }, {
      prop: "Clear",
      name: "Clear",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "Remove",
      name: "Remove",
      pkg: "",
      typ: $funcType([$emptyInterface], [], false)
    }, {
      prop: "Cardinality",
      name: "Cardinality",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Each",
      name: "Each",
      pkg: "",
      typ: $funcType([AE], [], false)
    }, {
      prop: "Iter",
      name: "Iter",
      pkg: "",
      typ: $funcType([], [AC], false)
    }, {
      prop: "Iterator",
      name: "Iterator",
      pkg: "",
      typ: $funcType([], [AB], false)
    }, {
      prop: "Equal",
      name: "Equal",
      pkg: "",
      typ: $funcType([I], [$Bool], false)
    }, {
      prop: "Clone",
      name: "Clone",
      pkg: "",
      typ: $funcType([], [I], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Pop",
      name: "Pop",
      pkg: "",
      typ: $funcType([], [$emptyInterface], false)
    }, {
      prop: "PowerSet",
      name: "PowerSet",
      pkg: "",
      typ: $funcType([], [I], false)
    }, {
      prop: "CartesianProduct",
      name: "CartesianProduct",
      pkg: "",
      typ: $funcType([I], [I], false)
    }, {
      prop: "ToSlice",
      name: "ToSlice",
      pkg: "",
      typ: $funcType([], [W], false)
    }, {
      prop: "MarshalJSON",
      name: "MarshalJSON",
      pkg: "",
      typ: $funcType([], [Y, $error], false)
    }, {
      prop: "UnmarshalJSON",
      name: "UnmarshalJSON",
      pkg: "",
      typ: $funcType([Y], [$error], false)
    }];
    R.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    AF.methods = [{
      prop: "Equal",
      name: "Equal",
      pkg: "",
      typ: $funcType([R], [$Bool], false)
    }];
    G.init("go.1password.io/xplatform/vendor/github.com/deckarep/golang-set", [{
      prop: "C",
      name: "C",
      embedded: false,
      exported: true,
      typ: AC,
      tag: ""
    }, {
      prop: "stop",
      name: "stop",
      embedded: false,
      exported: false,
      typ: AD,
      tag: ""
    }]);
    I.init([{
      prop: "Add",
      name: "Add",
      pkg: "",
      typ: $funcType([$emptyInterface], [$Bool], false)
    }, {
      prop: "Cardinality",
      name: "Cardinality",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "CartesianProduct",
      name: "CartesianProduct",
      pkg: "",
      typ: $funcType([I], [I], false)
    }, {
      prop: "Clear",
      name: "Clear",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "Clone",
      name: "Clone",
      pkg: "",
      typ: $funcType([], [I], false)
    }, {
      prop: "Contains",
      name: "Contains",
      pkg: "",
      typ: $funcType([W], [$Bool], true)
    }, {
      prop: "Difference",
      name: "Difference",
      pkg: "",
      typ: $funcType([I], [I], false)
    }, {
      prop: "Each",
      name: "Each",
      pkg: "",
      typ: $funcType([AE], [], false)
    }, {
      prop: "Equal",
      name: "Equal",
      pkg: "",
      typ: $funcType([I], [$Bool], false)
    }, {
      prop: "Intersect",
      name: "Intersect",
      pkg: "",
      typ: $funcType([I], [I], false)
    }, {
      prop: "IsProperSubset",
      name: "IsProperSubset",
      pkg: "",
      typ: $funcType([I], [$Bool], false)
    }, {
      prop: "IsProperSuperset",
      name: "IsProperSuperset",
      pkg: "",
      typ: $funcType([I], [$Bool], false)
    }, {
      prop: "IsSubset",
      name: "IsSubset",
      pkg: "",
      typ: $funcType([I], [$Bool], false)
    }, {
      prop: "IsSuperset",
      name: "IsSuperset",
      pkg: "",
      typ: $funcType([I], [$Bool], false)
    }, {
      prop: "Iter",
      name: "Iter",
      pkg: "",
      typ: $funcType([], [AC], false)
    }, {
      prop: "Iterator",
      name: "Iterator",
      pkg: "",
      typ: $funcType([], [AB], false)
    }, {
      prop: "Pop",
      name: "Pop",
      pkg: "",
      typ: $funcType([], [$emptyInterface], false)
    }, {
      prop: "PowerSet",
      name: "PowerSet",
      pkg: "",
      typ: $funcType([], [I], false)
    }, {
      prop: "Remove",
      name: "Remove",
      pkg: "",
      typ: $funcType([$emptyInterface], [], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "SymmetricDifference",
      name: "SymmetricDifference",
      pkg: "",
      typ: $funcType([I], [I], false)
    }, {
      prop: "ToSlice",
      name: "ToSlice",
      pkg: "",
      typ: $funcType([], [W], false)
    }, {
      prop: "Union",
      name: "Union",
      pkg: "",
      typ: $funcType([I], [I], false)
    }]);
    O.init("go.1password.io/xplatform/vendor/github.com/deckarep/golang-set", [{
      prop: "s",
      name: "s",
      embedded: false,
      exported: false,
      typ: Q,
      tag: ""
    }, {
      prop: "RWMutex",
      name: "RWMutex",
      embedded: true,
      exported: true,
      typ: A.RWMutex,
      tag: ""
    }]);
    Q.init($emptyInterface, T);
    R.init("", [{
      prop: "First",
      name: "First",
      embedded: false,
      exported: true,
      typ: $emptyInterface,
      tag: ""
    }, {
      prop: "Second",
      name: "Second",
      embedded: false,
      exported: true,
      typ: $emptyInterface,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = B.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = F.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["go.1password.io/xplatform/vendor/github.com/agilebits/spg"] = (function() {
    var $pkg = {},
      $init, G, H, I, A, E, B, F, C, D, K, L, O, Q, R, AB, AC, AE, AF, AG, AH, AI, AP, AQ, AS, AU, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, M, N, S, U, V, W, X, Y, Z, AA, AM, AN, AO, AR, AT, AV, AW;
    G = $packages["bytes"];
    H = $packages["crypto/rand"];
    I = $packages["encoding/binary"];
    A = $packages["fmt"];
    E = $packages["go.1password.io/xplatform/vendor/github.com/deckarep/golang-set"];
    B = $packages["math"];
    F = $packages["math/big"];
    C = $packages["sort"];
    D = $packages["strings"];
    K = $pkg.charList = $newType(12, $kindSlice, "spg.charList", true, "go.1password.io/xplatform/vendor/github.com/agilebits/spg", false, null);
    L = $pkg.CTFlag = $newType(4, $kindUint32, "spg.CTFlag", true, "go.1password.io/xplatform/vendor/github.com/agilebits/spg", true, null);
    O = $pkg.CharRecipe = $newType(0, $kindStruct, "spg.CharRecipe", true, "go.1password.io/xplatform/vendor/github.com/agilebits/spg", true, function(Length_, Allow_, Require_, Exclude_, AllowChars_, RequireSets_, ExcludeChars_, allowedSet_, requiredSets_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Length = 0;
        this.Allow = 0;
        this.Require = 0;
        this.Exclude = 0;
        this.AllowChars = "";
        this.RequireSets = AX.nil;
        this.ExcludeChars = "";
        this.allowedSet = $ifaceNil;
        this.requiredSets = R.nil;
        return;
      }
      this.Length = Length_;
      this.Allow = Allow_;
      this.Require = Require_;
      this.Exclude = Exclude_;
      this.AllowChars = AllowChars_;
      this.RequireSets = RequireSets_;
      this.ExcludeChars = ExcludeChars_;
      this.allowedSet = allowedSet_;
      this.requiredSets = requiredSets_;
    });
    Q = $pkg.reqSet = $newType(0, $kindStruct, "spg.reqSet", true, "go.1password.io/xplatform/vendor/github.com/agilebits/spg", false, function(Name_, s_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Name = "";
        this.s = $ifaceNil;
        return;
      }
      this.Name = Name_;
      this.s = s_;
    });
    R = $pkg.reqSets = $newType(12, $kindSlice, "spg.reqSets", true, "go.1password.io/xplatform/vendor/github.com/agilebits/spg", false, null);
    AB = $pkg.FloatE = $newType(4, $kindFloat32, "spg.FloatE", true, "go.1password.io/xplatform/vendor/github.com/agilebits/spg", true, null);
    AC = $pkg.Password = $newType(0, $kindStruct, "spg.Password", true, "go.1password.io/xplatform/vendor/github.com/agilebits/spg", true, function(tokens_, Entropy_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.tokens = AG.nil;
        this.Entropy = 0;
        return;
      }
      this.tokens = tokens_;
      this.Entropy = Entropy_;
    });
    AE = $pkg.TokenType = $newType(1, $kindUint8, "spg.TokenType", true, "go.1password.io/xplatform/vendor/github.com/agilebits/spg", true, null);
    AF = $pkg.Token = $newType(0, $kindStruct, "spg.Token", true, "go.1password.io/xplatform/vendor/github.com/agilebits/spg", true, function(value_, tType_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.value = "";
        this.tType = 0;
        return;
      }
      this.value = value_;
      this.tType = tType_;
    });
    AG = $pkg.Tokens = $newType(12, $kindSlice, "spg.Tokens", true, "go.1password.io/xplatform/vendor/github.com/agilebits/spg", true, null);
    AH = $pkg.IndexKind = $newType(1, $kindUint8, "spg.IndexKind", true, "go.1password.io/xplatform/vendor/github.com/agilebits/spg", true, null);
    AI = $pkg.Indices = $newType(12, $kindSlice, "spg.Indices", true, "go.1password.io/xplatform/vendor/github.com/agilebits/spg", true, null);
    AP = $pkg.WLRecipe = $newType(0, $kindStruct, "spg.WLRecipe", true, "go.1password.io/xplatform/vendor/github.com/agilebits/spg", true, function(list_, Length_, SeparatorChar_, SeparatorFunc_, Capitalize_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.list = BE.nil;
        this.Length = 0;
        this.SeparatorChar = "";
        this.SeparatorFunc = $throwNilPointerError;
        this.Capitalize = "";
        return;
      }
      this.list = list_;
      this.Length = Length_;
      this.SeparatorChar = SeparatorChar_;
      this.SeparatorFunc = SeparatorFunc_;
      this.Capitalize = Capitalize_;
    });
    AQ = $pkg.CapScheme = $newType(8, $kindString, "spg.CapScheme", true, "go.1password.io/xplatform/vendor/github.com/agilebits/spg", true, null);
    AS = $pkg.WordList = $newType(0, $kindStruct, "spg.WordList", true, "go.1password.io/xplatform/vendor/github.com/agilebits/spg", true, function(words_, unCapitalizableCount_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.words = AX.nil;
        this.unCapitalizableCount = 0;
        return;
      }
      this.words = words_;
      this.unCapitalizableCount = unCapitalizableCount_;
    });
    AU = $pkg.SFFunction = $newType(4, $kindFunc, "spg.SFFunction", true, "go.1password.io/xplatform/vendor/github.com/agilebits/spg", true, null);
    AX = $sliceType($String);
    AY = $ptrType(AC);
    AZ = $sliceType($emptyInterface);
    BA = $sliceType(AF);
    BB = $ptrType(F.Int);
    BC = $sliceType($Uint8);
    BD = $ptrType($Int32);
    BE = $ptrType(AS);
    BF = $ptrType(O);
    BG = $mapType(AE, $Bool);
    O.ptr.prototype.Generate = function() {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            if (a.Length < 1) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            b = A.Errorf("don't ask for passwords of length %d", new AZ([new $Int(a.Length)]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [AY.nil, b];
          case 2:
            c = new AC.ptr(AG.nil, 0);
            d = $clone(a, O).Entropy();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            c.Entropy = d;
            e = a.buildCharacterList();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            if (B.IsInf((c.Entropy), -1)) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            g = A.Errorf("password too short to meet all inclusion requirements", new AZ([]));
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [AY.nil, g];
          case 7:
            h = 200;
            i = 0;
          case 9:
            if (!(i < h)) {
              $s = 10;
              continue;
            }
            j = $makeSlice(BA, a.Length);
            k = 0;
          case 11:
            if (!(k < a.Length)) {
              $s = 12;
              continue;
            }
            m = AO(((f.$length >>> 0)));
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            n = (l = m, ((l < 0 || l >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + l]));
            AF.copy(((k < 0 || k >= j.$length) ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + k]), new AF.ptr(n, 1));
            k = k + (1) >> 0;
            $s = 11;
            continue;
          case 12:
            c.tokens = $subslice(new AG(j.$array), j.$offset, j.$offset + j.$length);
            o = $clone(c, AC).String();
            p = S(o, a.requiredSets);
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            if (p) {
              $s = 14;
              continue;
            }
            $s = 15;
            continue;
          case 14:
            $s = -1;
            return [c, $ifaceNil];
          case 15:
            i = i + (1) >> 0;
            $s = 9;
            continue;
          case 10:
            q = A.Errorf("couldn't generate password complying with requirements after %v attempts", new AZ([new $Int(h)]));
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [AY.nil, q];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.Generate
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.Generate = function() {
      return this.$val.Generate();
    };
    O.ptr.prototype.buildCharacterList = function() {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.AllowChars;
            c = a.ExcludeChars;
            d = $makeSlice(R, 0);
            e = a.RequireSets;
            f = 0;
          case 1:
            if (!(f < e.$length)) {
              $s = 2;
              continue;
            }
            g = f;
            h = ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]);
            if (h.length > 0) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            i = h;
            j = A.Sprintf("Custom %d", new AZ([new $Int((g + 1 >> 0))]));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            k = j;
            l = V(i, k);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            d = $append(d, l);
            b = b + (h);
          case 4:
            f++;
            $s = 1;
            continue;
          case 2:
            m = M;
            n = 0;
            o = $keys(m);
          case 7:
            if (!(n < o.length)) {
              $s = 8;
              continue;
            }
            p = m[o[n]];
            if (p === undefined) {
              n++;
              $s = 7;
              continue;
            }
            q = p.k;
            r = p.v;
            if (!((((a.Allow & q) >>> 0) === 0))) {
              b = b + (r);
            }
            if (!((((a.Require & q) >>> 0) === 0))) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            s = (t = N[L.keyFor(q)], t !== undefined ? [t.v, true] : ["", false]);
            u = s[0];
            v = s[1];
            if (!v) {
              u = "Dunno";
            }
            w = V(r, u);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              w = w.$blk();
            }
            if (w && w.$blk !== undefined) {
              break s;
            }
            d = $append(d, w);
            b = b + (r);
          case 10:
            if (!((((a.Exclude & q) >>> 0) === 0))) {
              c = c + (r);
            }
            n++;
            $s = 7;
            continue;
          case 8:
            x = U(c);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              x = x.$blk();
            }
            if (x && x.$blk !== undefined) {
              break s;
            }
            y = x;
            z = U(b);
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            a.allowedSet = z;
            aa = a.allowedSet.Difference(y);
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              aa = aa.$blk();
            }
            if (aa && aa.$blk !== undefined) {
              break s;
            }
            a.allowedSet = aa;
            ab = d;
            ac = 0;
          case 15:
            if (!(ac < ab.$length)) {
              $s = 16;
              continue;
            }
            ad = $clone(((ac < 0 || ac >= ab.$length) ? ($throwRuntimeError("index out of range"), undefined) : ab.$array[ab.$offset + ac]), Q);
            ae = ad.s.Difference(y);
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              ae = ae.$blk();
            }
            if (ae && ae.$blk !== undefined) {
              break s;
            }
            ad.s = ae;
            af = a.allowedSet.Difference(ad.s);
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              af = af.$blk();
            }
            if (af && af.$blk !== undefined) {
              break s;
            }
            a.allowedSet = af;
            ac++;
            $s = 15;
            continue;
          case 16:
            a.requiredSets = d;
            ag = a.requiredSets.union();
            $s = 19;
          case 19:
            if ($c) {
              $c = false;
              ag = ag.$blk();
            }
            if (ag && ag.$blk !== undefined) {
              break s;
            }
            ah = a.allowedSet.Union(ag.s);
            $s = 20;
          case 20:
            if ($c) {
              $c = false;
              ah = ah.$blk();
            }
            if (ah && ah.$blk !== undefined) {
              break s;
            }
            ai = ah;
            ak = W(ai);
            $s = 21;
          case 21:
            if ($c) {
              $c = false;
              ak = ak.$blk();
            }
            if (ak && ak.$blk !== undefined) {
              break s;
            }
            al = D.Split(ak, "");
            $s = 22;
          case 22:
            if ($c) {
              $c = false;
              al = al.$blk();
            }
            if (al && al.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return (aj = al, $subslice(new K(aj.$array), aj.$offset, aj.$offset + aj.$length));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.buildCharacterList
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.buildCharacterList = function() {
      return this.$val.buildCharacterList();
    };
    O.ptr.prototype.Entropy = function() {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.buildCharacterList();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            d = a.requiredSets.size();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            if (!((d === 0))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            e = $clone(a, O).entropyWithRequired();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return e;
          case 3:
            f = c.$length;
            g = AN(a.Length, f);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return (g);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.Entropy
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.Entropy = function() {
      return this.$val.Entropy();
    };
    O.ptr.prototype.Alphabet = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.buildCharacterList();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            $r = C.Strings($subslice(new AX(c.$array), c.$offset, c.$offset + c.$length));
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return D.Join($subslice(new AX(c.$array), c.$offset, c.$offset + c.$length), "");
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.Alphabet
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.Alphabet = function() {
      return this.$val.Alphabet();
    };
    S = function(a, b) {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (b === R.nil || (b.$length === 0)) {
              $s = -1;
              return true;
            }
            c = b;
            d = 0;
          case 1:
            if (!(d < c.$length)) {
              $s = 2;
              continue;
            }
            e = $clone(((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]), Q);
            f = W(e.s);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            g = f;
            h = $clone(e, Q).size();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            if (h > 0 && !D.ContainsAny(a, g)) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            $s = -1;
            return false;
          case 5:
            d++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return true;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: S
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    U = function(a) {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = E.NewSet(new AZ([]));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            d = D.Split(a, "");
            e = 0;
          case 2:
            if (!(e < d.$length)) {
              $s = 3;
              continue;
            }
            f = ((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e]);
            g = new $String(f);
            h = c.Add(g);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            h;
            e++;
            $s = 2;
            continue;
          case 3:
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: U
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    V = function(a, b) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = U(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = new Q.ptr(b, c);
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: V
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    W = function(a) {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if ($interfaceIsEqual(a, $ifaceNil)) {
              $s = -1;
              return "";
            }
            b = "";
            c = a.Iter();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
          case 2:
            f = $recv(d);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            e = f;
            g = e[0];
            h = e[1];
            if (!h) {
              $s = 3;
              continue;
            }
            b = b + ($assertType(g, $String));
            $s = 2;
            continue;
          case 3:
            $s = -1;
            return b;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: W
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    Q.ptr.prototype.String = function() {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            if ($interfaceIsEqual(a.s, $ifaceNil)) {
              b = true;
              $s = 3;
              continue s;
            }
            c = a.s.Cardinality();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            b = c === 0;
          case 3:
            if (b) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $s = -1;
            return "";
          case 2:
            d = W(a.s);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Q.ptr.prototype.String
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    Q.prototype.String = function() {
      return this.$val.String();
    };
    R.prototype.union = function() {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = E.NewSet(new AZ([]));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = new Q.ptr("UNION", b);
            d = a;
            e = 0;
          case 2:
            if (!(e < d.$length)) {
              $s = 3;
              continue;
            }
            f = $clone(((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e]), Q);
            g = c.s.Union(f.s);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            c.s = g;
            e++;
            $s = 2;
            continue;
          case 3:
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: R.prototype.union
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(R).prototype.union = function() {
      return this.$get().union();
    };
    R.prototype.size = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            if (a.$length === 0) {
              $s = -1;
              return 0;
            }
            b = a.union();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b.s.Cardinality();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: R.prototype.size
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(R).prototype.size = function() {
      return this.$get().size();
    };
    Q.ptr.prototype.size = function() {
      var a, b, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            if ($interfaceIsEqual(a.s, $ifaceNil)) {
              $s = -1;
              return 0;
            }
            b = a.s.Cardinality();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return b;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Q.ptr.prototype.size
        };
      }
      $f.a = a;
      $f.b = b;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    Q.prototype.size = function() {
      return this.$val.size();
    };
    O.ptr.prototype.entropyWithRequired = function() {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = E.NewSet(new AZ([]));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            d = c.Add(a.allowedSet);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            d;
            e = E.NewSet(new AZ([]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            g = a.requiredSets;
            h = 0;
          case 4:
            if (!(h < g.$length)) {
              $s = 5;
              continue;
            }
            i = $clone(((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h]), Q);
            j = f.Add(i.s);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            j;
            h++;
            $s = 4;
            continue;
          case 5:
            k = X(c, f, a.Length);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = k;
            m = F.NewFloat(0);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            n = m.SetInt(l);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            o = n;
            q = o.Float64();
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            p = q;
            r = p[0];
            if (B.IsInf(r, 1)) {
              r = 1.7976931348623157e+308;
            }
            $s = -1;
            return ($fround(B.Log2(r)));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.entropyWithRequired
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.entropyWithRequired = function() {
      return this.$val.entropyWithRequired();
    };
    X = function(a, b, c) {
      var a, aa, ab, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = [a];
            c = [c];
            d = a[0].Union(b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = AA(d);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            g = new F.Int.ptr(false, F.nat.nil);
            h = f.Cardinality();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            i = Y(h);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            j = g.Exp(i, Y(c[0]), BB.nil);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            j;
            k = b.PowerSet();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = k;
            m = E.NewSet(new AZ([]));
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            n = m;
            o = l.Iter();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            p = o;
          case 9:
            r = $recv(p);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              r = r.$blk();
            }
            if (r && r.$blk !== undefined) {
              break s;
            }
            q = r;
            s = q[0];
            t = q[1];
            if (!t) {
              $s = 10;
              continue;
            }
            u = $assertType(s, E.Set, true);
            v = u[0];
            w = u[1];
            if (!(w)) {
              x = false;
              $s = 14;
              continue s;
            }
            y = b.Equal(v);
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              y = y.$blk();
            }
            if (y && y.$blk !== undefined) {
              break s;
            }
            x = !y;
          case 14:
            if (x) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 12:
            z = n.Add(v);
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            z;
          case 13:
            $s = 9;
            continue;
          case 10:
            aa = Z(n, (function(a, c) {
              return function $b(aa) {
                var aa, ab, $s, $r;
                $s = 0;
                var $f, $c = false;
                if (this !== undefined && this.$blk !== undefined) {
                  $f = this;
                  $c = true;
                  aa = $f.aa;
                  ab = $f.ab;
                  $s = $f.$s;
                  $r = $f.$r;
                }
                s: while (true) {
                  switch ($s) {
                    case 0:
                      ab = X(a[0], aa, c[0]);
                      $s = 1;
                    case 1:
                      if ($c) {
                        $c = false;
                        ab = ab.$blk();
                      }
                      if (ab && ab.$blk !== undefined) {
                        break s;
                      }
                      $s = -1;
                      return ab;
                  }
                  return;
                }
                if ($f === undefined) {
                  $f = {
                    $blk: $b
                  };
                }
                $f.aa = aa;
                $f.ab = ab;
                $f.$s = $s;
                $f.$r = $r;
                return $f;
              };
            })(a, c));
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              aa = aa.$blk();
            }
            if (aa && aa.$blk !== undefined) {
              break s;
            }
            ab = aa;
            $s = -1;
            return g.Sub(g, ab);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: X
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    Y = function(a) {
      var a;
      return F.NewInt((new $Int64(0, a)));
    };
    Z = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = new F.Int.ptr(false, F.nat.nil);
            d = a.Iter();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
          case 2:
            g = $recv(e);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
            h = f[0];
            i = f[1];
            if (!i) {
              $s = 3;
              continue;
            }
            j = $assertType(h, E.Set, true);
            k = j[0];
            l = j[1];
            if (l) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            m = c;
            n = b(k);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            o = n;
            p = c.Add(m, o);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            p;
          case 6:
            $s = 2;
            continue;
          case 3:
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Z
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AA = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = E.NewSet(new AZ([]));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            d = a.Iter();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
          case 3:
            g = $recv(e);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
            h = f[0];
            i = f[1];
            if (!i) {
              $s = 4;
              continue;
            }
            j = $assertType(h, E.Set, true);
            k = j[0];
            l = j[1];
            if (l) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            m = c.Union(k);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            c = m;
          case 7:
            $s = 3;
            continue;
          case 4:
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AA
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AC.ptr.prototype.Tokens = function() {
      var a;
      a = this;
      return a.tokens;
    };
    AC.prototype.Tokens = function() {
      return this.$val.Tokens();
    };
    AC.ptr.prototype.String = function() {
      var a, b, c, d, e;
      a = this;
      b = "";
      c = a.tokens;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = $clone(((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]), AF);
        b = b + ($clone(e, AF).Value());
        d++;
      }
      return b;
    };
    AC.prototype.String = function() {
      return this.$val.String();
    };
    AF.ptr.prototype.Value = function() {
      var a;
      a = this;
      return a.value;
    };
    AF.prototype.Value = function() {
      return this.$val.Value();
    };
    AF.ptr.prototype.Type = function() {
      var a;
      a = this;
      return a.tType;
    };
    AF.prototype.Type = function() {
      return this.$val.Type();
    };
    AG.prototype.ofType = function(a) {
      var a, b, c, d, e, f;
      b = this;
      c = new AX([]);
      d = b;
      e = 0;
      while (true) {
        if (!(e < d.$length)) {
          break;
        }
        f = $clone(((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e]), AF);
        if (f.tType === a) {
          c = $append(c, $clone(f, AF).Value());
        }
        e++;
      }
      return c;
    };
    $ptrType(AG).prototype.ofType = function(a) {
      return this.$get().ofType(a);
    };
    AG.prototype.MakeIndices = function() {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            if (a.$length === 0) {
              $s = -1;
              return [AI.nil, $ifaceNil];
            }
            b = a.Kind();
            c = b;
            if (c === (0)) {
              $s = 2;
              continue;
            }
            if (c === (2)) {
              $s = 3;
              continue;
            }
            if (c === (1)) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 2:
            $s = -1;
            return [new AI([((b << 24 >>> 24))]), $ifaceNil];
          case 3:
            d = new AI([((b << 24 >>> 24))]);
            e = $makeSlice(AI, a.$length);
            f = a;
            g = 0;
          case 7:
            if (!(g < f.$length)) {
              $s = 8;
              continue;
            }
            h = g;
            i = $clone(((g < 0 || g >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + g]), AF);
            j = $clone(i, AF).Value();
            k = j.length;
            if (k > 255) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            l = A.Errorf("token too large (%d)", new AZ([new $Int(k)]));
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [AI.nil, l];
          case 10:
            ((h < 0 || h >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + h] = ((k << 24 >>> 24)));
            g++;
            $s = 7;
            continue;
          case 8:
            m = e;
            n = 0;
            while (true) {
              if (!(n < m.$length)) {
                break;
              }
              o = ((n < 0 || n >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + n]);
              d = $append(d, o);
              n++;
            }
            $s = -1;
            return [d, $ifaceNil];
          case 4:
            d = new AI([((b << 24 >>> 24))]);
            e = $makeSlice(AI, a.$length);
            p = a;
            q = 0;
          case 12:
            if (!(q < p.$length)) {
              $s = 13;
              continue;
            }
            h = q;
            i = $clone(((q < 0 || q >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + q]), AF);
            j = $clone(i, AF).Value();
            k = j.length;
            if (k > 255) {
              $s = 14;
              continue;
            }
            $s = 15;
            continue;
          case 14:
            r = A.Errorf("token too large (%d)", new AZ([new $Int(k)]));
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              r = r.$blk();
            }
            if (r && r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [AI.nil, r];
          case 15:
            ((h < 0 || h >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + h] = ((k << 24 >>> 24)));
            q++;
            $s = 12;
            continue;
          case 13:
            s = e;
            t = 0;
            while (true) {
              if (!(t < s.$length)) {
                break;
              }
              o = ((t < 0 || t >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + t]);
              d = $append(d, o);
              t++;
            }
            $s = -1;
            return [d, $ifaceNil];
          case 5:
            u = new AI([3]);
            v = $makeSlice(AI, ($imul(2, a.$length)));
            w = a;
            x = 0;
          case 17:
            if (!(x < w.$length)) {
              $s = 18;
              continue;
            }
            y = x;
            z = $clone(((x < 0 || x >= w.$length) ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + x]), AF);
            aa = $clone(z, AF).Value();
            ab = aa.length;
            ac = $clone(z, AF).Type();
            if (ab > 255) {
              $s = 19;
              continue;
            }
            $s = 20;
            continue;
          case 19:
            ad = A.Errorf("token too large (%d)", new AZ([new $Int(ab)]));
            $s = 21;
          case 21:
            if ($c) {
              $c = false;
              ad = ad.$blk();
            }
            if (ad && ad.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [AI.nil, ad];
          case 20:
            (ae = $imul(2, y), ((ae < 0 || ae >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + ae] = ((ab << 24 >>> 24))));
            (af = (($imul(2, y))) + 1 >> 0, ((af < 0 || af >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + af] = ((ac << 24 >>> 24))));
            x++;
            $s = 17;
            continue;
          case 18:
            ag = v;
            ah = 0;
            while (true) {
              if (!(ah < ag.$length)) {
                break;
              }
              ai = ((ah < 0 || ah >= ag.$length) ? ($throwRuntimeError("index out of range"), undefined) : ag.$array[ag.$offset + ah]);
              u = $append(u, ai);
              ah++;
            }
            $s = -1;
            return [u, $ifaceNil];
          case 6:
          case 1:
            $s = -1;
            return [AI.nil, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AG.prototype.MakeIndices
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(AG).prototype.MakeIndices = function() {
      return this.$get().MakeIndices();
    };
    AG.prototype.Kind = function() {
      var a;
      a = this;
      if (a.isAllAtoms() && (a.maxTokenLen() === 1)) {
        return 0;
      }
      if (a.isAllAtoms()) {
        return 1;
      }
      if (a.isAlternatingTokens()) {
        return 2;
      }
      return 3;
    };
    $ptrType(AG).prototype.Kind = function() {
      return this.$get().Kind();
    };
    AG.prototype.isAlternatingTokens = function() {
      var a, b, c, d, e, f, g, h, i, j, k, l;
      a = this;
      if (!(((b = a.$length % 2, b === b ? b : $throwRuntimeError("integer divide by zero")) === 1))) {
        return false;
      }
      c = a.Types();
      if (!(($keys(c).length === 2))) {
        return false;
      }
      if (!((d = c[AE.keyFor(1)], d !== undefined ? d.v : false) && (e = c[AE.keyFor(0)], e !== undefined ? e.v : false))) {
        return false;
      }
      f = a;
      g = 0;
      while (true) {
        if (!(g < f.$length)) {
          break;
        }
        h = g;
        i = $clone(((g < 0 || g >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + g]), AF);
        j = $clone(i, AF).Type();
        l = (k = h % 2, k === k ? k : $throwRuntimeError("integer divide by zero"));
        if (l === (0)) {
          if (!((j === 1))) {
            return false;
          }
        } else if (l === (1)) {
          if (!((j === 0))) {
            return false;
          }
        }
        g++;
      }
      return true;
    };
    $ptrType(AG).prototype.isAlternatingTokens = function() {
      return this.$get().isAlternatingTokens();
    };
    AG.prototype.Types = function() {
      var a, b, c, d, e, f;
      a = this;
      b = {};
      c = a;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = $clone(((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]), AF);
        f = $clone(e, AF).Type();
        (b || $throwRuntimeError("assignment to entry in nil map"))[AE.keyFor(f)] = {
          k: f,
          v: true
        };
        d++;
      }
      return b;
    };
    $ptrType(AG).prototype.Types = function() {
      return this.$get().Types();
    };
    AG.prototype.isAllOfType = function(a) {
      var a, b, c, d;
      b = this;
      c = b.Types();
      if (($keys(c).length === 1) && (d = c[AE.keyFor(a)], d !== undefined ? d.v : false)) {
        return true;
      }
      return false;
    };
    $ptrType(AG).prototype.isAllOfType = function(a) {
      return this.$get().isAllOfType(a);
    };
    AG.prototype.maxTokenLen = function() {
      var a, b, c, d, e, f;
      a = this;
      b = 0;
      c = a;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = $clone(((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]), AF);
        f = $clone(e, AF).Value().length;
        if (f > b) {
          b = f;
        }
        d++;
      }
      return b;
    };
    $ptrType(AG).prototype.maxTokenLen = function() {
      return this.$get().maxTokenLen();
    };
    AG.prototype.isAllAtoms = function() {
      var a;
      a = this;
      return a.isAllOfType(1);
    };
    $ptrType(AG).prototype.isAllAtoms = function() {
      return this.$get().isAllAtoms();
    };
    AG.prototype.Atoms = function() {
      var a;
      a = this;
      return a.ofType(1);
    };
    $ptrType(AG).prototype.Atoms = function() {
      return this.$get().Atoms();
    };
    AG.prototype.Separators = function() {
      var a;
      a = this;
      return a.ofType(0);
    };
    $ptrType(AG).prototype.Separators = function() {
      return this.$get().Separators();
    };
    AM = function() {
      var a, b, c, d, e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = [a];
            b = $makeSlice(BC, 8);
            d = H.Read(b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            c = d;
            e = c[1];
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            f = e.Error();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $panic(new $String("PRNG gen error:" + f));
          case 3:
            a[0] = 0;
            g = G.NewReader(b);
            i = I.Read(g, (h = I.LittleEndian, new h.constructor.elem(h)), (a.$ptr || (a.$ptr = new BD(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, a))));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            e = i;
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            j = e.Error();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            $panic(new $String("PRNG conversion error:" + j));
          case 7:
            $s = -1;
            return ((a[0] >>> 0));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AM
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN = function(a, b) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (b < 1) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            c = A.Printf("entropySimple: There must be a positive number of elements. Not %d\n", new AZ([new $Int(b)]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            c;
          case 2:
            d = B.Log2((b));
            $s = -1;
            return ($fround((a) * d));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AO = function(a) {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (a <= 0) {
              $panic(new $String("invalid argument to int31n"));
            }
            if (((a & ((a - 1 >>> 0))) >>> 0) === 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            b = AM();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return (b & ((a - 1 >>> 0))) >>> 0;
          case 2:
            d = ((2147483647 - (c = 2147483648 % (a), c === c ? c : $throwRuntimeError("integer divide by zero")) >>> 0));
            e = AM();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
          case 5:
            if (!(f > d)) {
              $s = 6;
              continue;
            }
            g = AM();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
            $s = 5;
            continue;
          case 6:
            $s = -1;
            return (h = f % a, h === h ? h : $throwRuntimeError("integer divide by zero"));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AO
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AR = function(a, b) {
      var a, b, c;
      c = new AP.ptr(b, a, "", $throwNilPointerError, "none");
      return c;
    };
    $pkg.NewWLRecipe = AR;
    AP.ptr.prototype.Size = function() {
      var a;
      a = this;
      return $clone(a.list, AS).Size();
    };
    AP.prototype.Size = function() {
      return this.$val.Size();
    };
    AS.ptr.prototype.Size = function() {
      var a, b, c;
      a = this;
      b = a.words.$length;
      if ((c = (new $Uint64(0, b)), (c.$high > 0 || (c.$high === 0 && c.$low > 4294967295)))) {
        return 4294967295;
      }
      return ((b >>> 0));
    };
    AS.prototype.Size = function() {
      return this.$val.Size();
    };
    AT = function(a) {
      var a, aa, ab, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (a.$length === 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            b = A.Errorf("cannot set up word list generator without words", new AZ([]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [BE.nil, b];
          case 2:
            if ((c = (new $Uint64(0, a.$length)), (c.$high > 0 || (c.$high === 0 && c.$low > 4294967295)))) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            d = A.Errorf("we can't handle more than %d words", new AZ([new $Uint32(4294967295)]));
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [BE.nil, d];
          case 5:
            e = {};
            f = a;
            g = 0;
            while (true) {
              if (!(g < f.$length)) {
                break;
              }
              h = ((g < 0 || g >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + g]);
              if (!(i = e[$String.keyFor(h)], i !== undefined ? i.v : false)) {
                j = h;
                (e || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(j)] = {
                  k: j,
                  v: true
                };
              }
              g++;
            }
            k = 0;
            l = e;
            m = 0;
            n = $keys(l);
          case 7:
            if (!(m < n.length)) {
              $s = 8;
              continue;
            }
            o = l[n[m]];
            if (o === undefined) {
              m++;
              $s = 7;
              continue;
            }
            p = o.k;
            if ((q = e[$String.keyFor(p)], q !== undefined ? q.v : false)) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            r = D.Title(p);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              r = r.$blk();
            }
            if (r && r.$blk !== undefined) {
              break s;
            }
            s = r;
            if ((t = e[$String.keyFor(s)], t !== undefined ? t.v : false)) {
              if (!(s === p)) {
                delete e[$String.keyFor(s)];
              } else {
                k = k + (1) >> 0;
              }
            }
          case 10:
            m++;
            $s = 7;
            continue;
          case 8:
            u = AX.nil;
            v = e;
            w = 0;
            x = $keys(v);
            while (true) {
              if (!(w < x.length)) {
                break;
              }
              y = v[x[w]];
              if (y === undefined) {
                w++;
                continue;
              }
              z = y.k;
              u = $append(u, z);
              w++;
            }
            if (a.$length > u.$length) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 12:
            aa = A.Printf("%d duplicate words found when setting up word list generator\n", new AZ([new $Int((a.$length - u.$length >> 0))]));
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              aa = aa.$blk();
            }
            if (aa && aa.$blk !== undefined) {
              break s;
            }
            aa;
          case 13:
            ab = new AS.ptr(u, k);
            $s = -1;
            return [ab, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AT
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.NewWordList = AT;
    AP.ptr.prototype.Generate = function() {
      var a, aa, ab, ac, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = [a];
            a[0] = this;
            b = new AC.ptr(AG.nil, 0);
            if ($clone(a[0], AP).Size() === 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            c = A.Errorf("wordlist generator must be set up before being used", new AZ([]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [AY.nil, c];
          case 2:
            if (a[0].Length < 1) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            d = A.Errorf("don't ask for passwords of length %d", new AZ([new $Int(a[0].Length)]));
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [AY.nil, d];
          case 5:
            e = $throwNilPointerError;
            if (a[0].SeparatorFunc === $throwNilPointerError) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            e = ((function(a) {
              return function() {
                return [a[0].SeparatorChar, 0];
              };
            })(a));
            $s = 9;
            continue;
          case 8:
            e = a[0].SeparatorFunc;
          case 9:
            g = (f = a[0].Length, ((f < 0 || f > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
            h = a[0].Capitalize;
            if (h === ("first")) {
              $s = 11;
              continue;
            }
            if (h === ("one")) {
              $s = 12;
              continue;
            }
            if (h === ("random")) {
              $s = 13;
              continue;
            }
            if (h === ("all")) {
              $s = 14;
              continue;
            }
            $s = 15;
            continue;
          case 11:
            i = 0;
            (g || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(i)] = {
              k: i,
              v: true
            };
            $s = 15;
            continue;
          case 12:
            j = AO(((a[0].Length >>> 0)));
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            k = ((j >> 0));
            l = k;
            (g || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(l)] = {
              k: l,
              v: true
            };
            $s = 15;
            continue;
          case 13:
            m = 1;
          case 17:
            if (!(m <= a[0].Length)) {
              $s = 18;
              continue;
            }
            n = AO(2);
            $s = 21;
          case 21:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            if (n === 1) {
              $s = 19;
              continue;
            }
            $s = 20;
            continue;
          case 19:
            o = m;
            (g || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(o)] = {
              k: o,
              v: true
            };
          case 20:
            m = m + (1) >> 0;
            $s = 17;
            continue;
          case 18:
            $s = 15;
            continue;
          case 14:
            p = 1;
            while (true) {
              if (!(p <= a[0].Length)) {
                break;
              }
              q = p;
              (g || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(q)] = {
                k: q,
                v: true
              };
              p = p + (1) >> 0;
            }
          case 15:
          case 10:
            r = new BA([]);
            s = 0;
          case 22:
            if (!(s < a[0].Length)) {
              $s = 23;
              continue;
            }
            v = AO(($clone(a[0], AP).Size()));
            $s = 24;
          case 24:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            w = (t = a[0].list.words, u = v, ((u < 0 || u >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + u]));
            if ((x = g[$Int.keyFor(s)], x !== undefined ? x.v : false)) {
              $s = 25;
              continue;
            }
            $s = 26;
            continue;
          case 25:
            y = D.Title(w);
            $s = 27;
          case 27:
            if ($c) {
              $c = false;
              y = y.$blk();
            }
            if (y && y.$blk !== undefined) {
              break s;
            }
            w = y;
          case 26:
            if (w.length > 0) {
              r = $append(r, new AF.ptr(w, 1));
            }
            if (s < (a[0].Length - 1 >> 0)) {
              $s = 28;
              continue;
            }
            $s = 29;
            continue;
          case 28:
            aa = e();
            $s = 30;
          case 30:
            if ($c) {
              $c = false;
              aa = aa.$blk();
            }
            if (aa && aa.$blk !== undefined) {
              break s;
            }
            z = aa;
            ab = z[0];
            if (ab.length > 0) {
              r = $append(r, new AF.ptr(ab, 0));
            }
          case 29:
            s = s + (1) >> 0;
            $s = 22;
            continue;
          case 23:
            b.tokens = $subslice(new AG(r.$array), r.$offset, r.$offset + r.$length);
            ac = $clone(a[0], AP).Entropy();
            $s = 31;
          case 31:
            if ($c) {
              $c = false;
              ac = ac.$blk();
            }
            if (ac && ac.$blk !== undefined) {
              break s;
            }
            b.Entropy = ac;
            $s = -1;
            return [b, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AP.ptr.prototype.Generate
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AP.prototype.Generate = function() {
      return this.$val.Generate();
    };
    AP.ptr.prototype.Entropy = function() {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = (($clone(a, AP).Size() >> 0));
            c = AN(a.Length, b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
            if (a.list.isAllCapitalizable()) {
              e = a.Capitalize;
              if (e === ("random")) {
                d = $fround(d + (($fround((a.Length)))));
              } else if (e === ("one")) {
                d = $fround(d + (($fround(B.Log2((a.Length))))));
              }
            }
            f = 0;
            if (!(a.SeparatorFunc === $throwNilPointerError)) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            h = a.SeparatorFunc();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            g = h;
            f = g[1];
          case 3:
            d = $fround(d + ($fround(($fround((a.Length) - 1)) * f)));
            $s = -1;
            return (d);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AP.ptr.prototype.Entropy
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AP.prototype.Entropy = function() {
      return this.$val.Entropy();
    };
    AS.ptr.prototype.isAllCapitalizable = function() {
      var a;
      a = this;
      if (a.unCapitalizableCount > 0) {
        return false;
      }
      return true;
    };
    AS.prototype.isAllCapitalizable = function() {
      return this.$val.isAllCapitalizable();
    };
    AV = function(a) {
      var a, b;
      b = $throwNilPointerError;
      b = (function $b() {
        var c, $s, $r;
        $s = 0;
        var $f, $c = false;
        if (this !== undefined && this.$blk !== undefined) {
          $f = this;
          $c = true;
          c = $f.c;
          $s = $f.$s;
          $r = $f.$r;
        }
        s: while (true) {
          switch ($s) {
            case 0:
              c = AW($clone(a, O));
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                c = c.$blk();
              }
              if (c && c.$blk !== undefined) {
                break s;
              }
              $s = -1;
              return c;
          }
          return;
        }
        if ($f === undefined) {
          $f = {
            $blk: $b
          };
        }
        $f.c = c;
        $f.$s = $s;
        $f.$r = $r;
        return $f;
      });
      return b;
    };
    $pkg.NewSFFunction = AV;
    AW = function(a) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = $clone(a, O).Generate();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            b = c;
            d = b[0];
            $s = -1;
            return [$clone(d, AC).String(), (d.Entropy)];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AW
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.methods = [{
      prop: "Generate",
      name: "Generate",
      pkg: "",
      typ: $funcType([], [AY, $error], false)
    }, {
      prop: "Entropy",
      name: "Entropy",
      pkg: "",
      typ: $funcType([], [$Float32], false)
    }, {
      prop: "Alphabet",
      name: "Alphabet",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "fullAlphabet",
      name: "fullAlphabet",
      pkg: "go.1password.io/xplatform/vendor/github.com/agilebits/spg",
      typ: $funcType([], [K, $error], false)
    }, {
      prop: "entropyWithRequired",
      name: "entropyWithRequired",
      pkg: "go.1password.io/xplatform/vendor/github.com/agilebits/spg",
      typ: $funcType([], [$Float32], false)
    }];
    BF.methods = [{
      prop: "buildCharacterList",
      name: "buildCharacterList",
      pkg: "go.1password.io/xplatform/vendor/github.com/agilebits/spg",
      typ: $funcType([], [K], false)
    }];
    Q.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "size",
      name: "size",
      pkg: "go.1password.io/xplatform/vendor/github.com/agilebits/spg",
      typ: $funcType([], [$Int], false)
    }];
    R.methods = [{
      prop: "union",
      name: "union",
      pkg: "go.1password.io/xplatform/vendor/github.com/agilebits/spg",
      typ: $funcType([], [Q], false)
    }, {
      prop: "size",
      name: "size",
      pkg: "go.1password.io/xplatform/vendor/github.com/agilebits/spg",
      typ: $funcType([], [$Int], false)
    }];
    AC.methods = [{
      prop: "Tokens",
      name: "Tokens",
      pkg: "",
      typ: $funcType([], [AG], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    AF.methods = [{
      prop: "Value",
      name: "Value",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Type",
      name: "Type",
      pkg: "",
      typ: $funcType([], [AE], false)
    }];
    AG.methods = [{
      prop: "ofType",
      name: "ofType",
      pkg: "go.1password.io/xplatform/vendor/github.com/agilebits/spg",
      typ: $funcType([AE], [AX], false)
    }, {
      prop: "MakeIndices",
      name: "MakeIndices",
      pkg: "",
      typ: $funcType([], [AI, $error], false)
    }, {
      prop: "Kind",
      name: "Kind",
      pkg: "",
      typ: $funcType([], [AH], false)
    }, {
      prop: "isAlternatingTokens",
      name: "isAlternatingTokens",
      pkg: "go.1password.io/xplatform/vendor/github.com/agilebits/spg",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Types",
      name: "Types",
      pkg: "",
      typ: $funcType([], [BG], false)
    }, {
      prop: "isAllOfType",
      name: "isAllOfType",
      pkg: "go.1password.io/xplatform/vendor/github.com/agilebits/spg",
      typ: $funcType([AE], [$Bool], false)
    }, {
      prop: "maxTokenLen",
      name: "maxTokenLen",
      pkg: "go.1password.io/xplatform/vendor/github.com/agilebits/spg",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "isAllAtoms",
      name: "isAllAtoms",
      pkg: "go.1password.io/xplatform/vendor/github.com/agilebits/spg",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Atoms",
      name: "Atoms",
      pkg: "",
      typ: $funcType([], [AX], false)
    }, {
      prop: "Separators",
      name: "Separators",
      pkg: "",
      typ: $funcType([], [AX], false)
    }];
    AP.methods = [{
      prop: "Size",
      name: "Size",
      pkg: "",
      typ: $funcType([], [$Uint32], false)
    }, {
      prop: "Generate",
      name: "Generate",
      pkg: "",
      typ: $funcType([], [AY, $error], false)
    }, {
      prop: "Entropy",
      name: "Entropy",
      pkg: "",
      typ: $funcType([], [$Float32], false)
    }];
    AS.methods = [{
      prop: "Size",
      name: "Size",
      pkg: "",
      typ: $funcType([], [$Uint32], false)
    }];
    BE.methods = [{
      prop: "isAllCapitalizable",
      name: "isAllCapitalizable",
      pkg: "go.1password.io/xplatform/vendor/github.com/agilebits/spg",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "capitalizeRatio",
      name: "capitalizeRatio",
      pkg: "go.1password.io/xplatform/vendor/github.com/agilebits/spg",
      typ: $funcType([], [$Float64], false)
    }];
    K.init($String);
    O.init("go.1password.io/xplatform/vendor/github.com/agilebits/spg", [{
      prop: "Length",
      name: "Length",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: ""
    }, {
      prop: "Allow",
      name: "Allow",
      embedded: false,
      exported: true,
      typ: L,
      tag: ""
    }, {
      prop: "Require",
      name: "Require",
      embedded: false,
      exported: true,
      typ: L,
      tag: ""
    }, {
      prop: "Exclude",
      name: "Exclude",
      embedded: false,
      exported: true,
      typ: L,
      tag: ""
    }, {
      prop: "AllowChars",
      name: "AllowChars",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "RequireSets",
      name: "RequireSets",
      embedded: false,
      exported: true,
      typ: AX,
      tag: ""
    }, {
      prop: "ExcludeChars",
      name: "ExcludeChars",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "allowedSet",
      name: "allowedSet",
      embedded: false,
      exported: false,
      typ: E.Set,
      tag: ""
    }, {
      prop: "requiredSets",
      name: "requiredSets",
      embedded: false,
      exported: false,
      typ: R,
      tag: ""
    }]);
    Q.init("go.1password.io/xplatform/vendor/github.com/agilebits/spg", [{
      prop: "Name",
      name: "Name",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "s",
      name: "s",
      embedded: false,
      exported: false,
      typ: E.Set,
      tag: ""
    }]);
    R.init(Q);
    AC.init("go.1password.io/xplatform/vendor/github.com/agilebits/spg", [{
      prop: "tokens",
      name: "tokens",
      embedded: false,
      exported: false,
      typ: AG,
      tag: ""
    }, {
      prop: "Entropy",
      name: "Entropy",
      embedded: false,
      exported: true,
      typ: $Float32,
      tag: ""
    }]);
    AF.init("go.1password.io/xplatform/vendor/github.com/agilebits/spg", [{
      prop: "value",
      name: "value",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "tType",
      name: "tType",
      embedded: false,
      exported: false,
      typ: AE,
      tag: ""
    }]);
    AG.init(AF);
    AI.init($Uint8);
    AP.init("go.1password.io/xplatform/vendor/github.com/agilebits/spg", [{
      prop: "list",
      name: "list",
      embedded: false,
      exported: false,
      typ: BE,
      tag: ""
    }, {
      prop: "Length",
      name: "Length",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: ""
    }, {
      prop: "SeparatorChar",
      name: "SeparatorChar",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "SeparatorFunc",
      name: "SeparatorFunc",
      embedded: false,
      exported: true,
      typ: AU,
      tag: ""
    }, {
      prop: "Capitalize",
      name: "Capitalize",
      embedded: false,
      exported: true,
      typ: AQ,
      tag: ""
    }]);
    AS.init("go.1password.io/xplatform/vendor/github.com/agilebits/spg", [{
      prop: "words",
      name: "words",
      embedded: false,
      exported: false,
      typ: AX,
      tag: ""
    }, {
      prop: "unCapitalizableCount",
      name: "unCapitalizableCount",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }]);
    AU.init([], [$String, AB], false);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = G.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = H.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = I.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = F.$init();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            M = $makeMap(L.keyFor, [{
              k: 1,
              v: "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
            }, {
              k: 2,
              v: "abcdefghijklmnopqrstuvwxyz"
            }, {
              k: 4,
              v: "0123456789"
            }, {
              k: 8,
              v: "!#%)*+,-.:=>?@]^_}~"
            }, {
              k: 16,
              v: "0O1Il5S"
            }]);
            N = $makeMap(L.keyFor, [{
              k: 1,
              v: "Uppers"
            }, {
              k: 2,
              v: "Lowers"
            }, {
              k: 4,
              v: "Digits"
            }, {
              k: 8,
              v: "Symbols"
            }, {
              k: 0,
              v: "None"
            }, {
              k: 3,
              v: "Letters"
            }, {
              k: 15,
              v: "All characters"
            }]);
            $pkg.SFDigits1 = AV(new O.ptr(1, 4, 0, 0, "", AX.nil, "", $ifaceNil, R.nil));
            $pkg.SFDigits2 = AV(new O.ptr(2, 4, 0, 0, "", AX.nil, "", $ifaceNil, R.nil));
            $pkg.SFDigitsNoAmbiguous1 = AV(new O.ptr(1, 4, 0, 16, "", AX.nil, "", $ifaceNil, R.nil));
            $pkg.SFDigitsNoAmbiguous2 = AV(new O.ptr(2, 4, 0, 16, "", AX.nil, "", $ifaceNil, R.nil));
            $pkg.SFSymbols = AV(new O.ptr(1, 8, 0, 0, "", AX.nil, "", $ifaceNil, R.nil));
            $pkg.SFDigitsSymbols = AV(new O.ptr(1, 12, 0, 0, "", AX.nil, "", $ifaceNil, R.nil));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["go.1password.io/xplatform/vendor/github.com/agilebits/golang-net/publicsuffix"] = (function() {
    var $pkg = {},
      $init, A, B, I, G, H, C, D, E, F;
    A = $packages["fmt"];
    B = $packages["strings"];
    I = $sliceType($emptyInterface);
    C = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      b = "";
      c = false;
      d = 0;
      e = 1551;
      f = d;
      g = e;
      h = a;
      i = a.length;
      j = false;
      k = h;
      l = i;
      m = j;
      loop: while (true) {
        n = B.LastIndex(k, ".");
        if (m) {
          l = 1 + n >> 0;
        }
        if (f === g) {
          break;
        }
        o = D($substring(k, (1 + n >> 0)), f, g);
        if (o === 4294967295) {
          break;
        }
        p = ((o < 0 || o >= G.length) ? ($throwRuntimeError("index out of range"), undefined) : G[o]) >>> 21 >>> 0;
        c = !((((p & 1) >>> 0) === 0));
        p = (q = (1), q < 32 ? (p >>> q) : 0) >>> 0;
        p = (r = (p & 1023) >>> 0, ((r < 0 || r >= H.length) ? ($throwRuntimeError("index out of range"), undefined) : H[r]));
        f = (p & 16383) >>> 0;
        p = (s = (14), s < 32 ? (p >>> s) : 0) >>> 0;
        g = (p & 16383) >>> 0;
        p = (t = (14), t < 32 ? (p >>> t) : 0) >>> 0;
        u = (p & 3) >>> 0;
        if (u === (0)) {
          l = 1 + n >> 0;
        } else if (u === (1)) {
          l = 1 + k.length >> 0;
          break loop;
        }
        p = (v = (2), v < 32 ? (p >>> v) : 0) >>> 0;
        m = !((((p & 1) >>> 0) === 0));
        if (n === -1) {
          break;
        }
        k = $substring(k, 0, n);
      }
      if (l === a.length) {
        w = $substring(a, (1 + B.LastIndex(a, ".") >> 0));
        x = c;
        b = w;
        c = x;
        return [b, c];
      }
      y = $substring(a, l);
      z = c;
      b = y;
      c = z;
      return [b, c];
    };
    $pkg.PublicSuffix = C;
    D = function(a, b, c) {
      var a, b, c, d, e, f;
      while (true) {
        if (!(b < c)) {
          break;
        }
        e = b + (d = ((c - b >>> 0)) / 2, (d === d && d !== 1 / 0 && d !== -1 / 0) ? d >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 0;
        f = E(e);
        if (f < a) {
          b = e + 1 >>> 0;
        } else if (f === a) {
          return e;
        } else {
          c = e;
        }
      }
      return 4294967295;
    };
    E = function(a) {
      var a, b, c, d, e;
      b = ((a < 0 || a >= G.length) ? ($throwRuntimeError("index out of range"), undefined) : G[a]);
      c = (b & 63) >>> 0;
      b = (d = (6), d < 32 ? (b >>> d) : 0) >>> 0;
      e = (b & 32767) >>> 0;
      return $substring("9guacuiababia-goracleaningroks-theatreebinagisobetsumidatlanticasertairanzanquannefrankfurtatarantoyakokonoebinordre-landd-dnshome-webservercelliguriagrocerybnikahokutobamagentositecnologiajudaicable-modemocraciaugustowadaeguambulancebizenakatombetsumitakagiizehimeji234lima-cityeatselinogradultarnobrzegyptian4tarumizusawaetnagahamaroyereportashkentatamotors3-ap-northeast-20001wwwebredirectmemsettsupport3l3p0rtargets-itargivestbytomaritimekeeping12038biomutashinaindigenamsosnowiecatholicaxiascolipicenodumetlifeinsurancebirdartcenterprisesakimobetsuitainairforceoppdalimoliserniabirkenesoddtangenovaraholtalenikonanporovnobirthplacebitballooningjovikariyaltakasagotembaixadabjarkoyukuhashimoichinosekigaharabjerkreimbarclaycards3-eu-west-1bjugnieznord-aurdalpha-myqnapcloud66blackfridayurihonjournalisteinkjerusalembroideryusuharablancomedicaltanissettaipeiheijindustriabloombergbauernuorochesterbloxcms3-website-sa-east-1bluedancebmoattachments3-website-us-east-1bms3-website-us-west-1bmweddingladefensells-for-less3-website-us-west-2bnpparibaselburglassassinationalheritagebnrwedeployusuisserveirchattanooganordkappanamatsuzakindustriesteamfamberkeleyuu2-localhostrowwlkpmgleezebomloabathsbcheltenham-radio-openairbusantiquest-a-la-maisondre-landroidivttasvuotnakanojohanamakinoharabondiyuzawabonninohekinannestadnpanasonichernigovernmentjmaxxxboxenapponazure-mobilebookingliwiceboomladbrokes5yboschaefflerdalvdalaskanittedallasallebesbyglandroverhalla-speziabostikarlsoybostonakijinsekikogentinglobalashovhachinohedmarkarmoybotanicalgardeninomiyakonojorpelandrangedalindaskvollindesnesakyotanabellunombresciabotanicgardenirasakinfinitintuitjomemorialinkyard-cloudeitybotanybouncemerckmsdnipropetrovskjervoyagebounty-fullensakerrypropertiesalangenishiazainuyamashinatsukigatakarazukameokameyamatotakadaboutiquebechernihivgubarclays3-eu-west-2bozen-suedtirolkuszczytnord-frontierbplacedekagaminord-odalwaysdatabaseballangenoamishirasatochigiessensiositelekommunikationishigovtjxfinitybrandywinevalleybrasiliabrindisibenikebristoloseyouripirangap-northeast-3britishcolumbialowiezachpomorskienishiharabroadcastlefrakkestadray-dnstracebroadwaybroke-itkmaxxjavald-aostaplesalondonetskarpaczeladzlgloboavistaprintelligencebrokerbronnoysundrayddnsfreebox-osascoli-picenordlandraydnsupdaterbrothermesaverdealstahaugesunderseaportsinfolldalivornobrowsersafetymarketsaltdalomzaporizhzhegurinvestmentsaludrivefsnillfjordrobaknoluoktagajobojinzais-a-candidatebrumunddalondrinaplesalvadordalibabalsan-suedtirollagdenesnaaseralingenkainanaejrietisalatinabenonichernivtsiciliabrunelasticbeanstalkaruizawabrusselsalzburglogowegroweibolognagatorockartuzybruxellesamegawabryanskleppgafanpachigasakievennodesaarlandrudunsamnangerbrynewjerseybuskerudinewportlligatksatxn--0trq7p7nnishiizunazukis-a-catererbuzentsujiiebuzzparaglidingloppenzaolbia-tempio-olbiatempioolbialystokkembuchikumagayagawakuyabukihokumakogenglandupontariodejaneirodoybweirbzhitomirumalatvuopmicrolightinglugmbhartiffanycoloradoplateaudiocolumbusheycommunitysvardoharuovatozsdeloittemp-dnsanokashiwaracomobaracomparemarkerryhotelsantabarbaracompute-1computerhistoryofscience-fictioncomsecuritytacticsantacruzsantafedjejuifminamidaitomandalucernecondoshichinohealth-carereformitakeharaconferenceconstructionconsuladollsantamariakeconsultanthropologyconsultingrossetouchihayaakasakawaharacontactrani-andria-barletta-trani-andriacontagematsubaracontemporaryarteducationalchikugojomedio-campidano-mediocampidanomediocontractorskenconventureshinodearthdfcbankashiwazakiyosemitecookingchannelsdvrdnsdojoetsuwanouchikujogaszkolahppiacenzagancoolukowfashioncooperativano-frankivskoleikangercopenhagencyclopedichitachinakagawatchandclockarumaifarsundyndns-blogdnsamsclubindalorenskogrimstadyndns-freeboxosloftranakasatsunairportland-4-salernoboribetsucksamsungripescaravantaacorsicagliaribeiraokinawashirosatochiokinoshimaizuruhrcorvettemasekasukabedzin-the-bandaioiraseeklogesurancechirealmpmncosenzakopanerairguardiannakadomarinebraskaunjargalsacertmgretachikawakeisenbahncosidnsfor-better-thanawatchesantoandreamhostersanukis-a-democratraniandriabarlettatraniandriacostumedizinhistorischesaobernardownloadyndns-remotewdyndns-serverdaluroycouchpotatofriesaogoncartoonartdecologiacouncilutskasumigaurawa-mazowszextraspace-to-rentalstomakomaibaracouponsaotomeloyalistjordalshalsencoursesapporocq-acranbrookuwanalyticsardegnaroycreditcardyndns-webhopencraftranoycreditunioncremonashgabadaddjaguarqhachiojiyahoooshikamaishimodatecrewhalingroundhandlingroznycricketrzyncrimeast-kazakhstanangercrotonexus-3crowniparsardiniacrsvpartis-a-designercruisesarluxembourgrpartsarpsborgruecryptonomichigangwoncuisinellair-traffic-controlleyculturalcenternopilawawhoswhokksundyndns-wikiracuneocupcakecuritibaghdadyndns-workisboringuidefinimakanegasakinkobayashikaoirminamiechizencxn--12c1fe0bradescorporationcyberlevagangaviikanonjis-a-doctoraycymrussiacyonabaruminamifuranocyoutheworkpccwiiheyakageferrarissagamiharaferreroticanonoichinomiyakefetsundynnsarufutsunomiyawakasaikaitakoelnfguitarsaudafhvalerfidonnakanotoddenfieldynservebbsasayamafigueresinstagingujoinvillevangerfilateliafilegearfilminamiizukamishihoronobeauxartsandcraftsauheradynuconnectransportefinalfinancefineartsavannahgafinlandynv6finnoyfirebaseappartyfirenzefirestonefirmdaleirvikasuyamelbournefishingolffansaves-the-whalessandria-trani-barletta-andriatranibarlettaandriafitjarfitnessettlementravelchannelfjalerflesbergulenflickragerotikakamigaharaflightsavonarusawaflirflogintogurafloraflorencefloridavvenjargaulardalfloripaderbornfloristanohatajirittohmalvikaszubyflorogersaxoflowersbschokokekschokoladenfltravelersinsuranceflynnhosting-clusterflynnhubargainstitutelemarkarasjohkamikoaniikappueblockbustermezgorzeleccoffeedbackplaneapplegodoesntexisteingeekarasjokarasuyamarugame-hostrolekamiminers3-eu-west-3utilitiesquare7fndynvpnplus-4for-ourfor-someeresistancefor-theaterforexrothachirogatakamatsukawaforgotdnscholarshipschoolforsaleitungsenforsandasuololfortalfortmissoulancashireggio-calabriafortworthadanorthwesternmutualforumzwildlifedorainfracloudcontrolappasadenaritakurashikis-a-geekatowicefosneschulefotarivnefoxfordeatnurembergunmapartmentschwarzgwangjuniperfozorafredrikstadtvschweizfreeddnsgeekgalaxyfreedesktoperauniteroizumizakirovogradoyfreemasonryfreesitevadsoccertificationfreetlsciencecentersciencehistoryfreiburguovdageaidnulvikatsushikabeeldengeluidyroyfreightrdfreseniuscountryestateofdelawarezzoologyfribourgushikamifuranorth-kazakhstanfriuli-v-giuliafriuli-ve-giuliafriuli-vegiuliafriuli-venezia-giuliafriuli-veneziagiuliafriuli-vgiuliafriuliv-giuliafriulive-giuliafriulivegiuliafriulivenezia-giuliafriuliveneziagiuliafriulivgiuliafrlfroganscientistockholmestrandfrognfrolandfrom-akrehamnfrom-alfrom-arfrom-azfrom-capebretonamicrosoftbankatsuyamarumorimachidafrom-codynaliasdaburfrom-ctrentin-sued-tirolfrom-dchitosetogitsuldalotenkawafrom-debianfrom-flanderscjohnsonfrom-gausdalfrom-hichisochildrensgardenfrom-iafrom-idfrom-ilfrom-incheonfrom-kscotlandfrom-kyowariasahikawafrom-lancasterfrom-mangonohejis-a-greenfrom-mdfrom-meethnologyfrom-mifunefrom-mnfrom-modalenfrom-mscrapper-sitefrom-mtnfrom-nchocolatelevisionishikawazukamitsuefrom-ndfrom-nefrom-nh-serveblogsitexashorokanaiefrom-njaworznotogawafrom-nminamimakis-a-gurunzenfrom-nv-infoodnetworkshoppingwiddlewismillerfrom-nyfrom-ohkurafrom-oketohnoshooguyfrom-orfrom-padovaksdalfrom-pratohobby-sitextileksvikaufenfrom-ris-a-hard-workerfrom-schoenbrunnfrom-sdfrom-tnfrom-txn--12co0c3b4evalleaostaticscrappingxn--1ck2e1barreauctionavigationavoibmdeportenrightathomeftpalmaseratiitatebayashiibajddarchitecturealtydalces3-external-1from-utazuerichardlikescandynamic-dnscrysechofunatoriginsurecreationishimerafrom-val-daostavalleyfrom-vtrentin-suedtirolfrom-wafrom-wielunnerfrom-wvalled-aostatoilfrom-wyfrosinonefrostalowa-wolawafroyahikobeardubaiduckdnserveminecraftrentino-a-adigefstavernfujiiderafujikawaguchikonefujiminokamoenairtelecitychyattorneyagawakkanaibetsubamericanfamilydscloudapplinzis-a-hunterfujinomiyadavvesiidattowebcampinashikiminohosteroyrvikingfujiokayamangyshlakasamatsudontexistmein-iservebeerfujisatoshonairtrafficplexus-1fujisawafujishiroishidakabiratoridedyn-ip24fujitsurugashimaniwakuratefujixeroxn--1ctwolominamatakkokaminoyamaxunusualpersonfujiyoshidazaifudaigokaseljordfukayabeatservemp3fukuchiyamadafukudominichonanbuildingriwataraidyndns-homednsandnessjoenishinomiyashironofukuis-a-knightpointtokamachintaifun-dnsaliasiafukumitsubishigakiryuohtawaramotoineppuboliviajessheimperiafukuokazakisarazurecontainerdpolicefukuroishikarikaturindalfukusakishiwadafukuyamagatakaharuslivinghistoryfunabashiriuchinadafunagatakahashimamakisofukushimannore-og-uvdalfunahashikamiamakusatsumasendaisennangoodyearfundaciofuoiskujukuriyamansionservep2passagenservepicservequakefuosskoczowilliamhillfurnitureggio-emilia-romagnakatsugawafurubirafurudonostiaarpassenger-associationfurukawais-a-landscaperfusodegaurafussaikisosakitagawafutabayamaguchinomigawafutboldlygoingnowhere-for-morenakayamanxn--1lqs03nfuttsurugiminamiminowafuturecmservesarcasmatartanddesignfuturehostingfuturemailingfvgfylkesbiblackbaudcdn77-securecifederationfyresdalhannanmokuizumodenaklodzkobierzycehannosegawahanyuzenhapmirhareidsbergenharstadharvestcelebrationhasamarcheapaviancarrierhasaminami-alpssells-itrentino-aadigehashbanghasudahasura-appfizerhasvikazohatogayaitakamoriokalmykiahatoyamazakitakamiizumisanofidelityhatsukaichikaiseis-a-libertarianhattfjelldalhayashimamotobungotakadapliernewmexicoalhazuminobusellsyourhomegoodsevenassisicilyhbodoes-itvedestrandhelsinkitakatakanabeautysnesewinbarrel-of-knowledgeologyokozeu-1hembygdsforbundhemnesharis-a-linux-useranishiaritabashijonawatehemsedalhepforgeherokussldheroyhgtvalledaostavangerhigashiagatsumagoianiahigashichichibunkyonanaoshimageandsoundandvisionhigashihiroshimanehigashiizumozakitakyushuaiahigashikagawahigashikagurasoedahigashikawakitaaikitamihamadahigashikurumeguromskoghigashimatsushimaritimodernhigashimatsuyamakitaakitadaitoigawahigashimurayamamotorcyclesharpgfoggiahigashinarusembokukitamotosumy-gatewayhigashinehigashiomihachimanaustdalhigashiosakasayamanakakogawahigashishirakawamatakanezawahigashisumiyoshikawaminamiaikitanakagusukumoduminamiogunicomcastresindeviceshawaiijimarnardalhigashitsunoshiroomurahigashiurausukitashiobarahigashiyamatokoriyamanashifteditchyouripharmacienshellaspeziahigashiyodogawahigashiyoshinogaris-a-llamarriottrentino-alto-adigehiraizumisatokaizukaluganskypehirakatashinagawahiranais-a-musicianhirarahiratsukagawahirayaizuwakamatsubushikusakadogawahistorichouseshimojis-a-nascarfanhitachiomiyagildeskaliszhitachiotagooglecodespotaruis-a-nurservegame-serverhitraeumtgeradellogliastradinghjartdalhjelmelandholeckochikushinonsenergyholidayhomeipharmacyshimokawahomelinkitoolsztynsettlershimokitayamahomelinuxn--1lqs71dhomeofficehomesecuritymacaparecidahomesecuritypchoseiroumuenchenishinoomotegohomesenseminehomeunixn--1qqw23ahondahoneywellbeingzonehongopocznorfolkebiblelhonjyoitakaokamakurazakitaurayasudahornindalhorseoullensvanguardhorteneis-a-painteractivegaskimitsubatamibudejjuedischesapeakebayernrtrentino-altoadigehospitalhoteleshimonitayanagithubusercontentrentino-s-tirolhotmailhoyangerhoylandetroitskazunowruzhgorodeohumanitieshimonosekikawahurdalhurumajis-a-patsfanhyllestadhyogoris-a-personaltrainerhyugawarahyundaiwafunejfkharkovaojlchoshibuyachiyodattorelayjlljmphilipsynology-diskstationjnjcphilatelyjoyentrentinoa-adigejoyokaichibalatinogiftshinjournalismailillehammerfeste-iphoenixn--2m4a15ejpmorganjpnchoyodobashichikashukujitawaravennakamagayachtsandoyjprshinjukumanojurkoshunantankhmelnitskiyamarylandkosugekotohiradomainshintokushimakotourakouhokutamakis-a-teacherkassymantechnologykounosupplieshintomikasaharakouyamashikekouzushimashikis-a-techietis-a-photographerokuapphdkozagawakozakis-a-therapistoiakozowindmillkpnkppspdnshinyoshitomiokamogawakrasnodarkredstonekristiansandcatshiojirishirifujiedakristiansundkrodsheradkrokstadelvaldaostarnbergkryminamisanrikubetsurfastpanelblagrarchaeologyeongbuklugsmileasinglest-mon-blogueurovisionionjukudoyamaceratabusebastopologyeonggiehtavuoatnagaivuotnagaokakyotambabydgoszczecinemadridvagsoygardendoftheinternetflixilovecollegefantasyleaguernseykumatorinokumejimasoykumenantokonamegatakasugais-an-accountantshimosuwalkis-a-playerkunisakis-an-actorkunitachiarailwaykunitomigusukumamotoyamashikokuchuokunneppugliakunstsammlungkunstunddesignkuokgroupictetrentinoaadigekurehabmerkurgankurobelaudiblebtimnetzkurogiminamiashigarakuroisoftwarendalenugkuromatsunais-an-actresshimotsukekurotakikawasakis-an-anarchistoricalsocietykushirogawakustanais-an-artisteigenkusupplykutchanelkutnokuzumakis-an-engineeringkvafjordkvalsundkvamlidlugolekafjordkvanangenkvinesdalkvinnheradkviteseidskogkvitsoykwpspectruminamitanekzmissilezajskmpspbarrell-of-knowledgeometre-experts-comptables3-fips-us-gov-west-1misugitokuyamatsumaebashikshacknetrentinoalto-adigemitourismolangevagrigentomologyeongnamegawakayamagazineat-urlmitoyoakemiuramiyazurewebsiteshikagamiishibukawamiyotamanomjondalenmlbfanmonstermontrealestatefarmequipmentrentinoaltoadigemonza-brianzaporizhzhiamonza-e-della-brianzapposhirakofuefukihaborokunohealthcareershiranukanagawamonzabrianzaptokyotangotpantheonsitemonzaebrianzaramonzaedellabrianzamoonscalemoparachutingmordoviamoriyamatsumotofukemoriyoshiminamiawajikis-foundationmormonmouthaebaruericssonyoursidegreemoroyamatsunomortgagemoscowindowshiraois-gonemoseushistorymosjoenmoskeneshiraokananiimihoboleslawiechristmasakinderoymosshiratakahagitlabormosviknx-serverrankoshigayanagawamoteginowaniihamatamakawajimaoris-into-animeiwamarshallstatebankfhappousrlmoviemovimientolgamovistargardmozilla-iotrentinos-tirolmtranbymuenstermuginozawaonsenmuikamisunagawamukodairamulhouservehalflifestylemunakatanemuncienciamuosattemupictureshishikuis-into-carshimotsumamurmanskolobrzegersundmurotorcraftrentinostirolmusashimurayamatsusakahoginankokubunjis-into-cartoonshinichinanmusashinoharamuseetrentinosued-tirolmuseumverenigingmusicargodaddyn-vpndnshisognemutsuzawamy-vigorgemy-wanggouvicenzamyactivedirectorymyasustor-elvdalmycdn77-sslattuminamiuonumassa-carrara-massacarraramassabusinessebyklegalloanshioyanaizumydattolocalhistorymyddnskingmydissentrentinosuedtirolmydroboehringerikemydshisuifuelveruminamiyamashirokawanabelembetsukubankhmelnytskyivaporcloudnshinkamigotoyohashimotottoris-a-rockstarachowicemyeffectrentinsued-tirolmyfirewallonieruchomoscienceandindustrynmyfritzmyftpaccesshitaramamyhome-servermyjinomykolaivarggatrentinsuedtirolmymailermymediapchromedicinakamurataishinomakindlegnicafedexhibitionishinoshimatsushigemyokohamamatsudamypepiemontemypetshizukuishimofusaitamatsukuris-into-gamessinazawamyphotoshibalestrandabergamoarekeymachinewhampshirebungoonoipifonyminanomypiagetmyiphostfoldnavymypsxn--30rr7ymysecuritycamerakermyshopblockshizuokanazawamytis-a-bookkeeperugiamytuleapilotshoujis-leetnedalmyvnchryslermywireitrentoyonezawapiszpittsburghofficialpiwatepixolinopizzapkomakiyosunndalplanetariumincommbanklabudhabikinokawabarthadselfipatriaplantationplantshowaplatformshangrilanshowtimemergencyahabahcavuotnagareyamakeupowiathletajimabaridagawalbrzycharitysfjordplaystationplazaplchungnamdalseidfjordyndns-iparliamentmparmatta-varjjatoyosatoyonakagyokutoyokawaplumbingoplurinacionalpodlasiellaktyubinskiptveterinairealtorlandpodzonepohlpoivronpokerpokrovskomatsushimasfjordenpoliticartierpolitiendapolkowicepoltavalle-aostarostwodzislawinnershriramsterdamnserverbaniapomorzeszowiosienarutomobellevuelosangelesjabbottrevisohughesigdalpordenonepornporsangerporsangugeporsgrunnanyokoshibahikariwanumatakazakis-lostrodawarapoznanpraxis-a-bruinsfanprdpreservationpresidioprgmrprimelhusdecorativeartsilkomforbarsycentertainmentattooceanographics3-sa-east-1principeprivatizehealthinsuranceprochowiceproductionsimple-urlprofesionalprogressivenneslaskerrylogisticsirdalpromombetsurgeonshalloffameldalpropertyprotectionprotonetritonprudentialpruszkowitdkommunalforbundprzeworskogptplusgardenpupimientakayamattelefonicarbonia-iglesias-carboniaiglesiascarboniapvhagakhanamigawapvtroandinosaurepaircraftingvollombardynamisches-dnslingpwchurcharternidyndns-mailottepzqldqponqslgbtrogstadquicksytestingquipelementslupskommuneqvcircleverappspotagerstorfjordstorjdevcloudcontrolledstpetersburgstreamuneuesokndalstudiostudyndns-at-homedepotenzamamidsundstuff-4-salestufftoread-booksnesolarssonstuttgartrusteesusakis-not-certifieducatorahimeshimamateramobilysusonosuzakaniepcesuzukanmakiwiensuzukis-savedunetbankhakassiasvalbardunloppacificircustomersveiosvelvikongsbergsvizzerasvn-reposologneswedenswidnicasacamdvrcampinagrandebugattipschlesischesolundbeckomonowtvareservehttphonefosshinshinotsurgeryswiebodzindianapolis-a-bloggerswiftcoverswinoujscienceandhistoryswisshikis-slickharkivanylvenicesynology-dsolutionslztushuissier-justicetuvalle-daostatic-accessopotromsakakinokiatuxfamilytwmailvestre-slidrepbodynathomebuiltrvbashkiriautoscanadaejeonbuk12vestre-totennishiawakuravestvagoyvevelstadvibo-valentiavibovalentiavideovillasnesoddenmarkhangelskjakdnepropetrovskiervaapsteiermarkoninjambylvinnicasadelamonedatingvinnytsiavipsinaappinkomaganevirginiavirtual-userveexchangevirtualuserveftpioneervirtueeldomein-vigorlicevirtuelvisakegawaviterboknowsitallvivoldavixn--32vp30hagebostadvlaanderenvladikavkazimierz-dolnyvladimirvlogoipippulawyvolkswagentsor-varangervologdanskonskowolayangrouphotographysiovolvolkenkundenvolyngdalvossevangenvotevotingvotoyonowiwatsukiyonoticiaskoyabearalvahkijobserveronagarahkkeravjuegoshikikonaikawachinaganoharamcoachampionshiphoptobishimaintenancebetsuikidsmynasushiobarackmazerbaijan-mayenebakkeshibechambagriculturennebudapest-a-la-masionthewifiat-band-campaniawloclawekonsulatrobeepilepsydneywmflabsorfoldworldworse-thandawowithgoogleapisa-hockeynutsiracusakataketomisatotalwpdevcloudyclusterwritesthisblogsytewroclawithyoutuberspacekitagatakinouewtcminnesotaketakatoris-an-entertainerwtfastvps-serverisignwuozuwzmiuwajimaxn--3pxu8konyvelombardiamondshinshiroxn--42c2d9axn--45br5cylxn--45brj9citadeliveryggeelvinckasaokaminokawanishiaizubangexn--45q11citichernovtsykkylvenetogakushimotoganewyorkshirecipesaro-urbino-pesarourbinopesaromasvuotnakaiwamizawassamukawataricohdatsunanjoburgminakamichiharaxn--4gbriminingxn--4it168dxn--4it797kooris-a-soxfanxn--4pvxs4allxn--54b7fta0ccivilaviationishiwakis-a-conservativegarsheis-a-cpadualstackashibatakasakiyosatokigawaxn--55qw42gxn--55qx5dxn--5js045dxn--5rtp49civilisationissandiegoxn--5rtq34kopervikhersonxn--5su34j936bgsgxn--5tzm5gxn--6btw5axn--6frz82gxn--6orx2rxn--6qq986b3xlxn--7t0a264civilizationissayokkaichiropractichirurgiens-dentistes-en-francexn--80adxhksorocabalsfjordxn--80ao21axn--80aqecdr1axn--80asehdbasilicataniaveroykeniwaizumiotsukumiyamazonawsadodgemologicallavangenaval-d-aosta-valleyokotemrevistanbulsan-suedtirolaziobninskaragandaustrheimatunduhrennesoyboltateshinanomachimkentateyamaustevoll-o-g-i-naturhistorisches3-ap-southeast-1kappchizippodhaleangaviikadenaamesjevuemielno-ip6xn--80aswgxn--80audnedalnxn--8ltr62koryokamikawanehonbetsurutaharaxn--8pvr4uxn--8y0a063axn--90a3academiamicaaarborteaches-yogasawaracingxn--90aeroportalabamagasakishimabaraogakibichuoxn--90aishobarakawagoexn--90azhytomyravendbasketballyngenvironmentalconservationayorovigotsukitahatakahatakaishimogosenflfanfshostrowiecasinorddalillesandefjordgcahcesuolocus-2xn--9dbhblg6dietcimdbatodayolasiteu-3xn--9dbq2axn--9et52uxn--9krt00axn--andy-iraxn--aroport-byandexn--3bst00minternationalfirearmshirahamatonbetsurnadalxn--asky-iraxn--aurskog-hland-jnbatsfjordiscountyombolzano-altoadigeu-4xn--avery-yuasakuhokkaidoomdnsiskinkyotobetsulikes-piedmonticellodingenxn--b-5gaxn--b4w605ferdxn--balsan-sudtirol-rqis-uberleetrentino-sued-tirolxn--bck1b9a5dre4civilwarmanagementoyotaparocherkasyno-dsandvikcoromantovalle-d-aostathellexn--bdddj-mrabdxn--bearalvhki-y4axn--berlevg-jxaxn--bhcavuotna-s4axn--bhccavuotna-k7axn--bidr-5nachikatsuuraxn--bievt-0qa2xn--bjarky-fyaotsurreyxn--bjddar-ptamayufuettertdasnetzxn--blt-elabourxn--bmlo-graingerxn--bod-2natalxn--bozen-sudtirol-76haibarakitahiroshimarburgxn--brnny-wuacademy-firewall-gatewayxn--brnnysund-m8accident-investigation-aptibleaseating-organicbcieszynxn--brum-voagatrysiljanxn--btsfjord-9zaxn--bulsan-sudtirol-rqis-very-badajozxn--c1avgxn--c2br7gxn--c3s14misakis-byxn--cck2b3bauhausposts-and-telecommunicationsncfdiscoveryomitanoddavocatanzarownproviderhcloudfunctions3-ca-central-1xn--cesena-forli-c2gxn--cesenaforli-0jgoraxn--cg4bkis-very-evillagexn--ciqpnxn--clchc0ea0b2g2a9gcdxn--comunicaes-v6a2oxn--correios-e-telecomunicaes-ghc29axn--czr694bbcn-north-1xn--czrs0tulanxessomaxn--czru2dxn--czrw28bbtcp4xn--d1acj3bbvacationswatch-and-clockerxn--d1alfaromeoxn--d1atunesomnarviikamitondabayashiogamagoriziaxn--d5qv7z876claimsanfranciscofreakunemurorangeiseiyoichippubetsubetsugarugbyengerdalaheadjudygarlandyndns-picsangoxn--davvenjrga-y4axn--djrs72d6uyxn--djty4kosaigawaxn--dnna-grajewolterskluwerxn--drbak-wuaxn--dyry-iraxn--e1a4clanbibaidarmeniaxn--eckvdtc9dxn--efvn9sorreisahayakawakamiichikawamisatoursnoasaitoshimayfirstjohnxn--efvy88hair-surveillancexn--ehqz56nxn--elqq16hakatanortonxn--estv75gxn--eveni-0qa01gaxn--f6qx53axn--fct429kosakaerodromegallupinbarsyonlinewhollandevelopmentaxihuanavuotnarashinoceanographiqueu-2xn--fhbeiarnxn--finny-yuaxn--fiq228c5hsortlandxn--fiq64beneventoeidsvollillyonagoyavoues3-eu-central-1xn--fiqs8soruminiserversicherungxn--fiqz9soundcastronomy-routerxn--fjord-lraxn--fjq720axn--fl-ziaxn--flor-jraxn--flw351exn--forli-cesena-41gxn--forlicesena-ujgxn--fpcrj9c3dxn--frde-grandrapidsouthcarolinarvikomorotsukamiokamikitayamatsuris-a-socialistcgrouphiladelphiaareadmyblogspotrentino-stirolxn--frna-woaraisaijosoyrorosouthwestfalenxn--frya-hraxn--fzc2c9e2cldmailouvreisenissedalowiczest-le-patronisshingucciprianiigataitogliattiresanjotoyotomiyazakis-a-cubicle-slavellinotairestaurantoyotsukaidoxn--fzys8d69uvgmailxn--g2xx48clickashiharaxn--gckr3f0fauskedsmokorsetagayasells-for-ufcfanxn--gecrj9clinichiryukyuragifuchungbukharaumalopolskanlandurbanamexnetlifyis-a-celticsfanishikatakatsukis-a-chefarmsteadurhamburgmodellingmxn--11b4c3dyndns-at-workinggrouparisor-fronishikatsuragit-repostre-totendofinternet-dnsampagespeedmobilizeroxn--ggaviika-8ya47hakodatexn--gildeskl-g0axn--givuotna-8yasakaiminatoyookannamilanotteroyxn--gjvik-wuaxn--gk3at1exn--gls-elacaixaxn--gmq050is-very-goodhandsonxn--gmqw5axn--h-2failxn--h1aeghakonexn--h2breg3evenesowaxn--h2brj9c8cliniquenoharaxn--h3cuzk1digitalxn--hbmer-xqaxn--hcesuolo-7ya35bentleyonaguniversityoriikarateverbankaratsuginamikatagamilitaryoshiokaracoldwarmiastagevje-og-hornnes3-us-east-2xn--hery-iraxn--hgebostad-g3axn--hmmrfeasta-s4accident-prevention-webhostingxn--hnefoss-q1axn--hobl-iraxn--holtlen-hxaxn--hpmir-xqaxn--hxt814exn--hyanger-q1axn--hylandet-54axn--i1b6b1a6a2exn--imr513nxn--indery-fyasugivingxn--io0a7is-very-nicexn--j1aefbsbxn--12cfi8ixb8luxuryxn--j1amhakubahccavuotnagasakikuchikuseikarugamvikautokeinow-dnservicesevastopolexn--j6w193gxn--jlq61u9w7beppublishproxyzjampagefrontappalmspringsakerxn--jlster-byasuokanraxn--jrpeland-54axn--jvr189misasaguris-certifiedogawarabikomaezakirunordreisa-geekddielddanuorrikuzentakatajimidoriopretogoldpoint2thisamitsukexn--k7yn95exn--karmy-yuaxn--kbrq7oxn--kcrx77d1x4axn--kfjord-iuaxn--klbu-woaxn--klt787dxn--kltp7dxn--kltx9axn--klty5xn--3ds443gxn--koluokta-7ya57hakuis-a-lawyerxn--kprw13dxn--kpry57dxn--kpu716fbx-osasebofagexn--kput3is-very-sweetpepperxn--krager-gyatomitamamuraxn--kranghke-b0axn--krdsherad-m8axn--krehamn-dxaxn--krjohka-hwab49jdfastlylbarefootballfinanzgorautomotiveconomiasakuchinotsuchiurakawalmartatsunobiraustraliaisondriobranconagawalesundds3-ap-southeast-2ix4432-bananarepublicaseihicampobassociatest-iservecounterstrike12hpaleobihirosakikamijimatsuurabogadocscbgdyniabruzzoologicalvinklein-addrammenuernberggfarmerseine164-barcelonagasukeastcoastaldefenceatonsbergjemnes3-ap-northeast-1337xn--ksnes-uuaxn--kvfjord-nxaxn--kvitsy-fyatsukanumazuryxn--kvnangen-k0axn--l-1fairwindspeedpartnersokaneyamazoexn--l1accentureklamborghinikis-with-thebandovre-eikerxn--laheadju-7yatsushiroxn--langevg-jxaxn--lcvr32dxn--ldingen-q1axn--leagaviika-52beskidyn-o-saurlandes3-us-gov-west-1xn--lesund-huaxn--lgbbat1ad8jelenia-goraxn--lgrd-poacctunkongsvingerxn--lhppi-xqaxn--linds-pramericanarturystykanoyakumoldelmenhorstalbansooxn--lns-qlapyxn--loabt-0qaxn--lrdal-sraxn--lrenskog-54axn--lt-liaclintonoshoesannaniyodogawaxn--lten-granexn--lury-iraxn--m3ch0j3axn--mely-iraxn--merker-kuaxn--mgb2ddespiegelxn--mgb9awbfbxosaskatchewanxn--mgba3a3ejtuscanyxn--mgba3a4f16axn--mgba3a4franamizuholdingspjelkavikomvuxn--2scrj9christiansburgroks-thisayamanobeokakudamatsuexn--mgba7c0bbn0axn--mgbaakc7dvfedorapeopleirfjordyndns1xn--mgbaam7a8hakusanagochijiwadell-ogliastraderxn--mgbab2bdxn--mgbai9a5eva00bestbuyshouses3-us-west-1xn--mgbai9azgqp6jeonnamerikawauexn--mgbayh7gpalacexn--mgbb9fbpobanazawaxn--mgbbh1a71exn--mgbc0a9azcgxn--mgbca7dzdoxn--mgberp4a5d4a87gxn--mgberp4a5d4arxn--mgbgu82axn--mgbi4ecexposedxn--mgbpl2fhskydivingxn--mgbqly7c0a67fbclothingdustkagoshimalselvendrellucaniaxn--mgbqly7cvafranziskanerimaringatlantakahamamurogawaxn--mgbt3dhdxn--mgbtf8flatangerxn--mgbtx2betainaboxfusejnynysagaeroclubmedecincinnationwidealerimo-i-ranadexeterxn--mgbx4cd0abbvieeexn--mix082fedoraprojectransurluzernxn--mix891feiraquarelleborkangerxn--mjndalen-64axn--mk0axindianmarketingxn--mk1bu44cngrondarxn--mkru45isleofmanchesterxn--mlatvuopmi-s4axn--mli-tlaquilanciaxn--mlselv-iuaxn--moreke-juaxn--mori-qsakuragawaxn--mosjen-eyawaraxn--mot-tlarvikoseis-a-studentalxn--mre-og-romsdal-qqbhzcateringebuilderschmidtre-gauldalimanowarudaxauthordalandemoneyokosukanzakiyokawaraustinnatuurwetenschappenaumburgjerstadotsuruokakegawaurskog-holandingjerdrumetacentrumeteorappalermomahachijolstereviewskrakowebspacempresashibetsukuibigawaukraanghkepnogataijibestaddnslivelanddnss3-ap-south-16-bambleclerc66xn--msy-ula0haldenxn--mtta-vrjjat-k7afamilycompanycnpyatigorskodjeffersonxn--muost-0qaxn--mxtq1misawaxn--ngbc5azdxn--ngbe9e0axn--ngbrxn--3e0b707exn--nit225kosherbrookegawaxn--nmesjevuemie-tcbaltimore-og-romsdalipayxn--nnx388axn--nodessakuraissmarterthanyoutwentexn--nqv7fs00emaxn--nry-yla5gxn--ntso0iqx3axn--ntsq17gxn--nttery-byaeservehumourxn--nvuotna-hwaxn--nyqy26axn--o1achaseljeepsongdalenviknaharimalborkdalxn--o3cw4halsaintlouis-a-anarchistoireggiocalabriaxn--o3cyx2axn--od0algxn--od0aq3bieigersundishakotanhktjeldsundisrechtrainingjesdalimitedivtasvuodnakaniikawatanaguraxn--ogbpf8flekkefjordxn--oppegrd-ixaxn--ostery-fyawatahamaxn--osyro-wuaxn--otu796dxn--p1acfermochizukirkenesassaris-a-financialadvisor-aurdalvivanovodkamisatokashikiwakunigamiharulminamiiselectrapaniizaxn--p1aixn--pbt977cnsannohelplfinancialuccapitalonewspaperxn--pgbs0dhlxn--porsgu-sta26ferraraxn--pssu33lxn--pssy2uxn--q9jyb4cntoyouraxn--qcka1pmckinseyxn--qqqt11misconfusedxn--qxamusementdllcube-serversaillespreadbettingxn--rady-iraxn--rdal-poaxn--rde-ulavagiskexn--rdy-0nabarixn--rennesy-v1axn--rhkkervju-01aflakstadaokagakicks-assedicoguchikuzenxn--rholt-mragowoodsideltaiwanairlinedre-eikerxn--rhqv96gxn--rht27zxn--rht3dxn--rht61exn--risa-5nativeamericanantiquespydebergxn--risr-iraxn--rland-uuaxn--rlingen-mxaxn--rmskog-byaxn--rny31hammarfeastafricapetownnews-stagingxn--rovu88bielawalterxn--rros-granvindafjordxn--rskog-uuaxn--rst-0naturalhistorymuseumcenterxn--rsta-francaiseharaxn--rvc1e0am3exn--ryken-vuaxn--ryrvik-byaxn--s-1faithruheredumbrellajollamericanexpressexyxn--s9brj9collectionxn--sandnessjen-ogbizxn--sandy-yuaxn--seral-lraxn--ses554gxn--sgne-gratangenxn--skierv-utazassnasabaerobaticketsrtromsojamisonxn--skjervy-v1axn--skjk-soaxn--sknit-yqaxn--sknland-fxaxn--slat-5naturalsciencesnaturellesrvaroyxn--slt-elabcgxn--smla-hraxn--smna-gratis-a-bulls-fanxn--snase-nraxn--sndre-land-0cbremangerxn--snes-poaxn--snsa-roaxn--sr-aurdal-l8axn--sr-fron-q1axn--sr-odal-q1axn--sr-varanger-ggbiellaakesvuemieleccexn--srfold-byaxn--srreisa-q1axn--srum-grazxn--stfold-9xaxn--stjrdal-s1axn--stjrdalshalsen-sqbieszczadygeyachimataikikugawarszawashingtondclkareliancexn--stre-toten-zcbstoragexn--sudtirol-y0emmafann-arboretumbriamallamaceioxn--t60b56axn--tckweatherchannelxn--tiq49xqyjetztrentino-suedtirolxn--tjme-hraxn--tn0agrinet-freakstordalxn--tnsberg-q1axn--tor131oxn--trany-yuaxn--trentin-sud-tirol-tsjcbnlxn--trentin-sudtirol-b9ixn--trentino-sud-tirol-dckoshimizumakizunokunimimatakashimarylhurstgoryxn--trentino-sudtirol-usjevnakershuscultureggioemiliaromagnamsskoganeis-a-republicancerresearchaeologicaliforniaxn--trentinosud-tirol-tsjewelryxn--trentinosudtirol-b9ixn--trentinsud-tirol-98ixn--trentinsudtirol-rqixn--trgstad-r1axn--trna-woaxn--troms-zuaxn--tysvr-vraxn--uc0atvestfoldxn--uc0ay4axn--uist22hamurakamigoris-a-liberalxn--uisz3gxn--unjrga-rtaobaomoriguchiharagusartstoregontrailroadxn--unup4yxn--uuwu58axn--vads-jraxn--vallee-aoste-i2gxn--vallee-d-aoste-43hangglidingxn--valleeaoste-6jgxn--valleedaoste-i2gxn--vard-jraxn--vegrshei-c0axn--vermgensberater-ctbievatmallorcadaques3-us-west-2xn--vermgensberatung-pwbifukagawashtenawdev-myqnapcloudaccesscambridgestoneustarhubs3-website-ap-northeast-1xn--vestvgy-ixa6oxn--vg-yiabkhaziaxn--vgan-qoaxn--vgsy-qoa0jewishartgalleryxn--vgu402colognextdirectoystre-slidrettozawaxn--vhquvestnesor-odalxn--vler-qoaxn--vre-eiker-k8axn--vrggt-xqadxn--vry-yla5gxn--vuq861bihorologyukiiyamanouchikuhokuryugasakitchenhlfanhs3-website-ap-southeast-1xn--w4r85el8fhu5dnraxn--w4rs40lxn--wcvs22dxn--wgbh1colonialwilliamsburgrongaxn--wgbl6axn--xhq521bikedagestangeorgeorgiaxn--xkc2al3hye2axn--xkc2dl3a5ee0hangoutsystemscloudfrontdoorxn--y9a3aquariumishimasudaxn--yer-znaturbruksgymnxn--yfro4i67oxn--ygarden-p1axn--ygbi2ammxn--3hcrj9cistrondheimmobilienishiokoppegardyndns-office-on-the-weberlincolnishitosashimizunaminamibosogndalottokorozawaxn--ystre-slidre-ujbilbaogashimadachicagoboats3-website-ap-southeast-2xn--zbx025dxn--zf0ao64axn--zf0avxn--3oq18vl8pn36axn--zfr164billustrationikkoebenhavnikolaevents3-website-eu-west-1xnbayxz", e, (e + c >>> 0));
    };
    F = function(a) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = C(a);
            c = b[0];
            if (a.length <= c.length) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            d = A.Errorf("publicsuffix: cannot derive eTLD+1 for domain %q", new I([new $String(a)]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ["", d];
          case 2:
            e = (a.length - c.length >> 0) - 1 >> 0;
            if (!((a.charCodeAt(e) === 46))) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            f = A.Errorf("publicsuffix: invalid public suffix %q for domain %q", new I([new $String(c), new $String(a)]));
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ["", f];
          case 5:
            $s = -1;
            return [$substring(a, (1 + B.LastIndex($substring(a, 0, e), ".") >> 0)), $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: F
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.EffectiveTLDPlusOne = F;
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            G = $toNativeArray($kindUint32, [3315971, 2663876, 3056390, 3087683, 3087686, 3708614, 3864451, 2109636, 3613575, 3055432, 27263170, 32739527, 3629961, 2880970, 2880971, 2292867, 2803462, 2319557, 35665602, 3998276, 2499395, 2115717, 39860034, 2111299, 45261252, 2117765, 48384962, 3751118, 2446275, 3833734, 52431490, 3122311, 2330502, 56627458, 2626691, 2626692, 2175046, 2132872, 2603910, 3185284, 60853890, 3417289, 2256007, 3762118, 3599945, 2966536, 3323972, 2352646, 2371014, 65022530, 3847183, 2606414, 3502788, 2170373, 3315717, 3083593, 2376009, 2177095, 2101894, 2101699, 69344578, 2277955, 2490954, 73471875, 2464645, 3289474, 3712265, 77600578, 2142468, 3216774, 2582725, 3578948, 86123076, 2130947, 2315524, 90181570, 2532868, 94911748, 3609610, 98568322, 3062919, 2604808, 115356866, 2578119, 2288580, 2893191, 2288581, 3393607, 3732038, 3177604, 3177605, 2689095, 132141058, 3293507, 2128578, 3731907, 136401922, 2184197, 140509698, 2872388, 2598405, 3502599, 3607950, 2347204, 2321668, 2143235, 3618249, 2143243, 2214216, 3599368, 2459464, 2219720, 3323530, 3393351, 2806214, 145027906, 3410691, 3414083, 3415108, 3864515, 3410755, 24333186, 148900802, 2627909, 2709062, 2615556, 3533063, 3992838, 3679108, 3679111, 2100163, 153925314, 158467394, 161670594, 2287046, 165675650, 2797765, 3367107, 3977604, 3071940, 3071941, 2126211, 169884291, 174107010, 2147013, 2147019, 2150534, 2462219, 2334276, 2153097, 2156420, 178317762, 2159107, 2160515, 23078722, 3901827, 2163658, 182528002, 3998917, 3006730, 3590724, 2172931, 2179588, 2184963, 2184964, 2184967, 2186757, 2190918, 2191686, 2195139, 2212872, 2183555, 186665666, 2406024, 3950539, 2233928, 2239366, 2243591, 2263240, 203432258, 208414530, 3224008, 3158023, 2630533, 3729736, 3000904, 2822595, 2276548, 3415170, 211999618, 216034178, 224582850, 2284739, 228593538, 2109571, 3027716, 2151171, 3294468, 3615371, 2317379, 3042822, 2317380, 3913294, 2414661, 3833992, 3801351, 3801354, 2143683, 2341255, 2143685, 2303428, 2938758, 2938759, 2979844, 3079431, 3156548, 2101124, 3608774, 2480388, 3329478, 2128067, 3729160, 2128072, 2321603, 3901763, 3869060, 3887299, 233098818, 237561090, 2112003, 2131142, 2133251, 2301828, 242470978, 3498499, 3395651, 2200898, 245411330, 2904582, 2323527, 3064583, 3772741, 2167684, 2688773, 2635975, 2958537, 3025350, 3048520, 3126918, 249574466, 3487240, 3132614, 3422533, 3248007, 3251780, 3251781, 2114756, 2114760, 253805442, 257950850, 3421766, 2098312, 3494853, 3499398, 3529032, 3694728, 262193413, 266576068, 3704967, 270590466, 274738498, 295730178, 3217029, 2775877, 2463622, 2876039, 3958791, 304140675, 2750087, 3054856, 459468745, 3751559, 2293447, 2296072, 2298118, 2302150, 2305292, 2308746, 2311175, 2319243, 2323079, 2323086, 463700484, 2328004, 2341895, 2507015, 2372038, 2372039, 2374215, 467678082, 2377222, 2377226, 2379403, 2385415, 2388421, 2389507, 2390854, 2390855, 2576515, 471859458, 2394442, 477592130, 480562818, 484750210, 488870018, 2409413, 2411332, 497144514, 2532997, 2380931, 2156677, 2219460, 2243268, 3189126, 3259398, 2147523, 3885444, 3606275, 513815170, 2244484, 3706374, 2244485, 2951814, 3248264, 2778948, 2291272, 3822277, 2358280, 3727238, 3285511, 2390340, 2390342, 2750851, 3803011, 3244872, 3332868, 3530631, 534798470, 2995721, 3344392, 3395784, 3780996, 2179779, 2300226, 539039490, 543259714, 2181507, 547496066, 3613892, 2408902, 3293765, 2759875, 2290436, 2840711, 3736835, 2362696, 2250693, 2493763, 2598277, 2598596, 3151558, 2270212, 2283014, 3502406, 2873732, 2324035, 551691394, 2321157, 2099267, 555756802, 2302083, 2218053, 2315715, 2315721, 559941954, 568342402, 2678277, 2204998, 2782406, 2906120, 2906123, 2131211, 3511429, 3773253, 2932233, 23072834, 2950920, 2134148, 576744130, 2470019, 585515718, 2348296, 589302786, 2259400, 593540994, 2867210, 598546435, 4006470, 3534984, 3192776, 2916358, 3691783, 3847687, 2369866, 3590852, 3525764, 3627465, 607825413, 2606918, 2268163, 2437124, 611106052, 3617287, 2327559, 2863428, 3027845, 2463816, 2412935, 2414087, 614570242, 3225604, 2698056, 2419716, 2425412, 2429829, 2430151, 3793353, 2432772, 2434185, 2434760, 2436484, 2436487, 619004099, 2441799, 23222914, 23792962, 2444742, 2446343, 2447492, 2451719, 2454663, 2457731, 2300610, 2133058, 2562819, 2562820, 2562827, 3599624, 2489732, 2473797, 2477319, 2483589, 2949194, 2489539, 622859394, 2240900, 2506441, 2523843, 2524039, 3982345, 2217224, 2337539, 2620487, 2622153, 2550211, 2654916, 2660297, 2670342, 3503363, 2118082, 2352579, 3957703, 3001797, 3449542, 2467396, 3034309, 2228163, 2195718, 2153602, 3850692, 627208770, 631480067, 635448066, 2425155, 2108164, 2192839, 3978374, 2612482, 640015042, 3248772, 644014914, 648022722, 2829060, 2829061, 2124293, 3554054, 652278146, 2161029, 2164613, 2172547, 2193222, 2237765, 2286914, 3493893, 2286916, 2945859, 3507523, 656456322, 2991495, 3576516, 3576521, 2436868, 2654403, 3523977, 2654408, 661281220, 2775494, 2796867, 2139779, 2182531, 665817026, 3130946, 668993090, 3374280, 3101832, 3866054, 2547973, 2340869, 2106759, 2890245, 2478018, 673806722, 677380162, 2350600, 3487045, 3090948, 2402117, 2418567, 2561668, 2394178, 681593794, 3442308, 3506567, 3981127, 3393540, 2706627, 2321412, 2321416, 2302982, 2938378, 3800324, 2707912, 2671428, 2243846, 2718020, 3217798, 3577225, 2331399, 2213891, 685790786, 3781635, 2157506, 690220354, 3231878, 3665864, 2782791, 3139081, 2705161, 2788933, 2793225, 2795205, 2795529, 2800965, 2807816, 694231940, 698712519, 2294403, 2808327, 2294406, 2811591, 2771717, 3015107, 702756930, 2173508, 706929538, 711296706, 3088454, 2604677, 2820551, 2579331, 3384772, 2129219, 3223299, 715132226, 723548226, 3708868, 2300547, 2408133, 727799362, 736117122, 3146182, 3333188, 3989892, 3989898, 744490434, 2543107, 2169610, 2201736, 748832260, 2098627, 2148803, 2459785, 2130121, 2588358, 752982595, 2238597, 3339085, 2202182, 2249803, 757100994, 2227784, 799093378, 803213634, 2858053, 807406338, 3797703, 2830023, 2148547, 3296968, 811609218, 2799620, 2707139, 3601157, 2381190, 2235268, 3901699, 2825923, 815837698, 3773124, 3893765, 3916807, 2612675, 2822083, 2823811, 23154690, 2824003, 2825795, 820027970, 3213444, 3259910, 3489027, 2826627, 824916162, 2832584, 2836612, 3214918, 2492295, 2570758, 3573956, 1054889602, 2294091, 3108878, 2207951, 2967235, 1063654018, 23358466, 1067485186, 2696131, 2131971, 2959174, 3027142, 3969031, 3148868, 1071752834, 1075993794, 2418181, 3077767, 3758726, 1080108482, 2172356, 2853571, 1084273346, 1089920579, 2856196, 2889993, 1093431234, 1096912450, 3348613, 1101821122, 1105202754, 3522375, 2186057, 3630603, 3847109, 2546121, 3720966, 2150599, 1109400900, 2189577, 3412167, 2188743, 2259715, 2828678, 3227591, 2397571, 3587718, 1117849218, 1122195522, 3781955, 3383749, 3748231, 2232390, 3001669, 2464836, 2617285, 3129412, 1126179778, 3604487, 2908100, 2129860, 2129869, 2975881, 2286280, 2586052, 3458885, 3783559, 2133700, 3993031, 2198469, 1130470916, 2824325, 2518916, 2647046, 2875525, 1134634370, 3810755, 3001988, 3001989, 3416518, 3331653, 2337412, 2478979, 2236358, 3128389, 3995461, 2875780, 3053955, 3800460, 1140121922, 1143012418, 1147160898, 2248451, 2248452, 1151395778, 3159368, 3449733, 2391428, 3557446, 1155621250, 1159907778, 1163930242, 2783813, 2873414, 2333252, 2176390, 3062342, 2301379, 1169373706, 2547013, 2490883, 2247942, 3715401, 2247943, 2761864, 2966217, 2581064, 3118726, 2140035, 1172961026, 3807880, 1176840066, 1180704770, 2150915, 3024965, 2549060, 2435913, 3060420, 2202696, 2157571, 1190604548, 2205064, 2129671, 1193354818, 2357186, 3315589, 2529865, 2564611, 2629892, 3339012, 2113155, 2637578, 1198678786, 1201744002, 2930243, 3721603, 23194242, 3833155, 1206035778, 1210069506, 1214338436, 2184582, 3146758, 2383236, 2603651, 2141507, 3110275, 2380294, 3732869, 2930631, 2945093, 2949830, 2953032, 2953542, 2119748, 2736843, 2967939, 2967941, 2969096, 2278530, 3523138, 1218757698, 1222664834, 2205379, 1227289986, 2553219, 2971459, 1235251778, 1240309702, 2483206, 1244504322, 1247868866, 1253410178, 1256243074, 1260540034, 1264585282, 2199427, 3707269, 3459270, 1269559492, 3705866, 3839494, 3041028, 2354307, 1281374658, 2102274, 2302019, 1285693699, 3150151, 2875271, 1311185927, 3951111, 2271171, 3450634, 3801860, 3959108, 3959114, 2387973, 1315018946, 2444675, 1319110146, 2436803, 3781571, 1327498626, 2749956, 2226628, 2136325, 3187461, 3275078, 3283334, 1331957250, 1335892546, 3173765, 2482450, 3445126, 2127747, 2813702, 3160069, 23108226, 1474366978, 3568643, 2166275, 2635459, 1478548994, 2287619, 1482691074, 2137155, 3213512, 2463683, 2788550, 2343047, 3206342, 3206347, 3040839, 3125060, 1491083202, 3449349, 1495408835, 2796739, 2867717, 3450371, 1500816902, 2951306, 2382339, 2174788, 2098118, 3423558, 1503953603, 3384455, 2588103, 2743301, 3474438, 2762179, 1549891971, 1554056322, 3513348, 2181641, 2350087, 3509637, 2388804, 3628296, 2392133, 1558520197, 2657289, 3762307, 2412036, 1562433154, 2205891, 1567169090, 2693702, 23239490, 1570815618, 2783560, 2850691, 2824135, 3161093, 2849605, 3206987, 3035270, 3207494, 3039878, 2658116, 2890502, 1575842376, 2317571, 2125635, 2125636, 3190660, 3194247, 3052677, 1580111298, 1583390146, 2137541, 2882628, 3065419, 3071688, 2471044, 1591813634, 1596306434, 2833155, 3076292, 3076997, 3079879, 3089732, 3393796, 1600161346, 3646345, 3095045, 3847813, 3097989, 1604429827, 3105732, 3105739, 3107012, 3107723, 3110085, 2208266, 3112072, 3112586, 3114051, 3114058, 1613005314, 1616923714, 1621641027, 1626322434, 3126787, 1631040130, 1634953282, 3129028, 2213190, 2175685, 3132483, 3317446, 2174405, 2631428, 1637878018, 3141700, 2931338, 3075143, 2583366, 3254791, 2121731, 2856264, 3846219, 2891845, 3484677, 3484678, 3049284, 3885768, 2304963, 2370756, 2370759, 3124102, 2118726, 3912842, 2434308, 3491658, 1643714566, 3741703, 2473927, 2585604, 2585609, 3259077, 2580043, 3059715, 2283459, 1646394883, 2303940, 1650460290, 3358278, 1655570245, 2814277, 2454086, 2753348, 1658870082, 2389572, 1663061570, 3425541, 2345092, 1675788803, 1679887938, 2166339, 3499910, 1684033474, 2269576, 2247556, 2247558, 3723782, 2149252, 2236229, 2334664, 2340487, 3359175, 3359183, 2697798, 2374595, 2391236, 2164867, 2244164, 2454404, 1688283778, 2679299, 2455043, 1692433346, 2341187, 3614083, 2186890, 3730183, 2476236, 2476934, 2488582, 2491527, 1696795975, 2538377, 2406340, 2543940, 1700898562, 1704988674, 3913798, 3383940, 2680454, 2298312, 2347844, 3797766, 2782341, 3561864, 2131715, 2705669, 2709635, 3848067, 3848068, 2240835, 1709576578, 1713381186, 3059401, 2737477, 2751236, 2758533, 2209412, 2920199, 3654149, 1718033860, 2563528, 3047174, 3058564, 3060040, 3083271, 1721773122, 3099396, 2165060, 2866055, 1725967428, 2460930, 1730241282, 2230979, 3004484, 2765123, 2765125, 1734584898, 3126469, 2564546, 3764293, 2865669, 1738569538, 3395524, 1742736194, 2499526, 3476358, 2530184, 2895752, 3088324, 3142469, 3169481, 3773380, 2951236, 2191491, 1747200645, 3660167, 2429445, 2776132, 3811981, 2967746, 2967747, 3856707, 1751135682, 3818757, 2235847, 2861444, 3951303, 2966729, 2931657, 2594887, 2687491, 3476808, 2524873, 3887431, 3932229, 3136710, 3137862, 3138245, 2976133, 1755319426, 2340229, 2845384, 2904006, 1759536071, 2863236, 3162247, 3149254, 1763785538, 3415750, 3164618, 3166789, 1768843458, 1772701122, 3228422, 2844104, 1778172167, 1780601410, 2219587, 2151878, 2262468, 3930630, 2123526, 2119498, 2102917, 3101126, 3451843, 3451844, 2131074, 3333059, 1784827714, 3115267, 2170244, 2844420, 2844426, 2222339, 2604104, 3118922, 2345735, 3179526, 2499204, 2700802, 2778626, 1788872642, 2321347, 2473351, 2099143, 2663748, 3856327, 3080134, 2287303, 3158340, 3488581, 2216069, 1793150914, 2183110, 2223875, 2234882, 2234886, 1797262850, 1801478594, 3944773, 1805668610, 1809848386, 3333509, 2940933, 2785221, 1814435395, 2409093, 3035463, 3233733, 3439877, 3834244, 3357766, 3959684, 1818233026, 1832393413, 2779591, 3782728, 2442758, 2442765, 2456585, 2456594, 3143557, 3176899, 1835033410, 3237188, 2202307, 3418309, 3170181, 1839390786, 2493827, 1843781314, 1852582082, 1855979650, 3010693, 3951619, 2428744, 1860187394, 1864411970, 2749894, 3533770, 2199811, 2478851, 3131843, 1881159042, 2120333442, 2128681474, 2135618, 3415241, 2909188, 2801736, 2133838978, 2137006658, 2803717, 2320328, 3241992, 3462156, 2345539, 2141309058, 2145428162, 2640070, 3183237, 2578627, 2612166, 3183558, 2647171, 3190083, 3191366, 3196676, 2554502, 2238149, 2238154, 3794820, 3198404, 3200266, 2149620674, 3795205, 3203850, 3207877, 3210116, 3210374, 3210756, 2206598, 2153855874, 3086790, 3605829, 3603079, 3836230, 2492036, 2994311, 3356998, 2332229, 2356103, 3892103, 3892110, 2610374, 3992709, 2155335, 2160643, 2160647, 2264773, 2284484, 2327490, 2397831, 3148996, 2399044, 2659595, 2224835, 2953863, 2224836, 3082887, 2703363, 3432397, 3821896, 2401412, 2563269, 3229637, 3230723, 2158119554, 3238723, 3241155, 2183492, 2622405, 2224007, 3451974, 3714947, 3507659, 2577163, 2794507, 3667211, 3041546, 3338379, 3585291, 3757324, 3988619, 4002833, 3243530, 3245899, 3246604, 3247371, 3251210, 3261258, 3265358, 3271691, 3272394, 3277329, 3278410, 3279691, 3281038, 3286732, 3288395, 3289102, 3289996, 3309130, 3313996, 2163381322, 3317832, 3320841, 3334474, 3335114, 3335755, 3351502, 3355665, 3390281, 3390858, 3392715, 3402890, 3405078, 3410059, 3411466, 3412810, 3414475, 3416905, 3434825, 3436429, 3441675, 3445515, 3448011, 3454345, 3455950, 3457290, 3460874, 3462922, 3465739, 3467851, 3471053, 3483277, 3493008, 3494219, 3495692, 3498763, 3521099, 3526990, 3528267, 3528269, 3548683, 3551375, 3552331, 3554442, 3555785, 3557833, 2167823883, 3563726, 3569867, 3580111, 3588107, 3588811, 3589515, 3591114, 3629577, 3641423, 3659468, 3660620, 3662350, 3663631, 3664590, 3670736, 3671759, 3674254, 3677260, 3678034, 3680721, 3682766, 3683918, 3685259, 3685262, 3686159, 3687118, 3688019, 3689233, 3690316, 3691086, 3692236, 3693587, 3697232, 3700684, 3701452, 3702667, 3707854, 3709131, 3711371, 3715980, 3754314, 3755276, 3756044, 3756809, 3762507, 3763208, 3765577, 3765583, 3771595, 2172230346, 3785804, 3790347, 3791049, 3798728, 3799243, 3802443, 3805386, 3806027, 3807244, 3809736, 3823883, 3835275, 3842574, 3848331, 3852619, 3890955, 3891657, 3893005, 3933322, 3943063, 3946456, 3961033, 3966027, 3971476, 3972747, 3974154, 3976330, 3976971, 3979088, 3980113, 3982922, 3986061, 3987853, 4003915, 2183363, 2176214851, 2835910, 2382149, 2624455, 3338054, 23086466, 2833481, 3316932, 3029960, 2227523, 3236999, 2124738, 2820611, 2178945602, 2936518, 2943108, 3514308, 3306435, 3306437, 2188145922, 2192223108, 2585415, 2196104898, 2150787, 2315715, 2182531, 2564611, 2236675, 2392771, 954120, 2196163, 2097346, 1381320, 2128898, 2182531, 2564611, 2236675, 99011, 2392771, 2186883, 3381974, 3543251, 3855945, 3704712, 3448969, 3204230, 3442384, 2395027, 3124296, 3822855, 2338439, 2616586, 2111561, 3810121, 2664715, 3732038, 2138058, 2239366, 3315907, 2991301, 3729160, 2499725, 3217228, 3127175, 3266189, 2334916, 2304650, 2307530, 2308746, 2395783, 2367879, 2383620, 2390342, 3331012, 3145224, 3060489, 2906118, 2906120, 3100365, 2932233, 3192776, 3847687, 2680970, 2446342, 2505863, 3008132, 2277063, 2182538, 2384206, 2890245, 3938059, 3176393, 2130121, 2148103, 2148106, 2865863, 3109193, 2925064, 3218635, 3024965, 2285962, 3507017, 2578506, 2945227, 2276811, 2664085, 3046853, 3847813, 3105738, 2588618, 3175751, 2200131, 3913672, 2982218, 2247558, 2524425, 3561864, 3058564, 3693001, 2895752, 3727047, 3676870, 2779591, 2819527, 2379781, 3508940, 2563269, 2150787, 2315715, 2182531, 2236675, 99011, 2392771, 2128898, 2150787, 2236675, 2196163, 2392771, 2150787, 2236675, 99011, 2463683, 2392771, 1381320, 2150787, 2315715, 2182531, 2564611, 2236675, 99011, 2392771, 1381320, 2128898, 2121794, 3124930, 2108546, 2108994, 2914562, 595974, 81842563, 2315715, 3998787, 2182531, 2202179, 2564611, 2991046, 2236675, 2392771, 2320515, 1381320, 3617924, 3615943, 3308931, 2858052, 2106499, 2148227, 2182531, 914887, 1514436, 1510275, 17221, 2097346, 14979, 102792194, 105435401, 579981, 580813, 3124930, 148996, 17289, 2098114, 111297800, 1006404, 1381320, 21244226, 20972994, 21244226, 22082822, 2298883, 2855747, 119591299, 2304644, 123950531, 128011651, 2100546, 2246148, 2236675, 3156099, 2100930, 2392771, 2215490, 3128835, 2117570, 2119043, 2750979, 2111106, 1381320, 2298883, 3156099, 2100930, 3128835, 2117570, 2119043, 2750979, 2111106, 3128835, 2117570, 2119043, 2750979, 2111106, 2150787, 2112131, 2150787, 2315715, 2182531, 2246148, 2202179, 2564611, 2879684, 2236675, 2392771, 2122818, 2205699, 1381320, 2150787, 2315715, 2182531, 2564611, 2236675, 2392771, 2112131, 2128898, 2150787, 2315715, 2182531, 2246148, 2236675, 2392771, 3932229, 2285634, 2097346, 1381320, 22584904, 1447370, 2182531, 2121153, 2121345, 2114241, 2114305, 2114369, 2186625, 2146881, 2273921, 2126145, 2097153, 2097345, 2097665, 1002821, 1381320, 2097409, 2100609, 2098433, 2102401, 2097217, 2099201, 2097537, 2109249, 2098945, 2098369, 2100481, 2098561, 2098113, 2116673, 2102017, 2098177, 2099009, 2099137, 2097281, 2105921, 2105537, 2128641, 2103489, 2101825, 2150787, 2315715, 2182531, 2236675, 2392771, 2128898, 2150787, 2315715, 2098114, 2392771, 914887, 510151, 236678, 257930, 574600, 374728, 375943, 1791750, 922885, 1211589, 959750, 281094, 2664708, 2577799, 1381320, 2994564, 2150787, 2315715, 2182531, 2236675, 2392771, 3315272, 2106692, 2315524, 2334276, 2639815, 2977287, 2150787, 2328011, 2110090, 2579527, 2367368, 3601288, 2315715, 3742919, 3998787, 2126984, 2152521, 2246148, 2202179, 3025608, 2564611, 2968266, 2991046, 3839495, 2236675, 2199878, 3211976, 2392771, 3057222, 3072269, 3079048, 3107019, 2462022, 3296775, 2250437, 2108618, 2273093, 2429194, 2285634, 2105539, 2399044, 2097158, 3864451, 3478211, 3181507, 2106691, 2109187, 2107970, 2957253, 2789897, 2381443, 2130947, 2112579, 2097665, 2950663, 3009989, 3728963, 2126211, 2334276, 2579395, 2237960, 3556355, 3157197, 2610568, 2128518, 3333123, 3716675, 3806659, 190894467, 2313736, 2328004, 2385411, 2097414, 2400200, 2161219, 2108675, 2302083, 2315715, 2278467, 2282627, 2776067, 3332995, 2259395, 2333443, 3712005, 2447748, 2450823, 2300610, 2470531, 2479174, 2488963, 2492739, 2600835, 2125827, 3617155, 2720263, 195120515, 2392899, 2143107, 2126979, 2201731, 3087619, 3565573, 3598787, 2423369, 2196803, 3170947, 199557315, 2797955, 2254728, 2789702, 3890566, 2742214, 3698951, 2169091, 2150915, 2564611, 2672006, 2278530, 2767235, 3375365, 2236675, 2496519, 23167683, 2420291, 2319363, 2284163, 2392771, 2241414, 2580870, 3643651, 2267907, 2205699, 2476867, 3190211, 3122115, 3129283, 2174405, 2121987, 2680710, 2342600, 2283459, 3605001, 3576008, 2255432, 3513157, 2306762, 2356490, 2362123, 2366280, 3901635, 3129347, 3169987, 3287432, 3863363, 3451844, 2507715, 2099139, 3068867, 2506243, 2320515, 2285634, 2272131, 2345539, 3198851, 3202884, 2399044, 2237635, 1381320, 2097346, 2133634, 2107970, 2120258, 2097666, 2106114, 2321474, 2124482, 2098050, 2108034, 2172482, 2122370, 2553218, 2163842, 2914562, 2152066, 2125634, 2131522, 3069698, 2116098, 2098818, 2208066, 2120002, 2128834, 2101250, 2190530, 2103362, 194, 36482, 10818, 23106, 514, 8962, 224322, 27330, 898, 10882, 75330, 25218, 456066, 66690, 817410, 54914, 28482, 34370, 972546, 18946, 1666, 110914, 22850, 31682, 4098, 93378, 6210, 2150787, 2315715, 2182531, 2236675, 2392771, 8386, 2150787, 2315715, 2182531, 2236675, 2392771, 2128898, 2392771, 220254595, 2182531, 2564611, 942083, 2297026, 1381320, 2150787, 2315715, 2182531, 2236675, 942083, 2392771, 4674, 2097602, 22823237, 2173634, 1381320, 31746, 2323458, 2111618, 2354306, 2201794, 2362882, 1211589, 2105090, 2100930, 2153986, 2103810, 2152066, 3807490, 2188034, 2696066, 914887, 779341, 923017, 680267, 937992, 479433, 1077510, 2182531, 1381320, 1514436, 1510275, 17221, 1381320, 907207, 378758, 17289, 105998, 372935, 2097346, 2664708, 2128898, 2150787, 2121794, 2315715, 2098050, 2994564, 2202179, 2434946, 2236675, 2098114, 2392771, 3847814, 3337231, 6315715, 1381320, 2128898, 3998787, 2182531, 2564611, 99011, 105992, 20982411, 21096202, 21450567, 519627, 914565, 1002821, 914887, 2128898, 2150787, 2182531, 2236675, 2097346, 2107458, 2140546, 278974851, 2375042, 2315715, 2251394, 2257474, 2182531, 2478018, 2577090, 2796354, 2118210, 2692418, 2099202, 2113858, 2119234, 2613506, 2354498, 2822082, 2914178, 2223938, 2418370, 2564611, 2109954, 2236675, 2182850, 2672770, 2392771, 2381570, 2128834, 2205442, 2105154, 2127682, 3041474, 2183106, 2481858, 2235202, 3272394, 3554442, 3779082, 4008386, 2271106, 3565506, 284311497, 288623498, 21169863, 291506562, 21038659, 22914, 1313674, 2392196, 299946371, 2315715, 2434756, 2182531, 2246148, 2202179, 2564611, 942596, 19779, 2236675, 32261, 2196163, 2392771, 22232324, 2121987, 2105539, 1381320, 24070, 22763140, 1208773, 372362, 1216706, 1736582, 48657, 309477321, 1208904, 510600, 1036039, 5954, 1002827, 1352907, 1606154, 40714, 237127, 1381320, 1138696, 57607, 419540235, 120583, 19138, 251527, 1325386, 387919, 1037839, 11586, 31746, 678728, 986826, 905930, 726026, 512904, 143496, 397512, 907144, 1648904, 12930, 1851855, 660107, 539528, 227079, 1250954, 367947, 517129, 1250695, 143240, 259788, 1122695, 1541386, 435336, 1041294, 1411150, 236683, 239243, 534475, 970633, 1030603, 1894221, 1330187, 265997, 266893, 280650, 301451, 303819, 319045, 423789264, 78671, 1127183, 1388685, 769232, 46978, 430088072, 509768, 1144142, 435569605, 335627, 1282768, 361864, 143754, 239689, 429511, 430343, 430791, 431687, 436167, 437703, 439751, 440455, 441799, 442567, 444295, 444743, 445191, 445639, 446407, 447303, 449543, 451143, 452615, 453319, 453767, 454535, 455751, 456263, 458887, 459335, 459783, 461959, 463239, 465031, 468295, 468999, 470279, 470727, 471751, 473991, 475399, 476423, 476871, 477319, 487751, 492615, 493959, 495431, 495879, 496775, 498183, 56450, 397770, 942919, 16389, 712401, 75398, 1133962, 678346, 378758, 844299, 1602, 205841, 753033, 619913, 22082, 472394, 689929, 691791, 693326, 696904, 362178, 1792969, 1679310, 1066700, 948047, 1769166, 177868, 1408201, 1170321, 1171784, 1392850, 260813, 292877, 311435, 1695893, 390089, 450506, 464201, 474384, 511051, 568783, 1490251, 1831308, 602448, 664202, 669773, 675278, 679434, 705548, 721556, 752145, 785163, 1815375, 917005, 1378894, 1629580, 745996, 751371, 754574, 783440, 786315, 800333, 802703, 805644, 808590, 1142929, 1473932, 857479, 868045, 882188, 888912, 936653, 950343, 1047184, 1070152, 1256651, 1534223, 1476360, 1134477, 1667024, 1037577, 439034246, 735939, 755653, 45762, 1252105, 488906, 442751108, 1105798, 130122, 446238985, 606275, 1364554, 898065, 899145, 905799, 909255, 943112, 49035, 1225865, 945040, 946252, 949256, 951109, 828296, 1799498, 1405895, 1231559, 6722, 1286090, 1128009, 469957, 398986, 1884239, 1300491, 1468620, 1416210, 640581, 955016, 1479626, 451888197, 1467596, 1271875, 1710338, 1032970, 22005388, 1123592, 266440, 1301127, 20034, 20418, 340176, 490055, 201167, 959750, 64398, 1400587, 324104, 518089, 1513298, 1095309, 1096648, 679945, 878157, 1063433, 1672779, 70088, 531016, 559688, 560649, 561162, 578316, 1009226, 1093127, 273037, 1044107, 1219276, 194504, 314441, 1737104, 43842, 527629, 13698, 112770, 1092938, 1133706, 1139595, 304268, 1136906, 1138062, 86541, 454895749, 1236616, 4674, 313999886, 320887374, 330902922, 338849422, 347539534, 355720972, 21169863, 21169865, 21038659, 364170252, 371242889, 379702217, 388344969, 22914, 1524049, 22929, 1649869, 1207761, 1509265, 1302095, 1362767, 46796, 117516, 371660, 486925, 820309, 1005132, 1442380, 1542352, 1582796, 1848524, 1854617, 1872729, 1902041, 1909652, 58004, 60692, 62100, 65236, 396420425, 402714569, 414581513, 317842249, 22914, 326230857, 22914, 57994, 22914, 334619465, 22914, 57994, 22914, 343008073, 22914, 351396681, 22914, 359785289, 22914, 57994, 22914, 368173897, 22914, 57994, 22914, 376562505, 22914, 384951113, 22914, 57994, 22914, 393339721, 22914, 57994, 22914, 401728329, 22914, 410116937, 22914, 418505545, 22914, 57994, 22914, 48645, 1606148, 1524238, 23118, 131086, 1650058, 1207950, 1509454, 1302284, 1362956, 46985, 117705, 371849, 58697, 61385, 1442569, 820813, 62793, 65929, 614596, 1356932, 1237060, 1248964, 520324, 1234692, 291012, 374020, 1036036, 22674243, 71555, 46978, 86531, 74114, 74120, 1225991, 12930, 2097346, 2128898, 2121794, 2201858, 2098050, 2098114, 2117570, 2150787, 2315715, 2182531, 2201731, 2236675, 2392771, 1381320, 2150787, 2315715, 2236675, 2392771, 30979, 2182531, 148996, 2097346, 2112131, 492884355, 2347975, 2182531, 2248451, 2879684, 2236675, 2392771, 3068298, 3847813, 2205699, 2122178, 1381320, 1381320, 31746, 1259394, 502861451, 505539268, 251845, 49413, 1055366, 509657349, 359299, 870531, 1514436, 1510275, 17221, 1002821, 1381320, 120583, 53635, 518254023, 7686, 521743301, 7879, 145802, 135944, 145543, 522824, 894663, 1028431, 1576647, 373510, 1282768, 1274639, 1413961, 1105924, 524296078, 1415308, 368458, 517511, 939978, 1206217, 1713676, 796362, 380490, 17289, 1105798, 517706, 1098186, 642890, 1367177, 896328, 896966, 924109, 756805, 532110284, 372935, 1057673, 1261639, 727380, 1071691, 539082, 1512906, 681101, 22111625, 1094732, 1096139, 236675, 236675, 236678, 236675, 1055368, 766281, 14979, 1381320, 31746, 337604, 383555, 1835077, 2150787, 2315715, 2182531, 2236675, 2392771, 2130947, 2150787, 2315715, 3998787, 2182531, 2564611, 2236675, 2392771, 2717507, 2105539, 2130947, 2664708, 2150787, 2315715, 2182531, 2236675, 2392771, 2308355, 2150787, 2315715, 2201859, 3998787, 2182531, 2246148, 3178755, 2150915, 2564611, 2236675, 2392771, 2205699, 2151939, 564187523, 2315715, 2420803, 2182531, 2256067, 2150915, 2392771, 2131523, 3534468, 1381320, 572576131, 2315715, 2794243, 2182531, 2564611, 2879684, 2236675, 2392771, 2200259, 1381320, 580964739, 2315715, 3998787, 2196163, 2392771, 1381320, 21169863, 2112131, 2150787, 2315715, 2182531, 2246148, 2879684, 2236675, 2392771, 1002821, 914887, 727947, 900164, 756805, 22584904, 698701, 602218885, 617092, 89539, 1037317, 3732485, 1381320, 127554, 301955, 1019910, 3318216, 3819783, 2664708, 3396934, 3459590, 1381320, 3266115, 3222793, 3284757, 1187615, 2150787, 2916370, 1492998, 1564165, 143754, 239689, 2915791, 2994564, 2353221, 3170384, 3705223, 2196163, 3491336, 1447174, 2757898, 2118852, 3096195, 3847814, 2122178, 3074571, 99011, 1654852, 2150787, 2315715, 2182531, 2564611, 2236675, 99011, 2392771, 3123203, 2128898, 963779, 2236675, 2392771, 2150787, 2315715, 2182531, 2564611, 2392771, 2150787, 2315715, 2182531, 2248451, 2109955, 2392771, 2128898, 2150787, 2315715, 2236675, 99011, 2392771, 2097346, 2150787, 2315715, 2182531, 2236675, 2392771, 49413, 2664708, 2150787, 2315715, 2184580, 2236675, 2392771, 1381320, 2150787, 2315715, 2182531, 2236675, 942083, 2392771, 2150787, 2315715, 3998787, 2126979, 2564611, 2236675, 99011, 2392771, 2150787, 2315715, 2182531, 2111428, 2246148, 2236675, 2392771, 2105539, 2128898, 2150787, 2315715, 2182531, 2236675, 942083, 2392771, 1381320, 2150787, 2315715, 2182531, 2873667, 445955, 151299, 2236675, 2392771, 3272394, 3404489, 3522827, 3524682, 3554442, 3635467, 3714442, 3754314, 3779082, 3779723, 3895945, 3925194, 3926283, 3973451, 4002250, 2150787, 2315715, 3998787, 2564611, 2236675, 99011, 2392771, 1852491, 401672, 878468, 49350, 281353, 1381320, 2150787, 2526660, 2112194, 2879684, 2115717, 2130947, 2664708, 2150787, 2328004, 2315715, 2434756, 2994564, 2246148, 2150915, 2236675, 2392771, 2625221, 2308355, 2205699, 2710147, 2563524, 2121092, 2864133, 1381320, 3300932, 3329478, 2114756, 2128898, 2414343, 2445255, 2425412, 2483589, 3034309, 2294405, 2246148, 3699144, 2325574, 3244104, 2613573, 3024965, 3801860, 2392771, 3103556, 3630406, 3848067, 2563524, 2429445, 3349124, 2369732, 2122178, 2291014, 3855174, 3183237, 2097346, 2112131, 719354882, 2269444, 2098050, 2564611, 2146178, 2236675, 2098114, 2186883, 2105539, 699268, 1381320, 1381320, 2182531, 942083, 2097346, 731937794, 2182531, 2542211, 3178755, 2222788, 2236675, 2392771, 1381320, 2097346, 740326402, 2150787, 2236675, 99011, 2392771, 1666, 2122562, 2285634, 2248451, 3066435, 2097346, 1002821, 1381320, 914887, 2128898, 2315715, 2434756, 2108163, 2182531, 2126979, 2564611, 2236675, 2182019, 2392771, 2200131, 612819, 817492, 1002821, 914887, 1059846, 489419, 236678, 374279, 386438, 1609, 1571530, 574285, 778572, 1100618, 1343752, 1211589, 145864, 959750, 465414, 281094, 2144130, 28804, 544846, 366924, 1002821, 1606599, 149969, 1035658, 2150787, 522693, 305160, 172868, 759332038, 712390, 863430, 595978, 1631875, 765758276, 1541, 1030467, 769878599, 32261, 844492, 1016072, 653387, 774174476, 21060931, 760136, 659721, 1140360, 21101446, 779641161, 1667975, 914570, 69256, 1055368, 1036036, 1441221, 653703, 782891395, 788117126, 791634884, 795854023, 1055364, 1055364, 1055364, 1055364, 2150787, 2315715, 2182531, 2564611, 2236675, 2392771, 2097346, 2128898, 2182531, 2100546, 2236675, 2392771, 2186883, 3663631, 3664590, 1381320, 2150787, 302599, 2315715, 2182531, 2202179, 2236675, 2392771, 1650628, 1510596, 1520900, 2225923, 3614599, 2099842, 2923081, 2133634, 2438091, 2762890, 2807241, 2098498, 3605318, 2311957, 2438421, 2359059, 2439827, 2235714, 2235717, 3295628, 2590411, 3936133, 2120258, 3289474, 3720710, 2103106, 2508294, 2241549, 2128780, 2261828, 2099330, 2235330, 3490952, 2097666, 2256326, 3352655, 2256336, 3063620, 2312405, 2359443, 2164099, 3290698, 2199559, 3457865, 3036487, 3278146, 2097794, 3875398, 2109698, 1381320, 2107202, 2172930, 2264967, 3345095, 3345105, 2215429, 3375950, 2215439, 2116290, 2200071, 2225992, 2105666, 2893634, 3297286, 3388175, 3297296, 2284738, 2101122, 2342216, 2151171, 2481160, 2151181, 2317379, 3226248, 2317391, 2318350, 3609226, 3119441, 3120592, 2999309, 3000140, 2101127, 3291079, 3397129, 2262082, 2106114, 3400460, 3401739, 2141698, 2848966, 2110530, 2098306, 2108738, 2128898, 2292932, 2349511, 2110338, 2380103, 2387655, 2299138, 2122114, 2399429, 2216642, 3676174, 2778957, 2315715, 2661198, 3911117, 3296643, 2108226, 2654084, 2321538, 2129986, 3791557, 3804231, 2418498, 2201858, 2433735, 2448840, 2300610, 2737862, 3468812, 3470091, 2102402, 2511311, 2512272, 2513295, 2514261, 2515604, 2516878, 2517774, 2518671, 2519630, 2520532, 2521811, 2523021, 2595785, 2678787, 2108162, 2220357, 2135366, 2098050, 3420487, 2182531, 2098754, 2309320, 3120017, 3121104, 2113922, 2640647, 2099970, 2134023, 2142914, 2190345, 3720647, 2758792, 2259718, 3066179, 3298245, 2316354, 2098370, 3876421, 2463429, 2106306, 2106307, 2106311, 2246663, 2108930, 3350404, 2248707, 3244489, 3125192, 2115906, 2156482, 3696775, 3801157, 2868552, 3359879, 2118339, 2688582, 2998925, 2999820, 3146374, 2111618, 2750210, 2105346, 2317007, 2318030, 3034439, 2100482, 3519493, 3519494, 2270530, 2109954, 2682950, 2133827, 2133830, 2933829, 2933837, 2935317, 2940108, 2942413, 2943378, 2122370, 2553218, 2099778, 2255110, 3163526, 2103874, 2135494, 2153986, 2153989, 2108994, 2779209, 2278028, 2278859, 2098114, 2451848, 2119810, 2163842, 2568198, 3269317, 3740423, 3068997, 2689029, 2146498, 2133506, 2152066, 3045959, 3255053, 3255948, 2341063, 2267970, 2125634, 2326344, 3349640, 3031176, 3231556, 2852359, 2349315, 2470914, 2118850, 3089161, 3139463, 2131522, 2569221, 2116674, 2295682, 2887875, 2887878, 3122114, 3128706, 2098178, 3931718, 2835079, 2106050, 2099458, 2480719, 2660749, 3777486, 3910732, 2123650, 2106562, 2259269, 3261702, 2194882, 2116098, 2098818, 2661636, 3025476, 3326150, 2117570, 2339335, 2376515, 2376520, 2389000, 3792647, 2446726, 2108482, 2260995, 2260999, 2706246, 3085765, 3232456, 2100034, 3604743, 2190530, 2967746, 2151618, 2215817, 2177858, 2101442, 2341699, 2103047, 2108610, 2278412, 2279179, 3146502, 3127429, 2117890, 2103362, 2877894, 2108355, 3177735, 2580802, 2099394, 2311573, 2438869, 2358739, 2440211, 3798087, 3900433, 3902288, 2533714, 2591505, 2599816, 2599824, 2691279, 2762323, 2806674, 2810576, 3478927, 3903826, 3908369, 3354451, 3894034, 2826959, 2890830, 2920914, 2932753, 2970511, 2982798, 3915537, 3917520, 2988882, 3005329, 3919056, 3920591, 3015953, 3023312, 3049478, 3088007, 2169927, 2100290, 2644357, 3663175, 2285634, 2109314, 2272133, 2229763, 3889862, 3255501, 3256332, 2135618, 3295243, 2590090, 2235402, 2861065, 3081419, 3360205, 3171532, 2575754, 2594316, 2718219, 3935692, 3936974, 3939019, 3940236, 2821891, 3160326, 3177026, 3132546, 2187715, 2105922, 2269123, 3252934, 2514695, 3168454, 3084424, 2105928, 3213830, 2138818, 3181645, 3182476, 2994759, 3197319, 2324098, 2206210, 2177602, 2449794, 3352407, 3375702, 3387927, 3400212, 3401491, 3468564, 3469843, 3887888, 3900185, 3902040, 3903578, 3908121, 3915289, 3917272, 3918808, 3920343, 3935444, 3936726, 3938771, 3939988, 2128898, 2236675, 2392771, 2150787, 2315715, 2182531, 2564611, 2879684, 2236675, 2392771, 2186883, 2097346, 2111170, 828976837, 833140485, 838597382, 1381320, 841689157, 2128898, 2121794, 845168901, 849883717, 854084807, 858288585, 863332740, 2098050, 2098754, 866517317, 870945161, 875762696, 879427845, 884180999, 887553032, 892244293, 895718726, 901276553, 904714952, 908869064, 912889802, 916956164, 921334085, 925632904, 930289797, 2195650, 933540163, 938103622, 943013640, 946934726, 951471944, 955566278, 959753988, 2102274, 963983239, 967488388, 971497031, 975421575, 2098114, 980016133, 983880580, 988694407, 992230343, 996703686, 1000882373, 1005163143, 1009677064, 1013048519, 1017862921, 1022156805, 1026423943, 1030300934, 1034723464, 2273421, 2622665, 2672843, 2787595, 2831883, 3198987, 3262219, 3262923, 3264521, 3273035, 3273739, 3275787, 3279050, 3280394, 3281932, 3310731, 3313354, 3391498, 3420942, 3429454, 3430346, 3437258, 3443403, 3444107, 3447307, 3577931, 3579466, 3582731, 3583434, 3584074, 3584714, 3717259, 3758091, 3767374, 3768267, 3804683, 3808395, 3824586, 3825225, 3825802, 3832458, 3898635, 3926987, 3929226, 3933963, 3958155, 4000779, 1038639176, 1042856649, 1047138185, 1051605960, 3480709, 2107971, 3259780, 3618885, 3499718, 2331333, 2666884, 3420232, 3230405, 2703940, 2180743, 2753802, 2415050, 3034695, 2209799, 3166919, 2621575, 3147781, 2138950, 2880199, 2399172, 3053318, 3053062, 2136453, 3781316, 2729990, 2747015, 3990470, 3486599, 2702147, 3820230, 2290501, 2641351, 2544906, 2309572, 3510472, 3245321, 3020679, 3312966, 3699656, 3218185, 3458308, 3576388, 2764229, 2879432, 2926087, 3013065, 3071176, 3049734, 3357766, 2732488, 3593670, 2668293, 2653830, 2615816, 2316742, 2474315, 2967366, 2738253, 2147909, 2798150, 2353669, 2461193, 3474695, 3536264, 2813446, 2734665, 3448646, 2544773, 2763974, 2913094, 2947657, 2107270, 2753031, 2383301, 2168195, 2474693, 2738951, 3296326, 2147657, 3930886, 2547206, 2193929, 2652297, 2766535, 3612232, 2809097, 2643464, 3754886, 2992901, 2351114, 2547334, 2347590, 2963653, 2937992, 3800007, 2302474, 2436614, 2623749, 2110982, 3425223, 3312647, 3572229, 2545221, 2630150, 2791302, 2822214, 2887236, 2647881, 2673542, 3122570, 3260744, 3439112, 2415050, 2252997, 2746821, 2835528, 2855112, 2292359, 3239750, 3367816, 2804039, 2641672, 2851398, 2655752, 2721734, 2613959, 3575750, 2729990, 3994570, 2293062, 2992905, 3214086, 3061834, 3452681, 2486342, 2855876, 2220557, 2669895, 2867910, 2899077, 3448773, 3723782, 3032521, 2936839, 2618502, 3007750, 2667017, 2668100, 2418052, 3302408, 3253894, 2566664, 3233352, 2799815, 3883401, 2822727, 2828042, 3091919, 3492362, 2258757, 2616389, 3504645, 3063431, 2322499, 3612744, 2281926, 2282185, 2958918, 2952583, 2734089, 3536008, 2963847, 3242627, 3480837, 3424005, 2886795, 3348804, 2366852, 2602502, 3243079, 3788874, 2404807, 2152135, 2634309, 3977669, 2530633, 2729990, 2404429, 2107845, 2840387, 2103811, 3855749, 3518277, 3699656, 2620743, 2417414, 2755590, 2275781, 2316423, 3968007, 2325255, 2781642, 3820424, 2887236, 2626183, 2628679, 3444742, 2719303, 3009352, 3669128, 2425926, 2210376, 2107396, 2880198, 2435526, 3734086, 2353990, 2744260, 2621766, 2894150, 2730950, 2300678, 2196294, 3008902, 2417160, 3905480, 2976456, 2331848, 2835398, 2209285, 3745158, 2818437, 3819079, 2784325, 2185091, 2126341, 3976068, 2196613, 2119811, 3431047, 3570632, 3486790, 2854221, 2616326, 2728325, 2215811, 2884425, 2668486, 2708422, 2569412, 3492231, 3219462, 2937541, 2100419, 2166916, 2629126, 2435780, 2962696, 2140937, 3250633, 2763722, 2769293, 2310471, 2347206, 2243268, 2650569, 2663176, 2668870, 2355846, 2719303, 2959942, 2633926, 2581510, 2343178, 2554888, 3267205, 2496905, 2928010, 3628872, 2745416, 2708296, 2754636, 3263557, 2756232, 3906246, 3796870, 3983879, 2404549, 2654213, 3250313, 2223367, 2282117, 2792775, 2103811, 2929221, 2266824, 3327815, 2745097, 3058565, 3412548, 2768456, 3026503, 2964296, 3785288, 2802437, 2281670, 2212102, 3475529, 3002503, 2820038, 2268231, 2112323, 3500420, 2985221, 2464964, 2423236, 2649735, 2540039, 2531780, 2744656, 3744007, 3977669, 2445580, 2188100, 2846344, 2613705, 3682374, 3237832, 2218500, 2603272, 2304006, 3994184, 2739654, 2661963, 3320133, 2984840, 2142020, 2142026, 2745097, 3575494, 3118344, 2776325, 3271172, 2846086, 2324936, 2646088, 3369990, 3326020, 2350982, 2822855, 2612551, 2719311, 2131655, 2486535, 3519173, 3568517, 2765705, 3056198, 2638341, 2653063, 2919880, 2965893, 3575750, 3260296, 3216330, 2178184, 2682311, 3092998, 2496838, 2098115, 2195203, 2928457, 2808713, 2841094, 3058565, 3270408, 3118344, 3594056, 2581643, 2854791, 3211529, 2719944, 3529412, 3537096, 2689929, 2820805, 3063175, 3500549, 2645832, 2698571, 2723792, 2796677, 2192268, 2417861, 2634435, 2837190, 2891716, 2413702, 2747015, 2112388, 2393480, 3612429, 3239301, 2310532, 2258052, 2714313, 2987016, 3321351, 2304136, 2648072, 2619269, 2605895, 2619143, 3222215, 2545225, 3743305, 2558342, 3000646, 2653254, 3435589, 3780356, 3947910, 3966662, 2619336, 3424395, 2535239, 2243268, 3219270, 3010183, 3291909, 3706629, 2356420, 3743174, 3948040, 2650569, 2410950, 2662664, 2937734, 3515720, 3340684, 2618950, 2727501, 2728651, 2753221, 3968327, 2107526, 3312328, 2558473, 2426632, 3977669, 2402631, 2643720, 3257801, 3822598, 2509770, 3311688, 2426187, 2973580, 2603528, 2627654, 2280264, 3215431, 2131977, 3377485, 2729734, 3270792, 3905161, 2887496, 2656008, 2896780, 2901639, 2904391, 2544773, 2847175, 2919560, 2846214, 2410572, 3110280, 2955080, 3258566, 3423367, 2558852, 2331848, 2337804, 2112396, 2258885, 2136583, 3325894, 3423238, 2461640, 3631172, 3990475, 2339659, 3092998, 3612039, 3603845, 2566469, 3990790, 2776261, 3348741, 2947207, 2639241, 2791748, 2492805, 3203269, 2962056, 3038277, 2862793, 2858119, 2858123, 3256838, 2416457, 3781128, 2713285, 3222472, 3743368, 2504455, 2403911, 2649865, 3905287, 2784073, 3161612, 2841096, 2939145, 2954247, 2648265, 2100039, 2973832, 3883845, 2880070, 2899144, 3238216, 2927689, 3348807, 2452933, 2371209, 2124806, 2103364, 2103366, 3489160, 3806791, 3424904, 2210569, 3602759, 2754246, 3968516, 2126473, 2605512, 3258247, 3647814, 3424198, 2347460, 3906822, 2103555, 3318985, 3320070, 2139589, 2755590, 2948613, 2644872, 3215111, 3774278, 2113862, 3439112, 2766087, 2729797, 2744136, 3928008, 3311688, 2417541, 2880198, 3250057, 3475140, 2948235, 2633163, 3266953, 2103811, 2478469, 3654406, 2421704, 3283524, 3486790, 2781961, 2992389, 2947014, 3026502, 2113284, 2211018, 2139400, 3238214, 2872197, 3603463, 3518855, 2281668, 2633735, 2828036, 3071302, 2218435, 2545221, 3632069, 3559880, 2626629, 2618249, 2331399, 2331403, 2773324, 2774858, 3377159, 2099715, 2610824, 2417989, 2966021, 3481028, 2973574, 2613702, 3906887, 2368523, 2744260, 2957636, 2922052, 2946438, 2112388, 2879688, 3480517, 2560069, 3593863, 3968585, 3518277, 3723786, 2383049, 2980042, 2343497, 3528004, 3007941, 2960200, 3033163, 2764229, 3086214, 2387844, 2619590, 3602377, 3010439, 3931336, 2770182, 2822727, 2646088, 3725190, 3967236, 3665415, 3587141, 3675079, 2218244, 2107398, 3044488, 2729096, 3077767, 2420040, 2721925, 2196164, 2414792, 2420292, 2382533, 3148292, 2804295, 2673735, 2648584, 2964678, 2626501, 2617736, 2178696, 2763529, 2633926, 2302600, 2141642, 3292040, 3051845, 2252678, 2382728, 2402826, 2332999, 2665669, 2696968, 2834564, 2938118, 2905288, 2196294, 2117320, 2695495, 2180486, 2855876, 2587719, 2837828, 3602311, 3574797, 2292485, 3032011, 2113030, 2452104, 2393412, 3060998, 2629126, 2281095, 2726669, 2408199, 2840200, 2651013, 2467144, 2925958, 2722056, 2357638, 3736711, 2474889, 3653895, 2669576, 2585221, 2275912, 3423045, 3139845, 2344133, 2259523, 2354116, 2496901, 3695497, 3647558, 3009608, 2403333, 2846855, 2799050, 2946825, 2912842, 2976584, 2792332, 2653197, 3649283, 2117064, 2166853, 3215750, 3535622, 3497541, 2268489, 2099589, 2617736, 2482182, 3526598, 2768137, 3842119, 2699270, 2798920, 3733832, 3030471, 2894542, 2926533, 3257541, 2196040, 3094215, 2141570, 2895620, 2413450, 3258440, 3743686, 2734408, 2212102, 3733128, 2820040, 3139780, 2847813, 6309060, 6309060, 6309060, 2131907, 3423814, 2618950, 2752396, 2104131, 2218246, 2426180, 2668360, 2781509, 2413702, 2886280, 2982086, 3774150, 3025992, 2985351, 3993417, 3654730, 2221316, 2784325, 3012997, 3326470, 2310534, 2748870, 3144006, 3993732, 3993739, 2926084, 2416837, 2816709, 2800006, 2150024, 2652871, 3319940, 2181827, 2833285, 3070855, 2652619, 3559623, 2886024, 2848135, 2550086, 2623368, 2749387, 3618694, 2231241, 2749765, 3242627, 2947014, 2695240, 2210691, 2107715, 2646086, 2212102, 3633866, 2627717, 2628683, 2755403, 2149763, 2224899, 2827908, 2211527, 2603524, 2668356, 3905860, 3292808, 2872008, 2199113, 2941064, 2344775, 2300678, 3008655, 2926854, 2974340, 2871562, 3070599, 2838086, 2696521, 2198981, 3560197, 2199302, 2276227, 2834633, 2555270, 2209993, 3788870, 2545221, 2259909, 2131651, 2211848, 3321799, 2281924, 2667976, 3796228, 3159814, 2837190, 2375814, 2984521, 2965893, 2729990, 3797321, 2918790, 3008902, 3816070, 2344581, 3148294, 3736708, 3883845, 2899140, 2842822, 2107780, 2100291, 2663365, 2320584, 2631175, 3283657, 2665416, 2731921, 3026634, 3092807, 3669958, 2426180, 2899400, 2531080, 2732362, 2862221, 2763974, 3026246, 2587910, 3571847, 2840389, 3605511, 2668165, 2858436, 2793670, 3270087, 2833869, 2382535, 3419976, 2618505, 2252422, 3822469, 2372612, 3489414, 2281414, 3258822, 2736584, 2277891, 2281091, 2104005, 2626822, 2819973, 2770696, 2747466, 3213316, 2668360, 2708296, 2799559, 2403529, 2885256, 2650695, 3906502, 2196298, 3489544, 3474249, 2987208, 2589193, 3669639, 3440389, 2582150, 2845832, 2646472, 2708680, 3093256, 2416837, 2193988, 2313992, 2387204, 2342980, 2545221, 2704007, 3968009, 2280583, 2141701, 2603014, 3558342, 2142404, 2768966, 2609924, 2751558, 3967430, 2274438, 3977669, 2770375, 2099715, 2262665, 3438600, 2650308, 2650317, 2729352, 3190856, 3474118, 2475145, 2946825, 3601605, 2747722, 2560778, 2674188, 2674566, 2609286, 2929030, 3791753, 3216326, 2766150, 2099782, 2331848, 2178182, 2972683, 2704389, 2560069, 2612805, 3301766, 2196227, 2375686, 2382407, 2899077, 2489029, 3448773, 3173382, 3347204, 3347206, 2881609, 3301388, 2857736, 2324804, 3147526, 2113286, 2695240, 3118344, 3301129, 3603463, 3253193, 2448134, 2284996, 2156548, 2111108, 2646088, 3967562, 3518150, 3568199, 3675719, 2416709, 3012932, 2689862, 2840454, 2399107, 3438151, 3785032, 3601930, 3613128, 3559240, 2107845, 2753477, 2535493, 2417670, 3590470, 3608901, 3319561, 3012428, 2535687, 2732488, 2561861, 6309060, 2836292, 3328132, 2249478, 2760270, 3560327, 3572357, 3475020, 3148551, 3269959, 3495113, 3510665, 2665669, 3438600, 3250057, 3311365, 2898888, 2555654, 2415430, 3452676, 2684488, 2252867, 2607556, 2833413, 3763783, 3427973, 2141321, 2786253, 2829318, 2181892, 3239624, 2638794, 2536455, 2579845, 2109315, 2755854, 2212108, 3629127, 2760711, 2118019, 3216389, 3328133, 2735368, 2725385, 2324550, 2603524, 3092614, 2321867, 2998284, 3577479, 2973381, 3927752, 3029893, 2871559, 3487623, 2381957, 2196227, 3293636, 3488837, 2791493, 2791494, 2815624, 3270087, 3536390, 2132614, 2343942, 2635593, 2606151, 3259526, 2998662, 2597638, 2798405, 2179910, 3564549, 3038408, 2702219, 2688326, 3675780, 3145801, 2331396, 2555528, 2103623, 2655748, 2883016, 2903876, 2798468, 2667781, 3239366, 3292615, 2117507, 2754437, 3371652, 3257606, 3601736, 2112133, 2701385, 2371717, 2218248, 3249351, 3320328, 2878983, 2486729, 2621382, 3392070, 2099780, 2957445, 3179724, 2612807, 2616071, 2309576, 2829318, 2566980, 3857092, 2649481, 2929286, 2530759, 2353860, 2412550, 3533637, 2963463, 2972550, 2509449, 2950471, 2719303, 2767750, 2412357, 2637960, 2554888, 2301190, 2112197, 3307526, 2169539, 2734985, 2748238, 2878280, 3796488, 2300683, 2701958, 3459268, 2652164, 2748490, 2192007, 3259717, 2231241, 2894341, 2343047, 2419908, 2772039, 3233096, 3020870, 3795785, 2885514, 2191878, 2728134, 2816581, 3769733, 3396295, 2410056, 3533448, 3139782, 2260037, 2309902, 2887236, 2301061, 2601353, 3055688, 2682118, 2742860, 2746448, 2759311, 2765448, 3377159, 3977669, 2496901, 3292233, 2697481, 2351238, 2764359, 2957189, 2292361, 3444870, 3215885, 2645257, 2668356, 2877640, 2314185, 3518598, 2611333, 3392070, 3931017, 2605128, 2209285, 2141892, 2743307, 3518277, 2421830, 2654022, 2122438, 2715339, 2701641, 2132421, 3818823, 3026502, 2452486, 3327496, 3504841, 3419404, 3070344, 3210886, 3369987, 2307142, 2486405, 2629512, 2258502, 2964040, 2404933, 2732805, 2468232, 3733511, 3535431, 3906887, 3237832, 3326728, 2839046, 2842375, 3500103, 2714570, 2108995, 3301766, 2309765, 2413444, 2618505, 2486596, 2103044, 2739780, 2760715, 3321607, 2310469, 2721160, 2603014, 2603016, 2627526, 2684293, 2684997, 2692742, 2694664, 2696328, 2618950, 2720719, 2733648, 2147909, 2099715, 2285189, 3211336, 2697225, 3311688, 3795400, 2346120, 3321799, 2602185, 2964552, 2694404, 2739400, 2962249, 2845063, 2739268, 2280776, 2769802, 3039366, 2763974, 2633609, 2747015, 2952200, 2265288, 2924296, 3798405, 2168197, 2560069, 3328069, 3759303, 2196229, 2899077, 2101638, 3311495, 3032967, 2770566, 2977925, 2421830, 2486981, 2956808, 3628740, 2918918, 3333508, 3271176, 3995658, 2620748, 2369029, 3572038, 3419846, 2711430, 3211012, 3534341, 2625863, 2747145, 2947911, 6309060, 6309060, 3321221, 2968964, 2741258, 2602630, 2623940, 2136453, 3726469, 2840196, 2653063, 2371591, 2946440, 2117960, 2209289, 2559880, 2741707, 2898500, 2452741, 2638469, 3906761, 3504841, 3145544, 3069960, 2800004, 2113349, 2107971, 3326405, 2730118, 2724940, 2353606, 2611078, 2682757, 3173512, 3984198, 3670342, 2763974, 3028620, 3259268, 2344266, 2682568, 2724487, 3371398, 2324743, 3091589, 3647814, 3553798, 3625031, 2631364, 2804549, 2601348, 2858567, 2601928, 2608906, 2643335, 2139783, 3377031, 3030217, 2724938, 2284931, 2631109, 2117379, 3905929, 3737352, 3519175, 3311945, 2555142, 3884040, 3430917, 2178954, 2169097, 2425609, 3983879, 2531337, 2274184, 3625478, 3572488, 3998023, 3905287, 2383047, 3044104, 3147142, 2769221, 2625863, 2726856, 3333380, 3122244, 2699015, 2820935, 3249674, 3625350, 2466634, 2895431, 2886663, 2804740, 2784260, 2963206, 3220100, 3220108, 4005317, 3504393, 2828932, 2840389, 2638664, 2624389, 3723782, 2292100, 2898250, 3002246, 2745802, 2221255, 2662213, 2276229, 2416778, 2695045, 2763718, 2387204, 2828294, 3396485, 2258694, 3077772, 3029258, 2561028, 2300678, 2747015, 2972420, 2331848, 3085958, 3675337, 2978825, 2841353, 2948678, 3998278, 3572807, 3319368, 3997769, 3321607, 2721542, 2822855, 2587589, 2887236, 3571719, 3500549, 2667589, 3740999, 2381640, 3927622, 2730509, 2735887, 2755405, 2141764, 2320838, 2988040, 2099717, 2715016, 2504138, 2668356, 2322438, 2974471, 3912135, 2985545, 3572421, 2840196, 2847626, 2884169, 2531591, 2731206, 3518598, 2113158, 3665606, 2983695, 2987721, 2178182, 3698694, 3317001, 2842631, 2105283, 2344518, 2195203, 3497224, 2822407, 2765961, 2836808, 3535752, 2100358, 2353417, 3487941, 2306948, 3440583, 3791877, 2141764, 2310664, 2192708, 2841927, 3570502, 2630341, 2987208, 3518283, 3013767, 2417414, 2926980, 3459142, 2545221, 3500549, 2637321, 2652041, 2948100, 3905413, 2300741, 2178566, 3438856, 2892742, 3784587, 3681994, 2879237, 2685126, 3212549, 2101445, 2798599, 3302408, 2560004, 2529606, 2696454, 2274631, 3242564, 2629126, 3063685, 3063689, 3998788, 3013321, 2618950, 2901832, 2300741, 3675973, 2258694, 3419145, 3510665, 2611206, 3055944, 2786568, 3212484, 2850884, 2850888, 2868168, 3253449, 2729990, 2763974, 3367501, 3486790, 3340361, 3745413, 2199302, 2924680, 3347013, 3500164, 2545221, 2649096, 2740681, 2601540, 2107398, 2624074, 3628872, 3250057, 3700042, 3311814, 2736328, 2870981, 2672264, 3091717, 2554825, 3684681, 2103938, 2749765, 2565766, 2618759, 3704517, 3232838, 3196808, 2829318, 2959881, 2616326, 3327112, 3512069, 3960646, 3736968, 2646088, 3669384, 3049864, 2179908, 2281731, 2960452, 2643846, 2587652, 3796295, 3670089, 2922053, 2265286, 2344518, 2815179, 2837894, 2868934, 2919176, 3357766, 2862979, 2171139, 2887236, 2302341, 2937287, 2601928, 2601935, 2625611, 3438344, 2107526, 3439118, 2258691, 2937156, 2837765, 2839814, 2690123, 2704198, 3260425, 2630341, 2446984, 2201288, 3510348, 2760774, 3326470, 3058565, 2669000, 2620741, 3529416, 2743754, 2756489, 6309060, 2097346, 1059093506, 2098050, 2246148, 2105346, 2184580, 2102274, 99011, 2098114, 2128834, 1381320, 2150787, 2315715, 2182531, 2564611, 2236675, 2392771, 2112131, 2150787, 2315715, 2182531, 2246148, 2236675, 2392771, 2164739, 2664708, 2150787, 2328004, 2315715, 2994564, 2182531, 3705223, 2564611, 2196163, 3491336, 2392771, 2757899, 3096195, 3847814, 2122178, 3074571, 2315715, 2182531, 2236675, 2392771, 2150787, 2315715, 2182531, 2392771, 2118723, 2233603, 2097346, 1381320, 2175237, 3500680, 3066568, 2128898, 2111237, 3178183, 2124482, 2393991, 2098050, 2491975, 2864905, 2869896, 2923913, 2173506, 2543111, 2300292, 3178375, 3681735, 2495106, 2564611, 2122370, 2102274, 2098114, 2152066, 2099458, 2128834, 2801157, 3297349, 31746, 218563, 2150787, 2315715, 2139971, 2182531, 2126979, 2236675, 2392771, 2150787, 2315715, 2182531, 2236675, 2392771, 2150787, 2315715, 2182531, 2564611, 2236675, 942083, 2392771, 69059, 257, 2150787, 2315715, 2182531, 2246148, 2202179, 2236675, 942083, 2392771, 2208451, 1111969606, 653699, 830405, 2150787, 2315715, 2182531, 2236675, 2392771, 2128898, 2150787, 2315715, 2182531, 2236675, 942083, 2392771, 6274, 1381320, 99011, 942083, 312836, 933765, 2097346, 3855428, 2150787, 2315715, 2182531, 2392003, 2294405, 2202179, 2248451, 2236675, 2436803, 2392771, 2186883, 2499523, 2105539, 2150787, 2315715, 2182531, 2236675, 2392771, 2128898, 2392771, 1381320, 2182531, 942083, 1381320, 942083, 2855747, 2150787, 2304644, 2315715, 2182531, 2100546, 2564611, 2236675, 2392771, 2150787, 2315715, 2182531, 2100546, 2150915, 2236675, 2392771, 3066435, 2186883, 2097346, 2128898, 2182531, 2236675, 2392771, 3847813, 1367366, 2664708, 2122178, 1381320, 2097346, 1002821, 128328, 1651459, 2128898, 1183399366, 143492, 727947, 257734, 510151, 2315715, 327752, 2182531, 1120837, 17028, 2535875, 350663, 910404, 2236675, 514310, 941636, 942083, 2392771, 3103556, 1225991, 1366345, 727368, 1317060, 281094, 69256, 1247749, 74313, 1002821, 2128898, 2150787, 2315715, 2182531, 2564611, 2196163, 2392771, 3096195, 2122178, 1381320, 2150787, 2315715, 2182531, 2201731, 2879684, 2236675, 99011, 2392771, 2150787, 2315715, 2994564, 2182531, 2236675, 2392771, 3847814, 2315715, 2182531, 190467, 942083, 2392771, 2150787, 2315715, 2182531, 2236675, 2392771, 1002821, 510151, 1381320, 2182531, 2150787, 2315715, 2182531, 2236675, 2392771, 1231081859, 2315715, 2236675, 2392771, 1381320, 2097346, 2128898, 2150787, 2182531, 2236675, 2098114, 2392771, 3379399, 3223115, 2101507, 2350408, 3318727, 2187846, 2170565, 2111561, 2606408, 3646473, 3827472, 3646475, 3083593, 2104707, 2102153, 2307974, 2307980, 2175432, 3983432, 3889417, 3913934, 2864331, 2582732, 2130947, 2676364, 2130953, 2367111, 2315532, 3957514, 2392196, 2427341, 2676040, 2164749, 2705990, 2664715, 3463881, 3699335, 3734406, 3604105, 3600714, 3266504, 3095172, 3389831, 2400583, 2354372, 3035780, 3760969, 3618249, 2219720, 2164101, 2173317, 2153670, 2427017, 2504781, 3086472, 2153415, 2170696, 3992838, 2362308, 2797765, 3997510, 4004548, 2130695, 2137226, 2180292, 2191686, 2195145, 2195151, 2200525, 2204294, 2224464, 2225478, 2226887, 2229127, 2229135, 2231817, 2261446, 2263239, 2263240, 2266313, 2630536, 3050951, 2175235, 2289222, 3945224, 3914634, 3950345, 2253571, 3177926, 2529162, 2689415, 2366666, 3188366, 2232134, 2750279, 3503814, 2131142, 2167691, 2173706, 2805581, 3998471, 2540488, 2540489, 2540495, 3284044, 2553801, 3667854, 3705482, 2873158, 3152326, 3274380, 3282636, 3356680, 3653639, 2332741, 2703684, 3619406, 2532356, 3537735, 3848970, 3974740, 2287759, 2229576, 2288904, 3394701, 3394702, 2289609, 2296072, 2296079, 2314764, 2314767, 2320135, 2330122, 2406411, 2345352, 2360647, 2507021, 3344582, 2427782, 2375305, 2588744, 2396424, 2396430, 3223367, 2407109, 2409413, 2133572, 2188550, 2219464, 3616195, 3098574, 2507976, 3648267, 3184263, 3139333, 2390342, 2812935, 3123656, 3395785, 2306501, 2663432, 3506374, 3833482, 3619145, 2315721, 2315723, 2116488, 2354057, 2164294, 3696202, 2149450, 2330636, 2282631, 2923402, 3324363, 3324377, 3228040, 3847941, 2507462, 2549193, 3707462, 3028042, 2606918, 2931972, 2931981, 3617287, 3505865, 2420805, 2422216, 2424329, 2425412, 2430599, 2430600, 2431687, 2537928, 2449351, 2133061, 2479564, 2481673, 2949194, 3841737, 2102409, 3698124, 2498123, 2502664, 2509000, 2524036, 2654920, 2660297, 3957703, 2195718, 2740231, 3248841, 3293963, 2711047, 3978631, 2221575, 2164612, 2164613, 2993797, 3472459, 3879172, 2877128, 3111178, 3506567, 3524231, 2687186, 2751302, 2302982, 3299726, 2758598, 2707912, 2712015, 2165704, 3777096, 2900554, 2900561, 2771214, 2361418, 2361420, 2296583, 2296592, 3966792, 2771717, 2814602, 4004620, 2722381, 3163206, 3163207, 3163212, 3715020, 2238604, 2803147, 3712132, 2633988, 3717897, 3857223, 3752905, 2149001, 3916807, 3957126, 3957129, 2821379, 2829578, 2109255, 3426699, 2805194, 2300420, 3534662, 2643977, 3219716, 4005514, 2418181, 2888261, 2888269, 2889102, 2960773, 3373318, 3846791, 2480202, 3639174, 3059844, 3142599, 2564299, 3993031, 2607940, 2647046, 2647053, 3003404, 2236358, 3086986, 3484422, 2372872, 2301703, 2391434, 3710982, 2629251, 2873414, 3944840, 3718282, 2656391, 2656392, 2672644, 3378183, 2124936, 2732872, 2839304, 3907210, 3024965, 2150919, 2360979, 2472262, 2202696, 2244041, 2393672, 2100491, 3536648, 2564612, 2468486, 3261830, 3238921, 2913607, 2479816, 2733254, 3740740, 3732869, 2950024, 3349898, 2931080, 2953542, 2736842, 2791880, 2971912, 2974920, 2977094, 2988550, 3840396, 2990032, 2767237, 2165192, 3339408, 2165200, 3827086, 3839502, 3839508, 3861839, 3862790, 3303889, 3734803, 3735944, 3295109, 2351752, 3137157, 3037644, 2271177, 2703241, 2272327, 3801865, 3254151, 3147910, 2797255, 2120453, 2166275, 3616649, 2490185, 2287619, 3704260, 3101453, 3453199, 3740805, 3450374, 2283207, 2174791, 3932358, 3932363, 2775301, 2489606, 3151943, 2451145, 3683526, 3611781, 3566475, 2168838, 3509637, 2485960, 2783560, 3477260, 3477264, 2826057, 2831495, 3206987, 3046854, 3050634, 3054027, 3057610, 3058246, 3066117, 3318470, 2338632, 2272522, 3393820, 3096396, 3097160, 3847813, 3710151, 3608454, 2639685, 2213190, 3932808, 2884807, 3913672, 2472458, 2283468, 2154185, 2265671, 2661636, 2409606, 3775946, 2149253, 2255436, 2263688, 3275272, 3422092, 2294732, 2299209, 2299783, 3661580, 2273220, 2431050, 3158540, 2572875, 2455755, 2476934, 2493959, 2297159, 2297167, 3165713, 3018386, 2500941, 2500942, 2501774, 3862280, 3862290, 2543944, 2245639, 2442186, 2785800, 2758533, 3758858, 2226375, 3099396, 2230979, 2329349, 2901191, 3155335, 2722894, 3473101, 3481609, 2370181, 3828419, 2470086, 2493573, 3648840, 2861449, 2507525, 2507535, 2825351, 2170181, 3186762, 3441286, 2524873, 3135948, 3143049, 2166982, 3110668, 3370246, 3154312, 3155782, 3228422, 2838276, 3238787, 2844426, 2222353, 2554250, 2558149, 2570055, 2473351, 2125188, 2125195, 2869512, 2877894, 2309701, 3834244, 2429193, 2099396, 2395975, 3143557, 3143559, 3300293, 3797187, 2245320, 3533770, 2117507, 2175306, 3931910, 2506895, 3910281, 3098448, 3117320, 2955337, 2726215, 2646927, 3312900, 2994692, 2225094, 2341510, 3811402, 2612166, 3404039, 3191368, 3191879, 3196231, 3200266, 3208075, 3605829, 3017416, 2292675, 3884812, 3415823, 2332237, 2482759, 3481929, 2383815, 2483976, 3975244, 2853064, 2563272, 3332110, 3406484, 3407780, 3526026, 3649483, 3254340, 3254345, 2322568, 2411397, 3614922, 2508551, 3318212, 2112131, 2150787, 2328004, 2315715, 2182531, 2246148, 2202179, 2564611, 2990022, 2879684, 2236675, 2392771, 2205699, 2097346, 2112131, 2128898, 2150787, 2328004, 2315715, 2182531, 2202179, 2990022, 2236675, 2392771, 1381320, 2150787, 2315715, 3998787, 2236675, 942083, 2392771, 1381320, 2150787, 2315715, 2182531, 2564611, 2879684, 2236675, 2392771, 2097346, 3181507, 2128898, 2315715, 2182531, 2564611, 2236675, 2392771, 2101122, 2412098, 2128898, 2150787, 2104386, 2098626, 2246148, 2184580, 3507586, 2879684, 2098114, 2392771, 2205699, 2476934, 2285634, 2110850, 2247298, 1273039811, 1277364995, 378566, 378566, 2664708, 2196163, 121930, 1128588, 87052, 829901, 1002821, 582348, 237127, 88646, 107528, 120583, 137288, 1582218, 1059399, 1290331397, 900297, 226379, 1852491, 510280, 106569, 1884874, 1301262, 1137229, 21267531, 905930, 143492, 440070, 305160, 539528, 227079, 145797, 609671, 517129, 1122695, 435336, 1078921, 331396, 334917, 1286862, 1414989, 509768, 1295444550, 1305930312, 733896, 1282768, 360588, 431239, 434887, 448647, 467847, 56450, 26567, 77004, 1511941, 483335, 686086, 689929, 696904, 362178, 1474, 249611, 941767, 1408201, 390089, 1476360, 735426, 1722249, 864266, 25094, 847369, 905799, 907657, 918344, 922439, 927689, 944133, 945040, 1872262, 1211589, 1464327, 1894669, 291397, 170822, 978695, 1006424, 1123592, 24586, 20034, 358026, 454925, 4098, 959750, 593672, 324104, 460297, 1096648, 501838, 372935, 1074957, 1033285, 25928, 1748680, 1077510, 43842, 894918, 281094, 4674, 1025, 403399, 393731, 1299145668, 1302951683, 193, 96070, 193, 513, 96070, 393731, 21458181, 2392196, 2150787, 2434756, 2246148, 2236675, 2243717, 2208451, 2121987, 3932229, 2105539, 1323356547, 2315715, 2182531, 2097537, 2564611, 2184580, 2879684, 2236675, 2392771, 2186883, 1381320, 2097346, 2112131, 2128898, 2150787, 2315715, 3998787, 2098626, 2246148, 2202179, 2564611, 2236675, 2196163, 2392771, 2105539, 1381320, 3415170, 1892103, 31746, 1635589, 360911, 22584904, 1097550, 1340240898, 3316040, 2259078, 2906950, 2257415, 1344284738, 1350281480, 2251914, 2526984, 2133634, 3426249, 3605895, 2195590, 2244617, 2139268, 2187590, 2907972, 2119684, 2478537, 3157766, 2836293, 2450501, 2293703, 2896071, 2751876, 2257990, 3108741, 2803909, 3212357, 2198087, 3183813, 3310153, 3744389, 3123972, 3638983, 3737806, 3302857, 3299401, 3291462, 2380808, 3061259, 3558604, 3435718, 2582407, 2828549, 3035786, 2219977, 3287817, 3747974, 3151365, 2410309, 3343881, 3212747, 2598022, 3454726, 2153412, 2686342, 2407240, 3944454, 2335110, 2134472, 2140551, 2142665, 2144709, 1381320, 2706692, 3197636, 2172933, 3869129, 2239751, 2239755, 2254154, 2270981, 1352677570, 2804871, 1357031944, 2189383, 3001477, 3331146, 31746, 2449675, 2609546, 2489926, 2166531, 3574093, 3783948, 2177485, 2419845, 3632261, 3616263, 2197321, 2251654, 2505541, 2981576, 2686083, 3067336, 2686088, 2911303, 3458440, 3780489, 3008263, 3221959, 3425864, 3047812, 3047815, 2705736, 3527686, 3538639, 2333447, 3496390, 2300101, 2247683, 2415815, 3692867, 2432390, 2441414, 2443590, 2700869, 2537923, 3818504, 3702089, 3786443, 2443976, 2448517, 2453893, 1361255106, 2797449, 2246279, 2489733, 2478279, 2488262, 3665285, 2493131, 2502660, 2525893, 2526215, 2596358, 2597445, 2655431, 2658951, 3032836, 2678986, 2681608, 2871113, 2352581, 3560646, 2407690, 2450246, 2539271, 2870285, 2774089, 3815173, 3620807, 3738824, 3736392, 3783175, 2138630, 2277447, 2436867, 3157636, 3655941, 3837191, 3853897, 2335944, 3975941, 2392900, 2444421, 2503117, 2118210, 2891974, 3056710, 3199626, 3749574, 3775749, 2118213, 2118215, 3833036, 2830666, 2685510, 2988293, 2685894, 2686727, 2694086, 2700620, 2244937, 1365343175, 2712965, 2712966, 2716040, 2428293, 2778117, 2780040, 2780554, 1369956610, 1373694914, 2957765, 2587651, 2398152, 2128259, 2781188, 2525195, 2135880, 3161160, 1379463945, 2800393, 2802246, 2812040, 2812553, 2816134, 2816517, 2419334, 2817737, 3745671, 3960326, 2959239, 3746375, 2213956, 1383147529, 2640264, 3909640, 3741319, 2929734, 2196809, 2908679, 2460682, 2466184, 2191239, 2194758, 3560970, 3792200, 3055301, 2267717, 3132039, 3153737, 3644171, 3276424, 3744521, 2444999, 2856780, 2859020, 2859786, 2860428, 2906824, 2907336, 2907844, 2909129, 2909705, 2910282, 2910921, 2911751, 3875660, 2326086, 2922696, 2450438, 3726150, 3814919, 3294664, 3306955, 2189063, 2329545, 3673289, 2435143, 2468100, 2570375, 3773766, 2187334, 3087429, 2423816, 2702980, 2702982, 2830347, 3330121, 2197830, 2198473, 2173126, 3350408, 2248707, 3151749, 2335433, 2536325, 3159364, 2593542, 2364997, 2458630, 3208967, 3324102, 2285387, 3695943, 2453126, 2301382, 2293894, 2751817, 3078410, 2878661, 3069197, 2780806, 3111686, 3098182, 2372741, 3042951, 3140039, 3730382, 2564611, 2929673, 3706825, 3036807, 2551239, 2749125, 3648069, 1387881615, 2955911, 2956360, 2959684, 2961094, 1390724162, 2977734, 2990022, 3307790, 3066890, 2127366, 3911818, 2181001, 2376901, 3418760, 3473798, 2742344, 3452296, 3823179, 2257669, 3183944, 2134796, 3001159, 2441990, 3485000, 2188232, 1394871810, 2145227, 2216905, 2218633, 3329735, 2168392, 1398945480, 2104203, 3573129, 2651213, 2420296, 3519752, 1402998466, 3396740, 1407388866, 3142150, 1411395010, 3257034, 2133382, 3990920, 3712904, 3774790, 3075462, 3116678, 3648709, 2349572, 1415817732, 3481094, 2611655, 1420715335, 3511563, 2189897, 3632330, 2118532, 2874056, 3959757, 3089993, 3090568, 3091209, 3103556, 2406084, 2497797, 3214347, 2135750, 3480645, 2232585, 2258184, 2337668, 3036169, 3501317, 2896136, 3223687, 3300424, 2644486, 3729415, 3006985, 3566857, 3509765, 2413253, 1424060418, 3123396, 2284101, 2257158, 3173189, 2731463, 3481349, 2596420, 3291654, 2611911, 2290694, 3248645, 2208840, 2259589, 2248327, 2270409, 3330442, 2632455, 2632460, 2836230, 2392393, 2418949, 2428104, 2115203, 2164229, 3772933, 2627079, 1428304194, 3073415, 3088774, 3386502, 3109702, 2188038, 3501960, 2352069, 3496583, 3496589, 2230979, 2230981, 3186183, 3074248, 3185093, 2206280, 3752646, 2997895, 2922501, 2257798, 3855557, 2251082, 3440134, 3995079, 2992581, 3137415, 3142468, 3159238, 3418565, 2176587, 3773385, 3794186, 3509896, 3961928, 3204556, 3229191, 3437832, 3456776, 3461445, 3666314, 3828425, 1432368578, 3978118, 2507524, 3360841, 2718729, 2600903, 2903431, 2148617, 2373256, 2373263, 2280006, 2996619, 3897221, 3897223, 3133897, 2525510, 3036039, 3019269, 2306244, 2536006, 2240196, 3053575, 3341320, 1437603080, 3153029, 3153351, 3252553, 2199300, 2387144, 1441106504, 2125188, 3124744, 3734596, 3781769, 2202501, 1444962754, 2280069, 2968773, 3620360, 2319687, 1449134274, 2337605, 2971526, 2379014, 3123336, 3129608, 3173126, 3856838, 3989449, 3386310, 2707211, 2583621, 2785606, 3064904, 2709318, 2290054, 2207498, 2801354, 2503877, 2352263, 3232326, 1453364802, 3186503, 2499333, 2407556, 2407557, 2873798, 2568455, 2225093, 2423940, 3168136, 2290245, 3022919, 3863493, 2250885, 2777284, 3268425, 3108296, 2364678, 2961862, 2124422, 1459349256, 3961543, 3175053, 3178956, 3180489, 3181065, 1463241410, 3956547, 2138819, 3773957, 3837450, 3385990, 3198533, 3209412, 3209419, 3336460, 3341836, 3342613, 3346381, 3361423, 3362386, 3363535, 3364498, 3365651, 3366861, 3368333, 3369230, 3370638, 3372748, 3373708, 3374795, 3378638, 3380946, 3385420, 3386896, 3428306, 3431500, 3433229, 3434060, 3446225, 3455117, 3464909, 3466442, 3467084, 3471884, 3479884, 3482508, 3514579, 3516240, 3517264, 3520269, 3521804, 3525321, 3531085, 3531923, 3541073, 3542163, 3545167, 3546124, 3546895, 3547853, 3549391, 3550352, 3553038, 3567438, 3568848, 3578637, 3581070, 3581964, 3586003, 3592910, 3594576, 3595601, 3596687, 3597651, 3622477, 3623311, 3624270, 3626000, 3627017, 3632976, 3634511, 3636175, 3637138, 3640526, 3643085, 3644877, 3645709, 3650317, 3651149, 3651984, 3653003, 3655372, 3656268, 3657804, 3658574, 3713424, 3718930, 3720075, 3721358, 3722254, 3724430, 3725579, 1467539734, 3748813, 3749972, 3753485, 3759765, 3766541, 3768975, 3770639, 3787151, 3788110, 3789517, 3803217, 3812812, 3813580, 3814347, 3815500, 3816463, 3817426, 3820941, 3826444, 3829004, 3829773, 3830607, 3831566, 3836620, 3838093, 3838923, 3841164, 3843469, 3844302, 3845193, 3849619, 3850957, 3851789, 3853324, 3854478, 3857679, 3858636, 3859405, 3860239, 3861196, 3863820, 3864716, 3865484, 3867213, 3868050, 3869708, 3870476, 3871249, 3872335, 3873295, 3874259, 3876750, 3877647, 3878604, 1471885838, 3880335, 3881302, 3886290, 3895180, 3897679, 3899341, 3921807, 3922764, 3923533, 3924365, 3929870, 3934668, 3941260, 3942032, 3953361, 3954443, 3955532, 3956302, 3963217, 3964302, 3965197, 3984587, 3986895, 3996308, 2478018, 2478018, 2134787, 2478018, 2134787, 2478018, 2108418, 2419397, 3962444, 2478018, 2478018, 2108418, 2478018, 2717701, 3330437, 2478018, 2478018, 2172930, 2717701, 3350921, 3540300, 2478018, 2478018, 2478018, 2478018, 2419397, 2478018, 2478018, 2478018, 2478018, 2172930, 3350921, 2478018, 2478018, 2478018, 3330437, 2478018, 3330437, 3540300, 3962444, 2112131, 2150787, 2315715, 2182531, 2246148, 2236675, 2392771, 1520328, 371332, 99011, 823304, 2097346, 1486912514, 2385411, 2465988, 2108163, 2223684, 2302982, 2185475, 3148868, 2964933, 2564611, 2236675, 942083, 2392771, 3068298, 2476934, 3723148, 1381320, 2128898, 2150787, 2315715, 2182531, 2150915, 2990022, 2236675, 2392771, 2205699, 687496, 1002821, 1852809, 14146, 1508892101, 1002821, 237127, 460616, 59854, 573394, 12427, 1059654, 1512629509, 1516823820, 255751, 914887, 778890, 268176, 1649605, 727947, 539528, 227079, 367947, 517129, 1250695, 1122695, 501447, 226886, 435336, 1522769030, 323911, 1414989, 777296, 1526773634, 509768, 387216, 1575500, 1534630733, 397256, 398411, 451591, 370249, 378758, 619400, 22082, 472394, 534919, 483335, 689929, 696904, 1120837, 998158, 156110, 1406351, 1408201, 390089, 537419, 616399, 719820, 1166667, 851848, 996551, 1052424, 1292171, 1306316, 1426316, 1457868, 1494541, 1476360, 817026, 1722249, 1343752, 1711883, 833094, 872715, 1282571, 919882, 922885, 945040, 951878, 1231238, 1211589, 1464327, 1020808, 978695, 979399, 1036295, 1044554, 1380938, 959750, 607437, 324104, 1096648, 679945, 756805, 1043340, 1495051, 1546820, 1076937, 1077510, 1401222, 768198, 13698, 281094, 24395, 1131655, 4674, 843589, 125188, 257, 404547, 1520926150, 620291, 898, 8068, 36482, 567556, 2178, 13506, 3010, 1180994, 3970, 582914, 44546, 11586, 233602, 119490, 12930, 71426, 218563, 2370, 27330, 104706, 5250, 1602, 211010, 362178, 30786, 87618, 1474, 105027, 2818, 11394, 735426, 45762, 18754, 59330, 90498, 653058, 8194, 1204994, 456066, 49026, 139523, 1538, 265730, 6722, 4610, 1412485, 40386, 19522, 277955, 1666, 20034, 4098, 11330, 90882, 2242, 43842, 13698, 49413, 1537223682, 1543217283, 71555, 1545612290, 71555, 545543, 2179523, 2097346, 2150787, 2315715, 3998787, 2098627, 2150915, 2236675, 2196163, 2392771, 2717507, 89539, 1381320, 2150787, 2315715, 3998787, 2564611, 2236675, 2196163, 942083, 2392771, 2150787, 2315715, 2392771, 2150787, 2315715, 2182531, 2097537, 2564611, 2236675, 2436803, 2392771, 1525060, 2112131, 2150787, 2315715, 2170499, 3998787, 2626819, 2366467, 2796867, 2872707, 2182531, 2246148, 2236675, 2392771, 2105539, 2106692, 2503619, 33795, 3944707, 2110664, 3177604, 2097674, 2346502, 1130756, 3638215, 2229898, 2279689, 3835911, 3882634, 2112131, 2957899, 2872521, 2124677, 3384967, 31746, 2150787, 2237255, 3485701, 2908233, 2315715, 2863878, 2904835, 991747, 1108422, 1517126, 88199, 2264134, 3260229, 2144903, 3195783, 1587629443, 3432071, 2865603, 2397509, 2246148, 2559496, 3642316, 3402565, 2774470, 2236935, 2265863, 2453447, 2487752, 3201423, 3744965, 2385671, 2683335, 2683658, 2981129, 3187333, 3205898, 1644998, 2904965, 3650052, 3712710, 3027399, 2913927, 3731208, 2248709, 3485446, 2334981, 2327237, 2678340, 3774535, 3501514, 2369416, 3625606, 53763, 3024965, 3538182, 3876230, 3308486, 2564611, 3821575, 2683205, 2236675, 3017741, 2196163, 3731464, 3704388, 2597125, 2781254, 2216262, 2785351, 2796935, 3562693, 2392771, 3093959, 2467785, 3328969, 2171850, 2146498, 2397444, 3050372, 3306631, 3073096, 3080521, 2230665, 3084935, 3062662, 997510, 3103556, 3105098, 3114696, 3116361, 3203462, 2840581, 2369096, 2931338, 2710147, 2107078, 3085191, 2292101, 3704069, 3848067, 2563524, 2267653, 2659207, 3108613, 3131718, 1075717, 2127555, 2127561, 2596556, 3014732, 2969352, 2881927, 3156168, 3162698, 3165259, 2872840, 2216520, 2325830, 2124101, 2115978, 3907781, 2122178, 2922183, 2442758, 3630277, 3647113, 2604485, 3695301, 3064137, 3537990, 3884424, 2397699, 2264454, 2593350, 3226757, 3226761, 3082377, 2623111, 1139204, 3236359, 2230409, 2326725, 252680, 3397445, 3600453, 2463049, 2120258, 2630980, 2101058, 2099970, 2914309, 3227272, 2853765, 2912195, 2912197, 2978243, 2160578, 2404228, 2791747, 2163842, 3449860, 3051779, 2118850, 2853891, 2690692, 3117827, 2491844, 2117570, 2205443, 2329347, 2100034, 2967746, 3081929, 2110722, 2673988, 2100418, 2368708, 3062596, 2122756, 2110850, 2324866, 2299651, 3164675, 2412228, 2709764, 3085572, 3115140, 3211267, 3293571, 3742020, 3242500, 3242822, 2276738, 265603, 2128898, 2315715, 2182531, 2236675, 2392771, 2097346, 2112131, 2150787, 2315715, 2124483, 2182531, 2246148, 3082628, 2879684, 2236675, 2392771, 2205699, 3107012, 3315971, 2789763, 3643780, 3396934, 2143235, 1002821, 914887, 3269251, 1608651848, 2282627, 2837571, 2397571, 2150915, 3782469, 1287747, 2150787, 2315715, 2182531, 2236675, 2392771, 2166659, 2298307, 1381320, 2150787, 2315715, 2182531, 2202179, 2236675, 2318788, 942083, 2392771, 3564740, 1002821, 2892997, 914887, 2128898, 2121794, 2098050, 2102274, 99011, 2098114, 1510404, 2150787, 2328004, 2315715, 2182531, 2564611, 2236675, 2392771, 1381320, 2150787, 2315715, 2182531, 2564611, 2879684, 2236675, 99011, 2392771, 2186883, 2664708, 1381320, 2150787, 2196163, 89539, 1338180, 2392196, 1381320, 2150787, 2434756, 2246148, 2196163, 2100930, 942083, 2392771, 2121987, 466372, 3932229, 2122178, 2121411, 17289, 907014, 1645320, 2097346, 1381320, 2128898, 2315715, 2182531, 2098626, 99011, 2392771, 57730, 2097346, 1785927, 1079945, 33539, 1381320, 1516995, 1668622727, 53635, 1880712, 2315715, 2182531, 287878, 2202179, 598664, 805192, 254342, 2564611, 848776, 634435, 1670257926, 947845, 219079, 139523, 38339, 295619, 25666, 1654986, 104259, 817347, 3130564, 1103755, 1105224, 595266, 21332423, 22612807, 21786760, 22115907, 1354059, 1225991, 2097346, 2128898, 2150787, 2315715, 2994564, 2182531, 2202179, 2564611, 2236675, 2150787, 2315715, 2182531, 2150915, 2236675, 2392771, 2639683, 2186883, 2150787, 2315715, 2182531, 2236675, 2392771, 2150787, 2315715, 2182531, 2236675, 2392771, 89539, 2150787, 2315715, 2182531, 2246148, 2150915, 2236675, 2392771, 2285634, 2097345, 2097346, 2097665, 3361666, 1381320, 2224453, 2097409, 53635, 2100609, 2098433, 2102401, 2419266, 3692868, 2419267, 2097217, 2099201, 2097537, 2098945, 3099591, 3115407, 3666886, 2098369, 3435398, 2100481, 2098561, 3985166, 2098113, 2392771, 2116673, 2389765, 2122818, 3847813, 2098177, 2099009, 2099137, 2122178, 2097281, 2105537, 2128641, 2103489, 2101825, 1381320, 2150787, 2315715, 2182531, 2236675, 2392771, 2208451, 2150787, 2182531, 595080, 2564611, 2236675, 30595, 2392771, 21933256, 69256, 1002821, 1381320, 99011, 1002821, 1328580, 312836, 21933258, 1381320, 942083, 2150787, 2315715, 2182531, 2236675, 2392771, 2130947, 1381320, 2150787, 2315715, 2994564, 2392771, 2625221, 3533764, 2150787, 2236675, 2392771, 687754, 1140100, 1167814, 2128898, 2150787, 2306057, 2315715, 2139977, 2182531, 2564611, 2236675, 514308, 99011, 2392771, 3103048, 2372423, 3932229, 1857864, 1785927, 976586, 1087371, 1338823, 283336, 1123914, 96264, 1079945, 170183, 1403847, 1204808, 1880712, 289231, 1405765, 1881479, 287878, 1697735, 1090502, 598664, 667526, 1440327, 1201737, 1788487, 1053385, 758473, 795206, 805192, 799301, 515978, 848776, 634435, 883528, 219079, 481925, 413136, 38339, 942083, 1201351, 180549, 980168, 443205, 817347, 21896, 365574, 1390985, 715911, 17995, 1314884, 1074244, 1103755, 1105224, 1108167, 1002821, 2150787, 2315715, 3998787, 2392771, 2121731, 2182531, 942083, 2150787, 2315715, 2182531, 2564611, 2236675, 2392771, 537739, 2097346, 2128898, 2392771, 1381320, 2097346, 2128898, 2098050, 2098626, 2100482, 2236675, 2098114, 2097346, 2112131, 2128898, 2150787, 2315715, 2098050, 2182531, 2202179, 2564611, 2879684, 2236675, 2182019, 99011, 2392771, 3130564, 2105539, 2182531, 2128898, 2150787, 2315715, 2182531, 2564611, 2236675, 2196163, 2392771, 3896391, 2150787, 2161223, 3149958, 2161411, 2201859, 2182531, 2126979, 2246148, 3776068, 3054662, 2165187, 2236675, 2392771, 2625221, 2806468, 2877315, 2153923, 2922183, 3223557, 2150787, 2315715, 2182531, 2564611, 2236675, 2392771, 373703, 1464327, 1713413, 2235330, 2421571, 2199555, 2112131, 1822478723, 2104386, 2315715, 2108163, 2182531, 2246148, 3178755, 3744963, 2564611, 2879684, 1826634178, 2236675, 2392771, 2308355, 2222339, 2285634, 2105539, 1381320, 2182531, 89539, 3318212, 2112131, 2128898, 2150787, 2328004, 2315715, 2182531, 2246148, 2202179, 3213444, 2184580, 2990022, 2879684, 2236675, 2392771, 2205699, 2442758, 258187, 236678, 1895114, 1132810, 1381320, 2334916, 1847644547, 2112068, 2315715, 2467396, 2182531, 2873667, 2564611, 2236675, 942083, 2392771, 828611, 3413451, 3925194, 4001484, 927176, 2097346, 2128898, 2098050, 2294405, 2246148, 2105346, 2564611, 2184580, 2102274, 2098114, 2128834, 2285634, 14979, 314946, 2843657, 3358408, 2182153, 2213513, 2260490, 3252042, 2147202, 2108738, 31746, 2150787, 2110338, 2386118, 3635778, 2105026, 3185422, 2205518, 2629767, 2236551, 2642882, 2315715, 2182531, 2129922, 2098626, 104579, 2328527, 2386946, 3167751, 2821511, 3276871, 2838476, 3010956, 2268932, 2497354, 2205314, 2142914, 2862020, 2098946, 2198210, 3011524, 2195650, 2115906, 151299, 2764807, 2368261, 2187650, 3198340, 3302146, 3022472, 2236675, 4006088, 2110018, 2269381, 3763526, 2392771, 2137538, 3081095, 25666, 2489221, 2136901, 2105858, 2173570, 2869194, 3562314, 2564546, 2739908, 2108610, 2397128, 2169346, 2813960, 3188039, 3189513, 2137026, 3208837, 2139205, 2248907, 2934540, 2284808, 3322696, 2276738, 2785538, 2097346, 1381320, 2128898, 2150787, 2098050, 2102274, 99011, 2098114, 2392771, 2128834, 2097346, 1002821, 1868594178, 1872842115, 2248451, 2105346, 2236675, 3969731, 1877246659, 3066435, 2642950, 23158403, 1002821, 1352907, 1381320, 466823, 460103, 1211589, 698701, 691146, 1464711, 189572, 189635, 768324, 1885346050, 1889570434, 1893734210, 1897926594, 1902203906, 1906315138, 914887, 1910537218, 1914724738, 1919028994, 1923101314, 2205507, 172868, 2300099, 1927372802, 397256, 1931497922, 339719, 1935671362, 1939882306, 1944060290, 1948257602, 1952536130, 1956644290, 1295237, 2259523, 3219716, 1960838914, 1965133378, 1969229378, 241739, 1973430914, 1982146434, 1986011138, 1990200578, 1994564930, 1998598658, 2002805378, 2007430530, 2011183554, 2015370690, 2019562498, 2023828610, 2027996866, 2032225986, 941636, 3395459, 2036487298, 2040636290, 2044804674, 2048919234, 2053112770, 2057372802, 538119, 2061534786, 2065704130, 2069920706, 2074191618, 1043340, 2078298370, 2082648130, 2086676802, 2090899010, 2095096514, 2099329602, 2103457410, 2107668482, 2112329154, 2116524866, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 158915, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 1978695939, 2256067, 3782596, 3358150, 3123203, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 3889161, 2412098, 3820163, 2856387, 3620229, 2108163, 3178755, 2256067, 2767235, 2108611, 3948425, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 3178755, 2256067, 2412098, 2412098, 3178755, 2256067, 2124468611, 2315715, 2214083, 2564611, 2236675, 99011, 2392771, 1381320, 2128898, 2150787, 2236675, 2392771, 2150787, 2315715, 2182531, 2564611, 2236675, 99011, 2392771, 2392196, 2128898, 2150787, 3611523, 2315715, 2434756, 3998787, 2182531, 2246148, 2202179, 2564611, 2236675, 2392771, 2121987, 3932229, 2108611, 2105539, 99011, 2128898, 2150787, 3178755, 2236675, 2392771, 2097346, 2112131, 1381320, 2150787, 2315715, 2182531, 2302982, 2246148, 2202179, 2879684, 2236675, 2392771, 2205699, 2150787, 2315715, 2236675, 2392771, 22668295, 49415, 2150787, 236678, 2315715, 2182531, 934534, 2236675, 2392771, 3309768, 3322249, 3390281, 3417864, 3772296, 3772297, 3272394, 3524682, 3754314, 3779082, 3925194, 3973451, 2405325, 3556559, 2574864, 3529933, 3657036, 3778379, 460616, 1027336, 870149, 843589, 2097346, 3223109, 2139267, 2183166978, 2315715, 2182531, 3716807, 2397571, 2564611, 2236675, 2436803, 2151491, 2196163, 2392771, 2476934, 2122178, 2105539, 1381320, 2097346, 2112131, 2128898, 2150787, 2315715, 2182531, 2246148, 2564611, 2236675, 2392771, 2186883, 17284, 21988038, 2097346, 2128898, 2182531, 2564611, 2392771]);
            H = $toNativeArray($kindUint32, [0, 268435456, 536870912, 1073741824, 1342177280, 1610612736, 25511439, 25527829, 25544214, 25691671, 27117088, 27215479, 27297405, 27379330, 27510407, 27526799, 27625104, 27641494, 27805335, 27821729, 27920034, 27936424, 27952809, 28198570, 28214969, 1638860474, 565151420, 28575422, 28591824, 28722897, 28804825, 28821214, 29017823, 29132523, 29296370, 29361916, 29378304, 30000897, 30082855, 30164780, 30361393, 30426941, 30508865, 31180614, 33261423, 33277934, 33720303, 34162698, 34261029, 34342955, 34375728, 34457650, 34474039, 34588728, 34900031, 35014738, 35031129, 35047514, 35194971, 35440740, 1646069875, 35555444, 35653754, 35686528, 35752066, 36472966, 36489394, 573425843, 573442231, 573458616, 36866233, 36882634, 41846987, 579406330, 579422756, 579439141, 579488294, 579504681, 579553834, 579570221, 579586606, 579602991, 579619376, 579635761, 579684914, 579701301, 579750454, 579766841, 579783226, 579799611, 579848764, 579865151, 579914304, 579930691, 579947076, 579963461, 43108934, 579996231, 580045384, 580061771, 43223628, 43502158, 580504159, 580520551, 580536936, 580553321, 43698794, 580586091, 43747948, 43764334, 43780719, 43895408, 43993719, 44010109, 44075646, 44124802, 44337797, 44354194, 44452499, 581356185, 581372571, 581405340, 45419166, 582306516, 45468373, 45484759, 582372056, 45517529, 45615834, 45697760, 45861605, 45992687, 46189303, 46353155, 46369549, 46517006, 46533399, 46615320, 46631709, 46648094, 46779167, 46893863, 46910254, 583797551, 46943024, 46959409, 47024946, 47041334, 47532855, 47549269, 47565654, 47696727, 47762271, 47844195, 47942504, 48040814, 48139124, 48155514, 48253819, 48368513, 48499592, 48630672, 48745368, 49138591, 49253303, 49318846, 49335234, 49417155, 49695688, 50219993, 50416633, 50433029, 50482182, 50613257, 50629649, 50777106, 50809883, 51055645, 51383340, 51399744, 51956801, 51973219, 588860516, 588876901, 588893286, 588958823, 588975211, 588991596, 589007981, 589024366, 52251759, 52399221, 52530302, 59247750, 59297312, 59428387, 61247019, 62099098, 62557902, 62918378, 63868672, 64229178, 64474960, 65507167, 66342814, 66965457, 67555319, 67964955, 70291508, 71045314, 71880944, 72192291, 72749366, 72995160, 73322855, 73814395, 1684443545, 1684459930, 1684476315, 74371484, 74748347, 75256274, 75747825, 76272143, 76714543, 77943370, 78303893, 1688933035, 78942892, 79499986, 79811316, 80237319, 80925473, 81744715, 82170749, 83301271, 1693930460, 1693946845, 83710942, 84087797, 84677644, 85185584, 85464143, 86398048, 86611097, 87004326, 87479486, 88036571, 88298749, 88757517, 1699386665, 88937770, 88954164, 89052469, 89167163, 89445698, 89511251, 89609559, 90101085, 90133883, 90248573, 90330500, 90445193, 90625424, 90641819, 90674588, 90756510, 90887587, 90936747, 90969518, 91215280, 91297215, 91329988, 91379142, 91411913, 91559371, 91706836, 91805149, 91821539, 91854308, 91870694, 92378599, 92395014, 92411399, 92558856, 92706321, 92821018, 92902945, 92984870, 93017643, 93050413, 93132335, 93197876, 93214264, 93328953, 102307392, 102537316, 102717554, 102832253, 102963332, 103094412, 103372948, 103405733, 640293031, 640309416, 103471273, 105207979, 642095381, 642160918, 642193690, 642242844, 105388319, 105404704, 105568545, 105732395, 105748789, 105978166, 106109252, 118004044, 118021154, 118037539, 654924836, 118070309, 654957606, 118103079, 655023144, 118168619, 118185004, 655072301, 118217774, 655121455, 118266929, 118283314, 655219763, 118365239, 118381624, 118398009, 118414394, 655301691, 118447164, 118463549, 118479934, 118496319, 655400000, 118545474, 118561859, 118578244, 655465541, 118611014, 655514695, 655531081, 118774858, 118840401, 119118933, 119135334, 119282791, 119299184, 119315569, 121052274, 657939676, 657972445, 657988831, 658005216, 121167073, 122068195, 658988314, 659004701, 659021086, 659037471, 122182944, 122363169, 122379564, 122527021, 122576182, 122707257, 122723649, 122953026, 125672784, 126442998, 126459429, 126541350, 126754347, 126983736, 663871046, 127114823, 127278670, 127295064, 127442521, 127557218, 127721065, 127786611, 127802999, 127819384, 128048761, 128097927, 128245386, 128769683, 665657011, 128851636, 128884408, 129031866, 129162947, 129244875, 129326800, 129343189, 129474262, 130146014, 130260743, 130408206, 130424599, 130457368, 130522906, 130555678, 130637600, 130768677, 130817837, 130866992, 131096371, 131964737, 131981174, 132063095, 132095868, 132194174, 132210564, 132259717, 132276104, 132390793, 132652944, 132669344, 132800417, 133128105, 133242813, 133275588, 133619654, 133636059, 133652444, 133668829, 133947358, 134012911, 134275059, 134291459, 134488068, 135831568, 135995490, 136192108, 136306808, 136339583, 136388737, 137519236, 137568457, 137617612, 137666767, 137715922, 137765077, 137814232, 137863387, 137912542, 137961697, 138010852, 138060007, 138109162, 138158317, 138191088, 138240242, 138289397, 138338552, 138387707, 138436862, 138486017, 138535172, 138584327, 138633482, 138682637, 138731792, 138912019, 138961182, 139010337, 139059492, 139108647, 139157802, 139190573, 139239727, 139288882, 139338037, 139387192, 139436347, 139485502, 139534657, 139583812, 139632967, 139682122, 139731277, 139780432, 139829587, 139862358, 139911512, 139960667, 140009822, 140058977, 140108132, 140157287, 140206442, 140255597, 140271984, 140321137, 140435828, 140452219, 140517756, 140632448, 140910983, 140927384, 141009305, 141222302, 141287851, 141435311, 141533624, 141631934, 141730244, 141795786, 678945230, 142090719, 142270944, 142303723, 142385645]);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["net/url"] = (function() {
    var $pkg = {},
      $init, A, B, C, D, E, F, G, H, L, M, U, X, AH, AO, AP, AQ, AR, AS, AT, AU, I, J, N, O, Q, R, T, V, W, Y, Z, AA, AB, AC, AD, AE, AF, AG, AI, AJ, AK, AL, AM, AN;
    A = $packages["errors"];
    B = $packages["fmt"];
    C = $packages["sort"];
    D = $packages["strconv"];
    E = $packages["strings"];
    F = $pkg.Error = $newType(0, $kindStruct, "url.Error", true, "net/url", true, function(Op_, URL_, Err_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Op = "";
        this.URL = "";
        this.Err = $ifaceNil;
        return;
      }
      this.Op = Op_;
      this.URL = URL_;
      this.Err = Err_;
    });
    G = $pkg.timeout = $newType(8, $kindInterface, "url.timeout", true, "net/url", false, null);
    H = $pkg.temporary = $newType(8, $kindInterface, "url.temporary", true, "net/url", false, null);
    L = $pkg.EscapeError = $newType(8, $kindString, "url.EscapeError", true, "net/url", true, null);
    M = $pkg.InvalidHostError = $newType(8, $kindString, "url.InvalidHostError", true, "net/url", true, null);
    U = $pkg.URL = $newType(0, $kindStruct, "url.URL", true, "net/url", true, function(Scheme_, Opaque_, User_, Host_, Path_, RawPath_, ForceQuery_, RawQuery_, Fragment_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Scheme = "";
        this.Opaque = "";
        this.User = AP.nil;
        this.Host = "";
        this.Path = "";
        this.RawPath = "";
        this.ForceQuery = false;
        this.RawQuery = "";
        this.Fragment = "";
        return;
      }
      this.Scheme = Scheme_;
      this.Opaque = Opaque_;
      this.User = User_;
      this.Host = Host_;
      this.Path = Path_;
      this.RawPath = RawPath_;
      this.ForceQuery = ForceQuery_;
      this.RawQuery = RawQuery_;
      this.Fragment = Fragment_;
    });
    X = $pkg.Userinfo = $newType(0, $kindStruct, "url.Userinfo", true, "net/url", true, function(username_, password_, passwordSet_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.username = "";
        this.password = "";
        this.passwordSet = false;
        return;
      }
      this.username = username_;
      this.password = password_;
      this.passwordSet = passwordSet_;
    });
    AH = $pkg.Values = $newType(4, $kindMap, "url.Values", true, "net/url", true, null);
    AO = $sliceType($Uint8);
    AP = $ptrType(X);
    AQ = $ptrType(U);
    AR = $sliceType($emptyInterface);
    AS = $ptrType(E.Builder);
    AT = $sliceType($String);
    AU = $ptrType(F);
    F.ptr.prototype.Error = function() {
      var a, b, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.Err.Error();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return a.Op + " " + a.URL + ": " + b;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: F.ptr.prototype.Error
        };
      }
      $f.a = a;
      $f.b = b;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    F.prototype.Error = function() {
      return this.$val.Error();
    };
    F.ptr.prototype.Timeout = function() {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = $assertType(a.Err, G, true);
            c = b[0];
            d = b[1];
            if (!(d)) {
              e = false;
              $s = 1;
              continue s;
            }
            f = c.Timeout();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            e = f;
          case 1:
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: F.ptr.prototype.Timeout
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    F.prototype.Timeout = function() {
      return this.$val.Timeout();
    };
    F.ptr.prototype.Temporary = function() {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = $assertType(a.Err, H, true);
            c = b[0];
            d = b[1];
            if (!(d)) {
              e = false;
              $s = 1;
              continue s;
            }
            f = c.Temporary();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            e = f;
          case 1:
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: F.ptr.prototype.Temporary
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    F.prototype.Temporary = function() {
      return this.$val.Temporary();
    };
    I = function(a) {
      var a;
      if (48 <= a && a <= 57) {
        return true;
      } else if (97 <= a && a <= 102) {
        return true;
      } else if (65 <= a && a <= 70) {
        return true;
      }
      return false;
    };
    J = function(a) {
      var a;
      if (48 <= a && a <= 57) {
        return a - 48 << 24 >>> 24;
      } else if (97 <= a && a <= 102) {
        return (a - 97 << 24 >>> 24) + 10 << 24 >>> 24;
      } else if (65 <= a && a <= 70) {
        return (a - 65 << 24 >>> 24) + 10 << 24 >>> 24;
      }
      return 0;
    };
    L.prototype.Error = function() {
      var a;
      a = this.$val;
      return "invalid URL escape " + D.Quote((a));
    };
    $ptrType(L).prototype.Error = function() {
      return new L(this.$get()).Error();
    };
    M.prototype.Error = function() {
      var a;
      a = this.$val;
      return "invalid character " + D.Quote((a)) + " in host name";
    };
    $ptrType(M).prototype.Error = function() {
      return new M(this.$get()).Error();
    };
    N = function(a, b) {
      var a, b, c, d, e, f;
      if (65 <= a && a <= 90 || 97 <= a && a <= 122 || 48 <= a && a <= 57) {
        return false;
      }
      if ((b === 3) || (b === 4)) {
        c = a;
        if ((c === (33)) || (c === (36)) || (c === (38)) || (c === (39)) || (c === (40)) || (c === (41)) || (c === (42)) || (c === (43)) || (c === (44)) || (c === (59)) || (c === (61)) || (c === (58)) || (c === (91)) || (c === (93)) || (c === (60)) || (c === (62)) || (c === (34))) {
          return false;
        }
      }
      d = a;
      if ((d === (45)) || (d === (95)) || (d === (46)) || (d === (126))) {
        return false;
      } else if ((d === (36)) || (d === (38)) || (d === (43)) || (d === (44)) || (d === (47)) || (d === (58)) || (d === (59)) || (d === (61)) || (d === (63)) || (d === (64))) {
        e = b;
        if (e === (1)) {
          return a === 63;
        } else if (e === (2)) {
          return (a === 47) || (a === 59) || (a === 44) || (a === 63);
        } else if (e === (5)) {
          return (a === 64) || (a === 47) || (a === 63) || (a === 58);
        } else if (e === (6)) {
          return true;
        } else if (e === (7)) {
          return false;
        }
      }
      if (b === 7) {
        f = a;
        if ((f === (33)) || (f === (40)) || (f === (41)) || (f === (42))) {
          return false;
        }
      }
      return true;
    };
    O = function(a) {
      var a;
      return Q(a, 6);
    };
    $pkg.QueryUnescape = O;
    Q = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k;
      c = 0;
      d = false;
      e = 0;
      while (true) {
        if (!(e < a.length)) {
          break;
        }
        f = a.charCodeAt(e);
        if (f === (37)) {
          c = c + (1) >> 0;
          if ((e + 2 >> 0) >= a.length || !I(a.charCodeAt((e + 1 >> 0))) || !I(a.charCodeAt((e + 2 >> 0)))) {
            a = $substring(a, e);
            if (a.length > 3) {
              a = $substring(a, 0, 3);
            }
            return ["", new L((a))];
          }
          if ((b === 3) && J(a.charCodeAt((e + 1 >> 0))) < 8 && !($substring(a, e, (e + 3 >> 0)) === "%25")) {
            return ["", new L(($substring(a, e, (e + 3 >> 0))))];
          }
          if (b === 4) {
            g = ((J(a.charCodeAt((e + 1 >> 0))) << 4 << 24 >>> 24) | J(a.charCodeAt((e + 2 >> 0)))) >>> 0;
            if (!($substring(a, e, (e + 3 >> 0)) === "%25") && !((g === 32)) && N(g, 3)) {
              return ["", new L(($substring(a, e, (e + 3 >> 0))))];
            }
          }
          e = e + (3) >> 0;
        } else if (f === (43)) {
          d = b === 6;
          e = e + (1) >> 0;
        } else {
          if (((b === 3) || (b === 4)) && a.charCodeAt(e) < 128 && N(a.charCodeAt(e), b)) {
            return ["", new M(($substring(a, e, (e + 1 >> 0))))];
          }
          e = e + (1) >> 0;
        }
      }
      if ((c === 0) && !d) {
        return [a, $ifaceNil];
      }
      h = $makeSlice(AO, (a.length - ($imul(2, c)) >> 0));
      i = 0;
      j = 0;
      while (true) {
        if (!(j < a.length)) {
          break;
        }
        k = a.charCodeAt(j);
        if (k === (37)) {
          ((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i] = (((J(a.charCodeAt((j + 1 >> 0))) << 4 << 24 >>> 24) | J(a.charCodeAt((j + 2 >> 0)))) >>> 0));
          i = i + (1) >> 0;
          j = j + (3) >> 0;
        } else if (k === (43)) {
          if (b === 6) {
            ((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i] = 32);
          } else {
            ((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i] = 43);
          }
          i = i + (1) >> 0;
          j = j + (1) >> 0;
        } else {
          ((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i] = a.charCodeAt(j));
          i = i + (1) >> 0;
          j = j + (1) >> 0;
        }
      }
      return [($bytesToString(h)), $ifaceNil];
    };
    R = function(a) {
      var a;
      return T(a, 6);
    };
    $pkg.QueryEscape = R;
    T = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n;
      c = 0;
      d = 0;
      e = c;
      f = d;
      g = 0;
      while (true) {
        if (!(g < a.length)) {
          break;
        }
        h = a.charCodeAt(g);
        if (N(h, b)) {
          if ((h === 32) && (b === 6)) {
            e = e + (1) >> 0;
          } else {
            f = f + (1) >> 0;
          }
        }
        g = g + (1) >> 0;
      }
      if ((e === 0) && (f === 0)) {
        return a;
      }
      i = $makeSlice(AO, (a.length + ($imul(2, f)) >> 0));
      j = 0;
      k = 0;
      while (true) {
        if (!(k < a.length)) {
          break;
        }
        l = a.charCodeAt(k);
        if ((l === 32) && (b === 6)) {
          ((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j] = 43);
          j = j + (1) >> 0;
        } else if (N(l, b)) {
          ((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j] = 37);
          (m = j + 1 >> 0, ((m < 0 || m >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + m] = "0123456789ABCDEF".charCodeAt((l >>> 4 << 24 >>> 24))));
          (n = j + 2 >> 0, ((n < 0 || n >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + n] = "0123456789ABCDEF".charCodeAt(((l & 15) >>> 0))));
          j = j + (3) >> 0;
        } else {
          ((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j] = a.charCodeAt(k));
          j = j + (1) >> 0;
        }
        k = k + (1) >> 0;
      }
      return ($bytesToString(i));
    };
    V = function(a) {
      var a;
      return new X.ptr(a, "", false);
    };
    $pkg.User = V;
    W = function(a, b) {
      var a, b;
      return new X.ptr(a, b, true);
    };
    $pkg.UserPassword = W;
    X.ptr.prototype.Username = function() {
      var a;
      a = this;
      if (a === AP.nil) {
        return "";
      }
      return a.username;
    };
    X.prototype.Username = function() {
      return this.$val.Username();
    };
    X.ptr.prototype.Password = function() {
      var a;
      a = this;
      if (a === AP.nil) {
        return ["", false];
      }
      return [a.password, a.passwordSet];
    };
    X.prototype.Password = function() {
      return this.$val.Password();
    };
    X.ptr.prototype.String = function() {
      var a, b;
      a = this;
      if (a === AP.nil) {
        return "";
      }
      b = T(a.username, 5);
      if (a.passwordSet) {
        b = b + (":" + T(a.password, 5));
      }
      return b;
    };
    X.prototype.String = function() {
      return this.$val.String();
    };
    Y = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u;
      b = "";
      c = "";
      d = $ifaceNil;
      e = 0;
      while (true) {
        if (!(e < a.length)) {
          break;
        }
        f = a.charCodeAt(e);
        if (97 <= f && f <= 122 || 65 <= f && f <= 90) {} else if (48 <= f && f <= 57 || (f === 43) || (f === 45) || (f === 46)) {
          if (e === 0) {
            g = "";
            h = a;
            i = $ifaceNil;
            b = g;
            c = h;
            d = i;
            return [b, c, d];
          }
        } else if ((f === 58)) {
          if (e === 0) {
            j = "";
            k = "";
            l = A.New("missing protocol scheme");
            b = j;
            c = k;
            d = l;
            return [b, c, d];
          }
          m = $substring(a, 0, e);
          n = $substring(a, (e + 1 >> 0));
          o = $ifaceNil;
          b = m;
          c = n;
          d = o;
          return [b, c, d];
        } else {
          p = "";
          q = a;
          r = $ifaceNil;
          b = p;
          c = q;
          d = r;
          return [b, c, d];
        }
        e = e + (1) >> 0;
      }
      s = "";
      t = a;
      u = $ifaceNil;
      b = s;
      c = t;
      d = u;
      return [b, c, d];
    };
    Z = function(a, b, c) {
      var a, b, c, d;
      d = E.Index(a, b);
      if (d < 0) {
        return [a, ""];
      }
      if (c) {
        return [$substring(a, 0, d), $substring(a, (d + b.length >> 0))];
      }
      return [$substring(a, 0, d), $substring(a, d)];
    };
    AA = function(a) {
      var a, b, c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = Z(a, "#", true);
            c = b[0];
            d = b[1];
            f = AC(c, false);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            e = f;
            g = e[0];
            h = e[1];
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              $s = -1;
              return [AQ.nil, new F.ptr("parse", c, h)];
            }
            if (d === "") {
              $s = -1;
              return [g, $ifaceNil];
            }
            i = Q(d, 7);
            g.Fragment = i[0];
            h = i[1];
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              $s = -1;
              return [AQ.nil, new F.ptr("parse", a, h)];
            }
            $s = -1;
            return [g, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AA
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Parse = AA;
    AB = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = AC(a, true);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            b = c;
            d = b[0];
            e = b[1];
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              $s = -1;
              return [AQ.nil, new F.ptr("parse", a, e)];
            }
            $s = -1;
            return [d, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AB
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.ParseRequestURI = AB;
    AC = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = "";
            d = $ifaceNil;
            if (a === "" && b) {
              $s = -1;
              return [AQ.nil, A.New("empty url")];
            }
            e = new U.ptr("", "", AP.nil, "", "", "", false, "", "");
            if (a === "*") {
              e.Path = "*";
              $s = -1;
              return [e, $ifaceNil];
            }
            f = Y(a);
            e.Scheme = f[0];
            c = f[1];
            d = f[2];
            if (!($interfaceIsEqual(d, $ifaceNil))) {
              $s = -1;
              return [AQ.nil, d];
            }
            g = E.ToLower(e.Scheme);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            e.Scheme = g;
            if (E.HasSuffix(c, "?") && (E.Count(c, "?") === 1)) {
              e.ForceQuery = true;
              c = $substring(c, 0, (c.length - 1 >> 0));
            } else {
              h = Z(c, "?", true);
              c = h[0];
              e.RawQuery = h[1];
            }
            if (!E.HasPrefix(c, "/")) {
              if (!(e.Scheme === "")) {
                e.Opaque = c;
                $s = -1;
                return [e, $ifaceNil];
              }
              if (b) {
                $s = -1;
                return [AQ.nil, A.New("invalid URI for request")];
              }
              i = E.Index(c, ":");
              j = E.Index(c, "/");
              if (i >= 0 && (j < 0 || i < j)) {
                $s = -1;
                return [AQ.nil, A.New("first path segment in URL cannot contain colon")];
              }
            }
            if ((!(e.Scheme === "") || !b && !E.HasPrefix(c, "///")) && E.HasPrefix(c, "//")) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            k = "";
            l = Z($substring(c, 2), "/", false);
            k = l[0];
            c = l[1];
            n = AD(k);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            m = n;
            e.User = m[0];
            e.Host = m[1];
            d = m[2];
            if (!($interfaceIsEqual(d, $ifaceNil))) {
              $s = -1;
              return [AQ.nil, d];
            }
          case 3:
            o = e.setPath(c);
            if (!($interfaceIsEqual(o, $ifaceNil))) {
              $s = -1;
              return [AQ.nil, o];
            }
            $s = -1;
            return [e, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AC
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AD = function(a) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = AP.nil;
            c = "";
            d = $ifaceNil;
            e = E.LastIndex(a, "@");
            if (e < 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            g = AE(a);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
            c = f[0];
            d = f[1];
            $s = 3;
            continue;
          case 2:
            i = AE($substring(a, (e + 1 >> 0)));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            c = h[0];
            d = h[1];
          case 3:
            if (!($interfaceIsEqual(d, $ifaceNil))) {
              j = AP.nil;
              k = "";
              l = d;
              b = j;
              c = k;
              d = l;
              $s = -1;
              return [b, c, d];
            }
            if (e < 0) {
              m = AP.nil;
              n = c;
              o = $ifaceNil;
              b = m;
              c = n;
              d = o;
              $s = -1;
              return [b, c, d];
            }
            p = $substring(a, 0, e);
            if (!AN(p)) {
              q = AP.nil;
              r = "";
              s = A.New("net/url: invalid userinfo");
              b = q;
              c = r;
              d = s;
              $s = -1;
              return [b, c, d];
            }
            if (!E.Contains(p, ":")) {
              t = Q(p, 5);
              p = t[0];
              d = t[1];
              if (!($interfaceIsEqual(d, $ifaceNil))) {
                u = AP.nil;
                v = "";
                w = d;
                b = u;
                c = v;
                d = w;
                $s = -1;
                return [b, c, d];
              }
              b = V(p);
            } else {
              x = Z(p, ":", true);
              y = x[0];
              z = x[1];
              aa = Q(y, 5);
              y = aa[0];
              d = aa[1];
              if (!($interfaceIsEqual(d, $ifaceNil))) {
                ab = AP.nil;
                ac = "";
                ad = d;
                b = ab;
                c = ac;
                d = ad;
                $s = -1;
                return [b, c, d];
              }
              ae = Q(z, 5);
              z = ae[0];
              d = ae[1];
              if (!($interfaceIsEqual(d, $ifaceNil))) {
                af = AP.nil;
                ag = "";
                ah = d;
                b = af;
                c = ag;
                d = ah;
                $s = -1;
                return [b, c, d];
              }
              b = W(y, z);
            }
            ai = b;
            aj = c;
            ak = $ifaceNil;
            b = ai;
            c = aj;
            d = ak;
            $s = -1;
            return [b, c, d];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AD
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AE = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (E.HasPrefix(a, "[")) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            b = E.LastIndex(a, "]");
            if (b < 0) {
              $s = -1;
              return ["", A.New("missing ']' in host")];
            }
            c = $substring(a, (b + 1 >> 0));
            if (!AG(c)) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            d = B.Errorf("invalid port %q after host", new AR([new $String(c)]));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ["", d];
          case 4:
            e = E.Index($substring(a, 0, b), "%25");
            if (e >= 0) {
              f = Q($substring(a, 0, e), 3);
              g = f[0];
              h = f[1];
              if (!($interfaceIsEqual(h, $ifaceNil))) {
                $s = -1;
                return ["", h];
              }
              i = Q($substring(a, e, b), 4);
              j = i[0];
              h = i[1];
              if (!($interfaceIsEqual(h, $ifaceNil))) {
                $s = -1;
                return ["", h];
              }
              k = Q($substring(a, b), 3);
              l = k[0];
              h = k[1];
              if (!($interfaceIsEqual(h, $ifaceNil))) {
                $s = -1;
                return ["", h];
              }
              $s = -1;
              return [g + j + l, $ifaceNil];
            }
          case 2:
            m = $ifaceNil;
            n = Q(a, 3);
            a = n[0];
            m = n[1];
            if (!($interfaceIsEqual(m, $ifaceNil))) {
              $s = -1;
              return ["", m];
            }
            $s = -1;
            return [a, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AE
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    U.ptr.prototype.setPath = function(a) {
      var a, b, c, d, e, f;
      b = this;
      c = Q(a, 1);
      d = c[0];
      e = c[1];
      if (!($interfaceIsEqual(e, $ifaceNil))) {
        return e;
      }
      b.Path = d;
      f = T(d, 1);
      if (a === f) {
        b.RawPath = "";
      } else {
        b.RawPath = a;
      }
      return $ifaceNil;
    };
    U.prototype.setPath = function(a) {
      return this.$val.setPath(a);
    };
    U.ptr.prototype.EscapedPath = function() {
      var a, b, c, d;
      a = this;
      if (!(a.RawPath === "") && AF(a.RawPath)) {
        b = Q(a.RawPath, 1);
        c = b[0];
        d = b[1];
        if ($interfaceIsEqual(d, $ifaceNil) && c === a.Path) {
          return a.RawPath;
        }
      }
      if (a.Path === "*") {
        return "*";
      }
      return T(a.Path, 1);
    };
    U.prototype.EscapedPath = function() {
      return this.$val.EscapedPath();
    };
    AF = function(a) {
      var a, b, c;
      b = 0;
      while (true) {
        if (!(b < a.length)) {
          break;
        }
        c = a.charCodeAt(b);
        if ((c === (33)) || (c === (36)) || (c === (38)) || (c === (39)) || (c === (40)) || (c === (41)) || (c === (42)) || (c === (43)) || (c === (44)) || (c === (59)) || (c === (61)) || (c === (58)) || (c === (64))) {} else if ((c === (91)) || (c === (93))) {} else if (c === (37)) {} else if (N(a.charCodeAt(b), 1)) {
          return false;
        }
        b = b + (1) >> 0;
      }
      return true;
    };
    AG = function(a) {
      var a, b, c, d, e;
      if (a === "") {
        return true;
      }
      if (!((a.charCodeAt(0) === 58))) {
        return false;
      }
      b = $substring(a, 1);
      c = 0;
      while (true) {
        if (!(c < b.length)) {
          break;
        }
        d = $decodeRune(b, c);
        e = d[0];
        if (e < 48 || e > 57) {
          return false;
        }
        c += d[1];
      }
      return true;
    };
    U.ptr.prototype.String = function() {
      var a, b, c, d, e, f;
      a = this;
      b = new E.Builder.ptr(AS.nil, AO.nil);
      if (!(a.Scheme === "")) {
        b.WriteString(a.Scheme);
        b.WriteByte(58);
      }
      if (!(a.Opaque === "")) {
        b.WriteString(a.Opaque);
      } else {
        if (!(a.Scheme === "") || !(a.Host === "") || !(a.User === AP.nil)) {
          if (!(a.Host === "") || !(a.Path === "") || !(a.User === AP.nil)) {
            b.WriteString("//");
          }
          c = a.User;
          if (!(c === AP.nil)) {
            b.WriteString(c.String());
            b.WriteByte(64);
          }
          d = a.Host;
          if (!(d === "")) {
            b.WriteString(T(d, 3));
          }
        }
        e = a.EscapedPath();
        if (!(e === "") && !((e.charCodeAt(0) === 47)) && !(a.Host === "")) {
          b.WriteByte(47);
        }
        if (b.Len() === 0) {
          f = E.IndexByte(e, 58);
          if (f > -1 && (E.IndexByte($substring(e, 0, f), 47) === -1)) {
            b.WriteString("./");
          }
        }
        b.WriteString(e);
      }
      if (a.ForceQuery || !(a.RawQuery === "")) {
        b.WriteByte(63);
        b.WriteString(a.RawQuery);
      }
      if (!(a.Fragment === "")) {
        b.WriteByte(35);
        b.WriteString(T(a.Fragment, 7));
      }
      return b.String();
    };
    U.prototype.String = function() {
      return this.$val.String();
    };
    AH.prototype.Get = function(a) {
      var a, b, c, d;
      b = this.$val;
      if (b === false) {
        return "";
      }
      d = (c = b[$String.keyFor(a)], c !== undefined ? c.v : AT.nil);
      if (d.$length === 0) {
        return "";
      }
      return (0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0]);
    };
    $ptrType(AH).prototype.Get = function(a) {
      return new AH(this.$get()).Get(a);
    };
    AH.prototype.Set = function(a, b) {
      var a, b, c, d;
      c = this.$val;
      d = a;
      (c || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(d)] = {
        k: d,
        v: new AT([b])
      };
    };
    $ptrType(AH).prototype.Set = function(a, b) {
      return new AH(this.$get()).Set(a, b);
    };
    AH.prototype.Add = function(a, b) {
      var a, b, c, d, e;
      c = this.$val;
      d = a;
      (c || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(d)] = {
        k: d,
        v: $append((e = c[$String.keyFor(a)], e !== undefined ? e.v : AT.nil), b)
      };
    };
    $ptrType(AH).prototype.Add = function(a, b) {
      return new AH(this.$get()).Add(a, b);
    };
    AH.prototype.Del = function(a) {
      var a, b;
      b = this.$val;
      delete b[$String.keyFor(a)];
    };
    $ptrType(AH).prototype.Del = function(a) {
      return new AH(this.$get()).Del(a);
    };
    AI = function(a) {
      var a, b, c;
      b = {};
      c = AJ(b, a);
      return [b, c];
    };
    $pkg.ParseQuery = AI;
    AJ = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p;
      c = $ifaceNil;
      while (true) {
        if (!(!(b === ""))) {
          break;
        }
        d = b;
        e = E.IndexAny(d, "&;");
        if (e >= 0) {
          f = $substring(d, 0, e);
          g = $substring(d, (e + 1 >> 0));
          d = f;
          b = g;
        } else {
          b = "";
        }
        if (d === "") {
          continue;
        }
        h = "";
        i = E.Index(d, "=");
        if (i >= 0) {
          j = $substring(d, 0, i);
          k = $substring(d, (i + 1 >> 0));
          d = j;
          h = k;
        }
        l = O(d);
        d = l[0];
        m = l[1];
        if (!($interfaceIsEqual(m, $ifaceNil))) {
          if ($interfaceIsEqual(c, $ifaceNil)) {
            c = m;
          }
          continue;
        }
        n = O(h);
        h = n[0];
        m = n[1];
        if (!($interfaceIsEqual(m, $ifaceNil))) {
          if ($interfaceIsEqual(c, $ifaceNil)) {
            c = m;
          }
          continue;
        }
        o = d;
        (a || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(o)] = {
          k: o,
          v: $append((p = a[$String.keyFor(d)], p !== undefined ? p.v : AT.nil), h)
        };
      }
      c = c;
      return c;
    };
    AH.prototype.Encode = function() {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this.$val;
            if (a === false) {
              $s = -1;
              return "";
            }
            b = new E.Builder.ptr(AS.nil, AO.nil);
            c = $makeSlice(AT, 0, $keys(a).length);
            d = a;
            e = 0;
            f = $keys(d);
            while (true) {
              if (!(e < f.length)) {
                break;
              }
              g = d[f[e]];
              if (g === undefined) {
                e++;
                continue;
              }
              h = g.k;
              c = $append(c, h);
              e++;
            }
            $r = C.Strings(c);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            i = c;
            j = 0;
            while (true) {
              if (!(j < i.$length)) {
                break;
              }
              k = ((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j]);
              m = (l = a[$String.keyFor(k)], l !== undefined ? l.v : AT.nil);
              n = R(k);
              o = m;
              p = 0;
              while (true) {
                if (!(p < o.$length)) {
                  break;
                }
                q = ((p < 0 || p >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + p]);
                if (b.Len() > 0) {
                  b.WriteByte(38);
                }
                b.WriteString(n);
                b.WriteByte(61);
                b.WriteString(R(q));
                p++;
              }
              j++;
            }
            $s = -1;
            return b.String();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AH.prototype.Encode
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(AH).prototype.Encode = function() {
      return new AH(this.$get()).Encode();
    };
    AK = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l;
      c = "";
      if (b === "") {
        c = a;
      } else if (!((b.charCodeAt(0) === 47))) {
        d = E.LastIndex(a, "/");
        c = $substring(a, 0, (d + 1 >> 0)) + b;
      } else {
        c = b;
      }
      if (c === "") {
        return "";
      }
      e = AT.nil;
      f = E.Split(c, "/");
      g = f;
      h = 0;
      while (true) {
        if (!(h < g.$length)) {
          break;
        }
        i = ((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h]);
        j = i;
        if (j === (".")) {} else if (j === ("..")) {
          if (e.$length > 0) {
            e = $subslice(e, 0, (e.$length - 1 >> 0));
          }
        } else {
          e = $append(e, i);
        }
        h++;
      }
      l = (k = f.$length - 1 >> 0, ((k < 0 || k >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + k]));
      if (l === "." || l === "..") {
        e = $append(e, "");
      }
      return "/" + E.TrimPrefix(E.Join(e, "/"), "/");
    };
    U.ptr.prototype.IsAbs = function() {
      var a;
      a = this;
      return !(a.Scheme === "");
    };
    U.prototype.IsAbs = function() {
      return this.$val.IsAbs();
    };
    U.ptr.prototype.Parse = function(a) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            d = AA(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            c = d;
            e = c[0];
            f = c[1];
            if (!($interfaceIsEqual(f, $ifaceNil))) {
              $s = -1;
              return [AQ.nil, f];
            }
            $s = -1;
            return [b.ResolveReference(e), $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: U.ptr.prototype.Parse
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    U.prototype.Parse = function(a) {
      return this.$val.Parse(a);
    };
    U.ptr.prototype.ResolveReference = function(a) {
      var a, b, c;
      b = this;
      c = $clone(a, U);
      if (a.Scheme === "") {
        c.Scheme = b.Scheme;
      }
      if (!(a.Scheme === "") || !(a.Host === "") || !(a.User === AP.nil)) {
        c.setPath(AK(a.EscapedPath(), ""));
        return c;
      }
      if (!(a.Opaque === "")) {
        c.User = AP.nil;
        c.Host = "";
        c.Path = "";
        return c;
      }
      if (a.Path === "" && a.RawQuery === "") {
        c.RawQuery = b.RawQuery;
        if (a.Fragment === "") {
          c.Fragment = b.Fragment;
        }
      }
      c.Host = b.Host;
      c.User = b.User;
      c.setPath(AK(b.EscapedPath(), a.EscapedPath()));
      return c;
    };
    U.prototype.ResolveReference = function(a) {
      return this.$val.ResolveReference(a);
    };
    U.ptr.prototype.Query = function() {
      var a, b, c;
      a = this;
      b = AI(a.RawQuery);
      c = b[0];
      return c;
    };
    U.prototype.Query = function() {
      return this.$val.Query();
    };
    U.ptr.prototype.RequestURI = function() {
      var a, b;
      a = this;
      b = a.Opaque;
      if (b === "") {
        b = a.EscapedPath();
        if (b === "") {
          b = "/";
        }
      } else {
        if (E.HasPrefix(b, "//")) {
          b = a.Scheme + ":" + b;
        }
      }
      if (a.ForceQuery || !(a.RawQuery === "")) {
        b = b + ("?" + a.RawQuery);
      }
      return b;
    };
    U.prototype.RequestURI = function() {
      return this.$val.RequestURI();
    };
    U.ptr.prototype.Hostname = function() {
      var a;
      a = this;
      return AL(a.Host);
    };
    U.prototype.Hostname = function() {
      return this.$val.Hostname();
    };
    U.ptr.prototype.Port = function() {
      var a;
      a = this;
      return AM(a.Host);
    };
    U.prototype.Port = function() {
      return this.$val.Port();
    };
    AL = function(a) {
      var a, b, c;
      b = E.IndexByte(a, 58);
      if (b === -1) {
        return a;
      }
      c = E.IndexByte(a, 93);
      if (!((c === -1))) {
        return E.TrimPrefix($substring(a, 0, c), "[");
      }
      return $substring(a, 0, b);
    };
    AM = function(a) {
      var a, b, c;
      b = E.IndexByte(a, 58);
      if (b === -1) {
        return "";
      }
      c = E.Index(a, "]:");
      if (!((c === -1))) {
        return $substring(a, (c + 2 >> 0));
      }
      if (E.Contains(a, "]")) {
        return "";
      }
      return $substring(a, (b + 1 >> 0));
    };
    U.ptr.prototype.MarshalBinary = function() {
      var a, b, c, d, e;
      a = AO.nil;
      b = $ifaceNil;
      c = this;
      d = (new AO($stringToBytes(c.String())));
      e = $ifaceNil;
      a = d;
      b = e;
      return [a, b];
    };
    U.prototype.MarshalBinary = function() {
      return this.$val.MarshalBinary();
    };
    U.ptr.prototype.UnmarshalBinary = function(a) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            d = AA(($bytesToString(a)));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            c = d;
            e = c[0];
            f = c[1];
            if (!($interfaceIsEqual(f, $ifaceNil))) {
              $s = -1;
              return f;
            }
            U.copy(b, e);
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: U.ptr.prototype.UnmarshalBinary
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    U.prototype.UnmarshalBinary = function(a) {
      return this.$val.UnmarshalBinary(a);
    };
    AN = function(a) {
      var a, b, c, d, e, f;
      b = a;
      c = 0;
      while (true) {
        if (!(c < b.length)) {
          break;
        }
        d = $decodeRune(b, c);
        e = d[0];
        if (65 <= e && e <= 90) {
          c += d[1];
          continue;
        }
        if (97 <= e && e <= 122) {
          c += d[1];
          continue;
        }
        if (48 <= e && e <= 57) {
          c += d[1];
          continue;
        }
        f = e;
        if ((f === (45)) || (f === (46)) || (f === (95)) || (f === (58)) || (f === (126)) || (f === (33)) || (f === (36)) || (f === (38)) || (f === (39)) || (f === (40)) || (f === (41)) || (f === (42)) || (f === (43)) || (f === (44)) || (f === (59)) || (f === (61)) || (f === (37)) || (f === (64))) {
          c += d[1];
          continue;
        } else {
          return false;
        }
        c += d[1];
      }
      return true;
    };
    AU.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Timeout",
      name: "Timeout",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Temporary",
      name: "Temporary",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }];
    L.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    M.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    AQ.methods = [{
      prop: "setPath",
      name: "setPath",
      pkg: "net/url",
      typ: $funcType([$String], [$error], false)
    }, {
      prop: "EscapedPath",
      name: "EscapedPath",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "IsAbs",
      name: "IsAbs",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Parse",
      name: "Parse",
      pkg: "",
      typ: $funcType([$String], [AQ, $error], false)
    }, {
      prop: "ResolveReference",
      name: "ResolveReference",
      pkg: "",
      typ: $funcType([AQ], [AQ], false)
    }, {
      prop: "Query",
      name: "Query",
      pkg: "",
      typ: $funcType([], [AH], false)
    }, {
      prop: "RequestURI",
      name: "RequestURI",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Hostname",
      name: "Hostname",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Port",
      name: "Port",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "MarshalBinary",
      name: "MarshalBinary",
      pkg: "",
      typ: $funcType([], [AO, $error], false)
    }, {
      prop: "UnmarshalBinary",
      name: "UnmarshalBinary",
      pkg: "",
      typ: $funcType([AO], [$error], false)
    }];
    AP.methods = [{
      prop: "Username",
      name: "Username",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Password",
      name: "Password",
      pkg: "",
      typ: $funcType([], [$String, $Bool], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    AH.methods = [{
      prop: "Get",
      name: "Get",
      pkg: "",
      typ: $funcType([$String], [$String], false)
    }, {
      prop: "Set",
      name: "Set",
      pkg: "",
      typ: $funcType([$String, $String], [], false)
    }, {
      prop: "Add",
      name: "Add",
      pkg: "",
      typ: $funcType([$String, $String], [], false)
    }, {
      prop: "Del",
      name: "Del",
      pkg: "",
      typ: $funcType([$String], [], false)
    }, {
      prop: "Encode",
      name: "Encode",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    F.init("", [{
      prop: "Op",
      name: "Op",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "URL",
      name: "URL",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Err",
      name: "Err",
      embedded: false,
      exported: true,
      typ: $error,
      tag: ""
    }]);
    G.init([{
      prop: "Timeout",
      name: "Timeout",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }]);
    H.init([{
      prop: "Temporary",
      name: "Temporary",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }]);
    U.init("", [{
      prop: "Scheme",
      name: "Scheme",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Opaque",
      name: "Opaque",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "User",
      name: "User",
      embedded: false,
      exported: true,
      typ: AP,
      tag: ""
    }, {
      prop: "Host",
      name: "Host",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Path",
      name: "Path",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "RawPath",
      name: "RawPath",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "ForceQuery",
      name: "ForceQuery",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: ""
    }, {
      prop: "RawQuery",
      name: "RawQuery",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Fragment",
      name: "Fragment",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }]);
    X.init("net/url", [{
      prop: "username",
      name: "username",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "password",
      name: "password",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "passwordSet",
      name: "passwordSet",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    AH.init($String, AT);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["go.1password.io/xplatform/vendor/go.1password.io/xplatform-security/domain"] = (function() {
    var $pkg = {},
      $init, C, A, B, I, J, D, G, H;
    C = $packages["go.1password.io/xplatform/vendor/github.com/agilebits/golang-net/publicsuffix"];
    A = $packages["net/url"];
    B = $packages["strings"];
    D = function(a) {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = B.Split(a, ".");
            if (b.$length < 2) {
              $s = -1;
              return [G(a), $ifaceNil];
            }
            c = H(b);
            e = C.EffectiveTLDPlusOne(c);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            d = e;
            f = d[0];
            g = d[1];
            if (!($interfaceIsEqual(g, $ifaceNil))) {
              $s = -1;
              return ["", g];
            }
            $s = -1;
            return [f, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: D
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.NakedDomainForHostname = D;
    G = function(a) {
      var a, b, c, d, e;
      b = (c = I[$String.keyFor(a)], c !== undefined ? [c.v, true] : ["", false]);
      d = b[0];
      e = b[1];
      if (e) {
        return d;
      }
      return a;
    };
    H = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m;
      b = a.$length;
      if (b === 1) {
        c = (d = J[$String.keyFor((0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]))], d !== undefined ? [d.v, true] : ["", false]);
        e = c[0];
        f = c[1];
        if (f) {
          return e;
        }
        return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]);
      }
      g = 2;
      while (true) {
        if (!(g <= b)) {
          break;
        }
        h = B.Join($subslice(a, (b - g >> 0)), ".");
        i = (j = J[$String.keyFor(h)], j !== undefined ? [j.v, true] : ["", false]);
        k = i[0];
        l = i[1];
        if (l) {
          m = $append($subslice(a, 0, (b - g >> 0)), k);
          return B.Join(m, ".");
        }
        g = g + (1) >> 0;
      }
      return B.Join(a, ".");
    };
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = C.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            I = $makeMap($String.keyFor, [{
              k: "chrome-signin",
              v: "google.com"
            }, {
              k: "about:accounts",
              v: "firefox.com"
            }]);
            J = $makeMap($String.keyFor, [{
              k: "socialwallet.bbva.com",
              v: "wizzo.es"
            }, {
              k: "createsend.com",
              v: "campaignmonitor.com"
            }, {
              k: "tdcanadatrust.com",
              v: "td.com"
            }, {
              k: "getdropbox.com",
              v: "dropbox.com"
            }, {
              k: "citibank.com",
              v: "citi.com"
            }, {
              k: "citibankonline.com",
              v: "citi.com"
            }, {
              k: "citicards.com",
              v: "citi.com"
            }, {
              k: "live.com",
              v: "microsoft.com"
            }, {
              k: "passport.com",
              v: "microsoft.com"
            }, {
              k: "msn.com",
              v: "microsoft.com"
            }, {
              k: "hotmail.com",
              v: "microsoft.com"
            }, {
              k: "outlook.com",
              v: "microsoft.com"
            }, {
              k: "basecamphq.com",
              v: "37signals.com"
            }, {
              k: "backpackit.com",
              v: "37signals.com"
            }, {
              k: "campfirenow.com",
              v: "37signals.com"
            }, {
              k: "highrisehq.com",
              v: "37signals.com"
            }, {
              k: "agile.ws",
              v: "agilebits.com"
            }, {
              k: "agilewebsolutions.com",
              v: "agilebits.com"
            }, {
              k: "nelnet.com",
              v: "nelnet.net"
            }, {
              k: "icloud.com",
              v: "apple.com"
            }, {
              k: "me.com",
              v: "apple.com"
            }, {
              k: "sqsp.com",
              v: "squarespace.com"
            }, {
              k: "ingdirect.com",
              v: "capitalone360.com"
            }, {
              k: "stackexchange.com",
              v: "stackoverflow.com"
            }, {
              k: "serverfault.com",
              v: "stackoverflow.com"
            }, {
              k: "superuser.com",
              v: "stackoverflow.com"
            }, {
              k: "gravatar.com",
              v: "wordpress.com"
            }, {
              k: "medcohealth.com",
              v: "express-scripts.com"
            }, {
              k: "ebay.co.uk",
              v: "ebay.com"
            }, {
              k: "ebay.de",
              v: "ebay.com"
            }, {
              k: "ebay.ca",
              v: "ebay.com"
            }, {
              k: "ebay.fr",
              v: "ebay.com"
            }, {
              k: "ebay.com.au",
              v: "ebay.com"
            }, {
              k: "ebay.es",
              v: "ebay.com"
            }, {
              k: "ebay.at",
              v: "ebay.com"
            }, {
              k: "ebay.be",
              v: "ebay.com"
            }, {
              k: "ebay.com.cn",
              v: "ebay.com"
            }, {
              k: "ebay.com.hk",
              v: "ebay.com"
            }, {
              k: "ebay.in",
              v: "ebay.com"
            }, {
              k: "ebay.ie",
              v: "ebay.com"
            }, {
              k: "ebay.it",
              v: "ebay.com"
            }, {
              k: "ebay.co.jp",
              v: "ebay.com"
            }, {
              k: "ebay.com.my",
              v: "ebay.com"
            }, {
              k: "ebay.nl",
              v: "ebay.com"
            }, {
              k: "ebay.ph",
              v: "ebay.com"
            }, {
              k: "ebay.pl",
              v: "ebay.com"
            }, {
              k: "ebay.com.sg",
              v: "ebay.com"
            }, {
              k: "ebay.ch",
              v: "ebay.com"
            }, {
              k: "ebay.co.th",
              v: "ebay.com"
            }, {
              k: "ebay.vn",
              v: "ebay.com"
            }, {
              k: "global.gmarket.co.kr",
              v: "ebay.com"
            }, {
              k: "tradera.com",
              v: "ebay.com"
            }, {
              k: "ruten.com.tw",
              v: "ebay.com"
            }, {
              k: "gittigidiyor.com",
              v: "ebay.com"
            }, {
              k: "amazon.co.uk",
              v: "amazon.com"
            }, {
              k: "amazon.de",
              v: "amazon.com"
            }, {
              k: "amazon.ca",
              v: "amazon.com"
            }, {
              k: "amazon.com.au",
              v: "amazon.com"
            }, {
              k: "amazon.com.br",
              v: "amazon.com"
            }, {
              k: "amazon.cn",
              v: "amazon.com"
            }, {
              k: "amazon.fr",
              v: "amazon.com"
            }, {
              k: "amazon.in",
              v: "amazon.com"
            }, {
              k: "amazon.it",
              v: "amazon.com"
            }, {
              k: "amazon.co.jp",
              v: "amazon.com"
            }, {
              k: "amazon.com.mx",
              v: "amazon.com"
            }, {
              k: "amazon.nl",
              v: "amazon.com"
            }, {
              k: "amazon.es",
              v: "amazon.com"
            }]);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["regexp/syntax"] = (function() {
    var $pkg = {},
      $init, C, B, D, A, E, F, G, H, M, N, O, P, Z, AM, BK, BL, BN, BQ, BV, BW, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP, CQ, CR, J, K, L, AA, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BM, I, Q, R, S, T, U, V, W, X, Y, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AN, AO, AP, AQ, BO, BP, BR, BS, BT, BU, BX, BY, BZ;
    C = $packages["sort"];
    B = $packages["strconv"];
    D = $packages["strings"];
    A = $packages["unicode"];
    E = $packages["unicode/utf8"];
    F = $pkg.patchList = $newType(4, $kindUint32, "syntax.patchList", true, "regexp/syntax", false, null);
    G = $pkg.frag = $newType(0, $kindStruct, "syntax.frag", true, "regexp/syntax", false, function(i_, out_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.i = 0;
        this.out = 0;
        return;
      }
      this.i = i_;
      this.out = out_;
    });
    H = $pkg.compiler = $newType(0, $kindStruct, "syntax.compiler", true, "regexp/syntax", false, function(p_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.p = CE.nil;
        return;
      }
      this.p = p_;
    });
    M = $pkg.Error = $newType(0, $kindStruct, "syntax.Error", true, "regexp/syntax", true, function(Code_, Expr_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Code = "";
        this.Expr = "";
        return;
      }
      this.Code = Code_;
      this.Expr = Expr_;
    });
    N = $pkg.ErrorCode = $newType(8, $kindString, "syntax.ErrorCode", true, "regexp/syntax", true, null);
    O = $pkg.Flags = $newType(2, $kindUint16, "syntax.Flags", true, "regexp/syntax", true, null);
    P = $pkg.parser = $newType(0, $kindStruct, "syntax.parser", true, "regexp/syntax", false, function(flags_, stack_, free_, numCap_, wholeRegexp_, tmpClass_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.flags = 0;
        this.stack = CH.nil;
        this.free = CG.nil;
        this.numCap = 0;
        this.wholeRegexp = "";
        this.tmpClass = CA.nil;
        return;
      }
      this.flags = flags_;
      this.stack = stack_;
      this.free = free_;
      this.numCap = numCap_;
      this.wholeRegexp = wholeRegexp_;
      this.tmpClass = tmpClass_;
    });
    Z = $pkg.charGroup = $newType(0, $kindStruct, "syntax.charGroup", true, "regexp/syntax", false, function(sign_, class$1_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.sign = 0;
        this.class$1 = CA.nil;
        return;
      }
      this.sign = sign_;
      this.class$1 = class$1_;
    });
    AM = $pkg.ranges = $newType(0, $kindStruct, "syntax.ranges", true, "regexp/syntax", false, function(p_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.p = CK.nil;
        return;
      }
      this.p = p_;
    });
    BK = $pkg.Prog = $newType(0, $kindStruct, "syntax.Prog", true, "regexp/syntax", true, function(Inst_, Start_, NumCap_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Inst = CF.nil;
        this.Start = 0;
        this.NumCap = 0;
        return;
      }
      this.Inst = Inst_;
      this.Start = Start_;
      this.NumCap = NumCap_;
    });
    BL = $pkg.InstOp = $newType(1, $kindUint8, "syntax.InstOp", true, "regexp/syntax", true, null);
    BN = $pkg.EmptyOp = $newType(1, $kindUint8, "syntax.EmptyOp", true, "regexp/syntax", true, null);
    BQ = $pkg.Inst = $newType(0, $kindStruct, "syntax.Inst", true, "regexp/syntax", true, function(Op_, Out_, Arg_, Rune_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Op = 0;
        this.Out = 0;
        this.Arg = 0;
        this.Rune = CA.nil;
        return;
      }
      this.Op = Op_;
      this.Out = Out_;
      this.Arg = Arg_;
      this.Rune = Rune_;
    });
    BV = $pkg.Regexp = $newType(0, $kindStruct, "syntax.Regexp", true, "regexp/syntax", true, function(Op_, Flags_, Sub_, Sub0_, Rune_, Rune0_, Min_, Max_, Cap_, Name_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Op = 0;
        this.Flags = 0;
        this.Sub = CH.nil;
        this.Sub0 = CI.zero();
        this.Rune = CA.nil;
        this.Rune0 = CJ.zero();
        this.Min = 0;
        this.Max = 0;
        this.Cap = 0;
        this.Name = "";
        return;
      }
      this.Op = Op_;
      this.Flags = Flags_;
      this.Sub = Sub_;
      this.Sub0 = Sub0_;
      this.Rune = Rune_;
      this.Rune0 = Rune0_;
      this.Min = Min_;
      this.Max = Max_;
      this.Cap = Cap_;
      this.Name = Name_;
    });
    BW = $pkg.Op = $newType(1, $kindUint8, "syntax.Op", true, "regexp/syntax", true, null);
    CA = $sliceType($Int32);
    CB = $sliceType(A.Range16);
    CC = $sliceType(A.Range32);
    CD = $sliceType($String);
    CE = $ptrType(BK);
    CF = $sliceType(BQ);
    CG = $ptrType(BV);
    CH = $sliceType(CG);
    CI = $arrayType(CG, 1);
    CJ = $arrayType($Int32, 2);
    CK = $ptrType(CA);
    CL = $ptrType(A.RangeTable);
    CM = $ptrType(D.Builder);
    CN = $sliceType($Uint8);
    CO = $ptrType(H);
    CP = $ptrType(M);
    CQ = $ptrType(P);
    CR = $ptrType(BQ);
    F.prototype.next = function(a) {
      var a, b, c, d, e;
      b = this.$val;
      e = (c = a.Inst, d = b >>> 1 >>> 0, ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]));
      if (((b & 1) >>> 0) === 0) {
        return ((e.Out >>> 0));
      }
      return ((e.Arg >>> 0));
    };
    $ptrType(F).prototype.next = function(a) {
      return new F(this.$get()).next(a);
    };
    F.prototype.patch = function(a, b) {
      var a, b, c, d, e, f;
      c = this.$val;
      while (true) {
        if (!(!((c === 0)))) {
          break;
        }
        f = (d = a.Inst, e = c >>> 1 >>> 0, ((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e]));
        if (((c & 1) >>> 0) === 0) {
          c = ((f.Out >>> 0));
          f.Out = b;
        } else {
          c = ((f.Arg >>> 0));
          f.Arg = b;
        }
      }
    };
    $ptrType(F).prototype.patch = function(a, b) {
      return new F(this.$get()).patch(a, b);
    };
    F.prototype.append = function(a, b) {
      var a, b, c, d, e, f, g, h;
      c = this.$val;
      if (c === 0) {
        return b;
      }
      if (b === 0) {
        return c;
      }
      d = c;
      while (true) {
        e = new F(d).next(a);
        if (e === 0) {
          break;
        }
        d = e;
      }
      h = (f = a.Inst, g = d >>> 1 >>> 0, ((g < 0 || g >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + g]));
      if (((d & 1) >>> 0) === 0) {
        h.Out = ((b >>> 0));
      } else {
        h.Arg = ((b >>> 0));
      }
      return c;
    };
    $ptrType(F).prototype.append = function(a, b) {
      return new F(this.$get()).append(a, b);
    };
    I = function(a) {
      var a, b, c;
      b = new H.ptr(CE.nil);
      b.init();
      c = $clone(b.compile(a), G);
      new F(c.out).patch(b.p, b.inst(4).i);
      b.p.Start = ((c.i >> 0));
      return [b.p, $ifaceNil];
    };
    $pkg.Compile = I;
    H.ptr.prototype.init = function() {
      var a;
      a = this;
      a.p = new BK.ptr(CF.nil, 0, 0);
      a.p.NumCap = 2;
      a.inst(5);
    };
    H.prototype.init = function() {
      return this.$val.init();
    };
    H.ptr.prototype.compile = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x;
      b = this;
      c = a.Op;
      if (c === (1)) {
        return b.fail();
      } else if (c === (2)) {
        return b.nop();
      } else if (c === (3)) {
        if (a.Rune.$length === 0) {
          return b.nop();
        }
        d = new G.ptr(0, 0);
        e = a.Rune;
        f = 0;
        while (true) {
          if (!(f < e.$length)) {
            break;
          }
          g = f;
          h = $clone(b.rune($subslice(a.Rune, g, (g + 1 >> 0)), a.Flags), G);
          if (g === 0) {
            G.copy(d, h);
          } else {
            G.copy(d, b.cat($clone(d, G), $clone(h, G)));
          }
          f++;
        }
        return d;
      } else if (c === (4)) {
        return b.rune(a.Rune, a.Flags);
      } else if (c === (5)) {
        return b.rune(J, 0);
      } else if (c === (6)) {
        return b.rune(K, 0);
      } else if (c === (7)) {
        return b.empty(1);
      } else if (c === (8)) {
        return b.empty(2);
      } else if (c === (9)) {
        return b.empty(4);
      } else if (c === (10)) {
        return b.empty(8);
      } else if (c === (11)) {
        return b.empty(16);
      } else if (c === (12)) {
        return b.empty(32);
      } else if (c === (13)) {
        i = $clone(b.cap((((a.Cap << 1 >> 0) >>> 0))), G);
        k = $clone(b.compile((j = a.Sub, (0 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 0]))), G);
        l = $clone(b.cap(((((a.Cap << 1 >> 0) | 1) >>> 0))), G);
        return b.cat($clone(b.cat($clone(i, G), $clone(k, G)), G), $clone(l, G));
      } else if (c === (14)) {
        return b.star($clone(b.compile((m = a.Sub, (0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0]))), G), !((((a.Flags & 32) >>> 0) === 0)));
      } else if (c === (15)) {
        return b.plus($clone(b.compile((n = a.Sub, (0 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 0]))), G), !((((a.Flags & 32) >>> 0) === 0)));
      } else if (c === (16)) {
        return b.quest($clone(b.compile((o = a.Sub, (0 >= o.$length ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + 0]))), G), !((((a.Flags & 32) >>> 0) === 0)));
      } else if (c === (18)) {
        if (a.Sub.$length === 0) {
          return b.nop();
        }
        p = new G.ptr(0, 0);
        q = a.Sub;
        r = 0;
        while (true) {
          if (!(r < q.$length)) {
            break;
          }
          s = r;
          t = ((r < 0 || r >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + r]);
          if (s === 0) {
            G.copy(p, b.compile(t));
          } else {
            G.copy(p, b.cat($clone(p, G), $clone(b.compile(t), G)));
          }
          r++;
        }
        return p;
      } else if (c === (19)) {
        u = new G.ptr(0, 0);
        v = a.Sub;
        w = 0;
        while (true) {
          if (!(w < v.$length)) {
            break;
          }
          x = ((w < 0 || w >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + w]);
          G.copy(u, b.alt($clone(u, G), $clone(b.compile(x), G)));
          w++;
        }
        return u;
      }
      $panic(new $String("regexp: unhandled case in compile"));
    };
    H.prototype.compile = function(a) {
      return this.$val.compile(a);
    };
    H.ptr.prototype.inst = function(a) {
      var a, b, c;
      b = this;
      c = new G.ptr(((b.p.Inst.$length >>> 0)), 0);
      b.p.Inst = $append(b.p.Inst, new BQ.ptr(a, 0, 0, CA.nil));
      return c;
    };
    H.prototype.inst = function(a) {
      return this.$val.inst(a);
    };
    H.ptr.prototype.nop = function() {
      var a, b;
      a = this;
      b = $clone(a.inst(6), G);
      b.out = (((b.i << 1 >>> 0) >>> 0));
      return b;
    };
    H.prototype.nop = function() {
      return this.$val.nop();
    };
    H.ptr.prototype.fail = function() {
      var a;
      a = this;
      return new G.ptr(0, 0);
    };
    H.prototype.fail = function() {
      return this.$val.fail();
    };
    H.ptr.prototype.cap = function(a) {
      var a, b, c, d, e;
      b = this;
      c = $clone(b.inst(2), G);
      c.out = (((c.i << 1 >>> 0) >>> 0));
      (d = b.p.Inst, e = c.i, ((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e])).Arg = a;
      if (b.p.NumCap < (((a >> 0)) + 1 >> 0)) {
        b.p.NumCap = ((a >> 0)) + 1 >> 0;
      }
      return c;
    };
    H.prototype.cap = function(a) {
      return this.$val.cap(a);
    };
    H.ptr.prototype.cat = function(a, b) {
      var a, b, c;
      c = this;
      if ((a.i === 0) || (b.i === 0)) {
        return new G.ptr(0, 0);
      }
      new F(a.out).patch(c.p, b.i);
      return new G.ptr(a.i, b.out);
    };
    H.prototype.cat = function(a, b) {
      return this.$val.cat(a, b);
    };
    H.ptr.prototype.alt = function(a, b) {
      var a, b, c, d, e, f, g;
      c = this;
      if (a.i === 0) {
        return b;
      }
      if (b.i === 0) {
        return a;
      }
      d = $clone(c.inst(0), G);
      g = (e = c.p.Inst, f = d.i, ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]));
      g.Out = a.i;
      g.Arg = b.i;
      d.out = new F(a.out).append(c.p, b.out);
      return d;
    };
    H.prototype.alt = function(a, b) {
      return this.$val.alt(a, b);
    };
    H.ptr.prototype.quest = function(a, b) {
      var a, b, c, d, e, f, g;
      c = this;
      d = $clone(c.inst(0), G);
      g = (e = c.p.Inst, f = d.i, ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]));
      if (b) {
        g.Arg = a.i;
        d.out = (((d.i << 1 >>> 0) >>> 0));
      } else {
        g.Out = a.i;
        d.out = (((((d.i << 1 >>> 0) | 1) >>> 0) >>> 0));
      }
      d.out = new F(d.out).append(c.p, a.out);
      return d;
    };
    H.prototype.quest = function(a, b) {
      return this.$val.quest(a, b);
    };
    H.ptr.prototype.star = function(a, b) {
      var a, b, c, d, e, f, g;
      c = this;
      d = $clone(c.inst(0), G);
      g = (e = c.p.Inst, f = d.i, ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]));
      if (b) {
        g.Arg = a.i;
        d.out = (((d.i << 1 >>> 0) >>> 0));
      } else {
        g.Out = a.i;
        d.out = (((((d.i << 1 >>> 0) | 1) >>> 0) >>> 0));
      }
      new F(a.out).patch(c.p, d.i);
      return d;
    };
    H.prototype.star = function(a, b) {
      return this.$val.star(a, b);
    };
    H.ptr.prototype.plus = function(a, b) {
      var a, b, c;
      c = this;
      return new G.ptr(a.i, c.star($clone(a, G), b).out);
    };
    H.prototype.plus = function(a, b) {
      return this.$val.plus(a, b);
    };
    H.ptr.prototype.empty = function(a) {
      var a, b, c, d, e;
      b = this;
      c = $clone(b.inst(3), G);
      (d = b.p.Inst, e = c.i, ((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e])).Arg = ((a >>> 0));
      c.out = (((c.i << 1 >>> 0) >>> 0));
      return c;
    };
    H.prototype.empty = function(a) {
      return this.$val.empty(a);
    };
    H.ptr.prototype.rune = function(a, b) {
      var a, b, c, d, e, f, g;
      c = this;
      d = $clone(c.inst(7), G);
      g = (e = c.p.Inst, f = d.i, ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]));
      g.Rune = a;
      b = (b & (1)) >>> 0;
      if (!((a.$length === 1)) || (A.SimpleFold((0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0])) === (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]))) {
        b = (b & ~(1)) << 16 >>> 16;
      }
      g.Arg = ((b >>> 0));
      d.out = (((d.i << 1 >>> 0) >>> 0));
      if ((((b & 1) >>> 0) === 0) && ((a.$length === 1) || (a.$length === 2) && ((0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) === (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1])))) {
        g.Op = 8;
      } else if ((a.$length === 2) && ((0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) === 0) && ((1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) === 1114111)) {
        g.Op = 9;
      } else if ((a.$length === 4) && ((0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) === 0) && ((1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) === 9) && ((2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]) === 11) && ((3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]) === 1114111)) {
        g.Op = 10;
      }
      return d;
    };
    H.prototype.rune = function(a, b) {
      return this.$val.rune(a, b);
    };
    BW.prototype.String = function() {
      var a, b;
      a = this.$val;
      if (1 <= a && a <= 19) {
        a = a - (1) << 24 >>> 24;
        return $substring("NoMatchEmptyMatchLiteralCharClassAnyCharNotNLAnyCharBeginLineEndLineBeginTextEndTextWordBoundaryNoWordBoundaryCaptureStarPlusQuestRepeatConcatAlternate", ((a < 0 || a >= L.length) ? ($throwRuntimeError("index out of range"), undefined) : L[a]), (b = a + 1 << 24 >>> 24, ((b < 0 || b >= L.length) ? ($throwRuntimeError("index out of range"), undefined) : L[b])));
      } else if ((a === 128)) {
        return "opPseudo";
      } else {
        return "Op(" + B.FormatInt((new $Int64(0, a)), 10) + ")";
      }
    };
    $ptrType(BW).prototype.String = function() {
      return new BW(this.$get()).String();
    };
    M.ptr.prototype.Error = function() {
      var a;
      a = this;
      return "error parsing regexp: " + new N(a.Code).String() + ": `" + a.Expr + "`";
    };
    M.prototype.Error = function() {
      return this.$val.Error();
    };
    N.prototype.String = function() {
      var a;
      a = this.$val;
      return (a);
    };
    $ptrType(N).prototype.String = function() {
      return new N(this.$get()).String();
    };
    P.ptr.prototype.newRegexp = function(a) {
      var a, b, c;
      b = this;
      c = b.free;
      if (!(c === CG.nil)) {
        b.free = c.Sub0[0];
        BV.copy(c, new BV.ptr(0, 0, CH.nil, CI.zero(), CA.nil, CJ.zero(), 0, 0, 0, ""));
      } else {
        c = new BV.ptr(0, 0, CH.nil, CI.zero(), CA.nil, CJ.zero(), 0, 0, 0, "");
      }
      c.Op = a;
      return c;
    };
    P.prototype.newRegexp = function(a) {
      return this.$val.newRegexp(a);
    };
    P.ptr.prototype.reuse = function(a) {
      var a, b;
      b = this;
      a.Sub0[0] = b.free;
      b.free = a;
    };
    P.prototype.reuse = function(a) {
      return this.$val.reuse(a);
    };
    P.ptr.prototype.push = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t;
      b = this;
      if ((a.Op === 4) && (a.Rune.$length === 2) && ((c = a.Rune, (0 >= c.$length ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + 0])) === (d = a.Rune, (1 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 1])))) {
        if (b.maybeConcat((s = a.Rune, (0 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 0])), (b.flags & ~1) << 16 >>> 16)) {
          return CG.nil;
        }
        a.Op = 3;
        a.Rune = $subslice(a.Rune, 0, 1);
        a.Flags = (b.flags & ~1) << 16 >>> 16;
      } else if ((a.Op === 4) && (a.Rune.$length === 4) && ((e = a.Rune, (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0])) === (f = a.Rune, (1 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 1]))) && ((g = a.Rune, (2 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 2])) === (h = a.Rune, (3 >= h.$length ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + 3]))) && (A.SimpleFold((i = a.Rune, (0 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 0]))) === (j = a.Rune, (2 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 2]))) && (A.SimpleFold((k = a.Rune, (2 >= k.$length ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + 2]))) === (l = a.Rune, (0 >= l.$length ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + 0]))) || (a.Op === 4) && (a.Rune.$length === 2) && (((m = a.Rune, (0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0])) + 1 >> 0) === (n = a.Rune, (1 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 1]))) && (A.SimpleFold((o = a.Rune, (0 >= o.$length ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + 0]))) === (p = a.Rune, (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]))) && (A.SimpleFold((q = a.Rune, (1 >= q.$length ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + 1]))) === (r = a.Rune, (0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0])))) {
        if (b.maybeConcat((t = a.Rune, (0 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 0])), (b.flags | 1) >>> 0)) {
          return CG.nil;
        }
        a.Op = 3;
        a.Rune = $subslice(a.Rune, 0, 1);
        a.Flags = (b.flags | 1) >>> 0;
      } else {
        b.maybeConcat(-1, 0);
      }
      b.stack = $append(b.stack, a);
      return a;
    };
    P.prototype.push = function(a) {
      return this.$val.push(a);
    };
    P.ptr.prototype.maybeConcat = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k;
      c = this;
      d = c.stack.$length;
      if (d < 2) {
        return false;
      }
      g = (e = c.stack, f = d - 1 >> 0, ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]));
      j = (h = c.stack, i = d - 2 >> 0, ((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i]));
      if (!((g.Op === 3)) || !((j.Op === 3)) || !((((g.Flags & 1) >>> 0) === ((j.Flags & 1) >>> 0)))) {
        return false;
      }
      j.Rune = $appendSlice(j.Rune, g.Rune);
      if (a >= 0) {
        g.Rune = $subslice(new CA(g.Rune0), 0, 1);
        (k = g.Rune, (0 >= k.$length ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + 0] = a));
        g.Flags = b;
        return true;
      }
      c.stack = $subslice(c.stack, 0, (d - 1 >> 0));
      c.reuse(g);
      return false;
    };
    P.prototype.maybeConcat = function(a, b) {
      return this.$val.maybeConcat(a, b);
    };
    P.ptr.prototype.newLiteral = function(a, b) {
      var a, b, c, d;
      c = this;
      d = c.newRegexp(3);
      d.Flags = b;
      if (!((((b & 1) >>> 0) === 0))) {
        a = Q(a);
      }
      d.Rune0[0] = a;
      d.Rune = $subslice(new CA(d.Rune0), 0, 1);
      return d;
    };
    P.prototype.newLiteral = function(a, b) {
      return this.$val.newLiteral(a, b);
    };
    Q = function(a) {
      var a, b, c;
      if (a < 65 || a > 125251) {
        return a;
      }
      b = a;
      c = a;
      a = A.SimpleFold(a);
      while (true) {
        if (!(!((a === c)))) {
          break;
        }
        if (b > a) {
          b = a;
        }
        a = A.SimpleFold(a);
      }
      return b;
    };
    P.ptr.prototype.literal = function(a) {
      var a, b;
      b = this;
      b.push(b.newLiteral(a, b.flags));
    };
    P.prototype.literal = function(a) {
      return this.$val.literal(a);
    };
    P.ptr.prototype.op = function(a) {
      var a, b, c;
      b = this;
      c = b.newRegexp(a);
      c.Flags = b.flags;
      return b.push(c);
    };
    P.prototype.op = function(a) {
      return this.$val.op(a);
    };
    P.ptr.prototype.repeat = function(a, b, c, d, e, f) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p;
      g = this;
      h = g.flags;
      if (!((((g.flags & 64) >>> 0) === 0))) {
        if (e.length > 0 && (e.charCodeAt(0) === 63)) {
          e = $substring(e, 1);
          h = (h ^ (32)) << 16 >>> 16;
        }
        if (!(f === "")) {
          return ["", new M.ptr("invalid nested repetition operator", $substring(f, 0, (f.length - e.length >> 0)))];
        }
      }
      i = g.stack.$length;
      if (i === 0) {
        return ["", new M.ptr("missing argument to repetition operator", $substring(d, 0, (d.length - e.length >> 0)))];
      }
      l = (j = g.stack, k = i - 1 >> 0, ((k < 0 || k >= j.$length) ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + k]));
      if (l.Op >= 128) {
        return ["", new M.ptr("missing argument to repetition operator", $substring(d, 0, (d.length - e.length >> 0)))];
      }
      m = g.newRegexp(a);
      m.Min = b;
      m.Max = c;
      m.Flags = h;
      m.Sub = $subslice(new CH(m.Sub0), 0, 1);
      (n = m.Sub, (0 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 0] = l));
      (o = g.stack, p = i - 1 >> 0, ((p < 0 || p >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + p] = m));
      if ((a === 17) && (b >= 2 || c >= 2) && !R(m, 1000)) {
        return ["", new M.ptr("invalid repeat count", $substring(d, 0, (d.length - e.length >> 0)))];
      }
      return [e, $ifaceNil];
    };
    P.prototype.repeat = function(a, b, c, d, e, f) {
      return this.$val.repeat(a, b, c, d, e, f);
    };
    R = function(a, b) {
      var a, b, c, d, e, f, g;
      if (a.Op === 17) {
        c = a.Max;
        if (c === 0) {
          return true;
        }
        if (c < 0) {
          c = a.Min;
        }
        if (c > b) {
          return false;
        }
        if (c > 0) {
          b = (d = b / (c), (d === d && d !== 1 / 0 && d !== -1 / 0) ? d >> 0 : $throwRuntimeError("integer divide by zero"));
        }
      }
      e = a.Sub;
      f = 0;
      while (true) {
        if (!(f < e.$length)) {
          break;
        }
        g = ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]);
        if (!R(g, b)) {
          return false;
        }
        f++;
      }
      return true;
    };
    P.ptr.prototype.concat = function() {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            a.maybeConcat(-1, 0);
            b = a.stack.$length;
            while (true) {
              if (!(b > 0 && (c = a.stack, d = b - 1 >> 0, ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d])).Op < 128)) {
                break;
              }
              b = b - (1) >> 0;
            }
            e = $subslice(a.stack, b);
            a.stack = $subslice(a.stack, 0, b);
            if (e.$length === 0) {
              $s = -1;
              return a.push(a.newRegexp(2));
            }
            f = a.collapse(e, 18);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            g = a.push(f);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.concat
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.concat = function() {
      return this.$val.concat();
    };
    P.ptr.prototype.alternate = function() {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.stack.$length;
            while (true) {
              if (!(b > 0 && (c = a.stack, d = b - 1 >> 0, ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d])).Op < 128)) {
                break;
              }
              b = b - (1) >> 0;
            }
            e = $subslice(a.stack, b);
            a.stack = $subslice(a.stack, 0, b);
            if (e.$length > 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $r = S((f = e.$length - 1 >> 0, ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f])));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 2:
            if (e.$length === 0) {
              $s = -1;
              return a.push(a.newRegexp(1));
            }
            g = a.collapse(e, 19);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = a.push(g);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return h;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.alternate
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.alternate = function() {
      return this.$val.alternate();
    };
    S = function(a) {
      var a, b, c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = a.Op;
            if (b === (4)) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            c = AC((a.$ptr_Rune || (a.$ptr_Rune = new CK(function() {
              return this.$target.Rune;
            }, function($v) {
              this.$target.Rune = $v;
            }, a))));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            a.Rune = c;
            if ((a.Rune.$length === 2) && ((d = a.Rune, (0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0])) === 0) && ((e = a.Rune, (1 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 1])) === 1114111)) {
              a.Rune = CA.nil;
              a.Op = 6;
              $s = -1;
              return;
            }
            if ((a.Rune.$length === 4) && ((f = a.Rune, (0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0])) === 0) && ((g = a.Rune, (1 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 1])) === 9) && ((h = a.Rune, (2 >= h.$length ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + 2])) === 11) && ((i = a.Rune, (3 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 3])) === 1114111)) {
              a.Rune = CA.nil;
              a.Op = 5;
              $s = -1;
              return;
            }
            if ((a.Rune.$capacity - a.Rune.$length >> 0) > 100) {
              a.Rune = $appendSlice($subslice(new CA(a.Rune0), 0, 0), a.Rune);
            }
          case 3:
          case 1:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: S
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.ptr.prototype.collapse = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            if (a.$length === 1) {
              $s = -1;
              return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]);
            }
            d = c.newRegexp(b);
            d.Sub = $subslice(new CH(d.Sub0), 0, 0);
            e = a;
            f = 0;
            while (true) {
              if (!(f < e.$length)) {
                break;
              }
              g = ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]);
              if (g.Op === b) {
                d.Sub = $appendSlice(d.Sub, g.Sub);
                c.reuse(g);
              } else {
                d.Sub = $append(d.Sub, g);
              }
              f++;
            }
            if (b === 19) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            h = c.factor(d.Sub);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            d.Sub = h;
            if (d.Sub.$length === 1) {
              i = d;
              d = (j = d.Sub, (0 >= j.$length ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + 0]));
              c.reuse(i);
            }
          case 2:
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.collapse
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.collapse = function(a, b) {
      return this.$val.collapse(a, b);
    };
    P.ptr.prototype.factor = function(a) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            if (a.$length < 2) {
              $s = -1;
              return a;
            }
            c = CA.nil;
            d = 0;
            e = 0;
            f = $subslice(a, 0, 0);
            g = 0;
          case 1:
            if (!(g <= a.$length)) {
              $s = 2;
              continue;
            }
            h = CA.nil;
            i = 0;
            if (g < a.$length) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            j = b.leadingString(((g < 0 || g >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + g]));
            h = j[0];
            i = j[1];
            if (i === d) {
              k = 0;
              while (true) {
                if (!(k < c.$length && k < h.$length && (((k < 0 || k >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + k]) === ((k < 0 || k >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + k])))) {
                  break;
                }
                k = k + (1) >> 0;
              }
              if (k > 0) {
                c = $subslice(c, 0, k);
                g = g + (1) >> 0;
                $s = 1;
                continue;
              }
            }
          case 4:
            if (g === e) {
              $s = 5;
              continue;
            }
            if (g === (e + 1 >> 0)) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 5:
            $s = 8;
            continue;
          case 6:
            f = $append(f, ((e < 0 || e >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + e]));
            $s = 8;
            continue;
          case 7:
            l = b.newRegexp(3);
            l.Flags = d;
            l.Rune = $appendSlice($subslice(l.Rune, 0, 0), c);
            m = e;
            while (true) {
              if (!(m < g)) {
                break;
              }((m < 0 || m >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + m] = b.removeLeadingString(((m < 0 || m >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + m]), c.$length));
              m = m + (1) >> 0;
            }
            n = b.collapse($subslice(a, e, g), 19);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            o = n;
            p = b.newRegexp(18);
            p.Sub = $append($subslice(p.Sub, 0, 0), l, o);
            f = $append(f, p);
          case 8:
            e = g;
            c = h;
            d = i;
            g = g + (1) >> 0;
            $s = 1;
            continue;
          case 2:
            a = f;
            e = 0;
            f = $subslice(a, 0, 0);
            q = CG.nil;
            r = 0;
          case 10:
            if (!(r <= a.$length)) {
              $s = 11;
              continue;
            }
            s = CG.nil;
            if (r < a.$length) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 12:
            s = b.leadingRegexp(((r < 0 || r >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + r]));
            if (!(q === CG.nil) && q.Equal(s) && (W(q) || ((q.Op === 17) && (q.Min === q.Max) && W((t = q.Sub, (0 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 0])))))) {
              r = r + (1) >> 0;
              $s = 10;
              continue;
            }
          case 13:
            if (r === e) {
              $s = 14;
              continue;
            }
            if (r === (e + 1 >> 0)) {
              $s = 15;
              continue;
            }
            $s = 16;
            continue;
          case 14:
            $s = 17;
            continue;
          case 15:
            f = $append(f, ((e < 0 || e >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + e]));
            $s = 17;
            continue;
          case 16:
            u = q;
            v = e;
            while (true) {
              if (!(v < r)) {
                break;
              }
              w = !((v === e));
              ((v < 0 || v >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + v] = b.removeLeadingRegexp(((v < 0 || v >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + v]), w));
              v = v + (1) >> 0;
            }
            x = b.collapse($subslice(a, e, r), 19);
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              x = x.$blk();
            }
            if (x && x.$blk !== undefined) {
              break s;
            }
            y = x;
            z = b.newRegexp(18);
            z.Sub = $append($subslice(z.Sub, 0, 0), u, y);
            f = $append(f, z);
          case 17:
            e = r;
            q = s;
            r = r + (1) >> 0;
            $s = 10;
            continue;
          case 11:
            a = f;
            e = 0;
            f = $subslice(a, 0, 0);
            aa = 0;
          case 19:
            if (!(aa <= a.$length)) {
              $s = 20;
              continue;
            }
            if (aa < a.$length && W(((aa < 0 || aa >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + aa]))) {
              $s = 21;
              continue;
            }
            $s = 22;
            continue;
          case 21:
            aa = aa + (1) >> 0;
            $s = 19;
            continue;
          case 22:
            if (aa === e) {
              $s = 23;
              continue;
            }
            if (aa === (e + 1 >> 0)) {
              $s = 24;
              continue;
            }
            $s = 25;
            continue;
          case 23:
            $s = 26;
            continue;
          case 24:
            f = $append(f, ((e < 0 || e >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + e]));
            $s = 26;
            continue;
          case 25:
            ab = e;
            ac = e + 1 >> 0;
            while (true) {
              if (!(ac < aa)) {
                break;
              }
              if (((ab < 0 || ab >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + ab]).Op < ((ac < 0 || ac >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + ac]).Op || (((ab < 0 || ab >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + ab]).Op === ((ac < 0 || ac >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + ac]).Op) && ((ab < 0 || ab >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + ab]).Rune.$length < ((ac < 0 || ac >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + ac]).Rune.$length) {
                ab = ac;
              }
              ac = ac + (1) >> 0;
            }
            ad = ((ab < 0 || ab >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + ab]);
            ae = ((e < 0 || e >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + e]);
            ((e < 0 || e >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + e] = ad);
            ((ab < 0 || ab >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + ab] = ae);
            af = e + 1 >> 0;
            while (true) {
              if (!(af < aa)) {
                break;
              }
              Y(((e < 0 || e >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + e]), ((af < 0 || af >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + af]));
              b.reuse(((af < 0 || af >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + af]));
              af = af + (1) >> 0;
            }
            $r = S(((e < 0 || e >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + e]));
            $s = 27;
          case 27:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            f = $append(f, ((e < 0 || e >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + e]));
          case 26:
            if (aa < a.$length) {
              f = $append(f, ((aa < 0 || aa >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + aa]));
            }
            e = aa + 1 >> 0;
            aa = aa + (1) >> 0;
            $s = 19;
            continue;
          case 20:
            a = f;
            e = 0;
            f = $subslice(a, 0, 0);
            ag = a;
            ah = 0;
            while (true) {
              if (!(ah < ag.$length)) {
                break;
              }
              ai = ah;
              if ((ai + 1 >> 0) < a.$length && (((ai < 0 || ai >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + ai]).Op === 2) && ((aj = ai + 1 >> 0, ((aj < 0 || aj >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + aj])).Op === 2)) {
                ah++;
                continue;
              }
              f = $append(f, ((ai < 0 || ai >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + ai]));
              ah++;
            }
            a = f;
            $s = -1;
            return a;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.factor
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.factor = function(a) {
      return this.$val.factor(a);
    };
    P.ptr.prototype.leadingString = function(a) {
      var a, b, c;
      b = this;
      if ((a.Op === 18) && a.Sub.$length > 0) {
        a = (c = a.Sub, (0 >= c.$length ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + 0]));
      }
      if (!((a.Op === 3))) {
        return [CA.nil, 0];
      }
      return [a.Rune, (a.Flags & 1) >>> 0];
    };
    P.prototype.leadingString = function(a) {
      return this.$val.leadingString(a);
    };
    P.ptr.prototype.removeLeadingString = function(a, b) {
      var a, b, c, d, e, f, g, h, i;
      c = this;
      if ((a.Op === 18) && a.Sub.$length > 0) {
        e = (d = a.Sub, (0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0]));
        e = c.removeLeadingString(e, b);
        (f = a.Sub, (0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0] = e));
        if (e.Op === 2) {
          c.reuse(e);
          g = a.Sub.$length;
          if ((g === (0)) || (g === (1))) {
            a.Op = 2;
            a.Sub = CH.nil;
          } else if (g === (2)) {
            h = a;
            a = (i = a.Sub, (1 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 1]));
            c.reuse(h);
          } else {
            $copySlice(a.Sub, $subslice(a.Sub, 1));
            a.Sub = $subslice(a.Sub, 0, (a.Sub.$length - 1 >> 0));
          }
        }
        return a;
      }
      if (a.Op === 3) {
        a.Rune = $subslice(a.Rune, 0, $copySlice(a.Rune, $subslice(a.Rune, b)));
        if (a.Rune.$length === 0) {
          a.Op = 2;
        }
      }
      return a;
    };
    P.prototype.removeLeadingString = function(a, b) {
      return this.$val.removeLeadingString(a, b);
    };
    P.ptr.prototype.leadingRegexp = function(a) {
      var a, b, c, d;
      b = this;
      if (a.Op === 2) {
        return CG.nil;
      }
      if ((a.Op === 18) && a.Sub.$length > 0) {
        d = (c = a.Sub, (0 >= c.$length ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + 0]));
        if (d.Op === 2) {
          return CG.nil;
        }
        return d;
      }
      return a;
    };
    P.prototype.leadingRegexp = function(a) {
      return this.$val.leadingRegexp(a);
    };
    P.ptr.prototype.removeLeadingRegexp = function(a, b) {
      var a, b, c, d, e, f, g;
      c = this;
      if ((a.Op === 18) && a.Sub.$length > 0) {
        if (b) {
          c.reuse((d = a.Sub, (0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0])));
        }
        a.Sub = $subslice(a.Sub, 0, $copySlice(a.Sub, $subslice(a.Sub, 1)));
        e = a.Sub.$length;
        if (e === (0)) {
          a.Op = 2;
          a.Sub = CH.nil;
        } else if (e === (1)) {
          f = a;
          a = (g = a.Sub, (0 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 0]));
          c.reuse(f);
        }
        return a;
      }
      if (b) {
        c.reuse(a);
      }
      return c.newRegexp(2);
    };
    P.prototype.removeLeadingRegexp = function(a, b) {
      return this.$val.removeLeadingRegexp(a, b);
    };
    T = function(a, b) {
      var a, b, c, d, e, f, g;
      c = new BV.ptr(3, 0, CH.nil, CI.zero(), CA.nil, CJ.zero(), 0, 0, 0, "");
      c.Flags = b;
      c.Rune = $subslice(new CA(c.Rune0), 0, 0);
      d = a;
      e = 0;
      while (true) {
        if (!(e < d.length)) {
          break;
        }
        f = $decodeRune(d, e);
        g = f[0];
        if (c.Rune.$length >= c.Rune.$capacity) {
          c.Rune = (new CA($stringToRunes(a)));
          break;
        }
        c.Rune = $append(c.Rune, g);
        e += f[1];
      }
      return c;
    };
    U = function(a, b) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            if (!((((b & 2) >>> 0) === 0))) {
              c = AN(a);
              if (!($interfaceIsEqual(c, $ifaceNil))) {
                $s = -1;
                return [CG.nil, c];
              }
              $s = -1;
              return [T(a, b), $ifaceNil];
            }
            d = new P.ptr(0, CH.nil, CG.nil, 0, "", CA.nil);
            e = $ifaceNil;
            f = 0;
            g = 0;
            h = "";
            d.flags = b;
            d.wholeRegexp = a;
            i = a;
          case 1:
            if (!(!(i === ""))) {
              $s = 2;
              continue;
            }
            j = "";
            k = i.charCodeAt(0);
            if (k === (40)) {
              $s = 4;
              continue;
            }
            if (k === (124)) {
              $s = 5;
              continue;
            }
            if (k === (41)) {
              $s = 6;
              continue;
            }
            if (k === (94)) {
              $s = 7;
              continue;
            }
            if (k === (36)) {
              $s = 8;
              continue;
            }
            if (k === (46)) {
              $s = 9;
              continue;
            }
            if (k === (91)) {
              $s = 10;
              continue;
            }
            if ((k === (42)) || (k === (43)) || (k === (63))) {
              $s = 11;
              continue;
            }
            if (k === (123)) {
              $s = 12;
              continue;
            }
            if (k === (92)) {
              $s = 13;
              continue;
            }
            $s = 14;
            continue;
          case 4:
            if (!((((d.flags & 64) >>> 0) === 0)) && i.length >= 2 && (i.charCodeAt(1) === 63)) {
              l = d.parsePerlFlags(i);
              i = l[0];
              e = l[1];
              if (!($interfaceIsEqual(e, $ifaceNil))) {
                $s = -1;
                return [CG.nil, e];
              }
              $s = 3;
              continue;
            }
            d.numCap = d.numCap + (1) >> 0;
            d.op(128).Cap = d.numCap;
            i = $substring(i, 1);
            $s = 15;
            continue;
          case 5:
            m = d.parseVerticalBar();
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            e = m;
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              $s = -1;
              return [CG.nil, e];
            }
            i = $substring(i, 1);
            $s = 15;
            continue;
          case 6:
            n = d.parseRightParen();
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            e = n;
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              $s = -1;
              return [CG.nil, e];
            }
            i = $substring(i, 1);
            $s = 15;
            continue;
          case 7:
            if (!((((d.flags & 16) >>> 0) === 0))) {
              d.op(9);
            } else {
              d.op(7);
            }
            i = $substring(i, 1);
            $s = 15;
            continue;
          case 8:
            if (!((((d.flags & 16) >>> 0) === 0))) {
              o = d.op(10);
              o.Flags = (o.Flags | (256)) >>> 0;
            } else {
              d.op(8);
            }
            i = $substring(i, 1);
            $s = 15;
            continue;
          case 9:
            if (!((((d.flags & 8) >>> 0) === 0))) {
              d.op(6);
            } else {
              d.op(5);
            }
            i = $substring(i, 1);
            $s = 15;
            continue;
          case 10:
            q = d.parseClass(i);
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            p = q;
            i = p[0];
            e = p[1];
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              $s = -1;
              return [CG.nil, e];
            }
            $s = 15;
            continue;
          case 11:
            r = i;
            s = i.charCodeAt(0);
            if (s === (42)) {
              g = 14;
            } else if (s === (43)) {
              g = 15;
            } else if (s === (63)) {
              g = 16;
            }
            t = $substring(i, 1);
            u = d.repeat(g, 0, 0, r, t, h);
            t = u[0];
            e = u[1];
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              $s = -1;
              return [CG.nil, e];
            }
            j = r;
            i = t;
            $s = 15;
            continue;
          case 12:
            g = 17;
            v = i;
            w = d.parseRepeat(i);
            x = w[0];
            y = w[1];
            z = w[2];
            aa = w[3];
            if (!aa) {
              d.literal(123);
              i = $substring(i, 1);
              $s = 3;
              continue;
            }
            if (x < 0 || x > 1000 || y > 1000 || y >= 0 && x > y) {
              $s = -1;
              return [CG.nil, new M.ptr("invalid repeat count", $substring(v, 0, (v.length - z.length >> 0)))];
            }
            ab = d.repeat(g, x, y, v, z, h);
            z = ab[0];
            e = ab[1];
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              $s = -1;
              return [CG.nil, e];
            }
            j = v;
            i = z;
            $s = 15;
            continue;
          case 13:
            if (!((((d.flags & 64) >>> 0) === 0)) && i.length >= 2) {
              ac = i.charCodeAt(1);
              if (ac === (65)) {
                d.op(9);
                i = $substring(i, 2);
                $s = 3;
                continue s;
              } else if (ac === (98)) {
                d.op(11);
                i = $substring(i, 2);
                $s = 3;
                continue s;
              } else if (ac === (66)) {
                d.op(12);
                i = $substring(i, 2);
                $s = 3;
                continue s;
              } else if (ac === (67)) {
                $s = -1;
                return [CG.nil, new M.ptr("invalid escape sequence", $substring(i, 0, 2))];
              } else if (ac === (81)) {
                ad = "";
                ae = D.Index(i, "\\E");
                if (ae < 0) {
                  ad = $substring(i, 2);
                  i = "";
                } else {
                  ad = $substring(i, 2, ae);
                  i = $substring(i, (ae + 2 >> 0));
                }
                while (true) {
                  if (!(!(ad === ""))) {
                    break;
                  }
                  af = AO(ad);
                  ag = af[0];
                  ah = af[1];
                  ai = af[2];
                  if (!($interfaceIsEqual(ai, $ifaceNil))) {
                    $s = -1;
                    return [CG.nil, ai];
                  }
                  d.literal(ag);
                  ad = ah;
                }
                $s = 3;
                continue s;
              } else if (ac === (122)) {
                d.op(10);
                i = $substring(i, 2);
                $s = 3;
                continue s;
              }
            }
            aj = d.newRegexp(4);
            aj.Flags = d.flags;
            if (i.length >= 2 && ((i.charCodeAt(1) === 112) || (i.charCodeAt(1) === 80))) {
              $s = 19;
              continue;
            }
            $s = 20;
            continue;
          case 19:
            al = d.parseUnicodeClass(i, $subslice(new CA(aj.Rune0), 0, 0));
            $s = 21;
          case 21:
            if ($c) {
              $c = false;
              al = al.$blk();
            }
            if (al && al.$blk !== undefined) {
              break s;
            }
            ak = al;
            am = ak[0];
            an = ak[1];
            ao = ak[2];
            if (!($interfaceIsEqual(ao, $ifaceNil))) {
              $s = -1;
              return [CG.nil, ao];
            }
            if (!(am === CA.nil)) {
              aj.Rune = am;
              i = an;
              d.push(aj);
              $s = 3;
              continue s;
            }
          case 20:
            aq = d.parsePerlClassEscape(i, $subslice(new CA(aj.Rune0), 0, 0));
            $s = 22;
          case 22:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            ap = aq;
            ar = ap[0];
            as = ap[1];
            if (!(ar === CA.nil)) {
              aj.Rune = ar;
              i = as;
              d.push(aj);
              $s = 3;
              continue s;
            }
            d.reuse(aj);
            at = d.parseEscape(i);
            f = at[0];
            i = at[1];
            e = at[2];
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              $s = -1;
              return [CG.nil, e];
            }
            d.literal(f);
            $s = 15;
            continue;
          case 14:
            au = AO(i);
            f = au[0];
            i = au[1];
            e = au[2];
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              $s = -1;
              return [CG.nil, e];
            }
            d.literal(f);
          case 15:
          case 3:
            h = j;
            $s = 1;
            continue;
          case 2:
            av = d.concat();
            $s = 23;
          case 23:
            if ($c) {
              $c = false;
              av = av.$blk();
            }
            if (av && av.$blk !== undefined) {
              break s;
            }
            av;
            aw = d.swapVerticalBar();
            $s = 26;
          case 26:
            if ($c) {
              $c = false;
              aw = aw.$blk();
            }
            if (aw && aw.$blk !== undefined) {
              break s;
            }
            if (aw) {
              $s = 24;
              continue;
            }
            $s = 25;
            continue;
          case 24:
            d.stack = $subslice(d.stack, 0, (d.stack.$length - 1 >> 0));
          case 25:
            ax = d.alternate();
            $s = 27;
          case 27:
            if ($c) {
              $c = false;
              ax = ax.$blk();
            }
            if (ax && ax.$blk !== undefined) {
              break s;
            }
            ax;
            ay = d.stack.$length;
            if (!((ay === 1))) {
              $s = -1;
              return [CG.nil, new M.ptr("missing closing )", a)];
            }
            $s = -1;
            return [(az = d.stack, (0 >= az.$length ? ($throwRuntimeError("index out of range"), undefined) : az.$array[az.$offset + 0])), $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: U
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Parse = U;
    P.ptr.prototype.parseRepeat = function(a) {
      var a, b, c, d, e, f, g, h, i;
      b = 0;
      c = 0;
      d = "";
      e = false;
      f = this;
      if (a === "" || !((a.charCodeAt(0) === 123))) {
        return [b, c, d, e];
      }
      a = $substring(a, 1);
      g = false;
      h = f.parseInt(a);
      b = h[0];
      a = h[1];
      g = h[2];
      if (!g) {
        return [b, c, d, e];
      }
      if (a === "") {
        return [b, c, d, e];
      }
      if (!((a.charCodeAt(0) === 44))) {
        c = b;
      } else {
        a = $substring(a, 1);
        if (a === "") {
          return [b, c, d, e];
        }
        if (a.charCodeAt(0) === 125) {
          c = -1;
        } else {
          i = f.parseInt(a);
          c = i[0];
          a = i[1];
          g = i[2];
          if (!g) {
            return [b, c, d, e];
          } else if (c < 0) {
            b = -1;
          }
        }
      }
      if (a === "" || !((a.charCodeAt(0) === 125))) {
        return [b, c, d, e];
      }
      d = $substring(a, 1);
      e = true;
      return [b, c, d, e];
    };
    P.prototype.parseRepeat = function(a) {
      return this.$val.parseRepeat(a);
    };
    P.ptr.prototype.parsePerlFlags = function(a) {
      var a, aa, ab, ac, ad, ae, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      b = "";
      c = $ifaceNil;
      d = this;
      e = a;
      if (e.length > 4 && (e.charCodeAt(2) === 80) && (e.charCodeAt(3) === 60)) {
        f = D.IndexRune(e, 62);
        if (f < 0) {
          c = AN(e);
          if (!($interfaceIsEqual(c, $ifaceNil))) {
            g = "";
            h = c;
            b = g;
            c = h;
            return [b, c];
          }
          i = "";
          j = new M.ptr("invalid named capture", a);
          b = i;
          c = j;
          return [b, c];
        }
        k = $substring(e, 0, (f + 1 >> 0));
        l = $substring(e, 4, f);
        c = AN(l);
        if (!($interfaceIsEqual(c, $ifaceNil))) {
          m = "";
          n = c;
          b = m;
          c = n;
          return [b, c];
        }
        if (!V(l)) {
          o = "";
          p = new M.ptr("invalid named capture", k);
          b = o;
          c = p;
          return [b, c];
        }
        d.numCap = d.numCap + (1) >> 0;
        q = d.op(128);
        q.Cap = d.numCap;
        q.Name = l;
        r = $substring(e, (f + 1 >> 0));
        s = $ifaceNil;
        b = r;
        c = s;
        return [b, c];
      }
      t = 0;
      e = $substring(e, 2);
      u = d.flags;
      v = 1;
      w = false;
      Loop: while (true) {
        if (!(!(e === ""))) {
          break;
        }
        x = AO(e);
        t = x[0];
        e = x[1];
        c = x[2];
        if (!($interfaceIsEqual(c, $ifaceNil))) {
          y = "";
          z = c;
          b = y;
          c = z;
          return [b, c];
        }
        aa = t;
        if (aa === (105)) {
          u = (u | (1)) >>> 0;
          w = true;
        } else if (aa === (109)) {
          u = (u & ~(16)) << 16 >>> 16;
          w = true;
        } else if (aa === (115)) {
          u = (u | (8)) >>> 0;
          w = true;
        } else if (aa === (85)) {
          u = (u | (32)) >>> 0;
          w = true;
        } else if (aa === (45)) {
          if (v < 0) {
            break Loop;
          }
          v = -1;
          u = ~u << 16 >>> 16;
          w = false;
        } else if ((aa === (58)) || (aa === (41))) {
          if (v < 0) {
            if (!w) {
              break Loop;
            }
            u = ~u << 16 >>> 16;
          }
          if (t === 58) {
            d.op(128);
          }
          d.flags = u;
          ab = e;
          ac = $ifaceNil;
          b = ab;
          c = ac;
          return [b, c];
        } else {
          break Loop;
        }
      }
      ad = "";
      ae = new M.ptr("invalid or unsupported Perl syntax", $substring(a, 0, (a.length - e.length >> 0)));
      b = ad;
      c = ae;
      return [b, c];
    };
    P.prototype.parsePerlFlags = function(a) {
      return this.$val.parsePerlFlags(a);
    };
    V = function(a) {
      var a, b, c, d, e;
      if (a === "") {
        return false;
      }
      b = a;
      c = 0;
      while (true) {
        if (!(c < b.length)) {
          break;
        }
        d = $decodeRune(b, c);
        e = d[0];
        if (!((e === 95)) && !AP(e)) {
          return false;
        }
        c += d[1];
      }
      return true;
    };
    P.ptr.prototype.parseInt = function(a) {
      var a, b, c, d, e, f, g;
      b = 0;
      c = "";
      d = false;
      e = this;
      if (a === "" || a.charCodeAt(0) < 48 || 57 < a.charCodeAt(0)) {
        return [b, c, d];
      }
      if (a.length >= 2 && (a.charCodeAt(0) === 48) && 48 <= a.charCodeAt(1) && a.charCodeAt(1) <= 57) {
        return [b, c, d];
      }
      f = a;
      while (true) {
        if (!(!(a === "") && 48 <= a.charCodeAt(0) && a.charCodeAt(0) <= 57)) {
          break;
        }
        a = $substring(a, 1);
      }
      c = a;
      d = true;
      f = $substring(f, 0, (f.length - a.length >> 0));
      g = 0;
      while (true) {
        if (!(g < f.length)) {
          break;
        }
        if (b >= 100000000) {
          b = -1;
          break;
        }
        b = (($imul(b, 10)) + ((f.charCodeAt(g) >> 0)) >> 0) - 48 >> 0;
        g = g + (1) >> 0;
      }
      return [b, c, d];
    };
    P.prototype.parseInt = function(a) {
      return this.$val.parseInt(a);
    };
    W = function(a) {
      var a;
      return (a.Op === 3) && (a.Rune.$length === 1) || (a.Op === 4) || (a.Op === 5) || (a.Op === 6);
    };
    X = function(a, b) {
      var a, b, c, d, e, f, g, h;
      c = a.Op;
      if (c === (3)) {
        return (a.Rune.$length === 1) && ((d = a.Rune, (0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0])) === b);
      } else if (c === (4)) {
        e = 0;
        while (true) {
          if (!(e < a.Rune.$length)) {
            break;
          }
          if ((f = a.Rune, ((e < 0 || e >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + e])) <= b && b <= (g = a.Rune, h = e + 1 >> 0, ((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h]))) {
            return true;
          }
          e = e + (2) >> 0;
        }
        return false;
      } else if (c === (5)) {
        return !((b === 10));
      } else if (c === (6)) {
        return true;
      }
      return false;
    };
    P.ptr.prototype.parseVerticalBar = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.concat();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            b;
            c = a.swapVerticalBar();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            if (!c) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            a.op(129);
          case 3:
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.parseVerticalBar
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.parseVerticalBar = function() {
      return this.$val.parseVerticalBar();
    };
    Y = function(a, b) {
      var a, b, c, d, e, f, g, h;
      switch (0) {
        default:
          c = a.Op;
          if (c === (6)) {} else if (c === (5)) {
            if (X(b, 10)) {
              a.Op = 6;
            }
          } else if (c === (4)) {
            if (b.Op === 3) {
              a.Rune = AD(a.Rune, (d = b.Rune, (0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0])), b.Flags);
            } else {
              a.Rune = AG(a.Rune, b.Rune);
            }
          } else if (c === (3)) {
            if (((e = b.Rune, (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0])) === (f = a.Rune, (0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0]))) && (b.Flags === a.Flags)) {
              break;
            }
            a.Op = 4;
            a.Rune = AD($subslice(a.Rune, 0, 0), (g = a.Rune, (0 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 0])), a.Flags);
            a.Rune = AD(a.Rune, (h = b.Rune, (0 >= h.$length ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + 0])), b.Flags);
          }
      }
    };
    P.ptr.prototype.swapVerticalBar = function() {
      var a, aa, ab, ac, ad, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.stack.$length;
            if (b >= 3 && ((c = a.stack, d = b - 2 >> 0, ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d])).Op === 129) && W((e = a.stack, f = b - 1 >> 0, ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]))) && W((g = a.stack, h = b - 3 >> 0, ((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h])))) {
              k = (i = a.stack, j = b - 1 >> 0, ((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j]));
              n = (l = a.stack, m = b - 3 >> 0, ((m < 0 || m >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + m]));
              if (k.Op > n.Op) {
                o = n;
                p = k;
                k = o;
                n = p;
                (q = a.stack, r = b - 3 >> 0, ((r < 0 || r >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + r] = n));
              }
              Y(n, k);
              a.reuse(k);
              a.stack = $subslice(a.stack, 0, (b - 1 >> 0));
              $s = -1;
              return true;
            }
            if (b >= 2) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            u = (s = a.stack, t = b - 1 >> 0, ((t < 0 || t >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + t]));
            x = (v = a.stack, w = b - 2 >> 0, ((w < 0 || w >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + w]));
            if (x.Op === 129) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            if (b >= 3) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            $r = S((y = a.stack, z = b - 3 >> 0, ((z < 0 || z >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + z])));
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
          case 6:
            (aa = a.stack, ab = b - 2 >> 0, ((ab < 0 || ab >= aa.$length) ? ($throwRuntimeError("index out of range"), undefined) : aa.$array[aa.$offset + ab] = u));
            (ac = a.stack, ad = b - 1 >> 0, ((ad < 0 || ad >= ac.$length) ? ($throwRuntimeError("index out of range"), undefined) : ac.$array[ac.$offset + ad] = x));
            $s = -1;
            return true;
          case 4:
          case 2:
            $s = -1;
            return false;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.swapVerticalBar
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.swapVerticalBar = function() {
      return this.$val.swapVerticalBar();
    };
    P.ptr.prototype.parseRightParen = function() {
      var a, b, c, d, e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.concat();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            b;
            c = a.swapVerticalBar();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            if (c) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            a.stack = $subslice(a.stack, 0, (a.stack.$length - 1 >> 0));
          case 3:
            d = a.alternate();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            d;
            e = a.stack.$length;
            if (e < 2) {
              $s = -1;
              return new M.ptr("unexpected )", a.wholeRegexp);
            }
            h = (f = a.stack, g = e - 1 >> 0, ((g < 0 || g >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + g]));
            k = (i = a.stack, j = e - 2 >> 0, ((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j]));
            a.stack = $subslice(a.stack, 0, (e - 2 >> 0));
            if (!((k.Op === 128))) {
              $s = -1;
              return new M.ptr("unexpected )", a.wholeRegexp);
            }
            a.flags = k.Flags;
            if (k.Cap === 0) {
              a.push(h);
            } else {
              k.Op = 13;
              k.Sub = $subslice(new CH(k.Sub0), 0, 1);
              (l = k.Sub, (0 >= l.$length ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + 0] = h));
              a.push(k);
            }
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.parseRightParen
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.parseRightParen = function() {
      return this.$val.parseRightParen();
    };
    P.ptr.prototype.parseEscape = function(a) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, b, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      b = 0;
      c = "";
      d = $ifaceNil;
      e = this;
      f = $substring(a, 1);
      if (f === "") {
        g = 0;
        h = "";
        i = new M.ptr("trailing backslash at end of expression", "");
        b = g;
        c = h;
        d = i;
        return [b, c, d];
      }
      j = AO(f);
      k = j[0];
      f = j[1];
      d = j[2];
      if (!($interfaceIsEqual(d, $ifaceNil))) {
        l = 0;
        m = "";
        n = d;
        b = l;
        c = m;
        d = n;
        return [b, c, d];
      }
      Switch: switch (0) {
        default:
          o = k;
          if ((o === (49)) || (o === (50)) || (o === (51)) || (o === (52)) || (o === (53)) || (o === (54)) || (o === (55))) {
            if (f === "" || f.charCodeAt(0) < 48 || f.charCodeAt(0) > 55) {
              break;
            }
            b = k - 48 >> 0;
            p = 1;
            while (true) {
              if (!(p < 3)) {
                break;
              }
              if (f === "" || f.charCodeAt(0) < 48 || f.charCodeAt(0) > 55) {
                break;
              }
              b = (($imul(b, 8)) + ((f.charCodeAt(0) >> 0)) >> 0) - 48 >> 0;
              f = $substring(f, 1);
              p = p + (1) >> 0;
            }
            q = b;
            r = f;
            s = $ifaceNil;
            b = q;
            c = r;
            d = s;
            return [b, c, d];
          } else if (o === (48)) {
            b = k - 48 >> 0;
            p = 1;
            while (true) {
              if (!(p < 3)) {
                break;
              }
              if (f === "" || f.charCodeAt(0) < 48 || f.charCodeAt(0) > 55) {
                break;
              }
              b = (($imul(b, 8)) + ((f.charCodeAt(0) >> 0)) >> 0) - 48 >> 0;
              f = $substring(f, 1);
              p = p + (1) >> 0;
            }
            t = b;
            u = f;
            v = $ifaceNil;
            b = t;
            c = u;
            d = v;
            return [b, c, d];
          } else if (o === (120)) {
            if (f === "") {
              break;
            }
            w = AO(f);
            k = w[0];
            f = w[1];
            d = w[2];
            if (!($interfaceIsEqual(d, $ifaceNil))) {
              x = 0;
              y = "";
              z = d;
              b = x;
              c = y;
              d = z;
              return [b, c, d];
            }
            if (k === 123) {
              aa = 0;
              b = 0;
              while (true) {
                if (f === "") {
                  break Switch;
                }
                ab = AO(f);
                k = ab[0];
                f = ab[1];
                d = ab[2];
                if (!($interfaceIsEqual(d, $ifaceNil))) {
                  ac = 0;
                  ad = "";
                  ae = d;
                  b = ac;
                  c = ad;
                  d = ae;
                  return [b, c, d];
                }
                if (k === 125) {
                  break;
                }
                af = AQ(k);
                if (af < 0) {
                  break Switch;
                }
                b = ($imul(b, 16)) + af >> 0;
                if (b > 1114111) {
                  break Switch;
                }
                aa = aa + (1) >> 0;
              }
              if (aa === 0) {
                break Switch;
              }
              ag = b;
              ah = f;
              ai = $ifaceNil;
              b = ag;
              c = ah;
              d = ai;
              return [b, c, d];
            }
            aj = AQ(k);
            ak = AO(f);
            k = ak[0];
            f = ak[1];
            d = ak[2];
            if (!($interfaceIsEqual(d, $ifaceNil))) {
              al = 0;
              am = "";
              an = d;
              b = al;
              c = am;
              d = an;
              return [b, c, d];
            }
            ao = AQ(k);
            if (aj < 0 || ao < 0) {
              break;
            }
            ap = ($imul(aj, 16)) + ao >> 0;
            aq = f;
            ar = $ifaceNil;
            b = ap;
            c = aq;
            d = ar;
            return [b, c, d];
          } else if (o === (97)) {
            as = 7;
            at = f;
            au = d;
            b = as;
            c = at;
            d = au;
            return [b, c, d];
          } else if (o === (102)) {
            av = 12;
            aw = f;
            ax = d;
            b = av;
            c = aw;
            d = ax;
            return [b, c, d];
          } else if (o === (110)) {
            ay = 10;
            az = f;
            ba = d;
            b = ay;
            c = az;
            d = ba;
            return [b, c, d];
          } else if (o === (114)) {
            bb = 13;
            bc = f;
            bd = d;
            b = bb;
            c = bc;
            d = bd;
            return [b, c, d];
          } else if (o === (116)) {
            be = 9;
            bf = f;
            bg = d;
            b = be;
            c = bf;
            d = bg;
            return [b, c, d];
          } else if (o === (118)) {
            bh = 11;
            bi = f;
            bj = d;
            b = bh;
            c = bi;
            d = bj;
            return [b, c, d];
          } else if (k < 128 && !AP(k)) {
            bk = k;
            bl = f;
            bm = $ifaceNil;
            b = bk;
            c = bl;
            d = bm;
            return [b, c, d];
          }
      }
      bn = 0;
      bo = "";
      bp = new M.ptr("invalid escape sequence", $substring(a, 0, (a.length - f.length >> 0)));
      b = bn;
      c = bo;
      d = bp;
      return [b, c, d];
    };
    P.prototype.parseEscape = function(a) {
      return this.$val.parseEscape(a);
    };
    P.ptr.prototype.parseClassChar = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k;
      c = 0;
      d = "";
      e = $ifaceNil;
      f = this;
      if (a === "") {
        g = 0;
        h = "";
        i = new M.ptr("missing closing ]", b);
        c = g;
        d = h;
        e = i;
        return [c, d, e];
      }
      if (a.charCodeAt(0) === 92) {
        j = f.parseEscape(a);
        c = j[0];
        d = j[1];
        e = j[2];
        return [c, d, e];
      }
      k = AO(a);
      c = k[0];
      d = k[1];
      e = k[2];
      return [c, d, e];
    };
    P.prototype.parseClassChar = function(a, b) {
      return this.$val.parseClassChar(a, b);
    };
    P.ptr.prototype.parsePerlClassEscape = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = CA.nil;
            d = "";
            e = this;
            if ((((e.flags & 64) >>> 0) === 0) || a.length < 2 || !((a.charCodeAt(0) === 92))) {
              $s = -1;
              return [c, d];
            }
            g = $clone((f = AU[$String.keyFor($substring(a, 0, 2))], f !== undefined ? f.v : new Z.ptr(0, CA.nil)), Z);
            if (g.sign === 0) {
              $s = -1;
              return [c, d];
            }
            i = e.appendGroup(b, $clone(g, Z));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            j = $substring(a, 2);
            c = h;
            d = j;
            $s = -1;
            return [c, d];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.parsePerlClassEscape
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.parsePerlClassEscape = function(a, b) {
      return this.$val.parsePerlClassEscape(a, b);
    };
    P.ptr.prototype.parseNamedClass = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = CA.nil;
            d = "";
            e = $ifaceNil;
            f = this;
            if (a.length < 2 || !((a.charCodeAt(0) === 91)) || !((a.charCodeAt(1) === 58))) {
              $s = -1;
              return [c, d, e];
            }
            g = D.Index($substring(a, 2), ":]");
            if (g < 0) {
              $s = -1;
              return [c, d, e];
            }
            g = g + (2) >> 0;
            h = $substring(a, 0, (g + 2 >> 0));
            i = $substring(a, (g + 2 >> 0));
            j = h;
            a = i;
            l = $clone((k = BJ[$String.keyFor(j)], k !== undefined ? k.v : new Z.ptr(0, CA.nil)), Z);
            if (l.sign === 0) {
              m = CA.nil;
              n = "";
              o = new M.ptr("invalid character class range", j);
              c = m;
              d = n;
              e = o;
              $s = -1;
              return [c, d, e];
            }
            q = f.appendGroup(b, $clone(l, Z));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            p = q;
            r = a;
            s = $ifaceNil;
            c = p;
            d = r;
            e = s;
            $s = -1;
            return [c, d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.parseNamedClass
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.parseNamedClass = function(a, b) {
      return this.$val.parseNamedClass(a, b);
    };
    P.ptr.prototype.appendGroup = function(a, b) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            if (((c.flags & 1) >>> 0) === 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            if (b.sign < 0) {
              a = AI(a, b.class$1);
            } else {
              a = AG(a, b.class$1);
            }
            $s = 3;
            continue;
          case 2:
            d = $subslice(c.tmpClass, 0, 0);
            d = AH(d, b.class$1);
            c.tmpClass = d;
            e = AC((c.$ptr_tmpClass || (c.$ptr_tmpClass = new CK(function() {
              return this.$target.tmpClass;
            }, function($v) {
              this.$target.tmpClass = $v;
            }, c))));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            d = e;
            if (b.sign < 0) {
              a = AI(a, d);
            } else {
              a = AG(a, d);
            }
          case 3:
            $s = -1;
            return a;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.appendGroup
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.appendGroup = function(a, b) {
      return this.$val.appendGroup(a, b);
    };
    AB = function(a) {
      var a, b, c, d, e, f, g;
      if (a === "Any") {
        return [AA, AA];
      }
      c = (b = A.Categories[$String.keyFor(a)], b !== undefined ? b.v : CL.nil);
      if (!(c === CL.nil)) {
        return [c, (d = A.FoldCategory[$String.keyFor(a)], d !== undefined ? d.v : CL.nil)];
      }
      f = (e = A.Scripts[$String.keyFor(a)], e !== undefined ? e.v : CL.nil);
      if (!(f === CL.nil)) {
        return [f, (g = A.FoldScript[$String.keyFor(a)], g !== undefined ? g.v : CL.nil)];
      }
      return [CL.nil, CL.nil];
    };
    P.ptr.prototype.parseUnicodeClass = function(a, b) {
      var a, aa, ab, ac, ad, ae, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = CA.nil;
            d = "";
            e = $ifaceNil;
            f = this;
            if ((((f.flags & 128) >>> 0) === 0) || a.length < 2 || !((a.charCodeAt(0) === 92)) || !((a.charCodeAt(1) === 112)) && !((a.charCodeAt(1) === 80))) {
              $s = -1;
              return [c, d, e];
            }
            g = 1;
            if (a.charCodeAt(1) === 80) {
              g = -1;
            }
            h = $substring(a, 2);
            i = AO(h);
            j = i[0];
            h = i[1];
            e = i[2];
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              $s = -1;
              return [c, d, e];
            }
            k = "";
            l = "";
            m = k;
            n = l;
            if (!((j === 123))) {
              m = $substring(a, 0, (a.length - h.length >> 0));
              n = $substring(m, 2);
            } else {
              o = D.IndexRune(a, 125);
              if (o < 0) {
                e = AN(a);
                if (!($interfaceIsEqual(e, $ifaceNil))) {
                  $s = -1;
                  return [c, d, e];
                }
                p = CA.nil;
                q = "";
                r = new M.ptr("invalid character class range", a);
                c = p;
                d = q;
                e = r;
                $s = -1;
                return [c, d, e];
              }
              s = $substring(a, 0, (o + 1 >> 0));
              t = $substring(a, (o + 1 >> 0));
              m = s;
              h = t;
              n = $substring(a, 3, o);
              e = AN(n);
              if (!($interfaceIsEqual(e, $ifaceNil))) {
                $s = -1;
                return [c, d, e];
              }
            }
            if (!(n === "") && (n.charCodeAt(0) === 94)) {
              g = -g;
              n = $substring(n, 1);
            }
            u = AB(n);
            v = u[0];
            w = u[1];
            if (v === CL.nil) {
              x = CA.nil;
              y = "";
              z = new M.ptr("invalid character class range", m);
              c = x;
              d = y;
              e = z;
              $s = -1;
              return [c, d, e];
            }
            if ((((f.flags & 1) >>> 0) === 0) || w === CL.nil) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            if (g > 0) {
              b = AJ(b, v);
            } else {
              b = AK(b, v);
            }
            $s = 3;
            continue;
          case 2:
            aa = $subslice(f.tmpClass, 0, 0);
            aa = AJ(aa, v);
            aa = AJ(aa, w);
            f.tmpClass = aa;
            ab = AC((f.$ptr_tmpClass || (f.$ptr_tmpClass = new CK(function() {
              return this.$target.tmpClass;
            }, function($v) {
              this.$target.tmpClass = $v;
            }, f))));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              ab = ab.$blk();
            }
            if (ab && ab.$blk !== undefined) {
              break s;
            }
            aa = ab;
            if (g > 0) {
              b = AG(b, aa);
            } else {
              b = AI(b, aa);
            }
          case 3:
            ac = b;
            ad = h;
            ae = $ifaceNil;
            c = ac;
            d = ad;
            e = ae;
            $s = -1;
            return [c, d, e];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.parseUnicodeClass
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.parseUnicodeClass = function(a, b) {
      return this.$val.parseUnicodeClass(a, b);
    };
    P.ptr.prototype.parseClass = function(a) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, b, ba, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        at = $f.at;
        au = $f.au;
        av = $f.av;
        aw = $f.aw;
        ax = $f.ax;
        ay = $f.ay;
        az = $f.az;
        b = $f.b;
        ba = $f.ba;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = "";
            c = $ifaceNil;
            d = this;
            e = $substring(a, 1);
            f = d.newRegexp(4);
            f.Flags = d.flags;
            f.Rune = $subslice(new CA(f.Rune0), 0, 0);
            g = 1;
            if (!(e === "") && (e.charCodeAt(0) === 94)) {
              g = -1;
              e = $substring(e, 1);
              if (((d.flags & 4) >>> 0) === 0) {
                f.Rune = $append(f.Rune, 10, 10);
              }
            }
            h = f.Rune;
            i = true;
          case 1:
            if (!(e === "" || !((e.charCodeAt(0) === 93)) || i)) {
              $s = 2;
              continue;
            }
            if (!(e === "") && (e.charCodeAt(0) === 45) && (((d.flags & 64) >>> 0) === 0) && !i && ((e.length === 1) || !((e.charCodeAt(1) === 93)))) {
              j = E.DecodeRuneInString($substring(e, 1));
              k = j[1];
              l = "";
              m = new M.ptr("invalid character class range", $substring(e, 0, (1 + k >> 0)));
              b = l;
              c = m;
              $s = -1;
              return [b, c];
            }
            i = false;
            if (e.length > 2 && (e.charCodeAt(0) === 91) && (e.charCodeAt(1) === 58)) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            o = d.parseNamedClass(e, h);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            n = o;
            p = n[0];
            q = n[1];
            r = n[2];
            if (!($interfaceIsEqual(r, $ifaceNil))) {
              s = "";
              t = r;
              b = s;
              c = t;
              $s = -1;
              return [b, c];
            }
            if (!(p === CA.nil)) {
              u = p;
              v = q;
              h = u;
              e = v;
              $s = 1;
              continue;
            }
          case 4:
            x = d.parseUnicodeClass(e, h);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              x = x.$blk();
            }
            if (x && x.$blk !== undefined) {
              break s;
            }
            w = x;
            y = w[0];
            z = w[1];
            aa = w[2];
            if (!($interfaceIsEqual(aa, $ifaceNil))) {
              ab = "";
              ac = aa;
              b = ab;
              c = ac;
              $s = -1;
              return [b, c];
            }
            if (!(y === CA.nil)) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            ad = y;
            ae = z;
            h = ad;
            e = ae;
            $s = 1;
            continue;
          case 8:
            ag = d.parsePerlClassEscape(e, h);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              ag = ag.$blk();
            }
            if (ag && ag.$blk !== undefined) {
              break s;
            }
            af = ag;
            ah = af[0];
            ai = af[1];
            if (!(ah === CA.nil)) {
              aj = ah;
              ak = ai;
              h = aj;
              e = ak;
              $s = 1;
              continue;
            }
            al = e;
            am = 0;
            an = 0;
            ao = am;
            ap = an;
            aq = d.parseClassChar(e, a);
            ao = aq[0];
            e = aq[1];
            aa = aq[2];
            if (!($interfaceIsEqual(aa, $ifaceNil))) {
              ar = "";
              as = aa;
              b = ar;
              c = as;
              $s = -1;
              return [b, c];
            }
            ap = ao;
            if (e.length >= 2 && (e.charCodeAt(0) === 45) && !((e.charCodeAt(1) === 93))) {
              e = $substring(e, 1);
              at = d.parseClassChar(e, a);
              ap = at[0];
              e = at[1];
              aa = at[2];
              if (!($interfaceIsEqual(aa, $ifaceNil))) {
                au = "";
                av = aa;
                b = au;
                c = av;
                $s = -1;
                return [b, c];
              }
              if (ap < ao) {
                al = $substring(al, 0, (al.length - e.length >> 0));
                aw = "";
                ax = new M.ptr("invalid character class range", al);
                b = aw;
                c = ax;
                $s = -1;
                return [b, c];
              }
            }
            if (((d.flags & 1) >>> 0) === 0) {
              h = AE(h, ao, ap);
            } else {
              h = AF(h, ao, ap);
            }
            $s = 1;
            continue;
          case 2:
            e = $substring(e, 1);
            f.Rune = h;
            ay = AC((f.$ptr_Rune || (f.$ptr_Rune = new CK(function() {
              return this.$target.Rune;
            }, function($v) {
              this.$target.Rune = $v;
            }, f))));
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              ay = ay.$blk();
            }
            if (ay && ay.$blk !== undefined) {
              break s;
            }
            h = ay;
            if (g < 0) {
              h = AL(h);
            }
            f.Rune = h;
            d.push(f);
            az = e;
            ba = $ifaceNil;
            b = az;
            c = ba;
            $s = -1;
            return [b, c];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: P.ptr.prototype.parseClass
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.at = at;
      $f.au = au;
      $f.av = av;
      $f.aw = aw;
      $f.ax = ax;
      $f.ay = ay;
      $f.az = az;
      $f.b = b;
      $f.ba = ba;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    P.prototype.parseClass = function(a) {
      return this.$val.parseClass(a);
    };
    AC = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = C.Sort((b = new AM.ptr(a), new b.constructor.elem(b)));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            c = a.$get();
            if (c.$length < 2) {
              $s = -1;
              return c;
            }
            d = 2;
            e = 2;
            while (true) {
              if (!(e < c.$length)) {
                break;
              }
              f = ((e < 0 || e >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + e]);
              g = (h = e + 1 >> 0, ((h < 0 || h >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + h]));
              i = f;
              j = g;
              if (i <= ((k = d - 1 >> 0, ((k < 0 || k >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + k])) + 1 >> 0)) {
                if (j > (l = d - 1 >> 0, ((l < 0 || l >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + l]))) {
                  (m = d - 1 >> 0, ((m < 0 || m >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + m] = j));
                }
                e = e + (2) >> 0;
                continue;
              }((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d] = i);
              (n = d + 1 >> 0, ((n < 0 || n >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + n] = j));
              d = d + (2) >> 0;
              e = e + (2) >> 0;
            }
            $s = -1;
            return $subslice(c, 0, d);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AC
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AD = function(a, b, c) {
      var a, b, c;
      if (!((((c & 1) >>> 0) === 0))) {
        return AF(a, b, b);
      }
      return AE(a, b, b);
    };
    AE = function(a, b, c) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m;
      d = a.$length;
      e = 2;
      while (true) {
        if (!(e <= 4)) {
          break;
        }
        if (d >= e) {
          f = (g = d - e >> 0, ((g < 0 || g >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + g]));
          h = (i = (d - e >> 0) + 1 >> 0, ((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]));
          j = f;
          k = h;
          if (b <= (k + 1 >> 0) && j <= (c + 1 >> 0)) {
            if (b < j) {
              (l = d - e >> 0, ((l < 0 || l >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + l] = b));
            }
            if (c > k) {
              (m = (d - e >> 0) + 1 >> 0, ((m < 0 || m >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + m] = c));
            }
            return a;
          }
        }
        e = e + (2) >> 0;
      }
      return $append(a, b, c);
    };
    AF = function(a, b, c) {
      var a, b, c, d, e;
      if (b <= 65 && c >= 125251) {
        return AE(a, b, c);
      }
      if (c < 65 || b > 125251) {
        return AE(a, b, c);
      }
      if (b < 65) {
        a = AE(a, b, 64);
        b = 65;
      }
      if (c > 125251) {
        a = AE(a, 125252, c);
        c = 125251;
      }
      d = b;
      while (true) {
        if (!(d <= c)) {
          break;
        }
        a = AE(a, d, d);
        e = A.SimpleFold(d);
        while (true) {
          if (!(!((e === d)))) {
            break;
          }
          a = AE(a, e, e);
          e = A.SimpleFold(e);
        }
        d = d + (1) >> 0;
      }
      return a;
    };
    AG = function(a, b) {
      var a, b, c, d;
      c = 0;
      while (true) {
        if (!(c < b.$length)) {
          break;
        }
        a = AE(a, ((c < 0 || c >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + c]), (d = c + 1 >> 0, ((d < 0 || d >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + d])));
        c = c + (2) >> 0;
      }
      return a;
    };
    AH = function(a, b) {
      var a, b, c, d;
      c = 0;
      while (true) {
        if (!(c < b.$length)) {
          break;
        }
        a = AF(a, ((c < 0 || c >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + c]), (d = c + 1 >> 0, ((d < 0 || d >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + d])));
        c = c + (2) >> 0;
      }
      return a;
    };
    AI = function(a, b) {
      var a, b, c, d, e, f, g, h, i;
      c = 0;
      d = 0;
      while (true) {
        if (!(d < b.$length)) {
          break;
        }
        e = ((d < 0 || d >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + d]);
        f = (g = d + 1 >> 0, ((g < 0 || g >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + g]));
        h = e;
        i = f;
        if (c <= (h - 1 >> 0)) {
          a = AE(a, c, h - 1 >> 0);
        }
        c = i + 1 >> 0;
        d = d + (2) >> 0;
      }
      if (c <= 1114111) {
        a = AE(a, c, 1114111);
      }
      return a;
    };
    AJ = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v;
      c = b.R16;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = $clone(((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]), A.Range16);
        f = ((e.Lo >> 0));
        g = ((e.Hi >> 0));
        h = ((e.Stride >> 0));
        i = f;
        j = g;
        k = h;
        if (k === 1) {
          a = AE(a, i, j);
          d++;
          continue;
        }
        l = i;
        while (true) {
          if (!(l <= j)) {
            break;
          }
          a = AE(a, l, l);
          l = l + (k) >> 0;
        }
        d++;
      }
      m = b.R32;
      n = 0;
      while (true) {
        if (!(n < m.$length)) {
          break;
        }
        o = $clone(((n < 0 || n >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + n]), A.Range32);
        p = ((o.Lo >> 0));
        q = ((o.Hi >> 0));
        r = ((o.Stride >> 0));
        s = p;
        t = q;
        u = r;
        if (u === 1) {
          a = AE(a, s, t);
          n++;
          continue;
        }
        v = s;
        while (true) {
          if (!(v <= t)) {
            break;
          }
          a = AE(a, v, v);
          v = v + (u) >> 0;
        }
        n++;
      }
      return a;
    };
    AK = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w;
      c = 0;
      d = b.R16;
      e = 0;
      while (true) {
        if (!(e < d.$length)) {
          break;
        }
        f = $clone(((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e]), A.Range16);
        g = ((f.Lo >> 0));
        h = ((f.Hi >> 0));
        i = ((f.Stride >> 0));
        j = g;
        k = h;
        l = i;
        if (l === 1) {
          if (c <= (j - 1 >> 0)) {
            a = AE(a, c, j - 1 >> 0);
          }
          c = k + 1 >> 0;
          e++;
          continue;
        }
        m = j;
        while (true) {
          if (!(m <= k)) {
            break;
          }
          if (c <= (m - 1 >> 0)) {
            a = AE(a, c, m - 1 >> 0);
          }
          c = m + 1 >> 0;
          m = m + (l) >> 0;
        }
        e++;
      }
      n = b.R32;
      o = 0;
      while (true) {
        if (!(o < n.$length)) {
          break;
        }
        p = $clone(((o < 0 || o >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + o]), A.Range32);
        q = ((p.Lo >> 0));
        r = ((p.Hi >> 0));
        s = ((p.Stride >> 0));
        t = q;
        u = r;
        v = s;
        if (v === 1) {
          if (c <= (t - 1 >> 0)) {
            a = AE(a, c, t - 1 >> 0);
          }
          c = u + 1 >> 0;
          o++;
          continue;
        }
        w = t;
        while (true) {
          if (!(w <= u)) {
            break;
          }
          if (c <= (w - 1 >> 0)) {
            a = AE(a, c, w - 1 >> 0);
          }
          c = w + 1 >> 0;
          w = w + (v) >> 0;
        }
        o++;
      }
      if (c <= 1114111) {
        a = AE(a, c, 1114111);
      }
      return a;
    };
    AL = function(a) {
      var a, b, c, d, e, f, g, h, i, j;
      b = 0;
      c = 0;
      d = 0;
      while (true) {
        if (!(d < a.$length)) {
          break;
        }
        e = ((d < 0 || d >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + d]);
        f = (g = d + 1 >> 0, ((g < 0 || g >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + g]));
        h = e;
        i = f;
        if (b <= (h - 1 >> 0)) {
          ((c < 0 || c >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + c] = b);
          (j = c + 1 >> 0, ((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j] = (h - 1 >> 0)));
          c = c + (2) >> 0;
        }
        b = i + 1 >> 0;
        d = d + (2) >> 0;
      }
      a = $subslice(a, 0, c);
      if (b <= 1114111) {
        a = $append(a, b, 1114111);
      }
      return a;
    };
    AM.ptr.prototype.Less = function(a, b) {
      var a, b, c, d, e, f;
      c = this;
      d = c.p.$get();
      a = $imul(a, (2));
      b = $imul(b, (2));
      return ((a < 0 || a >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + a]) < ((b < 0 || b >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + b]) || (((a < 0 || a >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + a]) === ((b < 0 || b >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + b])) && (e = a + 1 >> 0, ((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e])) > (f = b + 1 >> 0, ((f < 0 || f >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + f]));
    };
    AM.prototype.Less = function(a, b) {
      return this.$val.Less(a, b);
    };
    AM.ptr.prototype.Len = function() {
      var a, b;
      a = this;
      return (b = a.p.$get().$length / 2, (b === b && b !== 1 / 0 && b !== -1 / 0) ? b >> 0 : $throwRuntimeError("integer divide by zero"));
    };
    AM.prototype.Len = function() {
      return this.$val.Len();
    };
    AM.ptr.prototype.Swap = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l;
      c = this;
      d = c.p.$get();
      a = $imul(a, (2));
      b = $imul(b, (2));
      e = ((b < 0 || b >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + b]);
      f = (g = b + 1 >> 0, ((g < 0 || g >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + g]));
      h = ((a < 0 || a >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + a]);
      i = (j = a + 1 >> 0, ((j < 0 || j >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + j]));
      ((a < 0 || a >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + a] = e);
      (k = a + 1 >> 0, ((k < 0 || k >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + k] = f));
      ((b < 0 || b >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + b] = h);
      (l = b + 1 >> 0, ((l < 0 || l >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + l] = i));
    };
    AM.prototype.Swap = function(a, b) {
      return this.$val.Swap(a, b);
    };
    AN = function(a) {
      var a, b, c, d;
      while (true) {
        if (!(!(a === ""))) {
          break;
        }
        b = E.DecodeRuneInString(a);
        c = b[0];
        d = b[1];
        if ((c === 65533) && (d === 1)) {
          return new M.ptr("invalid UTF-8", a);
        }
        a = $substring(a, d);
      }
      return $ifaceNil;
    };
    AO = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l;
      b = 0;
      c = "";
      d = $ifaceNil;
      e = E.DecodeRuneInString(a);
      b = e[0];
      f = e[1];
      if ((b === 65533) && (f === 1)) {
        g = 0;
        h = "";
        i = new M.ptr("invalid UTF-8", a);
        b = g;
        c = h;
        d = i;
        return [b, c, d];
      }
      j = b;
      k = $substring(a, f);
      l = $ifaceNil;
      b = j;
      c = k;
      d = l;
      return [b, c, d];
    };
    AP = function(a) {
      var a;
      return 48 <= a && a <= 57 || 65 <= a && a <= 90 || 97 <= a && a <= 122;
    };
    AQ = function(a) {
      var a;
      if (48 <= a && a <= 57) {
        return a - 48 >> 0;
      }
      if (97 <= a && a <= 102) {
        return (a - 97 >> 0) + 10 >> 0;
      }
      if (65 <= a && a <= 70) {
        return (a - 65 >> 0) + 10 >> 0;
      }
      return -1;
    };
    BL.prototype.String = function() {
      var a;
      a = this.$val;
      if (((a >>> 0)) >= ((BM.$length >>> 0))) {
        return "";
      }
      return ((a < 0 || a >= BM.$length) ? ($throwRuntimeError("index out of range"), undefined) : BM.$array[BM.$offset + a]);
    };
    $ptrType(BL).prototype.String = function() {
      return new BL(this.$get()).String();
    };
    BO = function(a, b) {
      var a, b, c, d;
      c = 32;
      d = 0;
      if (BP(a)) {
        d = 1;
      } else if ((a === 10)) {
        c = (c | (1)) >>> 0;
      } else if (a < 0) {
        c = (c | (5)) >>> 0;
      }
      if (BP(b)) {
        d = (d ^ (1)) << 24 >>> 24;
      } else if ((b === 10)) {
        c = (c | (2)) >>> 0;
      } else if (b < 0) {
        c = (c | (10)) >>> 0;
      }
      if (!((d === 0))) {
        c = (c ^ (48)) << 24 >>> 24;
      }
      return c;
    };
    $pkg.EmptyOpContext = BO;
    BP = function(a) {
      var a;
      return 65 <= a && a <= 90 || 97 <= a && a <= 122 || 48 <= a && a <= 57 || (a === 95);
    };
    $pkg.IsWordChar = BP;
    BK.ptr.prototype.String = function() {
      var a, b;
      a = this;
      b = new D.Builder.ptr(CM.nil, CN.nil);
      BS(b, a);
      return b.String();
    };
    BK.prototype.String = function() {
      return this.$val.String();
    };
    BK.ptr.prototype.skipNop = function(a) {
      var a, b, c, d, e, f;
      b = this;
      d = (c = b.Inst, ((a < 0 || a >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + a]));
      while (true) {
        if (!((d.Op === 6) || (d.Op === 2))) {
          break;
        }
        d = (e = b.Inst, f = d.Out, ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]));
      }
      return d;
    };
    BK.prototype.skipNop = function(a) {
      return this.$val.skipNop(a);
    };
    BQ.ptr.prototype.op = function() {
      var a, b, c;
      a = this;
      b = a.Op;
      c = b;
      if ((c === (8)) || (c === (9)) || (c === (10))) {
        b = 7;
      }
      return b;
    };
    BQ.prototype.op = function() {
      return this.$val.op();
    };
    BK.ptr.prototype.Prefix = function() {
      var a, b, c, d, e, f, g, h, i, j;
      a = "";
      b = false;
      c = this;
      d = c.skipNop(((c.Start >>> 0)));
      if (!((d.op() === 7)) || !((d.Rune.$length === 1))) {
        e = "";
        f = d.Op === 4;
        a = e;
        b = f;
        return [a, b];
      }
      g = new D.Builder.ptr(CM.nil, CN.nil);
      while (true) {
        if (!((d.op() === 7) && (d.Rune.$length === 1) && (((((d.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) {
          break;
        }
        g.WriteRune((h = d.Rune, (0 >= h.$length ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + 0])));
        d = c.skipNop(d.Out);
      }
      i = g.String();
      j = d.Op === 4;
      a = i;
      b = j;
      return [a, b];
    };
    BK.prototype.Prefix = function() {
      return this.$val.Prefix();
    };
    BK.ptr.prototype.StartCond = function() {
      var a, b, c, d, e, f, g;
      a = this;
      b = 0;
      c = ((a.Start >>> 0));
      e = (d = a.Inst, ((c < 0 || c >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + c]));
      Loop: while (true) {
        f = e.Op;
        if (f === (3)) {
          b = (b | (((e.Arg << 24 >>> 24)))) >>> 0;
        } else if (f === (5)) {
          return 255;
        } else if ((f === (2)) || (f === (6))) {} else {
          break Loop;
        }
        c = e.Out;
        e = (g = a.Inst, ((c < 0 || c >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + c]));
      }
      return b;
    };
    BK.prototype.StartCond = function() {
      return this.$val.StartCond();
    };
    BQ.ptr.prototype.MatchRune = function(a) {
      var a, b;
      b = this;
      return !((b.MatchRunePos(a) === -1));
    };
    BQ.prototype.MatchRune = function(a) {
      return this.$val.MatchRune(a);
    };
    BQ.ptr.prototype.MatchRunePos = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p;
      b = this;
      c = b.Rune;
      if (c.$length === 1) {
        d = (0 >= c.$length ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + 0]);
        if (a === d) {
          return 0;
        }
        if (!((((((b.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) {
          e = A.SimpleFold(d);
          while (true) {
            if (!(!((e === d)))) {
              break;
            }
            if (a === e) {
              return 0;
            }
            e = A.SimpleFold(e);
          }
        }
        return -1;
      }
      f = 0;
      while (true) {
        if (!(f < c.$length && f <= 8)) {
          break;
        }
        if (a < ((f < 0 || f >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + f])) {
          return -1;
        }
        if (a <= (g = f + 1 >> 0, ((g < 0 || g >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + g]))) {
          return (h = f / 2, (h === h && h !== 1 / 0 && h !== -1 / 0) ? h >> 0 : $throwRuntimeError("integer divide by zero"));
        }
        f = f + (2) >> 0;
      }
      i = 0;
      k = (j = c.$length / 2, (j === j && j !== 1 / 0 && j !== -1 / 0) ? j >> 0 : $throwRuntimeError("integer divide by zero"));
      while (true) {
        if (!(i < k)) {
          break;
        }
        m = i + (l = ((k - i >> 0)) / 2, (l === l && l !== 1 / 0 && l !== -1 / 0) ? l >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
        o = (n = $imul(2, m), ((n < 0 || n >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + n]));
        if (o <= a) {
          if (a <= (p = ($imul(2, m)) + 1 >> 0, ((p < 0 || p >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + p]))) {
            return m;
          }
          i = m + 1 >> 0;
        } else {
          k = m;
        }
      }
      return -1;
    };
    BQ.prototype.MatchRunePos = function(a) {
      return this.$val.MatchRunePos(a);
    };
    BQ.ptr.prototype.MatchEmptyWidth = function(a, b) {
      var a, b, c, d;
      c = this;
      d = ((c.Arg << 24 >>> 24));
      if (d === (1)) {
        return (a === 10) || (a === -1);
      } else if (d === (2)) {
        return (b === 10) || (b === -1);
      } else if (d === (4)) {
        return a === -1;
      } else if (d === (8)) {
        return b === -1;
      } else if (d === (16)) {
        return !(BP(a) === BP(b));
      } else if (d === (32)) {
        return BP(a) === BP(b);
      }
      $panic(new $String("unknown empty width arg"));
    };
    BQ.prototype.MatchEmptyWidth = function(a, b) {
      return this.$val.MatchEmptyWidth(a, b);
    };
    BQ.ptr.prototype.String = function() {
      var a, b;
      a = this;
      b = new D.Builder.ptr(CM.nil, CN.nil);
      BU(b, a);
      return b.String();
    };
    BQ.prototype.String = function() {
      return this.$val.String();
    };
    BR = function(a, b) {
      var a, b, c, d, e;
      c = b;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]);
        a.WriteString(e);
        d++;
      }
    };
    BS = function(a, b) {
      var a, b, c, d, e, f, g, h;
      c = b.Inst;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = d;
        g = (f = b.Inst, ((e < 0 || e >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + e]));
        h = B.Itoa(e);
        if (h.length < 3) {
          a.WriteString($substring("   ", h.length));
        }
        if (e === b.Start) {
          h = h + ("*");
        }
        BR(a, new CD([h, "\t"]));
        BU(a, g);
        BR(a, new CD(["\n"]));
        d++;
      }
    };
    BT = function(a) {
      var a;
      return B.FormatUint((new $Uint64(0, a)), 10);
    };
    BU = function(a, b) {
      var a, b, c;
      c = b.Op;
      if (c === (0)) {
        BR(a, new CD(["alt -> ", BT(b.Out), ", ", BT(b.Arg)]));
      } else if (c === (1)) {
        BR(a, new CD(["altmatch -> ", BT(b.Out), ", ", BT(b.Arg)]));
      } else if (c === (2)) {
        BR(a, new CD(["cap ", BT(b.Arg), " -> ", BT(b.Out)]));
      } else if (c === (3)) {
        BR(a, new CD(["empty ", BT(b.Arg), " -> ", BT(b.Out)]));
      } else if (c === (4)) {
        BR(a, new CD(["match"]));
      } else if (c === (5)) {
        BR(a, new CD(["fail"]));
      } else if (c === (6)) {
        BR(a, new CD(["nop -> ", BT(b.Out)]));
      } else if (c === (7)) {
        if (b.Rune === CA.nil) {
          BR(a, new CD(["rune <nil>"]));
        }
        BR(a, new CD(["rune ", B.QuoteToASCII(($runesToString(b.Rune)))]));
        if (!((((((b.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) {
          BR(a, new CD(["/i"]));
        }
        BR(a, new CD([" -> ", BT(b.Out)]));
      } else if (c === (8)) {
        BR(a, new CD(["rune1 ", B.QuoteToASCII(($runesToString(b.Rune))), " -> ", BT(b.Out)]));
      } else if (c === (9)) {
        BR(a, new CD(["any -> ", BT(b.Out)]));
      } else if (c === (10)) {
        BR(a, new CD(["anynotnl -> ", BT(b.Out)]));
      }
    };
    BV.ptr.prototype.Equal = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s;
      b = this;
      if (b === CG.nil || a === CG.nil) {
        return b === a;
      }
      if (!((b.Op === a.Op))) {
        return false;
      }
      c = b.Op;
      if (c === (10)) {
        if (!((((b.Flags & 256) >>> 0) === ((a.Flags & 256) >>> 0)))) {
          return false;
        }
      } else if ((c === (3)) || (c === (4))) {
        if (!((b.Rune.$length === a.Rune.$length))) {
          return false;
        }
        d = b.Rune;
        e = 0;
        while (true) {
          if (!(e < d.$length)) {
            break;
          }
          f = e;
          g = ((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e]);
          if (!((g === (h = a.Rune, ((f < 0 || f >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + f]))))) {
            return false;
          }
          e++;
        }
      } else if ((c === (19)) || (c === (18))) {
        if (!((b.Sub.$length === a.Sub.$length))) {
          return false;
        }
        i = b.Sub;
        j = 0;
        while (true) {
          if (!(j < i.$length)) {
            break;
          }
          k = j;
          l = ((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j]);
          if (!l.Equal((m = a.Sub, ((k < 0 || k >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + k])))) {
            return false;
          }
          j++;
        }
      } else if ((c === (14)) || (c === (15)) || (c === (16))) {
        if (!((((b.Flags & 32) >>> 0) === ((a.Flags & 32) >>> 0))) || !(n = b.Sub, (0 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 0])).Equal((o = a.Sub, (0 >= o.$length ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + 0])))) {
          return false;
        }
      } else if (c === (17)) {
        if (!((((b.Flags & 32) >>> 0) === ((a.Flags & 32) >>> 0))) || !((b.Min === a.Min)) || !((b.Max === a.Max)) || !(p = b.Sub, (0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0])).Equal((q = a.Sub, (0 >= q.$length ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + 0])))) {
          return false;
        }
      } else if (c === (13)) {
        if (!((b.Cap === a.Cap)) || !(b.Name === a.Name) || !(r = b.Sub, (0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0])).Equal((s = a.Sub, (0 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 0])))) {
          return false;
        }
      }
      return true;
    };
    BV.prototype.Equal = function(a) {
      return this.$val.Equal(a);
    };
    BX = function(a, b) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      switch (0) {
        default:
          c = b.Op;
          if (c === (1)) {
            a.WriteString("[^\\x00-\\x{10FFFF}]");
          } else if (c === (2)) {
            a.WriteString("(?:)");
          } else if (c === (3)) {
            if (!((((b.Flags & 1) >>> 0) === 0))) {
              a.WriteString("(?i:");
            }
            d = b.Rune;
            e = 0;
            while (true) {
              if (!(e < d.$length)) {
                break;
              }
              f = ((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e]);
              BY(a, f, false);
              e++;
            }
            if (!((((b.Flags & 1) >>> 0) === 0))) {
              a.WriteString(")");
            }
          } else if (c === (4)) {
            if (!(((g = b.Rune.$length % 2, g === g ? g : $throwRuntimeError("integer divide by zero")) === 0))) {
              a.WriteString("[invalid char class]");
              break;
            }
            a.WriteRune(91);
            if (b.Rune.$length === 0) {
              a.WriteString("^\\x00-\\x{10FFFF}");
            } else if (((h = b.Rune, (0 >= h.$length ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + 0])) === 0) && ((i = b.Rune, j = b.Rune.$length - 1 >> 0, ((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j])) === 1114111)) {
              a.WriteRune(94);
              k = 1;
              while (true) {
                if (!(k < (b.Rune.$length - 1 >> 0))) {
                  break;
                }
                l = (m = b.Rune, ((k < 0 || k >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + k])) + 1 >> 0;
                n = (o = b.Rune, p = k + 1 >> 0, ((p < 0 || p >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + p])) - 1 >> 0;
                q = l;
                r = n;
                BY(a, q, q === 45);
                if (!((q === r))) {
                  a.WriteRune(45);
                  BY(a, r, r === 45);
                }
                k = k + (2) >> 0;
              }
            } else {
              s = 0;
              while (true) {
                if (!(s < b.Rune.$length)) {
                  break;
                }
                t = (u = b.Rune, ((s < 0 || s >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + s]));
                v = (w = b.Rune, x = s + 1 >> 0, ((x < 0 || x >= w.$length) ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + x]));
                y = t;
                z = v;
                BY(a, y, y === 45);
                if (!((y === z))) {
                  a.WriteRune(45);
                  BY(a, z, z === 45);
                }
                s = s + (2) >> 0;
              }
            }
            a.WriteRune(93);
          } else if (c === (5)) {
            a.WriteString("(?-s:.)");
          } else if (c === (6)) {
            a.WriteString("(?s:.)");
          } else if (c === (7)) {
            a.WriteString("(?m:^)");
          } else if (c === (8)) {
            a.WriteString("(?m:$)");
          } else if (c === (9)) {
            a.WriteString("\\A");
          } else if (c === (10)) {
            if (!((((b.Flags & 256) >>> 0) === 0))) {
              a.WriteString("(?-m:$)");
            } else {
              a.WriteString("\\z");
            }
          } else if (c === (11)) {
            a.WriteString("\\b");
          } else if (c === (12)) {
            a.WriteString("\\B");
          } else if (c === (13)) {
            if (!(b.Name === "")) {
              a.WriteString("(?P<");
              a.WriteString(b.Name);
              a.WriteRune(62);
            } else {
              a.WriteRune(40);
            }
            if (!(((aa = b.Sub, (0 >= aa.$length ? ($throwRuntimeError("index out of range"), undefined) : aa.$array[aa.$offset + 0])).Op === 2))) {
              BX(a, (ab = b.Sub, (0 >= ab.$length ? ($throwRuntimeError("index out of range"), undefined) : ab.$array[ab.$offset + 0])));
            }
            a.WriteRune(41);
          } else if ((c === (14)) || (c === (15)) || (c === (16)) || (c === (17))) {
            ad = (ac = b.Sub, (0 >= ac.$length ? ($throwRuntimeError("index out of range"), undefined) : ac.$array[ac.$offset + 0]));
            if (ad.Op > 13 || (ad.Op === 3) && ad.Rune.$length > 1) {
              a.WriteString("(?:");
              BX(a, ad);
              a.WriteString(")");
            } else {
              BX(a, ad);
            }
            ae = b.Op;
            if (ae === (14)) {
              a.WriteRune(42);
            } else if (ae === (15)) {
              a.WriteRune(43);
            } else if (ae === (16)) {
              a.WriteRune(63);
            } else if (ae === (17)) {
              a.WriteRune(123);
              a.WriteString(B.Itoa(b.Min));
              if (!((b.Max === b.Min))) {
                a.WriteRune(44);
                if (b.Max >= 0) {
                  a.WriteString(B.Itoa(b.Max));
                }
              }
              a.WriteRune(125);
            }
            if (!((((b.Flags & 32) >>> 0) === 0))) {
              a.WriteRune(63);
            }
          } else if (c === (18)) {
            af = b.Sub;
            ag = 0;
            while (true) {
              if (!(ag < af.$length)) {
                break;
              }
              ah = ((ag < 0 || ag >= af.$length) ? ($throwRuntimeError("index out of range"), undefined) : af.$array[af.$offset + ag]);
              if (ah.Op === 19) {
                a.WriteString("(?:");
                BX(a, ah);
                a.WriteString(")");
              } else {
                BX(a, ah);
              }
              ag++;
            }
          } else if (c === (19)) {
            ai = b.Sub;
            aj = 0;
            while (true) {
              if (!(aj < ai.$length)) {
                break;
              }
              ak = aj;
              al = ((aj < 0 || aj >= ai.$length) ? ($throwRuntimeError("index out of range"), undefined) : ai.$array[ai.$offset + aj]);
              if (ak > 0) {
                a.WriteRune(124);
              }
              BX(a, al);
              aj++;
            }
          } else {
            a.WriteString("<invalid op" + B.Itoa(((b.Op >> 0))) + ">");
          }
      }
    };
    BV.ptr.prototype.String = function() {
      var a, b;
      a = this;
      b = new D.Builder.ptr(CM.nil, CN.nil);
      BX(b, a);
      return b.String();
    };
    BV.prototype.String = function() {
      return this.$val.String();
    };
    BY = function(a, b, c) {
      var a, b, c, d, e;
      if (A.IsPrint(b)) {
        if (D.ContainsRune("\\.+*?()|[]{}^$", b) || c) {
          a.WriteRune(92);
        }
        a.WriteRune(b);
        return;
      }
      switch (0) {
        default:
          d = b;
          if (d === (7)) {
            a.WriteString("\\a");
          } else if (d === (12)) {
            a.WriteString("\\f");
          } else if (d === (10)) {
            a.WriteString("\\n");
          } else if (d === (13)) {
            a.WriteString("\\r");
          } else if (d === (9)) {
            a.WriteString("\\t");
          } else if (d === (11)) {
            a.WriteString("\\v");
          } else {
            if (b < 256) {
              a.WriteString("\\x");
              e = B.FormatInt((new $Int64(0, b)), 16);
              if (e.length === 1) {
                a.WriteRune(48);
              }
              a.WriteString(e);
              break;
            }
            a.WriteString("\\x{");
            a.WriteString(B.FormatInt((new $Int64(0, b)), 16));
            a.WriteString("}");
          }
      }
    };
    BV.ptr.prototype.MaxCap = function() {
      var a, b, c, d, e, f;
      a = this;
      b = 0;
      if (a.Op === 13) {
        b = a.Cap;
      }
      c = a.Sub;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]);
        f = e.MaxCap();
        if (b < f) {
          b = f;
        }
        d++;
      }
      return b;
    };
    BV.prototype.MaxCap = function() {
      return this.$val.MaxCap();
    };
    BV.ptr.prototype.CapNames = function() {
      var a, b;
      a = this;
      b = $makeSlice(CD, (a.MaxCap() + 1 >> 0));
      a.capNames(b);
      return b;
    };
    BV.prototype.CapNames = function() {
      return this.$val.CapNames();
    };
    BV.ptr.prototype.capNames = function(a) {
      var a, b, c, d, e, f;
      b = this;
      if (b.Op === 13) {
        (c = b.Cap, ((c < 0 || c >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + c] = b.Name));
      }
      d = b.Sub;
      e = 0;
      while (true) {
        if (!(e < d.$length)) {
          break;
        }
        f = ((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e]);
        f.capNames(a);
        e++;
      }
    };
    BV.prototype.capNames = function(a) {
      return this.$val.capNames(a);
    };
    BV.ptr.prototype.Simplify = function() {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s;
      a = this;
      if (a === CG.nil) {
        return CG.nil;
      }
      b = a.Op;
      if ((b === (13)) || (b === (18)) || (b === (19))) {
        c = a;
        d = a.Sub;
        e = 0;
        while (true) {
          if (!(e < d.$length)) {
            break;
          }
          f = e;
          g = ((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e]);
          h = g.Simplify();
          if (c === a && !(h === g)) {
            c = new BV.ptr(0, 0, CH.nil, CI.zero(), CA.nil, CJ.zero(), 0, 0, 0, "");
            BV.copy(c, a);
            c.Rune = CA.nil;
            c.Sub = $appendSlice($subslice(new CH(c.Sub0), 0, 0), $subslice(a.Sub, 0, f));
          }
          if (!(c === a)) {
            c.Sub = $append(c.Sub, h);
          }
          e++;
        }
        return c;
      } else if ((b === (14)) || (b === (15)) || (b === (16))) {
        j = (i = a.Sub, (0 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 0])).Simplify();
        return BZ(a.Op, a.Flags, j, a);
      } else if (b === (17)) {
        if ((a.Min === 0) && (a.Max === 0)) {
          return new BV.ptr(2, 0, CH.nil, CI.zero(), CA.nil, CJ.zero(), 0, 0, 0, "");
        }
        l = (k = a.Sub, (0 >= k.$length ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + 0])).Simplify();
        if (a.Max === -1) {
          if (a.Min === 0) {
            return BZ(14, a.Flags, l, CG.nil);
          }
          if (a.Min === 1) {
            return BZ(15, a.Flags, l, CG.nil);
          }
          m = new BV.ptr(18, 0, CH.nil, CI.zero(), CA.nil, CJ.zero(), 0, 0, 0, "");
          m.Sub = $subslice(new CH(m.Sub0), 0, 0);
          n = 0;
          while (true) {
            if (!(n < (a.Min - 1 >> 0))) {
              break;
            }
            m.Sub = $append(m.Sub, l);
            n = n + (1) >> 0;
          }
          m.Sub = $append(m.Sub, BZ(15, a.Flags, l, CG.nil));
          return m;
        }
        if ((a.Min === 1) && (a.Max === 1)) {
          return l;
        }
        o = CG.nil;
        if (a.Min > 0) {
          o = new BV.ptr(18, 0, CH.nil, CI.zero(), CA.nil, CJ.zero(), 0, 0, 0, "");
          o.Sub = $subslice(new CH(o.Sub0), 0, 0);
          p = 0;
          while (true) {
            if (!(p < a.Min)) {
              break;
            }
            o.Sub = $append(o.Sub, l);
            p = p + (1) >> 0;
          }
        }
        if (a.Max > a.Min) {
          q = BZ(16, a.Flags, l, CG.nil);
          r = a.Min + 1 >> 0;
          while (true) {
            if (!(r < a.Max)) {
              break;
            }
            s = new BV.ptr(18, 0, CH.nil, CI.zero(), CA.nil, CJ.zero(), 0, 0, 0, "");
            s.Sub = $append($subslice(new CH(s.Sub0), 0, 0), l, q);
            q = BZ(16, a.Flags, s, CG.nil);
            r = r + (1) >> 0;
          }
          if (o === CG.nil) {
            return q;
          }
          o.Sub = $append(o.Sub, q);
        }
        if (!(o === CG.nil)) {
          return o;
        }
        return new BV.ptr(1, 0, CH.nil, CI.zero(), CA.nil, CJ.zero(), 0, 0, 0, "");
      }
      return a;
    };
    BV.prototype.Simplify = function() {
      return this.$val.Simplify();
    };
    BZ = function(a, b, c, d) {
      var a, b, c, d, e;
      if (c.Op === 2) {
        return c;
      }
      if ((a === c.Op) && (((b & 32) >>> 0) === ((c.Flags & 32) >>> 0))) {
        return c;
      }
      if (!(d === CG.nil) && (d.Op === a) && (((d.Flags & 32) >>> 0) === ((b & 32) >>> 0)) && c === (e = d.Sub, (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]))) {
        return d;
      }
      d = new BV.ptr(a, b, CH.nil, CI.zero(), CA.nil, CJ.zero(), 0, 0, 0, "");
      d.Sub = $append($subslice(new CH(d.Sub0), 0, 0), c);
      return d;
    };
    F.methods = [{
      prop: "next",
      name: "next",
      pkg: "regexp/syntax",
      typ: $funcType([CE], [F], false)
    }, {
      prop: "patch",
      name: "patch",
      pkg: "regexp/syntax",
      typ: $funcType([CE, $Uint32], [], false)
    }, {
      prop: "append",
      name: "append",
      pkg: "regexp/syntax",
      typ: $funcType([CE, F], [F], false)
    }];
    CO.methods = [{
      prop: "init",
      name: "init",
      pkg: "regexp/syntax",
      typ: $funcType([], [], false)
    }, {
      prop: "compile",
      name: "compile",
      pkg: "regexp/syntax",
      typ: $funcType([CG], [G], false)
    }, {
      prop: "inst",
      name: "inst",
      pkg: "regexp/syntax",
      typ: $funcType([BL], [G], false)
    }, {
      prop: "nop",
      name: "nop",
      pkg: "regexp/syntax",
      typ: $funcType([], [G], false)
    }, {
      prop: "fail",
      name: "fail",
      pkg: "regexp/syntax",
      typ: $funcType([], [G], false)
    }, {
      prop: "cap",
      name: "cap",
      pkg: "regexp/syntax",
      typ: $funcType([$Uint32], [G], false)
    }, {
      prop: "cat",
      name: "cat",
      pkg: "regexp/syntax",
      typ: $funcType([G, G], [G], false)
    }, {
      prop: "alt",
      name: "alt",
      pkg: "regexp/syntax",
      typ: $funcType([G, G], [G], false)
    }, {
      prop: "quest",
      name: "quest",
      pkg: "regexp/syntax",
      typ: $funcType([G, $Bool], [G], false)
    }, {
      prop: "star",
      name: "star",
      pkg: "regexp/syntax",
      typ: $funcType([G, $Bool], [G], false)
    }, {
      prop: "plus",
      name: "plus",
      pkg: "regexp/syntax",
      typ: $funcType([G, $Bool], [G], false)
    }, {
      prop: "empty",
      name: "empty",
      pkg: "regexp/syntax",
      typ: $funcType([BN], [G], false)
    }, {
      prop: "rune",
      name: "rune",
      pkg: "regexp/syntax",
      typ: $funcType([CA, O], [G], false)
    }];
    CP.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    N.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    CQ.methods = [{
      prop: "newRegexp",
      name: "newRegexp",
      pkg: "regexp/syntax",
      typ: $funcType([BW], [CG], false)
    }, {
      prop: "reuse",
      name: "reuse",
      pkg: "regexp/syntax",
      typ: $funcType([CG], [], false)
    }, {
      prop: "push",
      name: "push",
      pkg: "regexp/syntax",
      typ: $funcType([CG], [CG], false)
    }, {
      prop: "maybeConcat",
      name: "maybeConcat",
      pkg: "regexp/syntax",
      typ: $funcType([$Int32, O], [$Bool], false)
    }, {
      prop: "newLiteral",
      name: "newLiteral",
      pkg: "regexp/syntax",
      typ: $funcType([$Int32, O], [CG], false)
    }, {
      prop: "literal",
      name: "literal",
      pkg: "regexp/syntax",
      typ: $funcType([$Int32], [], false)
    }, {
      prop: "op",
      name: "op",
      pkg: "regexp/syntax",
      typ: $funcType([BW], [CG], false)
    }, {
      prop: "repeat",
      name: "repeat",
      pkg: "regexp/syntax",
      typ: $funcType([BW, $Int, $Int, $String, $String, $String], [$String, $error], false)
    }, {
      prop: "concat",
      name: "concat",
      pkg: "regexp/syntax",
      typ: $funcType([], [CG], false)
    }, {
      prop: "alternate",
      name: "alternate",
      pkg: "regexp/syntax",
      typ: $funcType([], [CG], false)
    }, {
      prop: "collapse",
      name: "collapse",
      pkg: "regexp/syntax",
      typ: $funcType([CH, BW], [CG], false)
    }, {
      prop: "factor",
      name: "factor",
      pkg: "regexp/syntax",
      typ: $funcType([CH], [CH], false)
    }, {
      prop: "leadingString",
      name: "leadingString",
      pkg: "regexp/syntax",
      typ: $funcType([CG], [CA, O], false)
    }, {
      prop: "removeLeadingString",
      name: "removeLeadingString",
      pkg: "regexp/syntax",
      typ: $funcType([CG, $Int], [CG], false)
    }, {
      prop: "leadingRegexp",
      name: "leadingRegexp",
      pkg: "regexp/syntax",
      typ: $funcType([CG], [CG], false)
    }, {
      prop: "removeLeadingRegexp",
      name: "removeLeadingRegexp",
      pkg: "regexp/syntax",
      typ: $funcType([CG, $Bool], [CG], false)
    }, {
      prop: "parseRepeat",
      name: "parseRepeat",
      pkg: "regexp/syntax",
      typ: $funcType([$String], [$Int, $Int, $String, $Bool], false)
    }, {
      prop: "parsePerlFlags",
      name: "parsePerlFlags",
      pkg: "regexp/syntax",
      typ: $funcType([$String], [$String, $error], false)
    }, {
      prop: "parseInt",
      name: "parseInt",
      pkg: "regexp/syntax",
      typ: $funcType([$String], [$Int, $String, $Bool], false)
    }, {
      prop: "parseVerticalBar",
      name: "parseVerticalBar",
      pkg: "regexp/syntax",
      typ: $funcType([], [$error], false)
    }, {
      prop: "swapVerticalBar",
      name: "swapVerticalBar",
      pkg: "regexp/syntax",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "parseRightParen",
      name: "parseRightParen",
      pkg: "regexp/syntax",
      typ: $funcType([], [$error], false)
    }, {
      prop: "parseEscape",
      name: "parseEscape",
      pkg: "regexp/syntax",
      typ: $funcType([$String], [$Int32, $String, $error], false)
    }, {
      prop: "parseClassChar",
      name: "parseClassChar",
      pkg: "regexp/syntax",
      typ: $funcType([$String, $String], [$Int32, $String, $error], false)
    }, {
      prop: "parsePerlClassEscape",
      name: "parsePerlClassEscape",
      pkg: "regexp/syntax",
      typ: $funcType([$String, CA], [CA, $String], false)
    }, {
      prop: "parseNamedClass",
      name: "parseNamedClass",
      pkg: "regexp/syntax",
      typ: $funcType([$String, CA], [CA, $String, $error], false)
    }, {
      prop: "appendGroup",
      name: "appendGroup",
      pkg: "regexp/syntax",
      typ: $funcType([CA, Z], [CA], false)
    }, {
      prop: "parseUnicodeClass",
      name: "parseUnicodeClass",
      pkg: "regexp/syntax",
      typ: $funcType([$String, CA], [CA, $String, $error], false)
    }, {
      prop: "parseClass",
      name: "parseClass",
      pkg: "regexp/syntax",
      typ: $funcType([$String], [$String, $error], false)
    }];
    AM.methods = [{
      prop: "Less",
      name: "Less",
      pkg: "",
      typ: $funcType([$Int, $Int], [$Bool], false)
    }, {
      prop: "Len",
      name: "Len",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Swap",
      name: "Swap",
      pkg: "",
      typ: $funcType([$Int, $Int], [], false)
    }];
    CE.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "skipNop",
      name: "skipNop",
      pkg: "regexp/syntax",
      typ: $funcType([$Uint32], [CR], false)
    }, {
      prop: "Prefix",
      name: "Prefix",
      pkg: "",
      typ: $funcType([], [$String, $Bool], false)
    }, {
      prop: "StartCond",
      name: "StartCond",
      pkg: "",
      typ: $funcType([], [BN], false)
    }];
    BL.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    CR.methods = [{
      prop: "op",
      name: "op",
      pkg: "regexp/syntax",
      typ: $funcType([], [BL], false)
    }, {
      prop: "MatchRune",
      name: "MatchRune",
      pkg: "",
      typ: $funcType([$Int32], [$Bool], false)
    }, {
      prop: "MatchRunePos",
      name: "MatchRunePos",
      pkg: "",
      typ: $funcType([$Int32], [$Int], false)
    }, {
      prop: "MatchEmptyWidth",
      name: "MatchEmptyWidth",
      pkg: "",
      typ: $funcType([$Int32, $Int32], [$Bool], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    CG.methods = [{
      prop: "Equal",
      name: "Equal",
      pkg: "",
      typ: $funcType([CG], [$Bool], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "MaxCap",
      name: "MaxCap",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "CapNames",
      name: "CapNames",
      pkg: "",
      typ: $funcType([], [CD], false)
    }, {
      prop: "capNames",
      name: "capNames",
      pkg: "regexp/syntax",
      typ: $funcType([CD], [], false)
    }, {
      prop: "Simplify",
      name: "Simplify",
      pkg: "",
      typ: $funcType([], [CG], false)
    }];
    BW.methods = [{
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    G.init("regexp/syntax", [{
      prop: "i",
      name: "i",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "out",
      name: "out",
      embedded: false,
      exported: false,
      typ: F,
      tag: ""
    }]);
    H.init("regexp/syntax", [{
      prop: "p",
      name: "p",
      embedded: false,
      exported: false,
      typ: CE,
      tag: ""
    }]);
    M.init("", [{
      prop: "Code",
      name: "Code",
      embedded: false,
      exported: true,
      typ: N,
      tag: ""
    }, {
      prop: "Expr",
      name: "Expr",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }]);
    P.init("regexp/syntax", [{
      prop: "flags",
      name: "flags",
      embedded: false,
      exported: false,
      typ: O,
      tag: ""
    }, {
      prop: "stack",
      name: "stack",
      embedded: false,
      exported: false,
      typ: CH,
      tag: ""
    }, {
      prop: "free",
      name: "free",
      embedded: false,
      exported: false,
      typ: CG,
      tag: ""
    }, {
      prop: "numCap",
      name: "numCap",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "wholeRegexp",
      name: "wholeRegexp",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "tmpClass",
      name: "tmpClass",
      embedded: false,
      exported: false,
      typ: CA,
      tag: ""
    }]);
    Z.init("regexp/syntax", [{
      prop: "sign",
      name: "sign",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "class$1",
      name: "class",
      embedded: false,
      exported: false,
      typ: CA,
      tag: ""
    }]);
    AM.init("regexp/syntax", [{
      prop: "p",
      name: "p",
      embedded: false,
      exported: false,
      typ: CK,
      tag: ""
    }]);
    BK.init("", [{
      prop: "Inst",
      name: "Inst",
      embedded: false,
      exported: true,
      typ: CF,
      tag: ""
    }, {
      prop: "Start",
      name: "Start",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: ""
    }, {
      prop: "NumCap",
      name: "NumCap",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: ""
    }]);
    BQ.init("", [{
      prop: "Op",
      name: "Op",
      embedded: false,
      exported: true,
      typ: BL,
      tag: ""
    }, {
      prop: "Out",
      name: "Out",
      embedded: false,
      exported: true,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "Arg",
      name: "Arg",
      embedded: false,
      exported: true,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "Rune",
      name: "Rune",
      embedded: false,
      exported: true,
      typ: CA,
      tag: ""
    }]);
    BV.init("", [{
      prop: "Op",
      name: "Op",
      embedded: false,
      exported: true,
      typ: BW,
      tag: ""
    }, {
      prop: "Flags",
      name: "Flags",
      embedded: false,
      exported: true,
      typ: O,
      tag: ""
    }, {
      prop: "Sub",
      name: "Sub",
      embedded: false,
      exported: true,
      typ: CH,
      tag: ""
    }, {
      prop: "Sub0",
      name: "Sub0",
      embedded: false,
      exported: true,
      typ: CI,
      tag: ""
    }, {
      prop: "Rune",
      name: "Rune",
      embedded: false,
      exported: true,
      typ: CA,
      tag: ""
    }, {
      prop: "Rune0",
      name: "Rune0",
      embedded: false,
      exported: true,
      typ: CJ,
      tag: ""
    }, {
      prop: "Min",
      name: "Min",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: ""
    }, {
      prop: "Max",
      name: "Max",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: ""
    }, {
      prop: "Cap",
      name: "Cap",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: ""
    }, {
      prop: "Name",
      name: "Name",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = C.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            J = new CA([0, 9, 11, 1114111]);
            K = new CA([0, 1114111]);
            L = $toNativeArray($kindUint8, [0, 7, 17, 24, 33, 45, 52, 61, 68, 77, 84, 96, 110, 117, 121, 125, 130, 136, 142, 151]);
            AA = new A.RangeTable.ptr(new CB([new A.Range16.ptr(0, 65535, 1)]), new CC([new A.Range32.ptr(65536, 1114111, 1)]), 0);
            AR = new CA([48, 57]);
            AS = new CA([9, 10, 12, 13, 32, 32]);
            AT = new CA([48, 57, 65, 90, 95, 95, 97, 122]);
            AU = $makeMap($String.keyFor, [{
              k: "\\d",
              v: new Z.ptr(1, AR)
            }, {
              k: "\\D",
              v: new Z.ptr(-1, AR)
            }, {
              k: "\\s",
              v: new Z.ptr(1, AS)
            }, {
              k: "\\S",
              v: new Z.ptr(-1, AS)
            }, {
              k: "\\w",
              v: new Z.ptr(1, AT)
            }, {
              k: "\\W",
              v: new Z.ptr(-1, AT)
            }]);
            AV = new CA([48, 57, 65, 90, 97, 122]);
            AW = new CA([65, 90, 97, 122]);
            AX = new CA([0, 127]);
            AY = new CA([9, 9, 32, 32]);
            AZ = new CA([0, 31, 127, 127]);
            BA = new CA([48, 57]);
            BB = new CA([33, 126]);
            BC = new CA([97, 122]);
            BD = new CA([32, 126]);
            BE = new CA([33, 47, 58, 64, 91, 96, 123, 126]);
            BF = new CA([9, 13, 32, 32]);
            BG = new CA([65, 90]);
            BH = new CA([48, 57, 65, 90, 95, 95, 97, 122]);
            BI = new CA([48, 57, 65, 70, 97, 102]);
            BJ = $makeMap($String.keyFor, [{
              k: "[:alnum:]",
              v: new Z.ptr(1, AV)
            }, {
              k: "[:^alnum:]",
              v: new Z.ptr(-1, AV)
            }, {
              k: "[:alpha:]",
              v: new Z.ptr(1, AW)
            }, {
              k: "[:^alpha:]",
              v: new Z.ptr(-1, AW)
            }, {
              k: "[:ascii:]",
              v: new Z.ptr(1, AX)
            }, {
              k: "[:^ascii:]",
              v: new Z.ptr(-1, AX)
            }, {
              k: "[:blank:]",
              v: new Z.ptr(1, AY)
            }, {
              k: "[:^blank:]",
              v: new Z.ptr(-1, AY)
            }, {
              k: "[:cntrl:]",
              v: new Z.ptr(1, AZ)
            }, {
              k: "[:^cntrl:]",
              v: new Z.ptr(-1, AZ)
            }, {
              k: "[:digit:]",
              v: new Z.ptr(1, BA)
            }, {
              k: "[:^digit:]",
              v: new Z.ptr(-1, BA)
            }, {
              k: "[:graph:]",
              v: new Z.ptr(1, BB)
            }, {
              k: "[:^graph:]",
              v: new Z.ptr(-1, BB)
            }, {
              k: "[:lower:]",
              v: new Z.ptr(1, BC)
            }, {
              k: "[:^lower:]",
              v: new Z.ptr(-1, BC)
            }, {
              k: "[:print:]",
              v: new Z.ptr(1, BD)
            }, {
              k: "[:^print:]",
              v: new Z.ptr(-1, BD)
            }, {
              k: "[:punct:]",
              v: new Z.ptr(1, BE)
            }, {
              k: "[:^punct:]",
              v: new Z.ptr(-1, BE)
            }, {
              k: "[:space:]",
              v: new Z.ptr(1, BF)
            }, {
              k: "[:^space:]",
              v: new Z.ptr(-1, BF)
            }, {
              k: "[:upper:]",
              v: new Z.ptr(1, BG)
            }, {
              k: "[:^upper:]",
              v: new Z.ptr(-1, BG)
            }, {
              k: "[:word:]",
              v: new Z.ptr(1, BH)
            }, {
              k: "[:^word:]",
              v: new Z.ptr(-1, BH)
            }, {
              k: "[:xdigit:]",
              v: new Z.ptr(1, BI)
            }, {
              k: "[:^xdigit:]",
              v: new Z.ptr(-1, BI)
            }]);
            BM = new CD(["InstAlt", "InstAltMatch", "InstCapture", "InstEmptyWidth", "InstMatch", "InstFail", "InstNop", "InstRune", "InstRune1", "InstRuneAny", "InstRuneAnyNotNL"]);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["regexp"] = (function() {
    var $pkg = {},
      $init, F, H, B, A, C, G, D, E, I, J, K, P, Q, R, S, V, W, AA, AH, AN, AO, AV, AW, AX, AY, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP, CQ, CR, CS, CT, CU, L, U, AC, AD, AI, AJ, AL, BC, M, N, O, T, X, Y, Z, AB, AE, AF, AG, AK, AM, AP, AR, AS, AU, BE, BG;
    F = $packages["bytes"];
    H = $packages["github.com/gopherjs/gopherjs/nosync"];
    B = $packages["io"];
    A = $packages["regexp/syntax"];
    C = $packages["sort"];
    G = $packages["strconv"];
    D = $packages["strings"];
    E = $packages["unicode"];
    I = $packages["unicode/utf8"];
    J = $pkg.job = $newType(0, $kindStruct, "regexp.job", true, "regexp", false, function(pc_, arg_, pos_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.pc = 0;
        this.arg = false;
        this.pos = 0;
        return;
      }
      this.pc = pc_;
      this.arg = arg_;
      this.pos = pos_;
    });
    K = $pkg.bitState = $newType(0, $kindStruct, "regexp.bitState", true, "regexp", false, function(prog_, end_, cap_, jobs_, visited_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.prog = BN.nil;
        this.end = 0;
        this.cap = BO.nil;
        this.jobs = BP.nil;
        this.visited = BL.nil;
        return;
      }
      this.prog = prog_;
      this.end = end_;
      this.cap = cap_;
      this.jobs = jobs_;
      this.visited = visited_;
    });
    P = $pkg.queue = $newType(0, $kindStruct, "regexp.queue", true, "regexp", false, function(sparse_, dense_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.sparse = BL.nil;
        this.dense = BR.nil;
        return;
      }
      this.sparse = sparse_;
      this.dense = dense_;
    });
    Q = $pkg.entry = $newType(0, $kindStruct, "regexp.entry", true, "regexp", false, function(pc_, t_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.pc = 0;
        this.t = BS.nil;
        return;
      }
      this.pc = pc_;
      this.t = t_;
    });
    R = $pkg.thread = $newType(0, $kindStruct, "regexp.thread", true, "regexp", false, function(inst_, cap_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.inst = BV.nil;
        this.cap = BO.nil;
        return;
      }
      this.inst = inst_;
      this.cap = cap_;
    });
    S = $pkg.machine = $newType(0, $kindStruct, "regexp.machine", true, "regexp", false, function(re_, p_, op_, maxBitStateLen_, b_, q0_, q1_, pool_, matched_, matchcap_, inputBytes_, inputString_, inputReader_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.re = BQ.nil;
        this.p = BN.nil;
        this.op = BM.nil;
        this.maxBitStateLen = 0;
        this.b = BJ.nil;
        this.q0 = new P.ptr(BL.nil, BR.nil);
        this.q1 = new P.ptr(BL.nil, BR.nil);
        this.pool = BT.nil;
        this.matched = false;
        this.matchcap = BO.nil;
        this.inputBytes = new AX.ptr(BU.nil);
        this.inputString = new AW.ptr("");
        this.inputReader = new AY.ptr($ifaceNil, false, 0);
        return;
      }
      this.re = re_;
      this.p = p_;
      this.op = op_;
      this.maxBitStateLen = maxBitStateLen_;
      this.b = b_;
      this.q0 = q0_;
      this.q1 = q1_;
      this.pool = pool_;
      this.matched = matched_;
      this.matchcap = matchcap_;
      this.inputBytes = inputBytes_;
      this.inputString = inputString_;
      this.inputReader = inputReader_;
    });
    V = $pkg.onePassProg = $newType(0, $kindStruct, "regexp.onePassProg", true, "regexp", false, function(Inst_, Start_, NumCap_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Inst = BZ.nil;
        this.Start = 0;
        this.NumCap = 0;
        return;
      }
      this.Inst = Inst_;
      this.Start = Start_;
      this.NumCap = NumCap_;
    });
    W = $pkg.onePassInst = $newType(0, $kindStruct, "regexp.onePassInst", true, "regexp", false, function(Inst_, Next_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Inst = new A.Inst.ptr(0, 0, 0, BK.nil);
        this.Next = BL.nil;
        return;
      }
      this.Inst = Inst_;
      this.Next = Next_;
    });
    AA = $pkg.queueOnePass = $newType(0, $kindStruct, "regexp.queueOnePass", true, "regexp", false, function(sparse_, dense_, size_, nextIndex_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.sparse = BL.nil;
        this.dense = BL.nil;
        this.size = 0;
        this.nextIndex = 0;
        return;
      }
      this.sparse = sparse_;
      this.dense = dense_;
      this.size = size_;
      this.nextIndex = nextIndex_;
    });
    AH = $pkg.runeSlice = $newType(12, $kindSlice, "regexp.runeSlice", true, "regexp", false, null);
    AN = $pkg.Regexp = $newType(0, $kindStruct, "regexp.Regexp", true, "regexp", true, function(regexpRO_, mu_, machine_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.regexpRO = new AO.ptr("", BN.nil, BM.nil, "", BU.nil, false, 0, 0, 0, 0, CE.nil, false);
        this.mu = new H.Mutex.ptr(false);
        this.machine = CG.nil;
        return;
      }
      this.regexpRO = regexpRO_;
      this.mu = mu_;
      this.machine = machine_;
    });
    AO = $pkg.regexpRO = $newType(0, $kindStruct, "regexp.regexpRO", true, "regexp", false, function(expr_, prog_, onepass_, prefix_, prefixBytes_, prefixComplete_, prefixRune_, prefixEnd_, cond_, numSubexp_, subexpNames_, longest_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.expr = "";
        this.prog = BN.nil;
        this.onepass = BM.nil;
        this.prefix = "";
        this.prefixBytes = BU.nil;
        this.prefixComplete = false;
        this.prefixRune = 0;
        this.prefixEnd = 0;
        this.cond = 0;
        this.numSubexp = 0;
        this.subexpNames = CE.nil;
        this.longest = false;
        return;
      }
      this.expr = expr_;
      this.prog = prog_;
      this.onepass = onepass_;
      this.prefix = prefix_;
      this.prefixBytes = prefixBytes_;
      this.prefixComplete = prefixComplete_;
      this.prefixRune = prefixRune_;
      this.prefixEnd = prefixEnd_;
      this.cond = cond_;
      this.numSubexp = numSubexp_;
      this.subexpNames = subexpNames_;
      this.longest = longest_;
    });
    AV = $pkg.input = $newType(8, $kindInterface, "regexp.input", true, "regexp", false, null);
    AW = $pkg.inputString = $newType(0, $kindStruct, "regexp.inputString", true, "regexp", false, function(str_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.str = "";
        return;
      }
      this.str = str_;
    });
    AX = $pkg.inputBytes = $newType(0, $kindStruct, "regexp.inputBytes", true, "regexp", false, function(str_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.str = BU.nil;
        return;
      }
      this.str = str_;
    });
    AY = $pkg.inputReader = $newType(0, $kindStruct, "regexp.inputReader", true, "regexp", false, function(r_, atEOT_, pos_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.r = $ifaceNil;
        this.atEOT = false;
        this.pos = 0;
        return;
      }
      this.r = r_;
      this.atEOT = atEOT_;
      this.pos = pos_;
    });
    BH = $arrayType($Int, 0);
    BI = $arrayType($Uint8, 16);
    BJ = $ptrType(K);
    BK = $sliceType($Int32);
    BL = $sliceType($Uint32);
    BM = $ptrType(V);
    BN = $ptrType(A.Prog);
    BO = $sliceType($Int);
    BP = $sliceType(J);
    BQ = $ptrType(AN);
    BR = $sliceType(Q);
    BS = $ptrType(R);
    BT = $sliceType(BS);
    BU = $sliceType($Uint8);
    BV = $ptrType(A.Inst);
    BW = $ptrType($Int);
    BX = $ptrType(D.Builder);
    BY = $ptrType(AA);
    BZ = $sliceType(W);
    CA = $ptrType($Uint32);
    CB = $sliceType(BK);
    CC = $ptrType(BK);
    CD = $sliceType($Bool);
    CE = $sliceType($String);
    CF = $ptrType(S);
    CG = $sliceType(CF);
    CH = $arrayType($Int, 2);
    CI = $arrayType($Int, 4);
    CJ = $sliceType(BU);
    CK = $sliceType(BO);
    CL = $sliceType(CJ);
    CM = $sliceType(CE);
    CN = $ptrType(P);
    CO = $funcType([$String], [$String], false);
    CP = $funcType([BU, BO], [BU], false);
    CQ = $funcType([BU], [BU], false);
    CR = $funcType([BO], [], false);
    CS = $ptrType(AW);
    CT = $ptrType(AX);
    CU = $ptrType(AY);
    M = function(a) {
      var a, b;
      if (!O(a)) {
        return 0;
      }
      return (b = 262144 / a.Inst.$length, (b === b && b !== 1 / 0 && b !== -1 / 0) ? b >> 0 : $throwRuntimeError("integer divide by zero"));
    };
    N = function(a) {
      var a;
      if (!O(a)) {
        return L;
      }
      return new K.ptr(a, 0, BO.nil, BP.nil, BL.nil);
    };
    O = function(a) {
      var a;
      return a.Inst.$length <= 500;
    };
    K.ptr.prototype.reset = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m;
      c = this;
      c.end = a;
      if (c.jobs.$capacity === 0) {
        c.jobs = $makeSlice(BP, 0, 256);
      } else {
        c.jobs = $subslice(c.jobs, 0, 0);
      }
      e = (d = (((($imul(c.prog.Inst.$length, ((a + 1 >> 0)))) + 32 >> 0) - 1 >> 0)) / 32, (d === d && d !== 1 / 0 && d !== -1 / 0) ? d >> 0 : $throwRuntimeError("integer divide by zero"));
      if (c.visited.$capacity < e) {
        c.visited = $makeSlice(BL, e, 8192);
      } else {
        c.visited = $subslice(c.visited, 0, e);
        f = c.visited;
        g = 0;
        while (true) {
          if (!(g < f.$length)) {
            break;
          }
          h = g;
          (i = c.visited, ((h < 0 || h >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + h] = 0));
          g++;
        }
      }
      if (c.cap.$capacity < b) {
        c.cap = $makeSlice(BO, b);
      } else {
        c.cap = $subslice(c.cap, 0, b);
      }
      j = c.cap;
      k = 0;
      while (true) {
        if (!(k < j.$length)) {
          break;
        }
        l = k;
        (m = c.cap, ((l < 0 || l >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + l] = -1));
        k++;
      }
    };
    K.prototype.reset = function(a, b) {
      return this.$val.reset(a, b);
    };
    K.ptr.prototype.shouldVisit = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m;
      c = this;
      d = (((($imul(((a >> 0)), ((c.end + 1 >> 0)))) + b >> 0) >>> 0));
      if (!(((((e = c.visited, f = (g = d / 32, (g === g && g !== 1 / 0 && g !== -1 / 0) ? g >>> 0 : $throwRuntimeError("integer divide by zero")), ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f])) & (((h = (((d & 31) >>> 0)), h < 32 ? (1 << h) : 0) >>> 0))) >>> 0) === 0))) {
        return false;
      }
      j = (i = d / 32, (i === i && i !== 1 / 0 && i !== -1 / 0) ? i >>> 0 : $throwRuntimeError("integer divide by zero"));
      (m = c.visited, ((j < 0 || j >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + j] = (((k = c.visited, ((j < 0 || j >= k.$length) ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + j])) | (((l = (((d & 31) >>> 0)), l < 32 ? (1 << l) : 0) >>> 0))) >>> 0)));
      return true;
    };
    K.prototype.shouldVisit = function(a, b) {
      return this.$val.shouldVisit(a, b);
    };
    K.ptr.prototype.push = function(a, b, c) {
      var a, b, c, d, e;
      d = this;
      if (!(((e = d.prog.Inst, ((a < 0 || a >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + a])).Op === 5)) && (c || d.shouldVisit(a, b))) {
        d.jobs = $append(d.jobs, new J.ptr(a, c, b));
      }
    };
    K.prototype.push = function(a, b, c) {
      return this.$val.push(a, b, c);
    };
    S.ptr.prototype.tryBacktrack = function(a, b, c, d) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            f = e.re.regexpRO.longest;
            e.matched = false;
            a.push(c, d, false);
          case 1:
            if (!(a.jobs.$length > 0)) {
              $s = 2;
              continue;
            }
            g = a.jobs.$length - 1 >> 0;
            i = (h = a.jobs, ((g < 0 || g >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + g])).pc;
            k = (j = a.jobs, ((g < 0 || g >= j.$length) ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + g])).pos;
            m = (l = a.jobs, ((g < 0 || g >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + g])).arg;
            a.jobs = $subslice(a.jobs, 0, g);
            $s = 3;
            continue;
          case 4:
            if (!a.shouldVisit(i, k)) {
              $s = 1;
              continue;
            }
          case 3:
            o = $clone((n = a.prog.Inst, ((i < 0 || i >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + i])), A.Inst);
            p = o.Op;
            if (p === (5)) {
              $s = 6;
              continue;
            }
            if (p === (0)) {
              $s = 7;
              continue;
            }
            if (p === (1)) {
              $s = 8;
              continue;
            }
            if (p === (7)) {
              $s = 9;
              continue;
            }
            if (p === (8)) {
              $s = 10;
              continue;
            }
            if (p === (10)) {
              $s = 11;
              continue;
            }
            if (p === (9)) {
              $s = 12;
              continue;
            }
            if (p === (2)) {
              $s = 13;
              continue;
            }
            if (p === (3)) {
              $s = 14;
              continue;
            }
            if (p === (6)) {
              $s = 15;
              continue;
            }
            if (p === (4)) {
              $s = 16;
              continue;
            }
            $s = 17;
            continue;
          case 6:
            $panic(new $String("unexpected InstFail"));
            $s = 18;
            continue;
          case 7:
            if (m) {
              $s = 19;
              continue;
            }
            $s = 20;
            continue;
          case 19:
            m = false;
            i = o.Arg;
            $s = 4;
            continue;
            $s = 21;
            continue;
          case 20:
            a.push(i, k, true);
            i = o.Out;
            $s = 4;
            continue;
          case 21:
            $s = 18;
            continue;
          case 8:
            s = (q = a.prog.Inst, r = o.Out, ((r < 0 || r >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + r])).Op;
            if ((s === (7)) || (s === (8)) || (s === (9)) || (s === (10))) {
              $s = 23;
              continue;
            }
            $s = 24;
            continue;
          case 23:
            a.push(o.Arg, k, false);
            i = o.Arg;
            k = a.end;
            $s = 4;
            continue;
          case 24:
          case 22:
            a.push(o.Out, a.end, false);
            i = o.Out;
            $s = 4;
            continue;
            $s = 18;
            continue;
          case 9:
            u = b.step(k);
            $s = 25;
          case 25:
            if ($c) {
              $c = false;
              u = u.$blk();
            }
            if (u && u.$blk !== undefined) {
              break s;
            }
            t = u;
            v = t[0];
            w = t[1];
            if (!o.MatchRune(v)) {
              $s = 26;
              continue;
            }
            $s = 27;
            continue;
          case 26:
            $s = 1;
            continue;
          case 27:
            k = k + (w) >> 0;
            i = o.Out;
            $s = 4;
            continue;
            $s = 18;
            continue;
          case 10:
            y = b.step(k);
            $s = 28;
          case 28:
            if ($c) {
              $c = false;
              y = y.$blk();
            }
            if (y && y.$blk !== undefined) {
              break s;
            }
            x = y;
            z = x[0];
            aa = x[1];
            if (!((z === (ab = o.Rune, (0 >= ab.$length ? ($throwRuntimeError("index out of range"), undefined) : ab.$array[ab.$offset + 0]))))) {
              $s = 29;
              continue;
            }
            $s = 30;
            continue;
          case 29:
            $s = 1;
            continue;
          case 30:
            k = k + (aa) >> 0;
            i = o.Out;
            $s = 4;
            continue;
            $s = 18;
            continue;
          case 11:
            ad = b.step(k);
            $s = 31;
          case 31:
            if ($c) {
              $c = false;
              ad = ad.$blk();
            }
            if (ad && ad.$blk !== undefined) {
              break s;
            }
            ac = ad;
            ae = ac[0];
            af = ac[1];
            if ((ae === 10) || (ae === -1)) {
              $s = 32;
              continue;
            }
            $s = 33;
            continue;
          case 32:
            $s = 1;
            continue;
          case 33:
            k = k + (af) >> 0;
            i = o.Out;
            $s = 4;
            continue;
            $s = 18;
            continue;
          case 12:
            ah = b.step(k);
            $s = 34;
          case 34:
            if ($c) {
              $c = false;
              ah = ah.$blk();
            }
            if (ah && ah.$blk !== undefined) {
              break s;
            }
            ag = ah;
            ai = ag[0];
            aj = ag[1];
            if (ai === -1) {
              $s = 35;
              continue;
            }
            $s = 36;
            continue;
          case 35:
            $s = 1;
            continue;
          case 36:
            k = k + (aj) >> 0;
            i = o.Out;
            $s = 4;
            continue;
            $s = 18;
            continue;
          case 13:
            if (m) {
              $s = 37;
              continue;
            }
            $s = 38;
            continue;
          case 37:
            (ak = a.cap, al = o.Arg, ((al < 0 || al >= ak.$length) ? ($throwRuntimeError("index out of range"), undefined) : ak.$array[ak.$offset + al] = k));
            $s = 1;
            continue;
            $s = 39;
            continue;
          case 38:
            if (0 <= o.Arg && o.Arg < ((a.cap.$length >>> 0))) {
              a.push(i, (am = a.cap, an = o.Arg, ((an < 0 || an >= am.$length) ? ($throwRuntimeError("index out of range"), undefined) : am.$array[am.$offset + an])), true);
              (ao = a.cap, ap = o.Arg, ((ap < 0 || ap >= ao.$length) ? ($throwRuntimeError("index out of range"), undefined) : ao.$array[ao.$offset + ap] = k));
            }
            i = o.Out;
            $s = 4;
            continue;
          case 39:
            $s = 18;
            continue;
          case 14:
            aq = b.context(k);
            $s = 42;
          case 42:
            if ($c) {
              $c = false;
              aq = aq.$blk();
            }
            if (aq && aq.$blk !== undefined) {
              break s;
            }
            if (!((((((o.Arg << 24 >>> 24)) & ~aq) << 24 >>> 24) === 0))) {
              $s = 40;
              continue;
            }
            $s = 41;
            continue;
          case 40:
            $s = 1;
            continue;
          case 41:
            i = o.Out;
            $s = 4;
            continue;
            $s = 18;
            continue;
          case 15:
            i = o.Out;
            $s = 4;
            continue;
            $s = 18;
            continue;
          case 16:
            if (a.cap.$length === 0) {
              e.matched = true;
              $s = -1;
              return e.matched;
            }
            if (a.cap.$length > 1) {
              (ar = a.cap, (1 >= ar.$length ? ($throwRuntimeError("index out of range"), undefined) : ar.$array[ar.$offset + 1] = k));
            }
            if (!e.matched || (f && k > 0 && k > (as = e.matchcap, (1 >= as.$length ? ($throwRuntimeError("index out of range"), undefined) : as.$array[as.$offset + 1])))) {
              $copySlice(e.matchcap, a.cap);
            }
            e.matched = true;
            if (!f) {
              $s = -1;
              return e.matched;
            }
            if (k === a.end) {
              $s = -1;
              return e.matched;
            }
            $s = 1;
            continue;
            $s = 18;
            continue;
          case 17:
            $panic(new $String("bad inst"));
          case 18:
          case 5:
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return e.matched;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: S.ptr.prototype.tryBacktrack
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    S.prototype.tryBacktrack = function(a, b, c, d) {
      return this.$val.tryBacktrack(a, b, c, d);
    };
    S.ptr.prototype.backtrack = function(a, b, c, d) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            f = a.canCheckPrefix();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            if (!f) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            $panic(new $String("backtrack called for a RuneReader"));
          case 2:
            g = e.re.regexpRO.cond;
            if (g === 255) {
              $s = -1;
              return false;
            }
            if (!((((g & 4) >>> 0) === 0)) && !((b === 0))) {
              $s = -1;
              return false;
            }
            h = e.b;
            h.reset(c, d);
            e.matchcap = $subslice(e.matchcap, 0, d);
            i = e.matchcap;
            j = 0;
            while (true) {
              if (!(j < i.$length)) {
                break;
              }
              k = j;
              (l = e.matchcap, ((k < 0 || k >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + k] = -1));
              j++;
            }
            if (!((((g & 4) >>> 0) === 0))) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            if (h.cap.$length > 0) {
              (m = h.cap, (0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0] = b));
            }
            n = e.tryBacktrack(h, a, ((e.p.Start >>> 0)), b);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return n;
          case 5:
            o = -1;
          case 7:
            if (!(b <= c && !((o === 0)))) {
              $s = 8;
              continue;
            }
            if (e.re.regexpRO.prefix.length > 0) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            p = a.index(e.re, b);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            q = p;
            if (q < 0) {
              $s = -1;
              return false;
            }
            b = b + (q) >> 0;
          case 10:
            if (h.cap.$length > 0) {
              (r = h.cap, (0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0] = b));
            }
            s = e.tryBacktrack(h, a, ((e.p.Start >>> 0)), b);
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            if (s) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 12:
            $s = -1;
            return true;
          case 13:
            u = a.step(b);
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              u = u.$blk();
            }
            if (u && u.$blk !== undefined) {
              break s;
            }
            t = u;
            o = t[1];
            b = b + (o) >> 0;
            $s = 7;
            continue;
          case 8:
            $s = -1;
            return false;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: S.ptr.prototype.backtrack
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    S.prototype.backtrack = function(a, b, c, d) {
      return this.$val.backtrack(a, b, c, d);
    };
    S.ptr.prototype.newInputBytes = function(a) {
      var a, b;
      b = this;
      b.inputBytes.str = a;
      return b.inputBytes;
    };
    S.prototype.newInputBytes = function(a) {
      return this.$val.newInputBytes(a);
    };
    S.ptr.prototype.newInputString = function(a) {
      var a, b;
      b = this;
      b.inputString.str = a;
      return b.inputString;
    };
    S.prototype.newInputString = function(a) {
      return this.$val.newInputString(a);
    };
    S.ptr.prototype.newInputReader = function(a) {
      var a, b;
      b = this;
      b.inputReader.r = a;
      b.inputReader.atEOT = false;
      b.inputReader.pos = 0;
      return b.inputReader;
    };
    S.prototype.newInputReader = function(a) {
      return this.$val.newInputReader(a);
    };
    T = function(a, b) {
      var a, b, c, d, e;
      c = new S.ptr(BQ.nil, a, b, 0, BJ.nil, new P.ptr(BL.nil, BR.nil), new P.ptr(BL.nil, BR.nil), BT.nil, false, BO.nil, new AX.ptr(BU.nil), new AW.ptr(""), new AY.ptr($ifaceNil, false, 0));
      d = c.p.Inst.$length;
      P.copy(c.q0, new P.ptr($makeSlice(BL, d), $makeSlice(BR, 0, d)));
      P.copy(c.q1, new P.ptr($makeSlice(BL, d), $makeSlice(BR, 0, d)));
      e = a.NumCap;
      if (e < 2) {
        e = 2;
      }
      if (b === AL) {
        c.maxBitStateLen = M(a);
      }
      c.matchcap = $makeSlice(BO, e);
      return c;
    };
    S.ptr.prototype.init = function(a) {
      var a, b, c, d, e;
      b = this;
      c = b.pool;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]);
        e.cap = $subslice(e.cap, 0, a);
        d++;
      }
      b.matchcap = $subslice(b.matchcap, 0, a);
    };
    S.prototype.init = function(a) {
      return this.$val.init(a);
    };
    S.ptr.prototype.alloc = function(a) {
      var a, b, c, d, e, f;
      b = this;
      c = BS.nil;
      d = b.pool.$length;
      if (d > 0) {
        c = (e = b.pool, f = d - 1 >> 0, ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]));
        b.pool = $subslice(b.pool, 0, (d - 1 >> 0));
      } else {
        c = new R.ptr(BV.nil, BO.nil);
        c.cap = $makeSlice(BO, b.matchcap.$length, b.matchcap.$capacity);
      }
      c.inst = a;
      return c;
    };
    S.prototype.alloc = function(a) {
      return this.$val.alloc(a);
    };
    S.ptr.prototype.match = function(a, b) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = c.re.regexpRO.cond;
            if (d === 255) {
              $s = -1;
              return false;
            }
            c.matched = false;
            e = c.matchcap;
            f = 0;
            while (true) {
              if (!(f < e.$length)) {
                break;
              }
              g = f;
              (h = c.matchcap, ((g < 0 || g >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + g] = -1));
              f++;
            }
            i = c.q0;
            j = c.q1;
            k = i;
            l = j;
            m = -1;
            n = -1;
            o = m;
            p = n;
            q = 0;
            r = 0;
            s = q;
            t = r;
            v = a.step(b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            u = v;
            o = u[0];
            s = u[1];
            if (!((o === -1))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            x = a.step(b + s >> 0);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              x = x.$blk();
            }
            if (x && x.$blk !== undefined) {
              break s;
            }
            w = x;
            p = w[0];
            t = w[1];
          case 3:
            y = 0;
            if (b === 0) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            y = A.EmptyOpContext(-1, o);
            $s = 7;
            continue;
          case 6:
            z = a.context(b);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            y = z;
          case 7:
          case 9:
            if (k.dense.$length === 0) {
              $s = 11;
              continue;
            }
            $s = 12;
            continue;
          case 11:
            if (!((((d & 4) >>> 0) === 0)) && !((b === 0))) {
              $s = 10;
              continue;
            }
            if (c.matched) {
              $s = 10;
              continue;
            }
            if (!(c.re.regexpRO.prefix.length > 0 && !((p === c.re.regexpRO.prefixRune)))) {
              aa = false;
              $s = 15;
              continue s;
            }
            ab = a.canCheckPrefix();
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              ab = ab.$blk();
            }
            if (ab && ab.$blk !== undefined) {
              break s;
            }
            aa = ab;
          case 15:
            if (aa) {
              $s = 13;
              continue;
            }
            $s = 14;
            continue;
          case 13:
            ac = a.index(c.re, b);
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              ac = ac.$blk();
            }
            if (ac && ac.$blk !== undefined) {
              break s;
            }
            ad = ac;
            if (ad < 0) {
              $s = 10;
              continue;
            }
            b = b + (ad) >> 0;
            af = a.step(b);
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              af = af.$blk();
            }
            if (af && af.$blk !== undefined) {
              break s;
            }
            ae = af;
            o = ae[0];
            s = ae[1];
            ah = a.step(b + s >> 0);
            $s = 19;
          case 19:
            if ($c) {
              $c = false;
              ah = ah.$blk();
            }
            if (ah && ah.$blk !== undefined) {
              break s;
            }
            ag = ah;
            p = ag[0];
            t = ag[1];
          case 14:
          case 12:
            if (!c.matched) {
              if (c.matchcap.$length > 0) {
                (ai = c.matchcap, (0 >= ai.$length ? ($throwRuntimeError("index out of range"), undefined) : ai.$array[ai.$offset + 0] = b));
              }
              c.add(k, ((c.p.Start >>> 0)), b, c.matchcap, y, BS.nil);
            }
            y = A.EmptyOpContext(o, p);
            c.step(k, l, b, b + s >> 0, o, y);
            if (s === 0) {
              $s = 10;
              continue;
            }
            if ((c.matchcap.$length === 0) && c.matched) {
              $s = 10;
              continue;
            }
            b = b + (s) >> 0;
            aj = p;
            ak = t;
            o = aj;
            s = ak;
            if (!((o === -1))) {
              $s = 20;
              continue;
            }
            $s = 21;
            continue;
          case 20:
            am = a.step(b + s >> 0);
            $s = 22;
          case 22:
            if ($c) {
              $c = false;
              am = am.$blk();
            }
            if (am && am.$blk !== undefined) {
              break s;
            }
            al = am;
            p = al[0];
            t = al[1];
          case 21:
            an = l;
            ao = k;
            k = an;
            l = ao;
            $s = 9;
            continue;
          case 10:
            c.clear(l);
            $s = -1;
            return c.matched;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: S.ptr.prototype.match
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    S.prototype.match = function(a, b) {
      return this.$val.match(a, b);
    };
    S.ptr.prototype.clear = function(a) {
      var a, b, c, d, e;
      b = this;
      c = a.dense;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = $clone(((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]), Q);
        if (!(e.t === BS.nil)) {
          b.pool = $append(b.pool, e.t);
        }
        d++;
      }
      a.dense = $subslice(a.dense, 0, 0);
    };
    S.prototype.clear = function(a) {
      return this.$val.clear(a);
    };
    S.ptr.prototype.step = function(a, b, c, d, e, f) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w;
      g = this;
      h = g.re.regexpRO.longest;
      i = 0;
      while (true) {
        if (!(i < a.dense.$length)) {
          break;
        }
        k = (j = a.dense, ((i < 0 || i >= j.$length) ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + i]));
        l = k.t;
        if (l === BS.nil) {
          i = i + (1) >> 0;
          continue;
        }
        if (h && g.matched && l.cap.$length > 0 && (m = g.matchcap, (0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0])) < (n = l.cap, (0 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 0]))) {
          g.pool = $append(g.pool, l);
          i = i + (1) >> 0;
          continue;
        }
        o = l.inst;
        p = false;
        q = o.Op;
        if (q === (4)) {
          if (l.cap.$length > 0 && (!h || !g.matched || (r = g.matchcap, (1 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 1])) < c)) {
            (s = l.cap, (1 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 1] = c));
            $copySlice(g.matchcap, l.cap);
          }
          if (!h) {
            t = $subslice(a.dense, (i + 1 >> 0));
            u = 0;
            while (true) {
              if (!(u < t.$length)) {
                break;
              }
              v = $clone(((u < 0 || u >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + u]), Q);
              if (!(v.t === BS.nil)) {
                g.pool = $append(g.pool, v.t);
              }
              u++;
            }
            a.dense = $subslice(a.dense, 0, 0);
          }
          g.matched = true;
        } else if (q === (7)) {
          p = o.MatchRune(e);
        } else if (q === (8)) {
          p = e === (w = o.Rune, (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]));
        } else if (q === (9)) {
          p = true;
        } else if (q === (10)) {
          p = !((e === 10));
        } else {
          $panic(new $String("bad inst"));
        }
        if (p) {
          l = g.add(b, o.Out, d, l.cap, f, l);
        }
        if (!(l === BS.nil)) {
          g.pool = $append(g.pool, l);
        }
        i = i + (1) >> 0;
      }
      a.dense = $subslice(a.dense, 0, 0);
    };
    S.prototype.step = function(a, b, c, d, e, f) {
      return this.$val.step(a, b, c, d, e, f);
    };
    S.ptr.prototype.add = function(a, b, c, d, e, f) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v;
      g = this;
      if (b === 0) {
        return f;
      }
      i = (h = a.sparse, ((b < 0 || b >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + b]));
      if (i < ((a.dense.$length >>> 0)) && ((j = a.dense, ((i < 0 || i >= j.$length) ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + i])).pc === b)) {
        return f;
      }
      k = a.dense.$length;
      a.dense = $subslice(a.dense, 0, (k + 1 >> 0));
      m = (l = a.dense, ((k < 0 || k >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + k]));
      m.t = BS.nil;
      m.pc = b;
      (n = a.sparse, ((b < 0 || b >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + b] = ((k >>> 0))));
      p = (o = g.p.Inst, ((b < 0 || b >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + b]));
      q = p.Op;
      if (q === (5)) {} else if ((q === (0)) || (q === (1))) {
        f = g.add(a, p.Out, c, d, e, f);
        f = g.add(a, p.Arg, c, d, e, f);
      } else if (q === (3)) {
        if (((((p.Arg << 24 >>> 24)) & ~e) << 24 >>> 24) === 0) {
          f = g.add(a, p.Out, c, d, e, f);
        }
      } else if (q === (6)) {
        f = g.add(a, p.Out, c, d, e, f);
      } else if (q === (2)) {
        if (((p.Arg >> 0)) < d.$length) {
          s = (r = p.Arg, ((r < 0 || r >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + r]));
          (t = p.Arg, ((t < 0 || t >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + t] = c));
          g.add(a, p.Out, c, d, e, BS.nil);
          (u = p.Arg, ((u < 0 || u >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + u] = s));
        } else {
          f = g.add(a, p.Out, c, d, e, f);
        }
      } else if ((q === (4)) || (q === (7)) || (q === (8)) || (q === (9)) || (q === (10))) {
        if (f === BS.nil) {
          f = g.alloc(p);
        } else {
          f.inst = p;
        }
        if (d.$length > 0 && !((v = f.cap, $indexPtr(v.$array, v.$offset + 0, BW)) === $indexPtr(d.$array, d.$offset + 0, BW))) {
          $copySlice(f.cap, d);
        }
        m.t = f;
        f = BS.nil;
      } else {
        $panic(new $String("unhandled"));
      }
      return f;
    };
    S.prototype.add = function(a, b, c, d, e, f) {
      return this.$val.add(a, b, c, d, e, f);
    };
    S.ptr.prototype.onepass = function(a, b, c) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        ak = $f.ak;
        al = $f.al;
        am = $f.am;
        an = $f.an;
        ao = $f.ao;
        ap = $f.ap;
        aq = $f.aq;
        ar = $f.ar;
        as = $f.as;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = [d];
            e = this;
            f = e.re.regexpRO.cond;
            if (f === 255) {
              $s = -1;
              return false;
            }
            e.matched = false;
            e.matchcap = $subslice(e.matchcap, 0, c);
            g = e.matchcap;
            h = 0;
            while (true) {
              if (!(h < g.$length)) {
                break;
              }
              i = h;
              (j = e.matchcap, ((i < 0 || i >= j.$length) ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + i] = -1));
              h++;
            }
            k = -1;
            l = -1;
            m = k;
            n = l;
            o = 0;
            p = 0;
            q = o;
            r = p;
            t = a.step(b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            s = t;
            m = s[0];
            q = s[1];
            if (!((m === -1))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            v = a.step(b + q >> 0);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            u = v;
            n = u[0];
            r = u[1];
          case 3:
            w = 0;
            if (b === 0) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            w = A.EmptyOpContext(-1, m);
            $s = 7;
            continue;
          case 6:
            x = a.context(b);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              x = x.$blk();
            }
            if (x && x.$blk !== undefined) {
              break s;
            }
            w = x;
          case 7:
            y = e.op.Start;
            d[0] = $clone((z = e.op.Inst, ((y < 0 || y >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + y])), W);
            if (!((b === 0) && (((((d[0].Inst.Arg << 24 >>> 24)) & ~w) << 24 >>> 24) === 0) && e.re.regexpRO.prefix.length > 0)) {
              aa = false;
              $s = 11;
              continue s;
            }
            ab = a.canCheckPrefix();
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              ab = ab.$blk();
            }
            if (ab && ab.$blk !== undefined) {
              break s;
            }
            aa = ab;
          case 11:
            if (aa) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            ac = a.hasPrefix(e.re);
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              ac = ac.$blk();
            }
            if (ac && ac.$blk !== undefined) {
              break s;
            }
            if (!ac) {
              $s = 13;
              continue;
            }
            $s = 14;
            continue;
          case 13:
            $s = -1;
            return e.matched;
          case 14:
            b = b + (e.re.regexpRO.prefix.length) >> 0;
            ae = a.step(b);
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              ae = ae.$blk();
            }
            if (ae && ae.$blk !== undefined) {
              break s;
            }
            ad = ae;
            m = ad[0];
            q = ad[1];
            ag = a.step(b + q >> 0);
            $s = 17;
          case 17:
            if ($c) {
              $c = false;
              ag = ag.$blk();
            }
            if (ag && ag.$blk !== undefined) {
              break s;
            }
            af = ag;
            n = af[0];
            r = af[1];
            ah = a.context(b);
            $s = 18;
          case 18:
            if ($c) {
              $c = false;
              ah = ah.$blk();
            }
            if (ah && ah.$blk !== undefined) {
              break s;
            }
            w = ah;
            y = ((e.re.regexpRO.prefixEnd >> 0));
          case 10:
          case 19:
            W.copy(d[0], (ai = e.op.Inst, ((y < 0 || y >= ai.$length) ? ($throwRuntimeError("index out of range"), undefined) : ai.$array[ai.$offset + y])));
            y = ((d[0].Inst.Out >> 0));
            aj = d[0].Inst.Op;
            if (aj === (4)) {
              $s = 22;
              continue;
            }
            if (aj === (7)) {
              $s = 23;
              continue;
            }
            if (aj === (8)) {
              $s = 24;
              continue;
            }
            if (aj === (9)) {
              $s = 25;
              continue;
            }
            if (aj === (10)) {
              $s = 26;
              continue;
            }
            if ((aj === (0)) || (aj === (1))) {
              $s = 27;
              continue;
            }
            if (aj === (5)) {
              $s = 28;
              continue;
            }
            if (aj === (6)) {
              $s = 29;
              continue;
            }
            if (aj === (3)) {
              $s = 30;
              continue;
            }
            if (aj === (2)) {
              $s = 31;
              continue;
            }
            $s = 32;
            continue;
          case 22:
            e.matched = true;
            if (e.matchcap.$length > 0) {
              (ak = e.matchcap, (0 >= ak.$length ? ($throwRuntimeError("index out of range"), undefined) : ak.$array[ak.$offset + 0] = 0));
              (al = e.matchcap, (1 >= al.$length ? ($throwRuntimeError("index out of range"), undefined) : al.$array[al.$offset + 1] = b));
            }
            $s = -1;
            return e.matched;
          case 23:
            if (!d[0].Inst.MatchRune(m)) {
              $s = -1;
              return e.matched;
            }
            $s = 33;
            continue;
          case 24:
            if (!((m === (am = d[0].Inst.Rune, (0 >= am.$length ? ($throwRuntimeError("index out of range"), undefined) : am.$array[am.$offset + 0]))))) {
              $s = -1;
              return e.matched;
            }
            $s = 33;
            continue;
          case 25:
            $s = 33;
            continue;
          case 26:
            if (m === 10) {
              $s = -1;
              return e.matched;
            }
            $s = 33;
            continue;
          case 27:
            y = ((Y(d[0], m) >> 0));
            $s = 19;
            continue;
            $s = 33;
            continue;
          case 28:
            $s = -1;
            return e.matched;
          case 29:
            $s = 19;
            continue;
            $s = 33;
            continue;
          case 30:
            if (!((((((d[0].Inst.Arg << 24 >>> 24)) & ~w) << 24 >>> 24) === 0))) {
              $s = -1;
              return e.matched;
            }
            $s = 19;
            continue;
            $s = 33;
            continue;
          case 31:
            if (((d[0].Inst.Arg >> 0)) < e.matchcap.$length) {
              (an = e.matchcap, ao = d[0].Inst.Arg, ((ao < 0 || ao >= an.$length) ? ($throwRuntimeError("index out of range"), undefined) : an.$array[an.$offset + ao] = b));
            }
            $s = 19;
            continue;
            $s = 33;
            continue;
          case 32:
            $panic(new $String("bad inst"));
          case 33:
          case 21:
            if (q === 0) {
              $s = 20;
              continue;
            }
            w = A.EmptyOpContext(m, n);
            b = b + (q) >> 0;
            ap = n;
            aq = r;
            m = ap;
            q = aq;
            if (!((m === -1))) {
              $s = 34;
              continue;
            }
            $s = 35;
            continue;
          case 34:
            as = a.step(b + q >> 0);
            $s = 36;
          case 36:
            if ($c) {
              $c = false;
              as = as.$blk();
            }
            if (as && as.$blk !== undefined) {
              break s;
            }
            ar = as;
            n = ar[0];
            r = ar[1];
          case 35:
            $s = 19;
            continue;
          case 20:
            $s = -1;
            return e.matched;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: S.ptr.prototype.onepass
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.ak = ak;
      $f.al = al;
      $f.am = am;
      $f.an = an;
      $f.ao = ao;
      $f.ap = ap;
      $f.aq = aq;
      $f.ar = ar;
      $f.as = as;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    S.prototype.onepass = function(a, b, c) {
      return this.$val.onepass(a, b, c);
    };
    AN.ptr.prototype.doMatch = function(a, b, c) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = this;
            e = d.doExecute(a, b, c, 0, 0, BO.nil);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return !(e === BO.nil);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.doMatch
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.doMatch = function(a, b, c) {
      return this.$val.doMatch(a, b, c);
    };
    AN.ptr.prototype.doExecute = function(a, b, c, d, e, f) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            g = this;
            h = g.get();
            i = $ifaceNil;
            j = 0;
            if (!($interfaceIsEqual(a, $ifaceNil))) {
              i = h.newInputReader(a);
            } else if (!(b === BU.nil)) {
              i = h.newInputBytes(b);
              j = b.$length;
            } else {
              i = h.newInputString(c);
              j = c.length;
            }
            if (!(h.op === AL)) {
              $s = 1;
              continue;
            }
            if (j < h.maxBitStateLen && $interfaceIsEqual(a, $ifaceNil)) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 1:
            k = h.onepass(i, d, e);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            if (!k) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            g.put(h);
            $s = -1;
            return BO.nil;
          case 6:
            $s = 4;
            continue;
          case 2:
            if (h.b === BJ.nil) {
              h.b = N(h.p);
            }
            l = h.backtrack(i, d, j, e);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            if (!l) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            g.put(h);
            $s = -1;
            return BO.nil;
          case 9:
            $s = 4;
            continue;
          case 3:
            h.init(e);
            m = h.match(i, d);
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            if (!m) {
              $s = 11;
              continue;
            }
            $s = 12;
            continue;
          case 11:
            g.put(h);
            $s = -1;
            return BO.nil;
          case 12:
          case 4:
            f = $appendSlice(f, h.matchcap);
            if (f === BO.nil) {
              f = $subslice(new BO(U), 0, 0);
            }
            g.put(h);
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.doExecute
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.doExecute = function(a, b, c, d, e, f) {
      return this.$val.doExecute(a, b, c, d, e, f);
    };
    X = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      b = "";
      c = false;
      d = 0;
      g = (e = a.Inst, f = a.Start, ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]));
      if (!((g.Op === 3)) || ((((((g.Arg << 24 >>> 24))) & 4) >>> 0) === 0)) {
        h = "";
        i = g.Op === 4;
        j = ((a.Start >>> 0));
        b = h;
        c = i;
        d = j;
        return [b, c, d];
      }
      d = g.Out;
      g = (k = a.Inst, ((d < 0 || d >= k.$length) ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + d]));
      while (true) {
        if (!(g.Op === 6)) {
          break;
        }
        d = g.Out;
        g = (l = a.Inst, ((d < 0 || d >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + d]));
      }
      if (!((Z(g) === 7)) || !((g.Rune.$length === 1))) {
        m = "";
        n = g.Op === 4;
        o = ((a.Start >>> 0));
        b = m;
        c = n;
        d = o;
        return [b, c, d];
      }
      p = new D.Builder.ptr(BX.nil, BU.nil);
      while (true) {
        if (!((Z(g) === 7) && (g.Rune.$length === 1) && (((((g.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) {
          break;
        }
        p.WriteRune((q = g.Rune, (0 >= q.$length ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + 0])));
        r = g.Out;
        s = (t = a.Inst, u = g.Out, ((u < 0 || u >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + u]));
        d = r;
        g = s;
      }
      if ((g.Op === 3) && !((((((g.Arg << 24 >>> 24)) & 8) >>> 0) === 0)) && ((v = a.Inst, w = g.Out, ((w < 0 || w >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + w])).Op === 4)) {
        c = true;
      }
      x = p.String();
      y = c;
      z = d;
      b = x;
      c = y;
      d = z;
      return [b, c, d];
    };
    Y = function(a, b) {
      var a, b, c, d;
      c = a.Inst.MatchRunePos(b);
      if (c >= 0) {
        return (d = a.Next, ((c < 0 || c >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + c]));
      }
      if (a.Inst.Op === 1) {
        return a.Inst.Out;
      }
      return 0;
    };
    Z = function(a) {
      var a, b, c;
      b = a.Op;
      c = b;
      if ((c === (8)) || (c === (9)) || (c === (10))) {
        b = 7;
      }
      return b;
    };
    AA.ptr.prototype.empty = function() {
      var a;
      a = this;
      return a.nextIndex >= a.size;
    };
    AA.prototype.empty = function() {
      return this.$val.empty();
    };
    AA.ptr.prototype.next = function() {
      var a, b, c, d;
      a = 0;
      b = this;
      a = (c = b.dense, d = b.nextIndex, ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]));
      b.nextIndex = b.nextIndex + (1) >>> 0;
      return a;
    };
    AA.prototype.next = function() {
      return this.$val.next();
    };
    AA.ptr.prototype.clear = function() {
      var a;
      a = this;
      a.size = 0;
      a.nextIndex = 0;
    };
    AA.prototype.clear = function() {
      return this.$val.clear();
    };
    AA.ptr.prototype.contains = function(a) {
      var a, b, c, d, e, f;
      b = this;
      if (a >= ((b.sparse.$length >>> 0))) {
        return false;
      }
      return (c = b.sparse, ((a < 0 || a >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + a])) < b.size && ((d = b.dense, e = (f = b.sparse, ((a < 0 || a >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + a])), ((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e])) === a);
    };
    AA.prototype.contains = function(a) {
      return this.$val.contains(a);
    };
    AA.ptr.prototype.insert = function(a) {
      var a, b;
      b = this;
      if (!b.contains(a)) {
        b.insertNew(a);
      }
    };
    AA.prototype.insert = function(a) {
      return this.$val.insert(a);
    };
    AA.ptr.prototype.insertNew = function(a) {
      var a, b, c, d, e;
      b = this;
      if (a >= ((b.sparse.$length >>> 0))) {
        return;
      }(c = b.sparse, ((a < 0 || a >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + a] = b.size));
      (d = b.dense, e = b.size, ((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e] = a));
      b.size = b.size + (1) >>> 0;
    };
    AA.prototype.insertNew = function(a) {
      return this.$val.insertNew(a);
    };
    AB = function(a) {
      var a, b;
      b = BY.nil;
      b = new AA.ptr($makeSlice(BL, a), $makeSlice(BL, a), 0, 0);
      return b;
    };
    AE = function(a, b, c, d) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              e = [e];
              f = [f];
              g = [g];
              h = [h];
              i = [i];
              j = [j];
              k = a.$get().$length;
              l = b.$get().$length;
              if (!(((k & 1) === 0)) || !(((l & 1) === 0))) {
                $panic(new $String("mergeRuneSets odd length []rune"));
              }
              m = 0;
              n = 0;
              f[0] = m;
              j[0] = n;
              g[0] = $makeSlice(BK, 0);
              h[0] = $makeSlice(BL, 0);
              i[0] = true;
              $deferred.push([(function(e, f, g, h, i, j) {
                return function() {
                  if (!i[0]) {
                    g[0] = BK.nil;
                    h[0] = BL.nil;
                  }
                };
              })(e, f, g, h, i, j), []]);
              e[0] = -1;
              o = (function(e, f, g, h, i, j) {
                return function(o, p, q) {
                  var o, p, q, r, s, t, u, v, w;
                  if (e[0] > 0 && (r = p.$get(), s = o.$get(), ((s < 0 || s >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + s])) <= ((e[0] < 0 || e[0] >= g[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : g[0].$array[g[0].$offset + e[0]])) {
                    return false;
                  }
                  g[0] = $append(g[0], (t = p.$get(), u = o.$get(), ((u < 0 || u >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + u])), (v = p.$get(), w = o.$get() + 1 >> 0, ((w < 0 || w >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + w])));
                  o.$set(o.$get() + (2) >> 0);
                  e[0] = e[0] + (2) >> 0;
                  h[0] = $append(h[0], q);
                  return true;
                };
              })(e, f, g, h, i, j);
            case 1:
              if (!(f[0] < k || j[0] < l)) {
                $s = 2;
                continue;
              }
              if (j[0] >= l) {
                $s = 4;
                continue;
              }
              if (f[0] >= k) {
                $s = 5;
                continue;
              }
              if ((p = b.$get(), ((j[0] < 0 || j[0] >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j[0]])) < (q = a.$get(), ((f[0] < 0 || f[0] >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + f[0]]))) {
                $s = 6;
                continue;
              }
              $s = 7;
              continue;
            case 4:
              r = o((f.$ptr || (f.$ptr = new BW(function() {
                return this.$target[0];
              }, function($v) {
                this.$target[0] = $v;
              }, f))), a, c);
              $s = 9;
            case 9:
              if ($c) {
                $c = false;
                r = r.$blk();
              }
              if (r && r.$blk !== undefined) {
                break s;
              }
              i[0] = r;
              $s = 8;
              continue;
            case 5:
              s = o((j.$ptr || (j.$ptr = new BW(function() {
                return this.$target[0];
              }, function($v) {
                this.$target[0] = $v;
              }, j))), b, d);
              $s = 10;
            case 10:
              if ($c) {
                $c = false;
                s = s.$blk();
              }
              if (s && s.$blk !== undefined) {
                break s;
              }
              i[0] = s;
              $s = 8;
              continue;
            case 6:
              t = o((j.$ptr || (j.$ptr = new BW(function() {
                return this.$target[0];
              }, function($v) {
                this.$target[0] = $v;
              }, j))), b, d);
              $s = 11;
            case 11:
              if ($c) {
                $c = false;
                t = t.$blk();
              }
              if (t && t.$blk !== undefined) {
                break s;
              }
              i[0] = t;
              $s = 8;
              continue;
            case 7:
              u = o((f.$ptr || (f.$ptr = new BW(function() {
                return this.$target[0];
              }, function($v) {
                this.$target[0] = $v;
              }, f))), a, c);
              $s = 12;
            case 12:
              if ($c) {
                $c = false;
                u = u.$blk();
              }
              if (u && u.$blk !== undefined) {
                break s;
              }
              i[0] = u;
            case 8:
            case 3:
              if (!i[0]) {
                $s = -1;
                return [AC, AD];
              }
              $s = 1;
              continue;
            case 2:
              $s = -1;
              return [g[0], h[0]];
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return [BK.nil, BL.nil];
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: AE
            };
          }
          $f.a = a;
          $f.b = b;
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.h = h;
          $f.i = i;
          $f.j = j;
          $f.k = k;
          $f.l = l;
          $f.m = m;
          $f.n = n;
          $f.o = o;
          $f.p = p;
          $f.q = q;
          $f.r = r;
          $f.s = s;
          $f.t = t;
          $f.u = u;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    AF = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j;
      c = b.Inst;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = d;
        f = $clone(((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]), A.Inst);
        g = f.Op;
        if ((g === (0)) || (g === (1)) || (g === (7))) {} else if ((g === (2)) || (g === (3)) || (g === (6)) || (g === (4)) || (g === (5))) {
          (h = a.Inst, ((e < 0 || e >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + e])).Next = BL.nil;
        } else if ((g === (8)) || (g === (9)) || (g === (10))) {
          (i = a.Inst, ((e < 0 || e >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + e])).Next = BL.nil;
          W.copy((j = a.Inst, ((e < 0 || e >= j.$length) ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + e])), new W.ptr($clone(f, A.Inst), BL.nil));
        }
        d++;
      }
    };
    AG = function(a) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      b = new V.ptr($makeSlice(BZ, a.Inst.$length), a.Start, a.NumCap);
      c = a.Inst;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = d;
        f = $clone(((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]), A.Inst);
        W.copy((g = b.Inst, ((e < 0 || e >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + e])), new W.ptr($clone(f, A.Inst), BL.nil));
        d++;
      }
      h = b.Inst;
      i = 0;
      while (true) {
        if (!(i < h.$length)) {
          break;
        }
        j = i;
        l = (k = b.Inst, ((j < 0 || j >= k.$length) ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + j])).Inst.Op;
        if ((l === (0)) || (l === (1))) {
          o = (m = (n = b.Inst, ((j < 0 || j >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + j])), (m.$ptr_Out || (m.$ptr_Out = new CA(function() {
            return this.$target.Inst.Out;
          }, function($v) {
            this.$target.Inst.Out = $v;
          }, m))));
          r = (p = (q = b.Inst, ((j < 0 || j >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + j])), (p.$ptr_Arg || (p.$ptr_Arg = new CA(function() {
            return this.$target.Inst.Arg;
          }, function($v) {
            this.$target.Inst.Arg = $v;
          }, p))));
          u = $clone((s = b.Inst, t = r.$get(), ((t < 0 || t >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + t])), W);
          if (!((u.Inst.Op === 0) || (u.Inst.Op === 1))) {
            v = o;
            w = r;
            r = v;
            o = w;
            W.copy(u, (x = b.Inst, y = r.$get(), ((y < 0 || y >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + y])));
            if (!((u.Inst.Op === 0) || (u.Inst.Op === 1))) {
              i++;
              continue;
            }
          }
          ab = $clone((z = b.Inst, aa = o.$get(), ((aa < 0 || aa >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + aa])), W);
          if ((ab.Inst.Op === 0) || (ab.Inst.Op === 1)) {
            i++;
            continue;
          }
          af = (ac = (ad = b.Inst, ae = r.$get(), ((ae < 0 || ae >= ad.$length) ? ($throwRuntimeError("index out of range"), undefined) : ad.$array[ad.$offset + ae])), (ac.$ptr_Out || (ac.$ptr_Out = new CA(function() {
            return this.$target.Inst.Out;
          }, function($v) {
            this.$target.Inst.Out = $v;
          }, ac))));
          aj = (ag = (ah = b.Inst, ai = r.$get(), ((ai < 0 || ai >= ah.$length) ? ($throwRuntimeError("index out of range"), undefined) : ah.$array[ah.$offset + ai])), (ag.$ptr_Arg || (ag.$ptr_Arg = new CA(function() {
            return this.$target.Inst.Arg;
          }, function($v) {
            this.$target.Inst.Arg = $v;
          }, ag))));
          ak = false;
          if (u.Inst.Out === ((j >>> 0))) {
            ak = true;
          } else if (u.Inst.Arg === ((j >>> 0))) {
            ak = true;
            al = aj;
            am = af;
            af = al;
            aj = am;
          }
          if (ak) {
            af.$set(o.$get());
          }
          if (o.$get() === af.$get()) {
            r.$set(aj.$get());
          }
        } else {
          i++;
          continue;
        }
        i++;
      }
      return b;
    };
    AH.prototype.Len = function() {
      var a;
      a = this;
      return a.$length;
    };
    $ptrType(AH).prototype.Len = function() {
      return this.$get().Len();
    };
    AH.prototype.Less = function(a, b) {
      var a, b, c;
      c = this;
      return ((a < 0 || a >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + a]) < ((b < 0 || b >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + b]);
    };
    $ptrType(AH).prototype.Less = function(a, b) {
      return this.$get().Less(a, b);
    };
    AH.prototype.Swap = function(a, b) {
      var a, b, c, d, e;
      c = this;
      d = ((b < 0 || b >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + b]);
      e = ((a < 0 || a >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + a]);
      ((a < 0 || a >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + a] = d);
      ((b < 0 || b >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + b] = e);
    };
    $ptrType(AH).prototype.Swap = function(a, b) {
      return this.$get().Swap(a, b);
    };
    AK = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = [a];
            b = [b];
            c = [c];
            d = [d];
            e = [e];
            if (a[0].Inst.$length >= 1000) {
              $s = -1;
              return AL;
            }
            c[0] = AB(a[0].Inst.$length);
            e[0] = AB(a[0].Inst.$length);
            b[0] = $throwNilPointerError;
            d[0] = $makeSlice(CB, a[0].Inst.$length);
            b[0] = (function(a, b, c, d, e) {
              return function $b(f, g) {
                var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
                $s = 0;
                var $f, $c = false;
                if (this !== undefined && this.$blk !== undefined) {
                  $f = this;
                  $c = true;
                  aa = $f.aa;
                  ab = $f.ab;
                  ac = $f.ac;
                  ad = $f.ad;
                  ae = $f.ae;
                  af = $f.af;
                  ag = $f.ag;
                  ah = $f.ah;
                  ai = $f.ai;
                  aj = $f.aj;
                  ak = $f.ak;
                  al = $f.al;
                  am = $f.am;
                  an = $f.an;
                  ao = $f.ao;
                  ap = $f.ap;
                  aq = $f.aq;
                  ar = $f.ar;
                  as = $f.as;
                  at = $f.at;
                  au = $f.au;
                  av = $f.av;
                  aw = $f.aw;
                  ax = $f.ax;
                  ay = $f.ay;
                  az = $f.az;
                  ba = $f.ba;
                  bb = $f.bb;
                  bc = $f.bc;
                  bd = $f.bd;
                  be = $f.be;
                  bf = $f.bf;
                  bg = $f.bg;
                  bh = $f.bh;
                  bi = $f.bi;
                  bj = $f.bj;
                  bk = $f.bk;
                  bl = $f.bl;
                  bm = $f.bm;
                  bn = $f.bn;
                  f = $f.f;
                  g = $f.g;
                  h = $f.h;
                  i = $f.i;
                  j = $f.j;
                  k = $f.k;
                  l = $f.l;
                  m = $f.m;
                  n = $f.n;
                  o = $f.o;
                  p = $f.p;
                  q = $f.q;
                  r = $f.r;
                  s = $f.s;
                  t = $f.t;
                  u = $f.u;
                  v = $f.v;
                  w = $f.w;
                  x = $f.x;
                  y = $f.y;
                  z = $f.z;
                  $s = $f.$s;
                  $r = $f.$r;
                }
                s: while (true) {
                  switch ($s) {
                    case 0:
                      h = false;
                      h = true;
                      j = (i = a[0].Inst, ((f < 0 || f >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + f]));
                      if (e[0].contains(f)) {
                        $s = -1;
                        return h;
                      }
                      e[0].insert(f);
                      k = j.Inst.Op;
                      if ((k === (0)) || (k === (1))) {
                        $s = 2;
                        continue;
                      }
                      if ((k === (2)) || (k === (6))) {
                        $s = 3;
                        continue;
                      }
                      if (k === (3)) {
                        $s = 4;
                        continue;
                      }
                      if ((k === (4)) || (k === (5))) {
                        $s = 5;
                        continue;
                      }
                      if (k === (7)) {
                        $s = 6;
                        continue;
                      }
                      if (k === (8)) {
                        $s = 7;
                        continue;
                      }
                      if (k === (9)) {
                        $s = 8;
                        continue;
                      }
                      if (k === (10)) {
                        $s = 9;
                        continue;
                      }
                      $s = 10;
                      continue;
                    case 2:
                      m = b[0](j.Inst.Out, g);
                      $s = 12;
                    case 12:
                      if ($c) {
                        $c = false;
                        m = m.$blk();
                      }
                      if (m && m.$blk !== undefined) {
                        break s;
                      }
                      if (!(m)) {
                        l = false;
                        $s = 11;
                        continue s;
                      }
                      n = b[0](j.Inst.Arg, g);
                      $s = 13;
                    case 13:
                      if ($c) {
                        $c = false;
                        n = n.$blk();
                      }
                      if (n && n.$blk !== undefined) {
                        break s;
                      }
                      l = n;
                    case 11:
                      h = l;
                      p = (o = j.Inst.Out, ((o < 0 || o >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + o]));
                      r = (q = j.Inst.Arg, ((q < 0 || q >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + q]));
                      if (p && r) {
                        h = false;
                        $s = 1;
                        continue;
                      }
                      if (r) {
                        s = j.Inst.Arg;
                        t = j.Inst.Out;
                        j.Inst.Out = s;
                        j.Inst.Arg = t;
                        u = r;
                        v = p;
                        p = u;
                        r = v;
                      }
                      if (p) {
                        ((f < 0 || f >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + f] = true);
                        j.Inst.Op = 1;
                      }
                      x = AE($indexPtr(d[0].$array, d[0].$offset + j.Inst.Out, CC), $indexPtr(d[0].$array, d[0].$offset + j.Inst.Arg, CC), j.Inst.Out, j.Inst.Arg);
                      $s = 14;
                    case 14:
                      if ($c) {
                        $c = false;
                        x = x.$blk();
                      }
                      if (x && x.$blk !== undefined) {
                        break s;
                      }
                      w = x;
                      ((f < 0 || f >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + f] = w[0]);
                      j.Next = w[1];
                      if (j.Next.$length > 0 && ((y = j.Next, (0 >= y.$length ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + 0])) === 4294967295)) {
                        h = false;
                        $s = 1;
                        continue;
                      }
                      $s = 10;
                      continue;
                    case 3:
                      z = b[0](j.Inst.Out, g);
                      $s = 15;
                    case 15:
                      if ($c) {
                        $c = false;
                        z = z.$blk();
                      }
                      if (z && z.$blk !== undefined) {
                        break s;
                      }
                      h = z;
                      ((f < 0 || f >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + f] = (aa = j.Inst.Out, ((aa < 0 || aa >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + aa])));
                      ((f < 0 || f >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + f] = $appendSlice(new BK([]), (ab = j.Inst.Out, ((ab < 0 || ab >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + ab]))));
                      j.Next = $makeSlice(BL, ((ac = ((f < 0 || f >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + f]).$length / 2, (ac === ac && ac !== 1 / 0 && ac !== -1 / 0) ? ac >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0));
                      ad = j.Next;
                      ae = 0;
                      while (true) {
                        if (!(ae < ad.$length)) {
                          break;
                        }
                        af = ae;
                        (ag = j.Next, ((af < 0 || af >= ag.$length) ? ($throwRuntimeError("index out of range"), undefined) : ag.$array[ag.$offset + af] = j.Inst.Out));
                        ae++;
                      }
                      $s = 10;
                      continue;
                    case 4:
                      ah = b[0](j.Inst.Out, g);
                      $s = 16;
                    case 16:
                      if ($c) {
                        $c = false;
                        ah = ah.$blk();
                      }
                      if (ah && ah.$blk !== undefined) {
                        break s;
                      }
                      h = ah;
                      ((f < 0 || f >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + f] = (ai = j.Inst.Out, ((ai < 0 || ai >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + ai])));
                      ((f < 0 || f >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + f] = $appendSlice(new BK([]), (aj = j.Inst.Out, ((aj < 0 || aj >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + aj]))));
                      j.Next = $makeSlice(BL, ((ak = ((f < 0 || f >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + f]).$length / 2, (ak === ak && ak !== 1 / 0 && ak !== -1 / 0) ? ak >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0));
                      al = j.Next;
                      am = 0;
                      while (true) {
                        if (!(am < al.$length)) {
                          break;
                        }
                        an = am;
                        (ao = j.Next, ((an < 0 || an >= ao.$length) ? ($throwRuntimeError("index out of range"), undefined) : ao.$array[ao.$offset + an] = j.Inst.Out));
                        am++;
                      }
                      $s = 10;
                      continue;
                    case 5:
                      ((f < 0 || f >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + f] = (j.Inst.Op === 4));
                      $s = 10;
                      continue;
                    case 6:
                      ((f < 0 || f >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + f] = false);
                      if (j.Next.$length > 0) {
                        $s = 1;
                        continue;
                      }
                      c[0].insert(j.Inst.Out);
                      if (j.Inst.Rune.$length === 0) {
                        ((f < 0 || f >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + f] = new BK([]));
                        j.Next = new BL([j.Inst.Out]);
                        $s = 1;
                        continue;
                      }
                      ap = $makeSlice(BK, 0);
                      if ((j.Inst.Rune.$length === 1) && !((((((j.Inst.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) {
                        $s = 17;
                        continue;
                      }
                      $s = 18;
                      continue;
                    case 17:
                      ar = (aq = j.Inst.Rune, (0 >= aq.$length ? ($throwRuntimeError("index out of range"), undefined) : aq.$array[aq.$offset + 0]));
                      ap = $append(ap, ar, ar);
                      as = E.SimpleFold(ar);
                      while (true) {
                        if (!(!((as === ar)))) {
                          break;
                        }
                        ap = $append(ap, as, as);
                        as = E.SimpleFold(as);
                      }
                      $r = C.Sort(($subslice(new AH(ap.$array), ap.$offset, ap.$offset + ap.$length)));
                      $s = 20;
                    case 20:
                      if ($c) {
                        $c = false;
                        $r = $r.$blk();
                      }
                      if ($r && $r.$blk !== undefined) {
                        break s;
                      }
                      $s = 19;
                      continue;
                    case 18:
                      ap = $appendSlice(ap, j.Inst.Rune);
                    case 19:
                      ((f < 0 || f >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + f] = ap);
                      j.Next = $makeSlice(BL, ((at = ((f < 0 || f >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + f]).$length / 2, (at === at && at !== 1 / 0 && at !== -1 / 0) ? at >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0));
                      au = j.Next;
                      av = 0;
                      while (true) {
                        if (!(av < au.$length)) {
                          break;
                        }
                        aw = av;
                        (ax = j.Next, ((aw < 0 || aw >= ax.$length) ? ($throwRuntimeError("index out of range"), undefined) : ax.$array[ax.$offset + aw] = j.Inst.Out));
                        av++;
                      }
                      j.Inst.Op = 7;
                      $s = 10;
                      continue;
                    case 7:
                      ((f < 0 || f >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + f] = false);
                      if (j.Next.$length > 0) {
                        $s = 1;
                        continue;
                      }
                      c[0].insert(j.Inst.Out);
                      ay = new BK([]);
                      if (!((((((j.Inst.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) {
                        $s = 21;
                        continue;
                      }
                      $s = 22;
                      continue;
                    case 21:
                      ba = (az = j.Inst.Rune, (0 >= az.$length ? ($throwRuntimeError("index out of range"), undefined) : az.$array[az.$offset + 0]));
                      ay = $append(ay, ba, ba);
                      bb = E.SimpleFold(ba);
                      while (true) {
                        if (!(!((bb === ba)))) {
                          break;
                        }
                        ay = $append(ay, bb, bb);
                        bb = E.SimpleFold(bb);
                      }
                      $r = C.Sort(($subslice(new AH(ay.$array), ay.$offset, ay.$offset + ay.$length)));
                      $s = 24;
                    case 24:
                      if ($c) {
                        $c = false;
                        $r = $r.$blk();
                      }
                      if ($r && $r.$blk !== undefined) {
                        break s;
                      }
                      $s = 23;
                      continue;
                    case 22:
                      ay = $append(ay, (bc = j.Inst.Rune, (0 >= bc.$length ? ($throwRuntimeError("index out of range"), undefined) : bc.$array[bc.$offset + 0])), (bd = j.Inst.Rune, (0 >= bd.$length ? ($throwRuntimeError("index out of range"), undefined) : bd.$array[bd.$offset + 0])));
                    case 23:
                      ((f < 0 || f >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + f] = ay);
                      j.Next = $makeSlice(BL, ((be = ((f < 0 || f >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + f]).$length / 2, (be === be && be !== 1 / 0 && be !== -1 / 0) ? be >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0));
                      bf = j.Next;
                      bg = 0;
                      while (true) {
                        if (!(bg < bf.$length)) {
                          break;
                        }
                        bh = bg;
                        (bi = j.Next, ((bh < 0 || bh >= bi.$length) ? ($throwRuntimeError("index out of range"), undefined) : bi.$array[bi.$offset + bh] = j.Inst.Out));
                        bg++;
                      }
                      j.Inst.Op = 7;
                      $s = 10;
                      continue;
                    case 8:
                      ((f < 0 || f >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + f] = false);
                      if (j.Next.$length > 0) {
                        $s = 1;
                        continue;
                      }
                      c[0].insert(j.Inst.Out);
                      ((f < 0 || f >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + f] = $appendSlice(new BK([]), AJ));
                      j.Next = new BL([j.Inst.Out]);
                      $s = 10;
                      continue;
                    case 9:
                      ((f < 0 || f >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + f] = false);
                      if (j.Next.$length > 0) {
                        $s = 1;
                        continue;
                      }
                      c[0].insert(j.Inst.Out);
                      ((f < 0 || f >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + f] = $appendSlice(new BK([]), AI));
                      j.Next = $makeSlice(BL, ((bj = ((f < 0 || f >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + f]).$length / 2, (bj === bj && bj !== 1 / 0 && bj !== -1 / 0) ? bj >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0));
                      bk = j.Next;
                      bl = 0;
                      while (true) {
                        if (!(bl < bk.$length)) {
                          break;
                        }
                        bm = bl;
                        (bn = j.Next, ((bm < 0 || bm >= bn.$length) ? ($throwRuntimeError("index out of range"), undefined) : bn.$array[bn.$offset + bm] = j.Inst.Out));
                        bl++;
                      }
                    case 10:
                    case 1:
                      $s = -1;
                      return h;
                  }
                  return;
                }
                if ($f === undefined) {
                  $f = {
                    $blk: $b
                  };
                }
                $f.aa = aa;
                $f.ab = ab;
                $f.ac = ac;
                $f.ad = ad;
                $f.ae = ae;
                $f.af = af;
                $f.ag = ag;
                $f.ah = ah;
                $f.ai = ai;
                $f.aj = aj;
                $f.ak = ak;
                $f.al = al;
                $f.am = am;
                $f.an = an;
                $f.ao = ao;
                $f.ap = ap;
                $f.aq = aq;
                $f.ar = ar;
                $f.as = as;
                $f.at = at;
                $f.au = au;
                $f.av = av;
                $f.aw = aw;
                $f.ax = ax;
                $f.ay = ay;
                $f.az = az;
                $f.ba = ba;
                $f.bb = bb;
                $f.bc = bc;
                $f.bd = bd;
                $f.be = be;
                $f.bf = bf;
                $f.bg = bg;
                $f.bh = bh;
                $f.bi = bi;
                $f.bj = bj;
                $f.bk = bk;
                $f.bl = bl;
                $f.bm = bm;
                $f.bn = bn;
                $f.f = f;
                $f.g = g;
                $f.h = h;
                $f.i = i;
                $f.j = j;
                $f.k = k;
                $f.l = l;
                $f.m = m;
                $f.n = n;
                $f.o = o;
                $f.p = p;
                $f.q = q;
                $f.r = r;
                $f.s = s;
                $f.t = t;
                $f.u = u;
                $f.v = v;
                $f.w = w;
                $f.x = x;
                $f.y = y;
                $f.z = z;
                $f.$s = $s;
                $f.$r = $r;
                return $f;
              };
            })(a, b, c, d, e);
            c[0].clear();
            c[0].insert(((a[0].Start >>> 0)));
            f = $makeSlice(CD, a[0].Inst.$length);
          case 1:
            if (!(!c[0].empty())) {
              $s = 2;
              continue;
            }
            e[0].clear();
            g = c[0].next();
            h = b[0](g, f);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            if (!h) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            a[0] = AL;
            $s = 2;
            continue;
          case 4:
            $s = 1;
            continue;
          case 2:
            if (!(a[0] === AL)) {
              i = a[0].Inst;
              j = 0;
              while (true) {
                if (!(j < i.$length)) {
                  break;
                }
                k = j;
                (l = a[0].Inst, ((k < 0 || k >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + k])).Inst.Rune = ((k < 0 || k >= d[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : d[0].$array[d[0].$offset + k]);
                j++;
              }
            }
            $s = -1;
            return a[0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AK
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AM = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = BM.nil;
            if (a.Start === 0) {
              b = AL;
              $s = -1;
              return b;
            }
            if (!(((c = a.Inst, d = a.Start, ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d])).Op === 3)) || !(((((((e = a.Inst, f = a.Start, ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f])).Arg << 24 >>> 24)) & 4) >>> 0) === 4))) {
              b = AL;
              $s = -1;
              return b;
            }
            g = a.Inst;
            h = 0;
          case 1:
            if (!(h < g.$length)) {
              $s = 2;
              continue;
            }
            i = $clone(((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h]), A.Inst);
            l = (j = a.Inst, k = i.Out, ((k < 0 || k >= j.$length) ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + k])).Op;
            m = i.Op;
            if ((m === (0)) || (m === (1))) {
              if ((l === 4) || ((n = a.Inst, o = i.Arg, ((o < 0 || o >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + o])).Op === 4)) {
                b = AL;
                $s = -1;
                return b;
              }
            } else if (m === (3)) {
              if (l === 4) {
                if (((((i.Arg << 24 >>> 24)) & 8) >>> 0) === 8) {
                  h++;
                  $s = 1;
                  continue;
                }
                b = AL;
                $s = -1;
                return b;
              }
            } else if (l === 4) {
              b = AL;
              $s = -1;
              return b;
            }
            h++;
            $s = 1;
            continue;
          case 2:
            b = AG(a);
            p = AK(b);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            b = p;
            if (!(b === AL)) {
              AF(b, a);
            }
            b = b;
            $s = -1;
            return b;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AM
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.ptr.prototype.String = function() {
      var a;
      a = this;
      return a.regexpRO.expr;
    };
    AN.prototype.String = function() {
      return this.$val.String();
    };
    AN.ptr.prototype.Copy = function() {
      var a;
      a = this;
      return new AN.ptr($clone(a.regexpRO, AO), new H.Mutex.ptr(false), CG.nil);
    };
    AN.prototype.Copy = function() {
      return this.$val.Copy();
    };
    AP = function(a) {
      var a, b, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = AR(a, 212, false);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return b;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AP
        };
      }
      $f.a = a;
      $f.b = b;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.Compile = AP;
    AN.ptr.prototype.Longest = function() {
      var a;
      a = this;
      a.regexpRO.longest = true;
    };
    AN.prototype.Longest = function() {
      return this.$val.Longest();
    };
    AR = function(a, b, c) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = A.Parse(a, b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            d = e;
            f = d[0];
            g = d[1];
            if (!($interfaceIsEqual(g, $ifaceNil))) {
              $s = -1;
              return [BQ.nil, g];
            }
            h = f.MaxCap();
            i = f.CapNames();
            f = f.Simplify();
            j = A.Compile(f);
            k = j[0];
            g = j[1];
            if (!($interfaceIsEqual(g, $ifaceNil))) {
              $s = -1;
              return [BQ.nil, g];
            }
            l = AM(k);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            m = new AN.ptr(new AO.ptr(a, k, l, "", BU.nil, false, 0, 0, k.StartCond(), h, i, c), new H.Mutex.ptr(false), CG.nil);
            if (m.regexpRO.onepass === AL) {
              n = k.Prefix();
              m.regexpRO.prefix = n[0];
              m.regexpRO.prefixComplete = n[1];
            } else {
              o = X(k);
              m.regexpRO.prefix = o[0];
              m.regexpRO.prefixComplete = o[1];
              m.regexpRO.prefixEnd = o[2];
            }
            if (!(m.regexpRO.prefix === "")) {
              m.regexpRO.prefixBytes = (new BU($stringToBytes(m.regexpRO.prefix)));
              p = I.DecodeRuneInString(m.regexpRO.prefix);
              m.regexpRO.prefixRune = p[0];
            }
            $s = -1;
            return [m, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AR
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.ptr.prototype.get = function() {
      var a, b, c, d, e, f;
      a = this;
      a.mu.Lock();
      b = a.machine.$length;
      if (b > 0) {
        e = (c = a.machine, d = b - 1 >> 0, ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]));
        a.machine = $subslice(a.machine, 0, (b - 1 >> 0));
        a.mu.Unlock();
        return e;
      }
      a.mu.Unlock();
      f = T(a.regexpRO.prog, a.regexpRO.onepass);
      f.re = a;
      return f;
    };
    AN.prototype.get = function() {
      return this.$val.get();
    };
    AN.ptr.prototype.put = function(a) {
      var a, b;
      b = this;
      a.inputBytes.str = BU.nil;
      a.inputString.str = "";
      a.inputReader.r = $ifaceNil;
      b.mu.Lock();
      b.machine = $append(b.machine, a);
      b.mu.Unlock();
    };
    AN.prototype.put = function(a) {
      return this.$val.put(a);
    };
    AS = function(a) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = AP(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            b = c;
            d = b[0];
            e = b[1];
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            f = e.Error();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $panic(new $String("regexp: Compile(" + AU(a) + "): " + f));
          case 3:
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AS
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.MustCompile = AS;
    AU = function(a) {
      var a;
      if (G.CanBackquote(a)) {
        return "`" + a + "`";
      }
      return G.Quote(a);
    };
    AN.ptr.prototype.NumSubexp = function() {
      var a;
      a = this;
      return a.regexpRO.numSubexp;
    };
    AN.prototype.NumSubexp = function() {
      return this.$val.NumSubexp();
    };
    AN.ptr.prototype.SubexpNames = function() {
      var a;
      a = this;
      return a.regexpRO.subexpNames;
    };
    AN.prototype.SubexpNames = function() {
      return this.$val.SubexpNames();
    };
    AW.ptr.prototype.step = function(a) {
      var a, b, c;
      b = this;
      if (a < b.str.length) {
        c = b.str.charCodeAt(a);
        if (c < 128) {
          return [((c >> 0)), 1];
        }
        return I.DecodeRuneInString($substring(b.str, a));
      }
      return [-1, 0];
    };
    AW.prototype.step = function(a) {
      return this.$val.step(a);
    };
    AW.ptr.prototype.canCheckPrefix = function() {
      var a;
      a = this;
      return true;
    };
    AW.prototype.canCheckPrefix = function() {
      return this.$val.canCheckPrefix();
    };
    AW.ptr.prototype.hasPrefix = function(a) {
      var a, b;
      b = this;
      return D.HasPrefix(b.str, a.regexpRO.prefix);
    };
    AW.prototype.hasPrefix = function(a) {
      return this.$val.hasPrefix(a);
    };
    AW.ptr.prototype.index = function(a, b) {
      var a, b, c;
      c = this;
      return D.Index($substring(c.str, b), a.regexpRO.prefix);
    };
    AW.prototype.index = function(a, b) {
      return this.$val.index(a, b);
    };
    AW.ptr.prototype.context = function(a) {
      var a, b, c, d, e, f, g, h;
      b = this;
      c = -1;
      d = -1;
      e = c;
      f = d;
      if ((((a - 1 >> 0) >>> 0)) < ((b.str.length >>> 0))) {
        e = ((b.str.charCodeAt((a - 1 >> 0)) >> 0));
        if (e >= 128) {
          g = I.DecodeLastRuneInString($substring(b.str, 0, a));
          e = g[0];
        }
      }
      if (((a >>> 0)) < ((b.str.length >>> 0))) {
        f = ((b.str.charCodeAt(a) >> 0));
        if (f >= 128) {
          h = I.DecodeRuneInString($substring(b.str, a));
          f = h[0];
        }
      }
      return A.EmptyOpContext(e, f);
    };
    AW.prototype.context = function(a) {
      return this.$val.context(a);
    };
    AX.ptr.prototype.step = function(a) {
      var a, b, c, d;
      b = this;
      if (a < b.str.$length) {
        d = (c = b.str, ((a < 0 || a >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + a]));
        if (d < 128) {
          return [((d >> 0)), 1];
        }
        return I.DecodeRune($subslice(b.str, a));
      }
      return [-1, 0];
    };
    AX.prototype.step = function(a) {
      return this.$val.step(a);
    };
    AX.ptr.prototype.canCheckPrefix = function() {
      var a;
      a = this;
      return true;
    };
    AX.prototype.canCheckPrefix = function() {
      return this.$val.canCheckPrefix();
    };
    AX.ptr.prototype.hasPrefix = function(a) {
      var a, b;
      b = this;
      return F.HasPrefix(b.str, a.regexpRO.prefixBytes);
    };
    AX.prototype.hasPrefix = function(a) {
      return this.$val.hasPrefix(a);
    };
    AX.ptr.prototype.index = function(a, b) {
      var a, b, c;
      c = this;
      return F.Index($subslice(c.str, b), a.regexpRO.prefixBytes);
    };
    AX.prototype.index = function(a, b) {
      return this.$val.index(a, b);
    };
    AX.ptr.prototype.context = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k;
      b = this;
      c = -1;
      d = -1;
      e = c;
      f = d;
      if ((((a - 1 >> 0) >>> 0)) < ((b.str.$length >>> 0))) {
        e = (((g = b.str, h = a - 1 >> 0, ((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h])) >> 0));
        if (e >= 128) {
          i = I.DecodeLastRune($subslice(b.str, 0, a));
          e = i[0];
        }
      }
      if (((a >>> 0)) < ((b.str.$length >>> 0))) {
        f = (((j = b.str, ((a < 0 || a >= j.$length) ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + a])) >> 0));
        if (f >= 128) {
          k = I.DecodeRune($subslice(b.str, a));
          f = k[0];
        }
      }
      return A.EmptyOpContext(e, f);
    };
    AX.prototype.context = function(a) {
      return this.$val.context(a);
    };
    AY.ptr.prototype.step = function(a) {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            if (!b.atEOT && !((a === b.pos))) {
              $s = -1;
              return [-1, 0];
            }
            d = b.r.ReadRune();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            c = d;
            e = c[0];
            f = c[1];
            g = c[2];
            if (!($interfaceIsEqual(g, $ifaceNil))) {
              b.atEOT = true;
              $s = -1;
              return [-1, 0];
            }
            b.pos = b.pos + (f) >> 0;
            $s = -1;
            return [e, f];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AY.ptr.prototype.step
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AY.prototype.step = function(a) {
      return this.$val.step(a);
    };
    AY.ptr.prototype.canCheckPrefix = function() {
      var a;
      a = this;
      return false;
    };
    AY.prototype.canCheckPrefix = function() {
      return this.$val.canCheckPrefix();
    };
    AY.ptr.prototype.hasPrefix = function(a) {
      var a, b;
      b = this;
      return false;
    };
    AY.prototype.hasPrefix = function(a) {
      return this.$val.hasPrefix(a);
    };
    AY.ptr.prototype.index = function(a, b) {
      var a, b, c;
      c = this;
      return -1;
    };
    AY.prototype.index = function(a, b) {
      return this.$val.index(a, b);
    };
    AY.ptr.prototype.context = function(a) {
      var a, b;
      b = this;
      return 0;
    };
    AY.prototype.context = function(a) {
      return this.$val.context(a);
    };
    AN.ptr.prototype.LiteralPrefix = function() {
      var a, b, c, d, e;
      a = "";
      b = false;
      c = this;
      d = c.regexpRO.prefix;
      e = c.regexpRO.prefixComplete;
      a = d;
      b = e;
      return [a, b];
    };
    AN.prototype.LiteralPrefix = function() {
      return this.$val.LiteralPrefix();
    };
    AN.ptr.prototype.MatchReader = function(a) {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = b.doMatch(a, BU.nil, "");
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.MatchReader
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.MatchReader = function(a) {
      return this.$val.MatchReader(a);
    };
    AN.ptr.prototype.MatchString = function(a) {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = b.doMatch($ifaceNil, BU.nil, a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.MatchString
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.MatchString = function(a) {
      return this.$val.MatchString(a);
    };
    AN.ptr.prototype.Match = function(a) {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = b.doMatch($ifaceNil, a, "");
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.Match
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.Match = function(a) {
      return this.$val.Match(a);
    };
    AN.ptr.prototype.ReplaceAllString = function(a, b) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = [a];
            b = [b];
            c = [c];
            c[0] = this;
            d = 2;
            if (D.Contains(b[0], "$")) {
              d = $imul(2, ((c[0].regexpRO.numSubexp + 1 >> 0)));
            }
            e = c[0].replaceAll(BU.nil, a[0], d, (function(a, b, c) {
              return function(e, f) {
                var e, f;
                return c[0].expand(e, b[0], BU.nil, a[0], f);
              };
            })(a, b, c));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            f = e;
            $s = -1;
            return ($bytesToString(f));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.ReplaceAllString
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.ReplaceAllString = function(a, b) {
      return this.$val.ReplaceAllString(a, b);
    };
    AN.ptr.prototype.ReplaceAllLiteralString = function(a, b) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = [b];
            c = this;
            d = c.replaceAll(BU.nil, a, 2, (function(b) {
              return function(d, e) {
                var d, e;
                return $appendSlice(d, b[0]);
              };
            })(b));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ($bytesToString(d));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.ReplaceAllLiteralString
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.ReplaceAllLiteralString = function(a, b) {
      return this.$val.ReplaceAllLiteralString(a, b);
    };
    AN.ptr.prototype.ReplaceAllStringFunc = function(a, b) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = [a];
            b = [b];
            c = this;
            d = c.replaceAll(BU.nil, a[0], 2, (function(a, b) {
              return function $b(d, e) {
                var d, e, f, g, h, $s, $r;
                $s = 0;
                var $f, $c = false;
                if (this !== undefined && this.$blk !== undefined) {
                  $f = this;
                  $c = true;
                  d = $f.d;
                  e = $f.e;
                  f = $f.f;
                  g = $f.g;
                  h = $f.h;
                  $s = $f.$s;
                  $r = $f.$r;
                }
                s: while (true) {
                  switch ($s) {
                    case 0:
                      f = d;
                      g = b[0]($substring(a[0], (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]), (1 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 1])));
                      $s = 1;
                    case 1:
                      if ($c) {
                        $c = false;
                        g = g.$blk();
                      }
                      if (g && g.$blk !== undefined) {
                        break s;
                      }
                      h = g;
                      $s = -1;
                      return $appendSlice(f, h);
                  }
                  return;
                }
                if ($f === undefined) {
                  $f = {
                    $blk: $b
                  };
                }
                $f.d = d;
                $f.e = e;
                $f.f = f;
                $f.g = g;
                $f.h = h;
                $f.$s = $s;
                $f.$r = $r;
                return $f;
              };
            })(a, b));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            $s = -1;
            return ($bytesToString(e));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.ReplaceAllStringFunc
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.ReplaceAllStringFunc = function(a, b) {
      return this.$val.ReplaceAllStringFunc(a, b);
    };
    AN.ptr.prototype.replaceAll = function(a, b, c, d) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            f = 0;
            g = 0;
            h = BU.nil;
            i = 0;
            if (!(a === BU.nil)) {
              i = a.$length;
            } else {
              i = b.length;
            }
            if (c > e.regexpRO.prog.NumCap) {
              c = e.regexpRO.prog.NumCap;
            }
            j = CH.zero();
          case 1:
            if (!(g <= i)) {
              $s = 2;
              continue;
            }
            k = e.doExecute($ifaceNil, a, b, g, c, $subslice(new BO(j), 0, 0));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = k;
            if (l.$length === 0) {
              $s = 2;
              continue;
            }
            if (!(a === BU.nil)) {
              h = $appendSlice(h, $subslice(a, f, (0 >= l.$length ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + 0])));
            } else {
              h = $appendSlice(h, $substring(b, f, (0 >= l.$length ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + 0])));
            }
            if ((1 >= l.$length ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + 1]) > f || ((0 >= l.$length ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + 0]) === 0)) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            m = d(h, l);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            h = m;
          case 5:
            f = (1 >= l.$length ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + 1]);
            n = 0;
            if (!(a === BU.nil)) {
              o = I.DecodeRune($subslice(a, g));
              n = o[1];
            } else {
              p = I.DecodeRuneInString($substring(b, g));
              n = p[1];
            }
            if ((g + n >> 0) > (1 >= l.$length ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + 1])) {
              g = g + (n) >> 0;
            } else if ((g + 1 >> 0) > (1 >= l.$length ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + 1])) {
              g = g + (1) >> 0;
            } else {
              g = (1 >= l.$length ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + 1]);
            }
            $s = 1;
            continue;
          case 2:
            if (!(a === BU.nil)) {
              h = $appendSlice(h, $subslice(a, f));
            } else {
              h = $appendSlice(h, $substring(b, f));
            }
            $s = -1;
            return h;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.replaceAll
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.replaceAll = function(a, b, c, d) {
      return this.$val.replaceAll(a, b, c, d);
    };
    AN.ptr.prototype.ReplaceAll = function(a, b) {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = [a];
            b = [b];
            c = [c];
            d = [d];
            c[0] = this;
            e = 2;
            if (F.IndexByte(b[0], 36) >= 0) {
              e = $imul(2, ((c[0].regexpRO.numSubexp + 1 >> 0)));
            }
            d[0] = "";
            f = c[0].replaceAll(a[0], "", e, (function(a, b, c, d) {
              return function(f, g) {
                var f, g;
                if (!((d[0].length === b[0].$length))) {
                  d[0] = ($bytesToString(b[0]));
                }
                return c[0].expand(f, d[0], a[0], "", g);
              };
            })(a, b, c, d));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            g = f;
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.ReplaceAll
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.ReplaceAll = function(a, b) {
      return this.$val.ReplaceAll(a, b);
    };
    AN.ptr.prototype.ReplaceAllLiteral = function(a, b) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = [b];
            c = this;
            d = c.replaceAll(a, "", 2, (function(b) {
              return function(d, e) {
                var d, e;
                return $appendSlice(d, b[0]);
              };
            })(b));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.ReplaceAllLiteral
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.ReplaceAllLiteral = function(a, b) {
      return this.$val.ReplaceAllLiteral(a, b);
    };
    AN.ptr.prototype.ReplaceAllFunc = function(a, b) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = [a];
            b = [b];
            c = this;
            d = c.replaceAll(a[0], "", 2, (function(a, b) {
              return function $b(d, e) {
                var d, e, f, g, h, $s, $r;
                $s = 0;
                var $f, $c = false;
                if (this !== undefined && this.$blk !== undefined) {
                  $f = this;
                  $c = true;
                  d = $f.d;
                  e = $f.e;
                  f = $f.f;
                  g = $f.g;
                  h = $f.h;
                  $s = $f.$s;
                  $r = $f.$r;
                }
                s: while (true) {
                  switch ($s) {
                    case 0:
                      f = d;
                      g = b[0]($subslice(a[0], (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]), (1 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 1])));
                      $s = 1;
                    case 1:
                      if ($c) {
                        $c = false;
                        g = g.$blk();
                      }
                      if (g && g.$blk !== undefined) {
                        break s;
                      }
                      h = g;
                      $s = -1;
                      return $appendSlice(f, h);
                  }
                  return;
                }
                if ($f === undefined) {
                  $f = {
                    $blk: $b
                  };
                }
                $f.d = d;
                $f.e = e;
                $f.f = f;
                $f.g = g;
                $f.h = h;
                $f.$s = $s;
                $f.$r = $r;
                return $f;
              };
            })(a, b));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.ReplaceAllFunc
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.ReplaceAllFunc = function(a, b) {
      return this.$val.ReplaceAllFunc(a, b);
    };
    BE = function() {
      var a, b, c, d, e, f, g;
      a = (new BU($stringToBytes("\\.+*?()|[]{}^$")));
      b = 0;
      while (true) {
        if (!(b < a.$length)) {
          break;
        }
        c = ((b < 0 || b >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + b]);
        e = (d = c % 16, d === d ? d : $throwRuntimeError("integer divide by zero"));
        ((e < 0 || e >= BC.length) ? ($throwRuntimeError("index out of range"), undefined) : BC[e] = ((((e < 0 || e >= BC.length) ? ($throwRuntimeError("index out of range"), undefined) : BC[e]) | (((f = ((g = c / 16, (g === g && g !== 1 / 0 && g !== -1 / 0) ? g >>> 0 : $throwRuntimeError("integer divide by zero"))), f < 32 ? (1 << f) : 0) << 24 >>> 24))) >>> 0));
        b++;
      }
    };
    AN.ptr.prototype.pad = function(a) {
      var a, b, c;
      b = this;
      if (a === BO.nil) {
        return BO.nil;
      }
      c = $imul(((1 + b.regexpRO.numSubexp >> 0)), 2);
      while (true) {
        if (!(a.$length < c)) {
          break;
        }
        a = $append(a, -1);
      }
      return a;
    };
    AN.prototype.pad = function(a) {
      return this.$val.pad(a);
    };
    AN.ptr.prototype.allMatches = function(a, b, c, d) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            f = 0;
            if (b === BU.nil) {
              f = a.length;
            } else {
              f = b.$length;
            }
            g = 0;
            h = 0;
            i = -1;
            j = g;
            k = h;
            l = i;
          case 1:
            if (!(k < c && j <= f)) {
              $s = 2;
              continue;
            }
            m = e.doExecute($ifaceNil, b, a, j, e.regexpRO.prog.NumCap, BO.nil);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            n = m;
            if (n.$length === 0) {
              $s = 2;
              continue;
            }
            o = true;
            if ((1 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 1]) === j) {
              if ((0 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 0]) === l) {
                o = false;
              }
              p = 0;
              if (b === BU.nil) {
                q = I.DecodeRuneInString($substring(a, j, f));
                p = q[1];
              } else {
                r = I.DecodeRune($subslice(b, j, f));
                p = r[1];
              }
              if (p > 0) {
                j = j + (p) >> 0;
              } else {
                j = f + 1 >> 0;
              }
            } else {
              j = (1 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 1]);
            }
            l = (1 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 1]);
            if (o) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            $r = d(e.pad(n));
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            k = k + (1) >> 0;
          case 5:
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.allMatches
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.allMatches = function(a, b, c, d) {
      return this.$val.allMatches(a, b, c, d);
    };
    AN.ptr.prototype.Find = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = CH.zero();
            d = b.doExecute($ifaceNil, a, "", 0, 2, $subslice(new BO(c), 0, 0));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            if (e === BO.nil) {
              $s = -1;
              return BU.nil;
            }
            $s = -1;
            return $subslice(a, (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]), (1 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 1]));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.Find
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.Find = function(a) {
      return this.$val.Find(a);
    };
    AN.ptr.prototype.FindIndex = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = BO.nil;
            c = this;
            d = c.doExecute($ifaceNil, a, "", 0, 2, BO.nil);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            if (e === BO.nil) {
              b = BO.nil;
              $s = -1;
              return b;
            }
            b = $subslice(e, 0, 2);
            $s = -1;
            return b;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.FindIndex
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.FindIndex = function(a) {
      return this.$val.FindIndex(a);
    };
    AN.ptr.prototype.FindString = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = CH.zero();
            d = b.doExecute($ifaceNil, BU.nil, a, 0, 2, $subslice(new BO(c), 0, 0));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            if (e === BO.nil) {
              $s = -1;
              return "";
            }
            $s = -1;
            return $substring(a, (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]), (1 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 1]));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.FindString
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.FindString = function(a) {
      return this.$val.FindString(a);
    };
    AN.ptr.prototype.FindStringIndex = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = BO.nil;
            c = this;
            d = c.doExecute($ifaceNil, BU.nil, a, 0, 2, BO.nil);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            if (e === BO.nil) {
              b = BO.nil;
              $s = -1;
              return b;
            }
            b = $subslice(e, 0, 2);
            $s = -1;
            return b;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.FindStringIndex
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.FindStringIndex = function(a) {
      return this.$val.FindStringIndex(a);
    };
    AN.ptr.prototype.FindReaderIndex = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = BO.nil;
            c = this;
            d = c.doExecute(a, BU.nil, "", 0, 2, BO.nil);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            if (e === BO.nil) {
              b = BO.nil;
              $s = -1;
              return b;
            }
            b = $subslice(e, 0, 2);
            $s = -1;
            return b;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.FindReaderIndex
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.FindReaderIndex = function(a) {
      return this.$val.FindReaderIndex(a);
    };
    AN.ptr.prototype.FindSubmatch = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = CI.zero();
            d = b.doExecute($ifaceNil, a, "", 0, b.regexpRO.prog.NumCap, $subslice(new BO(c), 0, 0));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            if (e === BO.nil) {
              $s = -1;
              return CJ.nil;
            }
            f = $makeSlice(CJ, (1 + b.regexpRO.numSubexp >> 0));
            g = f;
            h = 0;
            while (true) {
              if (!(h < g.$length)) {
                break;
              }
              i = h;
              if (($imul(2, i)) < e.$length && (j = $imul(2, i), ((j < 0 || j >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + j])) >= 0) {
                ((i < 0 || i >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + i] = $subslice(a, (k = $imul(2, i), ((k < 0 || k >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + k])), (l = ($imul(2, i)) + 1 >> 0, ((l < 0 || l >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + l]))));
              }
              h++;
            }
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.FindSubmatch
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.FindSubmatch = function(a) {
      return this.$val.FindSubmatch(a);
    };
    AN.ptr.prototype.Expand = function(a, b, c, d) {
      var a, b, c, d, e;
      e = this;
      return e.expand(a, ($bytesToString(b)), c, "", d);
    };
    AN.prototype.Expand = function(a, b, c, d) {
      return this.$val.Expand(a, b, c, d);
    };
    AN.ptr.prototype.ExpandString = function(a, b, c, d) {
      var a, b, c, d, e;
      e = this;
      return e.expand(a, b, BU.nil, c, d);
    };
    AN.prototype.ExpandString = function(a, b, c, d) {
      return this.$val.ExpandString(a, b, c, d);
    };
    AN.ptr.prototype.expand = function(a, b, c, d, e) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      f = this;
      while (true) {
        if (!(b.length > 0)) {
          break;
        }
        g = D.Index(b, "$");
        if (g < 0) {
          break;
        }
        a = $appendSlice(a, $substring(b, 0, g));
        b = $substring(b, g);
        if (b.length > 1 && (b.charCodeAt(1) === 36)) {
          a = $append(a, 36);
          b = $substring(b, 2);
          continue;
        }
        h = BG(b);
        i = h[0];
        j = h[1];
        k = h[2];
        l = h[3];
        if (!l) {
          a = $append(a, 36);
          b = $substring(b, 1);
          continue;
        }
        b = k;
        if (j >= 0) {
          if ((($imul(2, j)) + 1 >> 0) < e.$length && (m = $imul(2, j), ((m < 0 || m >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + m])) >= 0) {
            if (!(c === BU.nil)) {
              a = $appendSlice(a, $subslice(c, (n = $imul(2, j), ((n < 0 || n >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + n])), (o = ($imul(2, j)) + 1 >> 0, ((o < 0 || o >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + o]))));
            } else {
              a = $appendSlice(a, $substring(d, (p = $imul(2, j), ((p < 0 || p >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + p])), (q = ($imul(2, j)) + 1 >> 0, ((q < 0 || q >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + q]))));
            }
          }
        } else {
          r = f.regexpRO.subexpNames;
          s = 0;
          while (true) {
            if (!(s < r.$length)) {
              break;
            }
            t = s;
            u = ((s < 0 || s >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + s]);
            if (i === u && (($imul(2, t)) + 1 >> 0) < e.$length && (v = $imul(2, t), ((v < 0 || v >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + v])) >= 0) {
              if (!(c === BU.nil)) {
                a = $appendSlice(a, $subslice(c, (w = $imul(2, t), ((w < 0 || w >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + w])), (x = ($imul(2, t)) + 1 >> 0, ((x < 0 || x >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + x]))));
              } else {
                a = $appendSlice(a, $substring(d, (y = $imul(2, t), ((y < 0 || y >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + y])), (z = ($imul(2, t)) + 1 >> 0, ((z < 0 || z >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + z]))));
              }
              break;
            }
            s++;
          }
        }
      }
      a = $appendSlice(a, b);
      return a;
    };
    AN.prototype.expand = function(a, b, c, d, e) {
      return this.$val.expand(a, b, c, d, e);
    };
    BG = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k;
      b = "";
      c = 0;
      d = "";
      e = false;
      if (a.length < 2 || !((a.charCodeAt(0) === 36))) {
        return [b, c, d, e];
      }
      f = false;
      if (a.charCodeAt(1) === 123) {
        f = true;
        a = $substring(a, 2);
      } else {
        a = $substring(a, 1);
      }
      g = 0;
      while (true) {
        if (!(g < a.length)) {
          break;
        }
        h = I.DecodeRuneInString($substring(a, g));
        i = h[0];
        j = h[1];
        if (!E.IsLetter(i) && !E.IsDigit(i) && !((i === 95))) {
          break;
        }
        g = g + (j) >> 0;
      }
      if (g === 0) {
        return [b, c, d, e];
      }
      b = $substring(a, 0, g);
      if (f) {
        if (g >= a.length || !((a.charCodeAt(g) === 125))) {
          return [b, c, d, e];
        }
        g = g + (1) >> 0;
      }
      c = 0;
      k = 0;
      while (true) {
        if (!(k < b.length)) {
          break;
        }
        if (b.charCodeAt(k) < 48 || 57 < b.charCodeAt(k) || c >= 100000000) {
          c = -1;
          break;
        }
        c = (($imul(c, 10)) + ((b.charCodeAt(k) >> 0)) >> 0) - 48 >> 0;
        k = k + (1) >> 0;
      }
      if ((b.charCodeAt(0) === 48) && b.length > 1) {
        c = -1;
      }
      d = $substring(a, g);
      e = true;
      return [b, c, d, e];
    };
    AN.ptr.prototype.FindSubmatchIndex = function(a) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = b.doExecute($ifaceNil, a, "", 0, b.regexpRO.prog.NumCap, BO.nil);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = b.pad(c);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.FindSubmatchIndex
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.FindSubmatchIndex = function(a) {
      return this.$val.FindSubmatchIndex(a);
    };
    AN.ptr.prototype.FindStringSubmatch = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = CI.zero();
            d = b.doExecute($ifaceNil, BU.nil, a, 0, b.regexpRO.prog.NumCap, $subslice(new BO(c), 0, 0));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            if (e === BO.nil) {
              $s = -1;
              return CE.nil;
            }
            f = $makeSlice(CE, (1 + b.regexpRO.numSubexp >> 0));
            g = f;
            h = 0;
            while (true) {
              if (!(h < g.$length)) {
                break;
              }
              i = h;
              if (($imul(2, i)) < e.$length && (j = $imul(2, i), ((j < 0 || j >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + j])) >= 0) {
                ((i < 0 || i >= f.$length) ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + i] = $substring(a, (k = $imul(2, i), ((k < 0 || k >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + k])), (l = ($imul(2, i)) + 1 >> 0, ((l < 0 || l >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + l]))));
              }
              h++;
            }
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.FindStringSubmatch
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.FindStringSubmatch = function(a) {
      return this.$val.FindStringSubmatch(a);
    };
    AN.ptr.prototype.FindStringSubmatchIndex = function(a) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = b.doExecute($ifaceNil, BU.nil, a, 0, b.regexpRO.prog.NumCap, BO.nil);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = b.pad(c);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.FindStringSubmatchIndex
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.FindStringSubmatchIndex = function(a) {
      return this.$val.FindStringSubmatchIndex(a);
    };
    AN.ptr.prototype.FindReaderSubmatchIndex = function(a) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = b.doExecute(a, BU.nil, "", 0, b.regexpRO.prog.NumCap, BO.nil);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = b.pad(c);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.FindReaderSubmatchIndex
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.FindReaderSubmatchIndex = function(a) {
      return this.$val.FindReaderSubmatchIndex(a);
    };
    AN.ptr.prototype.FindAll = function(a, b) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = [a];
            c = [c];
            d = this;
            if (b < 0) {
              b = a[0].$length + 1 >> 0;
            }
            c[0] = CJ.nil;
            $r = d.allMatches("", a[0], b, (function(a, c) {
              return function(e) {
                var e;
                if (c[0] === CJ.nil) {
                  c[0] = $makeSlice(CJ, 0, 10);
                }
                c[0] = $append(c[0], $subslice(a[0], (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]), (1 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 1])));
              };
            })(a, c));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c[0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.FindAll
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.FindAll = function(a, b) {
      return this.$val.FindAll(a, b);
    };
    AN.ptr.prototype.FindAllIndex = function(a, b) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = [c];
            d = this;
            if (b < 0) {
              b = a.$length + 1 >> 0;
            }
            c[0] = CK.nil;
            $r = d.allMatches("", a, b, (function(c) {
              return function(e) {
                var e;
                if (c[0] === CK.nil) {
                  c[0] = $makeSlice(CK, 0, 10);
                }
                c[0] = $append(c[0], $subslice(e, 0, 2));
              };
            })(c));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c[0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.FindAllIndex
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.FindAllIndex = function(a, b) {
      return this.$val.FindAllIndex(a, b);
    };
    AN.ptr.prototype.FindAllString = function(a, b) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = [a];
            c = [c];
            d = this;
            if (b < 0) {
              b = a[0].length + 1 >> 0;
            }
            c[0] = CE.nil;
            $r = d.allMatches(a[0], BU.nil, b, (function(a, c) {
              return function(e) {
                var e;
                if (c[0] === CE.nil) {
                  c[0] = $makeSlice(CE, 0, 10);
                }
                c[0] = $append(c[0], $substring(a[0], (0 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 0]), (1 >= e.$length ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + 1])));
              };
            })(a, c));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c[0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.FindAllString
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.FindAllString = function(a, b) {
      return this.$val.FindAllString(a, b);
    };
    AN.ptr.prototype.FindAllStringIndex = function(a, b) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = [c];
            d = this;
            if (b < 0) {
              b = a.length + 1 >> 0;
            }
            c[0] = CK.nil;
            $r = d.allMatches(a, BU.nil, b, (function(c) {
              return function(e) {
                var e;
                if (c[0] === CK.nil) {
                  c[0] = $makeSlice(CK, 0, 10);
                }
                c[0] = $append(c[0], $subslice(e, 0, 2));
              };
            })(c));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c[0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.FindAllStringIndex
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.FindAllStringIndex = function(a, b) {
      return this.$val.FindAllStringIndex(a, b);
    };
    AN.ptr.prototype.FindAllSubmatch = function(a, b) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = [a];
            c = [c];
            d = this;
            if (b < 0) {
              b = a[0].$length + 1 >> 0;
            }
            c[0] = CL.nil;
            $r = d.allMatches("", a[0], b, (function(a, c) {
              return function(e) {
                var e, f, g, h, i, j, k, l, m;
                if (c[0] === CL.nil) {
                  c[0] = $makeSlice(CL, 0, 10);
                }
                g = $makeSlice(CJ, (f = e.$length / 2, (f === f && f !== 1 / 0 && f !== -1 / 0) ? f >> 0 : $throwRuntimeError("integer divide by zero")));
                h = g;
                i = 0;
                while (true) {
                  if (!(i < h.$length)) {
                    break;
                  }
                  j = i;
                  if ((k = $imul(2, j), ((k < 0 || k >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + k])) >= 0) {
                    ((j < 0 || j >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + j] = $subslice(a[0], (l = $imul(2, j), ((l < 0 || l >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + l])), (m = ($imul(2, j)) + 1 >> 0, ((m < 0 || m >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + m]))));
                  }
                  i++;
                }
                c[0] = $append(c[0], g);
              };
            })(a, c));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c[0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.FindAllSubmatch
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.FindAllSubmatch = function(a, b) {
      return this.$val.FindAllSubmatch(a, b);
    };
    AN.ptr.prototype.FindAllSubmatchIndex = function(a, b) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = [c];
            d = this;
            if (b < 0) {
              b = a.$length + 1 >> 0;
            }
            c[0] = CK.nil;
            $r = d.allMatches("", a, b, (function(c) {
              return function(e) {
                var e;
                if (c[0] === CK.nil) {
                  c[0] = $makeSlice(CK, 0, 10);
                }
                c[0] = $append(c[0], e);
              };
            })(c));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c[0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.FindAllSubmatchIndex
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.FindAllSubmatchIndex = function(a, b) {
      return this.$val.FindAllSubmatchIndex(a, b);
    };
    AN.ptr.prototype.FindAllStringSubmatch = function(a, b) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = [a];
            c = [c];
            d = this;
            if (b < 0) {
              b = a[0].length + 1 >> 0;
            }
            c[0] = CM.nil;
            $r = d.allMatches(a[0], BU.nil, b, (function(a, c) {
              return function(e) {
                var e, f, g, h, i, j, k, l, m;
                if (c[0] === CM.nil) {
                  c[0] = $makeSlice(CM, 0, 10);
                }
                g = $makeSlice(CE, (f = e.$length / 2, (f === f && f !== 1 / 0 && f !== -1 / 0) ? f >> 0 : $throwRuntimeError("integer divide by zero")));
                h = g;
                i = 0;
                while (true) {
                  if (!(i < h.$length)) {
                    break;
                  }
                  j = i;
                  if ((k = $imul(2, j), ((k < 0 || k >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + k])) >= 0) {
                    ((j < 0 || j >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + j] = $substring(a[0], (l = $imul(2, j), ((l < 0 || l >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + l])), (m = ($imul(2, j)) + 1 >> 0, ((m < 0 || m >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + m]))));
                  }
                  i++;
                }
                c[0] = $append(c[0], g);
              };
            })(a, c));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c[0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.FindAllStringSubmatch
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.FindAllStringSubmatch = function(a, b) {
      return this.$val.FindAllStringSubmatch(a, b);
    };
    AN.ptr.prototype.FindAllStringSubmatchIndex = function(a, b) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = [c];
            d = this;
            if (b < 0) {
              b = a.length + 1 >> 0;
            }
            c[0] = CK.nil;
            $r = d.allMatches(a, BU.nil, b, (function(c) {
              return function(e) {
                var e;
                if (c[0] === CK.nil) {
                  c[0] = $makeSlice(CK, 0, 10);
                }
                c[0] = $append(c[0], e);
              };
            })(c));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c[0];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.FindAllStringSubmatchIndex
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.FindAllStringSubmatchIndex = function(a, b) {
      return this.$val.FindAllStringSubmatchIndex(a, b);
    };
    AN.ptr.prototype.Split = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            if (b === 0) {
              $s = -1;
              return CE.nil;
            }
            if (c.regexpRO.expr.length > 0 && (a.length === 0)) {
              $s = -1;
              return new CE([""]);
            }
            d = c.FindAllStringIndex(a, b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            f = $makeSlice(CE, 0, e.$length);
            g = 0;
            h = 0;
            i = e;
            j = 0;
            while (true) {
              if (!(j < i.$length)) {
                break;
              }
              k = ((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j]);
              if (b > 0 && f.$length >= (b - 1 >> 0)) {
                break;
              }
              h = (0 >= k.$length ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + 0]);
              if (!(((1 >= k.$length ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + 1]) === 0))) {
                f = $append(f, $substring(a, g, h));
              }
              g = (1 >= k.$length ? ($throwRuntimeError("index out of range"), undefined) : k.$array[k.$offset + 1]);
              j++;
            }
            if (!((h === a.length))) {
              f = $append(f, $substring(a, g));
            }
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AN.ptr.prototype.Split
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AN.prototype.Split = function(a, b) {
      return this.$val.Split(a, b);
    };
    BJ.methods = [{
      prop: "reset",
      name: "reset",
      pkg: "regexp",
      typ: $funcType([$Int, $Int], [], false)
    }, {
      prop: "shouldVisit",
      name: "shouldVisit",
      pkg: "regexp",
      typ: $funcType([$Uint32, $Int], [$Bool], false)
    }, {
      prop: "push",
      name: "push",
      pkg: "regexp",
      typ: $funcType([$Uint32, $Int, $Bool], [], false)
    }];
    CF.methods = [{
      prop: "tryBacktrack",
      name: "tryBacktrack",
      pkg: "regexp",
      typ: $funcType([BJ, AV, $Uint32, $Int], [$Bool], false)
    }, {
      prop: "backtrack",
      name: "backtrack",
      pkg: "regexp",
      typ: $funcType([AV, $Int, $Int, $Int], [$Bool], false)
    }, {
      prop: "newInputBytes",
      name: "newInputBytes",
      pkg: "regexp",
      typ: $funcType([BU], [AV], false)
    }, {
      prop: "newInputString",
      name: "newInputString",
      pkg: "regexp",
      typ: $funcType([$String], [AV], false)
    }, {
      prop: "newInputReader",
      name: "newInputReader",
      pkg: "regexp",
      typ: $funcType([B.RuneReader], [AV], false)
    }, {
      prop: "init",
      name: "init",
      pkg: "regexp",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "alloc",
      name: "alloc",
      pkg: "regexp",
      typ: $funcType([BV], [BS], false)
    }, {
      prop: "match",
      name: "match",
      pkg: "regexp",
      typ: $funcType([AV, $Int], [$Bool], false)
    }, {
      prop: "clear",
      name: "clear",
      pkg: "regexp",
      typ: $funcType([CN], [], false)
    }, {
      prop: "step",
      name: "step",
      pkg: "regexp",
      typ: $funcType([CN, CN, $Int, $Int, $Int32, A.EmptyOp], [], false)
    }, {
      prop: "add",
      name: "add",
      pkg: "regexp",
      typ: $funcType([CN, $Uint32, $Int, BO, A.EmptyOp, BS], [BS], false)
    }, {
      prop: "onepass",
      name: "onepass",
      pkg: "regexp",
      typ: $funcType([AV, $Int, $Int], [$Bool], false)
    }];
    BY.methods = [{
      prop: "empty",
      name: "empty",
      pkg: "regexp",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "next",
      name: "next",
      pkg: "regexp",
      typ: $funcType([], [$Uint32], false)
    }, {
      prop: "clear",
      name: "clear",
      pkg: "regexp",
      typ: $funcType([], [], false)
    }, {
      prop: "contains",
      name: "contains",
      pkg: "regexp",
      typ: $funcType([$Uint32], [$Bool], false)
    }, {
      prop: "insert",
      name: "insert",
      pkg: "regexp",
      typ: $funcType([$Uint32], [], false)
    }, {
      prop: "insertNew",
      name: "insertNew",
      pkg: "regexp",
      typ: $funcType([$Uint32], [], false)
    }];
    AH.methods = [{
      prop: "Len",
      name: "Len",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Less",
      name: "Less",
      pkg: "",
      typ: $funcType([$Int, $Int], [$Bool], false)
    }, {
      prop: "Swap",
      name: "Swap",
      pkg: "",
      typ: $funcType([$Int, $Int], [], false)
    }];
    BQ.methods = [{
      prop: "doMatch",
      name: "doMatch",
      pkg: "regexp",
      typ: $funcType([B.RuneReader, BU, $String], [$Bool], false)
    }, {
      prop: "doExecute",
      name: "doExecute",
      pkg: "regexp",
      typ: $funcType([B.RuneReader, BU, $String, $Int, $Int, BO], [BO], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Copy",
      name: "Copy",
      pkg: "",
      typ: $funcType([], [BQ], false)
    }, {
      prop: "Longest",
      name: "Longest",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "get",
      name: "get",
      pkg: "regexp",
      typ: $funcType([], [CF], false)
    }, {
      prop: "put",
      name: "put",
      pkg: "regexp",
      typ: $funcType([CF], [], false)
    }, {
      prop: "NumSubexp",
      name: "NumSubexp",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "SubexpNames",
      name: "SubexpNames",
      pkg: "",
      typ: $funcType([], [CE], false)
    }, {
      prop: "LiteralPrefix",
      name: "LiteralPrefix",
      pkg: "",
      typ: $funcType([], [$String, $Bool], false)
    }, {
      prop: "MatchReader",
      name: "MatchReader",
      pkg: "",
      typ: $funcType([B.RuneReader], [$Bool], false)
    }, {
      prop: "MatchString",
      name: "MatchString",
      pkg: "",
      typ: $funcType([$String], [$Bool], false)
    }, {
      prop: "Match",
      name: "Match",
      pkg: "",
      typ: $funcType([BU], [$Bool], false)
    }, {
      prop: "ReplaceAllString",
      name: "ReplaceAllString",
      pkg: "",
      typ: $funcType([$String, $String], [$String], false)
    }, {
      prop: "ReplaceAllLiteralString",
      name: "ReplaceAllLiteralString",
      pkg: "",
      typ: $funcType([$String, $String], [$String], false)
    }, {
      prop: "ReplaceAllStringFunc",
      name: "ReplaceAllStringFunc",
      pkg: "",
      typ: $funcType([$String, CO], [$String], false)
    }, {
      prop: "replaceAll",
      name: "replaceAll",
      pkg: "regexp",
      typ: $funcType([BU, $String, $Int, CP], [BU], false)
    }, {
      prop: "ReplaceAll",
      name: "ReplaceAll",
      pkg: "",
      typ: $funcType([BU, BU], [BU], false)
    }, {
      prop: "ReplaceAllLiteral",
      name: "ReplaceAllLiteral",
      pkg: "",
      typ: $funcType([BU, BU], [BU], false)
    }, {
      prop: "ReplaceAllFunc",
      name: "ReplaceAllFunc",
      pkg: "",
      typ: $funcType([BU, CQ], [BU], false)
    }, {
      prop: "pad",
      name: "pad",
      pkg: "regexp",
      typ: $funcType([BO], [BO], false)
    }, {
      prop: "allMatches",
      name: "allMatches",
      pkg: "regexp",
      typ: $funcType([$String, BU, $Int, CR], [], false)
    }, {
      prop: "Find",
      name: "Find",
      pkg: "",
      typ: $funcType([BU], [BU], false)
    }, {
      prop: "FindIndex",
      name: "FindIndex",
      pkg: "",
      typ: $funcType([BU], [BO], false)
    }, {
      prop: "FindString",
      name: "FindString",
      pkg: "",
      typ: $funcType([$String], [$String], false)
    }, {
      prop: "FindStringIndex",
      name: "FindStringIndex",
      pkg: "",
      typ: $funcType([$String], [BO], false)
    }, {
      prop: "FindReaderIndex",
      name: "FindReaderIndex",
      pkg: "",
      typ: $funcType([B.RuneReader], [BO], false)
    }, {
      prop: "FindSubmatch",
      name: "FindSubmatch",
      pkg: "",
      typ: $funcType([BU], [CJ], false)
    }, {
      prop: "Expand",
      name: "Expand",
      pkg: "",
      typ: $funcType([BU, BU, BU, BO], [BU], false)
    }, {
      prop: "ExpandString",
      name: "ExpandString",
      pkg: "",
      typ: $funcType([BU, $String, $String, BO], [BU], false)
    }, {
      prop: "expand",
      name: "expand",
      pkg: "regexp",
      typ: $funcType([BU, $String, BU, $String, BO], [BU], false)
    }, {
      prop: "FindSubmatchIndex",
      name: "FindSubmatchIndex",
      pkg: "",
      typ: $funcType([BU], [BO], false)
    }, {
      prop: "FindStringSubmatch",
      name: "FindStringSubmatch",
      pkg: "",
      typ: $funcType([$String], [CE], false)
    }, {
      prop: "FindStringSubmatchIndex",
      name: "FindStringSubmatchIndex",
      pkg: "",
      typ: $funcType([$String], [BO], false)
    }, {
      prop: "FindReaderSubmatchIndex",
      name: "FindReaderSubmatchIndex",
      pkg: "",
      typ: $funcType([B.RuneReader], [BO], false)
    }, {
      prop: "FindAll",
      name: "FindAll",
      pkg: "",
      typ: $funcType([BU, $Int], [CJ], false)
    }, {
      prop: "FindAllIndex",
      name: "FindAllIndex",
      pkg: "",
      typ: $funcType([BU, $Int], [CK], false)
    }, {
      prop: "FindAllString",
      name: "FindAllString",
      pkg: "",
      typ: $funcType([$String, $Int], [CE], false)
    }, {
      prop: "FindAllStringIndex",
      name: "FindAllStringIndex",
      pkg: "",
      typ: $funcType([$String, $Int], [CK], false)
    }, {
      prop: "FindAllSubmatch",
      name: "FindAllSubmatch",
      pkg: "",
      typ: $funcType([BU, $Int], [CL], false)
    }, {
      prop: "FindAllSubmatchIndex",
      name: "FindAllSubmatchIndex",
      pkg: "",
      typ: $funcType([BU, $Int], [CK], false)
    }, {
      prop: "FindAllStringSubmatch",
      name: "FindAllStringSubmatch",
      pkg: "",
      typ: $funcType([$String, $Int], [CM], false)
    }, {
      prop: "FindAllStringSubmatchIndex",
      name: "FindAllStringSubmatchIndex",
      pkg: "",
      typ: $funcType([$String, $Int], [CK], false)
    }, {
      prop: "Split",
      name: "Split",
      pkg: "",
      typ: $funcType([$String, $Int], [CE], false)
    }];
    CS.methods = [{
      prop: "step",
      name: "step",
      pkg: "regexp",
      typ: $funcType([$Int], [$Int32, $Int], false)
    }, {
      prop: "canCheckPrefix",
      name: "canCheckPrefix",
      pkg: "regexp",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "hasPrefix",
      name: "hasPrefix",
      pkg: "regexp",
      typ: $funcType([BQ], [$Bool], false)
    }, {
      prop: "index",
      name: "index",
      pkg: "regexp",
      typ: $funcType([BQ, $Int], [$Int], false)
    }, {
      prop: "context",
      name: "context",
      pkg: "regexp",
      typ: $funcType([$Int], [A.EmptyOp], false)
    }];
    CT.methods = [{
      prop: "step",
      name: "step",
      pkg: "regexp",
      typ: $funcType([$Int], [$Int32, $Int], false)
    }, {
      prop: "canCheckPrefix",
      name: "canCheckPrefix",
      pkg: "regexp",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "hasPrefix",
      name: "hasPrefix",
      pkg: "regexp",
      typ: $funcType([BQ], [$Bool], false)
    }, {
      prop: "index",
      name: "index",
      pkg: "regexp",
      typ: $funcType([BQ, $Int], [$Int], false)
    }, {
      prop: "context",
      name: "context",
      pkg: "regexp",
      typ: $funcType([$Int], [A.EmptyOp], false)
    }];
    CU.methods = [{
      prop: "step",
      name: "step",
      pkg: "regexp",
      typ: $funcType([$Int], [$Int32, $Int], false)
    }, {
      prop: "canCheckPrefix",
      name: "canCheckPrefix",
      pkg: "regexp",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "hasPrefix",
      name: "hasPrefix",
      pkg: "regexp",
      typ: $funcType([BQ], [$Bool], false)
    }, {
      prop: "index",
      name: "index",
      pkg: "regexp",
      typ: $funcType([BQ, $Int], [$Int], false)
    }, {
      prop: "context",
      name: "context",
      pkg: "regexp",
      typ: $funcType([$Int], [A.EmptyOp], false)
    }];
    J.init("regexp", [{
      prop: "pc",
      name: "pc",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "arg",
      name: "arg",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "pos",
      name: "pos",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }]);
    K.init("regexp", [{
      prop: "prog",
      name: "prog",
      embedded: false,
      exported: false,
      typ: BN,
      tag: ""
    }, {
      prop: "end",
      name: "end",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "cap",
      name: "cap",
      embedded: false,
      exported: false,
      typ: BO,
      tag: ""
    }, {
      prop: "jobs",
      name: "jobs",
      embedded: false,
      exported: false,
      typ: BP,
      tag: ""
    }, {
      prop: "visited",
      name: "visited",
      embedded: false,
      exported: false,
      typ: BL,
      tag: ""
    }]);
    P.init("regexp", [{
      prop: "sparse",
      name: "sparse",
      embedded: false,
      exported: false,
      typ: BL,
      tag: ""
    }, {
      prop: "dense",
      name: "dense",
      embedded: false,
      exported: false,
      typ: BR,
      tag: ""
    }]);
    Q.init("regexp", [{
      prop: "pc",
      name: "pc",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "t",
      name: "t",
      embedded: false,
      exported: false,
      typ: BS,
      tag: ""
    }]);
    R.init("regexp", [{
      prop: "inst",
      name: "inst",
      embedded: false,
      exported: false,
      typ: BV,
      tag: ""
    }, {
      prop: "cap",
      name: "cap",
      embedded: false,
      exported: false,
      typ: BO,
      tag: ""
    }]);
    S.init("regexp", [{
      prop: "re",
      name: "re",
      embedded: false,
      exported: false,
      typ: BQ,
      tag: ""
    }, {
      prop: "p",
      name: "p",
      embedded: false,
      exported: false,
      typ: BN,
      tag: ""
    }, {
      prop: "op",
      name: "op",
      embedded: false,
      exported: false,
      typ: BM,
      tag: ""
    }, {
      prop: "maxBitStateLen",
      name: "maxBitStateLen",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "b",
      name: "b",
      embedded: false,
      exported: false,
      typ: BJ,
      tag: ""
    }, {
      prop: "q0",
      name: "q0",
      embedded: false,
      exported: false,
      typ: P,
      tag: ""
    }, {
      prop: "q1",
      name: "q1",
      embedded: false,
      exported: false,
      typ: P,
      tag: ""
    }, {
      prop: "pool",
      name: "pool",
      embedded: false,
      exported: false,
      typ: BT,
      tag: ""
    }, {
      prop: "matched",
      name: "matched",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "matchcap",
      name: "matchcap",
      embedded: false,
      exported: false,
      typ: BO,
      tag: ""
    }, {
      prop: "inputBytes",
      name: "inputBytes",
      embedded: false,
      exported: false,
      typ: AX,
      tag: ""
    }, {
      prop: "inputString",
      name: "inputString",
      embedded: false,
      exported: false,
      typ: AW,
      tag: ""
    }, {
      prop: "inputReader",
      name: "inputReader",
      embedded: false,
      exported: false,
      typ: AY,
      tag: ""
    }]);
    V.init("", [{
      prop: "Inst",
      name: "Inst",
      embedded: false,
      exported: true,
      typ: BZ,
      tag: ""
    }, {
      prop: "Start",
      name: "Start",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: ""
    }, {
      prop: "NumCap",
      name: "NumCap",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: ""
    }]);
    W.init("", [{
      prop: "Inst",
      name: "Inst",
      embedded: true,
      exported: true,
      typ: A.Inst,
      tag: ""
    }, {
      prop: "Next",
      name: "Next",
      embedded: false,
      exported: true,
      typ: BL,
      tag: ""
    }]);
    AA.init("regexp", [{
      prop: "sparse",
      name: "sparse",
      embedded: false,
      exported: false,
      typ: BL,
      tag: ""
    }, {
      prop: "dense",
      name: "dense",
      embedded: false,
      exported: false,
      typ: BL,
      tag: ""
    }, {
      prop: "size",
      name: "size",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "nextIndex",
      name: "nextIndex",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }]);
    AH.init($Int32);
    AN.init("regexp", [{
      prop: "regexpRO",
      name: "regexpRO",
      embedded: true,
      exported: false,
      typ: AO,
      tag: ""
    }, {
      prop: "mu",
      name: "mu",
      embedded: false,
      exported: false,
      typ: H.Mutex,
      tag: ""
    }, {
      prop: "machine",
      name: "machine",
      embedded: false,
      exported: false,
      typ: CG,
      tag: ""
    }]);
    AO.init("regexp", [{
      prop: "expr",
      name: "expr",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "prog",
      name: "prog",
      embedded: false,
      exported: false,
      typ: BN,
      tag: ""
    }, {
      prop: "onepass",
      name: "onepass",
      embedded: false,
      exported: false,
      typ: BM,
      tag: ""
    }, {
      prop: "prefix",
      name: "prefix",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "prefixBytes",
      name: "prefixBytes",
      embedded: false,
      exported: false,
      typ: BU,
      tag: ""
    }, {
      prop: "prefixComplete",
      name: "prefixComplete",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "prefixRune",
      name: "prefixRune",
      embedded: false,
      exported: false,
      typ: $Int32,
      tag: ""
    }, {
      prop: "prefixEnd",
      name: "prefixEnd",
      embedded: false,
      exported: false,
      typ: $Uint32,
      tag: ""
    }, {
      prop: "cond",
      name: "cond",
      embedded: false,
      exported: false,
      typ: A.EmptyOp,
      tag: ""
    }, {
      prop: "numSubexp",
      name: "numSubexp",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "subexpNames",
      name: "subexpNames",
      embedded: false,
      exported: false,
      typ: CE,
      tag: ""
    }, {
      prop: "longest",
      name: "longest",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    AV.init([{
      prop: "canCheckPrefix",
      name: "canCheckPrefix",
      pkg: "regexp",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "context",
      name: "context",
      pkg: "regexp",
      typ: $funcType([$Int], [A.EmptyOp], false)
    }, {
      prop: "hasPrefix",
      name: "hasPrefix",
      pkg: "regexp",
      typ: $funcType([BQ], [$Bool], false)
    }, {
      prop: "index",
      name: "index",
      pkg: "regexp",
      typ: $funcType([BQ, $Int], [$Int], false)
    }, {
      prop: "step",
      name: "step",
      pkg: "regexp",
      typ: $funcType([$Int], [$Int32, $Int], false)
    }]);
    AW.init("regexp", [{
      prop: "str",
      name: "str",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }]);
    AX.init("regexp", [{
      prop: "str",
      name: "str",
      embedded: false,
      exported: false,
      typ: BU,
      tag: ""
    }]);
    AY.init("regexp", [{
      prop: "r",
      name: "r",
      embedded: false,
      exported: false,
      typ: B.RuneReader,
      tag: ""
    }, {
      prop: "atEOT",
      name: "atEOT",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }, {
      prop: "pos",
      name: "pos",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = F.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = H.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = G.$init();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = I.$init();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            U = BH.zero();
            BC = BI.zero();
            L = BJ.nil;
            AC = new BK([]);
            AD = new BL([4294967295]);
            AI = new BK([0, 9, 11, 1114111]);
            AJ = new BK([0, 1114111]);
            AL = BM.nil;
            BE();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["go.1password.io/xplatform/vendor/go.1password.io/brain/model"] = (function() {
    var $pkg = {},
      $init, B, A, D, C, E, F, G, H, I, J, K, L, N, T, U, Z, AA, AB, AC, AD, AE, AF, AG, O, V;
    B = $packages["go.1password.io/xplatform/vendor/go.1password.io/xplatform-security/domain"];
    A = $packages["net/url"];
    D = $packages["regexp"];
    C = $packages["strings"];
    E = $pkg.DesignationMask = $newType(8, $kindUint64, "model.DesignationMask", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/model", true, null);
    F = $pkg.Designation = $newType(8, $kindString, "model.Designation", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/model", true, null);
    G = $pkg.WeightedMap = $newType(4, $kindMap, "model.WeightedMap", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/model", true, null);
    H = $pkg.OPType = $newType(8, $kindString, "model.OPType", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/model", true, null);
    I = $pkg.URLs = $newType(12, $kindSlice, "model.URLs", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/model", true, null);
    J = $pkg.FillableFields = $newType(12, $kindSlice, "model.FillableFields", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/model", true, null);
    K = $pkg.FillableField = $newType(0, $kindStruct, "model.FillableField", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/model", true, function(Designation_, OPType_, Value_, Label_, HTMLID_, HTMLName_, Checked_, Restricted_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Designation = "";
        this.OPType = "";
        this.Value = "";
        this.Label = "";
        this.HTMLID = "";
        this.HTMLName = "";
        this.Checked = false;
        this.Restricted = false;
        return;
      }
      this.Designation = Designation_;
      this.OPType = OPType_;
      this.Value = Value_;
      this.Label = Label_;
      this.HTMLID = HTMLID_;
      this.HTMLName = HTMLName_;
      this.Checked = Checked_;
      this.Restricted = Restricted_;
    });
    L = $pkg.FillObject = $newType(0, $kindStruct, "model.FillObject", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/model", true, function(URLs_, FillableFields_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.URLs = I.nil;
        this.FillableFields = J.nil;
        return;
      }
      this.URLs = URLs_;
      this.FillableFields = FillableFields_;
    });
    N = $pkg.ItemField = $newType(0, $kindStruct, "model.ItemField", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/model", true, function(ID_, Name_, Value_, Type_, Designation_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.ID = "";
        this.Name = "";
        this.Value = "";
        this.Type = "";
        this.Designation = "";
        return;
      }
      this.ID = ID_;
      this.Name = Name_;
      this.Value = Value_;
      this.Type = Type_;
      this.Designation = Designation_;
    });
    T = $pkg.PageField = $newType(0, $kindStruct, "model.PageField", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/model", true, function(Active_, AriaDisable_, AriaHasPopup_, AriaHidden_, AutoCompleteType_, DataStripe_, DataBrainTreeName_, Disabled_, FakeTested_, FakeViewable_, FakeVisible_, FakeType_, FormOPID_, HTMLID_, HTMLName_, HTMLClass_, Index_, LabelAria_, LabelData_, LabelLeft_, LabelRight_, LabelTag_, MinLength_, MaxLength_, OnepasswordFieldType_, OPID_, Placeholder_, ReadOnly_, SelectInfo_, Tabindex_, Title_, Type_, UserEdited_, Value_, Viewable_, Visible_, NextFieldType_, PrevFieldType_, FormDesignation_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Active = false;
        this.AriaDisable = false;
        this.AriaHasPopup = false;
        this.AriaHidden = false;
        this.AutoCompleteType = "";
        this.DataStripe = "";
        this.DataBrainTreeName = "";
        this.Disabled = false;
        this.FakeTested = false;
        this.FakeViewable = false;
        this.FakeVisible = false;
        this.FakeType = "";
        this.FormOPID = "";
        this.HTMLID = "";
        this.HTMLName = "";
        this.HTMLClass = "";
        this.Index = 0;
        this.LabelAria = "";
        this.LabelData = "";
        this.LabelLeft = "";
        this.LabelRight = "";
        this.LabelTag = "";
        this.MinLength = 0;
        this.MaxLength = 0;
        this.OnepasswordFieldType = "";
        this.OPID = "";
        this.Placeholder = "";
        this.ReadOnly = false;
        this.SelectInfo = false;
        this.Tabindex = "";
        this.Title = "";
        this.Type = "";
        this.UserEdited = false;
        this.Value = "";
        this.Viewable = false;
        this.Visible = false;
        this.NextFieldType = "";
        this.PrevFieldType = "";
        this.FormDesignation = "";
        return;
      }
      this.Active = Active_;
      this.AriaDisable = AriaDisable_;
      this.AriaHasPopup = AriaHasPopup_;
      this.AriaHidden = AriaHidden_;
      this.AutoCompleteType = AutoCompleteType_;
      this.DataStripe = DataStripe_;
      this.DataBrainTreeName = DataBrainTreeName_;
      this.Disabled = Disabled_;
      this.FakeTested = FakeTested_;
      this.FakeViewable = FakeViewable_;
      this.FakeVisible = FakeVisible_;
      this.FakeType = FakeType_;
      this.FormOPID = FormOPID_;
      this.HTMLID = HTMLID_;
      this.HTMLName = HTMLName_;
      this.HTMLClass = HTMLClass_;
      this.Index = Index_;
      this.LabelAria = LabelAria_;
      this.LabelData = LabelData_;
      this.LabelLeft = LabelLeft_;
      this.LabelRight = LabelRight_;
      this.LabelTag = LabelTag_;
      this.MinLength = MinLength_;
      this.MaxLength = MaxLength_;
      this.OnepasswordFieldType = OnepasswordFieldType_;
      this.OPID = OPID_;
      this.Placeholder = Placeholder_;
      this.ReadOnly = ReadOnly_;
      this.SelectInfo = SelectInfo_;
      this.Tabindex = Tabindex_;
      this.Title = Title_;
      this.Type = Type_;
      this.UserEdited = UserEdited_;
      this.Value = Value_;
      this.Viewable = Viewable_;
      this.Visible = Visible_;
      this.NextFieldType = NextFieldType_;
      this.PrevFieldType = PrevFieldType_;
      this.FormDesignation = FormDesignation_;
    });
    U = $pkg.SelectOption = $newType(12, $kindSlice, "model.SelectOption", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/model", true, null);
    Z = $sliceType(F);
    AA = $sliceType($String);
    AB = $sliceType(U);
    AC = $ptrType(U);
    AD = $sliceType($Uint8);
    AE = $ptrType(L);
    AF = $ptrType(T);
    AG = $mapType($String, AB);
    L.ptr.prototype.WithoutRestrictedFields = function() {
      var a, b, c, d, e;
      a = this;
      b = $clone(a, L);
      b.FillableFields = new J([]);
      c = a.FillableFields;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = $clone(((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]), K);
        if (!e.Restricted) {
          b.FillableFields = $append(b.FillableFields, e);
        }
        d++;
      }
      return b;
    };
    L.prototype.WithoutRestrictedFields = function() {
      return this.$val.WithoutRestrictedFields();
    };
    K.ptr.prototype.HasFillableType = function() {
      var a, b, c, d;
      a = this;
      b = (c = $pkg.FillableTypesMap[H.keyFor(a.OPType)], c !== undefined ? [c.v, true] : [false, false]);
      d = b[1];
      return d;
    };
    K.prototype.HasFillableType = function() {
      return this.$val.HasFillableType();
    };
    K.ptr.prototype.FillableTypes = function() {
      var a, b, c, d, e, f, g;
      a = false;
      b = this;
      c = (d = $pkg.FillableTypesMap[H.keyFor(b.OPType)], d !== undefined ? [d.v, true] : [false, false]);
      e = c[0];
      f = c[1];
      if (f) {
        a = e;
        return a;
      }
      a = (g = $pkg.FillableTypesMap[H.keyFor("text")], g !== undefined ? g.v : false);
      return a;
    };
    K.prototype.FillableTypes = function() {
      return this.$val.FillableTypes();
    };
    K.ptr.prototype.IsEmpty = function() {
      var a;
      a = this;
      return !a.Checked && a.Value === "";
    };
    K.prototype.IsEmpty = function() {
      return this.$val.IsEmpty();
    };
    K.ptr.prototype.IsWebFormOPType = function() {
      var a, b;
      a = this;
      b = a.OPType;
      if (b === ("text") || b === ("password") || b === ("checkbox") || b === ("radio") || b === ("select-one")) {
        return true;
      }
      return false;
    };
    K.prototype.IsWebFormOPType = function() {
      return this.$val.IsWebFormOPType();
    };
    J.prototype.AllDesignations = function() {
      var a, b, c, d, e;
      a = Z.nil;
      b = this;
      c = b;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = $clone(((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]), K);
        if (!(e.Designation === "")) {
          a = $append(a, e.Designation);
        }
        d++;
      }
      return a;
    };
    $ptrType(J).prototype.AllDesignations = function() {
      return this.$get().AllDesignations();
    };
    J.prototype.RestrictedDesignations = function() {
      var a, b, c, d, e;
      a = Z.nil;
      b = this;
      c = b;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = $clone(((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]), K);
        if (e.Restricted) {
          a = $append(a, e.Designation);
        }
        d++;
      }
      return a;
    };
    $ptrType(J).prototype.RestrictedDesignations = function() {
      return this.$get().RestrictedDesignations();
    };
    J.prototype.AllDesignationsMask = function() {
      var a, b, c, d, e, f, g, h, i, j;
      a = new E(0, 0);
      b = this;
      c = b;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = $clone(((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]), K);
        f = (g = $pkg.DesignationMaskMap[F.keyFor((e.Designation))], g !== undefined ? [g.v, true] : [new E(0, 0), false]);
        h = f[0];
        i = f[1];
        if (i) {
          a = (j = h, new E(a.$high | j.$high, (a.$low | j.$low) >>> 0));
        }
        d++;
      }
      return a;
    };
    $ptrType(J).prototype.AllDesignationsMask = function() {
      return this.$get().AllDesignationsMask();
    };
    I.prototype.RequireHTTPSDuringFill = function() {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a;
            c = 0;
          case 1:
            if (!(c < b.$length)) {
              $s = 2;
              continue;
            }
            d = ((c < 0 || c >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + c]);
            f = A.Parse(d);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            e = f;
            g = e[0];
            h = e[1];
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              c++;
              $s = 1;
              continue;
            }
            if (g.Scheme === "http") {
              $s = -1;
              return false;
            }
            c++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return true;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: I.prototype.RequireHTTPSDuringFill
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(I).prototype.RequireHTTPSDuringFill = function() {
      return this.$get().RequireHTTPSDuringFill();
    };
    I.prototype.AllowedDomains = function() {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = AA.nil;
            b = this;
            c = b;
            d = 0;
          case 1:
            if (!(d < c.$length)) {
              $s = 2;
              continue;
            }
            e = ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]);
            g = A.Parse(e);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
            h = f[0];
            i = f[1];
            if (!($interfaceIsEqual(i, $ifaceNil)) || h.Hostname() === "") {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            k = h.Parse("https://" + e);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            h = j[0];
            i = j[1];
          case 5:
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            d++;
            $s = 1;
            continue;
          case 8:
            l = h.Hostname();
            a = $append(a, l);
            n = B.NakedDomainForHostname(l);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            m = n;
            o = m[0];
            i = m[1];
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              d++;
              $s = 1;
              continue;
            }
            a = $append(a, o);
            d++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return a;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: I.prototype.AllowedDomains
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(I).prototype.AllowedDomains = function() {
      return this.$get().AllowedDomains();
    };
    I.prototype.AllowsURLs = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            if (a.$length === 0) {
              $s = -1;
              return false;
            }
            c = b.AllowedDomains();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
            e = a;
            f = 0;
          case 2:
            if (!(f < e.$length)) {
              $s = 3;
              continue;
            }
            g = ((f < 0 || f >= e.$length) ? ($throwRuntimeError("index out of range"), undefined) : e.$array[e.$offset + f]);
            i = A.Parse(g);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            j = h[0];
            k = h[1];
            if (!($interfaceIsEqual(k, $ifaceNil)) || j.Hostname() === "") {
              $s = -1;
              return false;
            }
            m = B.NakedDomainForHostname(j.Hostname());
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            l = m;
            n = l[0];
            k = l[1];
            if (!($interfaceIsEqual(k, $ifaceNil))) {
              $s = -1;
              return false;
            }
            o = false;
            p = d;
            q = 0;
            while (true) {
              if (!(q < p.$length)) {
                break;
              }
              r = ((q < 0 || q >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + q]);
              if (n === r || j.Hostname() === r) {
                o = true;
                break;
              }
              q++;
            }
            if (!o) {
              $s = -1;
              return false;
            }
            f++;
            $s = 2;
            continue;
          case 3:
            $s = -1;
            return true;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: I.prototype.AllowsURLs
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(I).prototype.AllowsURLs = function(a) {
      return this.$get().AllowsURLs(a);
    };
    J.prototype.ValueForDesignation = function(a, b) {
      var a, b, c, d, e, f, g, h;
      c = this;
      d = 0;
      e = c;
      f = 0;
      while (true) {
        if (!(f < e.$length)) {
          break;
        }
        g = f;
        h = $clone(((g < 0 || g >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + g]), K);
        if (h.Designation === a) {
          if (b === d) {
            return h.Value;
          }
          d = d + (1) >> 0;
        }
        f++;
      }
      return "";
    };
    $ptrType(J).prototype.ValueForDesignation = function(a, b) {
      return this.$get().ValueForDesignation(a, b);
    };
    H.prototype.IsConcealed = function() {
      var a;
      a = this.$val;
      return a === "concealed" || a === "password";
    };
    $ptrType(H).prototype.IsConcealed = function() {
      return new H(this.$get()).IsConcealed();
    };
    N.ptr.prototype.OPID = function() {
      var a, b, c;
      a = this;
      b = $clone(a, N).DeserializeOPID();
      c = b[1];
      return c;
    };
    N.prototype.OPID = function() {
      return this.$val.OPID();
    };
    N.ptr.prototype.HtmlID = function() {
      var a, b, c;
      a = this;
      b = $clone(a, N).DeserializeOPID();
      c = b[0];
      return c;
    };
    N.prototype.HtmlID = function() {
      return this.$val.HtmlID();
    };
    N.ptr.prototype.HtmlName = function() {
      var a;
      a = this;
      return a.Name;
    };
    N.prototype.HtmlName = function() {
      return this.$val.HtmlName();
    };
    N.ptr.prototype.IsBlank = function() {
      var a;
      a = this;
      return a.Value === "";
    };
    N.prototype.IsBlank = function() {
      return this.$val.IsBlank();
    };
    N.ptr.prototype.IsPotentialUsername = function() {
      var a, b;
      a = this;
      b = a.Type;
      return b === "T" || b === "E" || b === "U" || b === "N";
    };
    N.prototype.IsPotentialUsername = function() {
      return this.$val.IsPotentialUsername();
    };
    N.ptr.prototype.IsPassword = function() {
      var a;
      a = this;
      return a.Type === "P";
    };
    N.prototype.IsPassword = function() {
      return this.$val.IsPassword();
    };
    N.ptr.prototype.IsCheckbox = function() {
      var a;
      a = this;
      return a.Type === "C";
    };
    N.prototype.IsCheckbox = function() {
      return this.$val.IsCheckbox();
    };
    N.ptr.prototype.IsFillable = function() {
      var a, b;
      a = this;
      return (b = O[$String.keyFor(a.Type)], b !== undefined ? b.v : false);
    };
    N.prototype.IsFillable = function() {
      return this.$val.IsFillable();
    };
    N.ptr.prototype.String = function() {
      var a;
      a = this;
      return $clone(a, N).OPID() + "=> <" + $clone(a, N).HtmlID() + "/" + $clone(a, N).HtmlName() + ">";
    };
    N.prototype.String = function() {
      return this.$val.String();
    };
    N.ptr.prototype.DeserializeOPID = function() {
      var a, b, c, d, e, f, g, h, i, j;
      a = "";
      b = "";
      c = this;
      if (C.Index(c.ID, ";opid") === -1) {
        d = c.ID;
        e = "";
        a = d;
        b = e;
        return [a, b];
      }
      f = C.Split(c.ID, ";opid=");
      if (f.$length === 1) {
        g = (0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0]);
        h = "";
        a = g;
        b = h;
        return [a, b];
      }
      i = (0 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 0]);
      j = (1 >= f.$length ? ($throwRuntimeError("index out of range"), undefined) : f.$array[f.$offset + 1]);
      a = i;
      b = j;
      return [a, b];
    };
    N.prototype.DeserializeOPID = function() {
      return this.$val.DeserializeOPID();
    };
    N.ptr.prototype.AddToFillObject = function(a) {
      var a, b;
      b = this;
      if (b.Value === "") {
        return false;
      }
      if (b.Type === "P" && !a) {
        return false;
      }
      return true;
    };
    N.prototype.AddToFillObject = function(a) {
      return this.$val.AddToFillObject(a);
    };
    T.ptr.prototype.BestLabelAttributeValue = function() {
      var a;
      a = this;
      if (V(a.LabelTag)) {
        return a.LabelTag;
      } else if (V(a.LabelAria)) {
        return a.LabelAria;
      } else if (V(a.LabelData)) {
        return a.LabelData;
      } else if (V(a.LabelLeft)) {
        return a.LabelLeft;
      } else if (V(a.LabelRight)) {
        return a.LabelRight;
      }
      return "";
    };
    T.prototype.BestLabelAttributeValue = function() {
      return this.$val.BestLabelAttributeValue();
    };
    V = function(a) {
      var a;
      return !(a === "") && a.length <= 100;
    };
    T.ptr.prototype.IsPotentialUsernameField = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = C.ToUpper(a.Type);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            $s = -1;
            return c === "TEXT" || c === "EMAIL" || c === "URL" || c === "TEL";
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: T.ptr.prototype.IsPotentialUsernameField
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    T.prototype.IsPotentialUsernameField = function() {
      return this.$val.IsPotentialUsernameField();
    };
    T.ptr.prototype.IsPotentialTOTPField = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = C.ToUpper(a.Type);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            $s = -1;
            return c === "TEXT" || c === "PASSWORD" || c === "TEL" || c === "NUMBER";
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: T.ptr.prototype.IsPotentialTOTPField
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    T.prototype.IsPotentialTOTPField = function() {
      return this.$val.IsPotentialTOTPField();
    };
    T.ptr.prototype.IsPassword = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = C.ToUpper(a.Type);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            $s = -1;
            return c === "PASSWORD";
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: T.ptr.prototype.IsPassword
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    T.prototype.IsPassword = function() {
      return this.$val.IsPassword();
    };
    T.ptr.prototype.IsRadioButton = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = C.ToUpper(a.Type);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            $s = -1;
            return c === "RADIO";
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: T.ptr.prototype.IsRadioButton
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    T.prototype.IsRadioButton = function() {
      return this.$val.IsRadioButton();
    };
    T.ptr.prototype.IsCheckbox = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = C.ToUpper(a.Type);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            $s = -1;
            return c === "CHECKBOX";
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: T.ptr.prototype.IsCheckbox
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    T.prototype.IsCheckbox = function() {
      return this.$val.IsCheckbox();
    };
    T.ptr.prototype.IsSelect = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = C.ToUpper(a.Type);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            $s = -1;
            return c === "SELECT-ONE";
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: T.ptr.prototype.IsSelect
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    T.prototype.IsSelect = function() {
      return this.$val.IsSelect();
    };
    T.ptr.prototype.IsHidden = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = C.ToUpper(a.Type);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            $s = -1;
            return c === "HIDDEN";
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: T.ptr.prototype.IsHidden
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    T.prototype.IsHidden = function() {
      return this.$val.IsHidden();
    };
    T.ptr.prototype.IsVisible = function() {
      var a;
      a = this;
      return a.Visible;
    };
    T.prototype.IsVisible = function() {
      return this.$val.IsVisible();
    };
    T.ptr.prototype.IsViewable = function() {
      var a;
      a = this;
      return a.Viewable;
    };
    T.prototype.IsViewable = function() {
      return this.$val.IsViewable();
    };
    T.ptr.prototype.IsPostFakeTestViewable = function() {
      var a;
      a = this;
      return a.FakeViewable;
    };
    T.prototype.IsPostFakeTestViewable = function() {
      return this.$val.IsPostFakeTestViewable();
    };
    T.ptr.prototype.IsPostFakeTestVisible = function() {
      var a;
      a = this;
      return a.FakeVisible;
    };
    T.prototype.IsPostFakeTestVisible = function() {
      return this.$val.IsPostFakeTestVisible();
    };
    T.ptr.prototype.IsAriaDisabledOrHidden = function() {
      var a;
      a = this;
      return a.AriaDisable || a.AriaHidden;
    };
    T.prototype.IsAriaDisabledOrHidden = function() {
      return this.$val.IsAriaDisabledOrHidden();
    };
    T.ptr.prototype.IsFocusable = function() {
      var a;
      a = this;
      return a.Active || ($clone(a, T).IsVisible() && !(a.Disabled || a.AriaDisable || a.AriaHidden));
    };
    T.prototype.IsFocusable = function() {
      return this.$val.IsFocusable();
    };
    T.ptr.prototype.InSameForm = function(a) {
      var a, b;
      b = this;
      return b.FormOPID === a.FormOPID;
    };
    T.prototype.InSameForm = function(a) {
      return this.$val.InSameForm(a);
    };
    T.ptr.prototype.IsSaveableType = function() {
      var a, b;
      a = this;
      return !((b = $pkg.SaveableFieldsByHTMLType[$String.keyFor(a.Type)], b !== undefined ? b.v : "") === "");
    };
    T.prototype.IsSaveableType = function() {
      return this.$val.IsSaveableType();
    };
    T.ptr.prototype.IsFillable = function() {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            if (a.Active) {
              b = true;
              $s = 1;
              continue s;
            }
            if (!($clone(a, T).IsVisible() || $clone(a, T).IsPostFakeTestVisible())) {
              c = false;
              $s = 2;
              continue s;
            }
            d = $clone(a, T).IsHidden();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            c = !(d || $clone(a, T).IsAriaDisabledOrHidden() || a.Disabled || a.ReadOnly);
          case 2:
            b = c;
          case 1:
            $s = -1;
            return b;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: T.ptr.prototype.IsFillable
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    T.prototype.IsFillable = function() {
      return this.$val.IsFillable();
    };
    T.ptr.prototype.Matches = function(a) {
      var a, b, c;
      b = this;
      if (!($clone(a, N).OPID() === b.OPID)) {
        return false;
      }
      if (!((c = $pkg.SaveableFieldsByHTMLType[$String.keyFor(b.Type)], c !== undefined ? c.v : "") === a.Type)) {
        return false;
      }
      if (!(b.HTMLName === a.Name) || !(b.HTMLID === $clone(a, N).HtmlID())) {
        return false;
      }
      return true;
    };
    T.prototype.Matches = function(a) {
      return this.$val.Matches(a);
    };
    T.ptr.prototype.Maxlength = function() {
      var a;
      a = this;
      if (a.MaxLength === 0) {
        return 999;
      }
      return a.MaxLength;
    };
    T.prototype.Maxlength = function() {
      return this.$val.Maxlength();
    };
    T.ptr.prototype.Options = function() {
      var a, b;
      a = this;
      return (b = a.SelectInfo[$String.keyFor("options")], b !== undefined ? b.v : AB.nil);
    };
    T.prototype.Options = function() {
      return this.$val.Options();
    };
    T.ptr.prototype.OptionMatchingDisplayText = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = AC.nil;
            d = C.ToLower(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            f = $clone(b, T).Options();
            g = 0;
          case 2:
            if (!(g < f.$length)) {
              $s = 3;
              continue;
            }
            h = [h];
            i = g;
            h[0] = (j = $clone(b, T).Options(), ((i < 0 || i >= j.$length) ? ($throwRuntimeError("index out of range"), undefined) : j.$array[j.$offset + i]));
            k = C.ToLower(h[0].DisplayValue());
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = k;
            if (C.HasPrefix(e, "~")) {
              $s = 5;
              continue;
            }
            if (C.HasPrefix(e, "=")) {
              $s = 6;
              continue;
            }
            if (l === e) {
              $s = 7;
              continue;
            }
            if (C.Contains(l, e)) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 5:
            n = D.Compile($substring(e, 1));
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            m = n;
            o = m[0];
            p = m[1];
            if (!($interfaceIsEqual(p, $ifaceNil))) {
              $s = 3;
              continue;
            }
            q = o.Match((new AD($stringToBytes(l))));
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            if (q) {
              $s = 11;
              continue;
            }
            $s = 12;
            continue;
          case 11:
            c = (h.$ptr || (h.$ptr = new AC(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, h)));
            $s = 3;
            continue;
          case 12:
            $s = 9;
            continue;
          case 6:
            if (C.EqualFold(l, $substring(e, 1))) {
              c = (h.$ptr || (h.$ptr = new AC(function() {
                return this.$target[0];
              }, function($v) {
                this.$target[0] = $v;
              }, h)));
              $s = 3;
              continue;
            }
            $s = 9;
            continue;
          case 7:
            c = (h.$ptr || (h.$ptr = new AC(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, h)));
            $s = 3;
            continue;
            $s = 9;
            continue;
          case 8:
            if (c === AC.nil) {
              c = (h.$ptr || (h.$ptr = new AC(function() {
                return this.$target[0];
              }, function($v) {
                this.$target[0] = $v;
              }, h)));
              g++;
              $s = 2;
              continue;
            } else {
              r = c.DisplayValue();
              if (l.length < r.length) {
                c = (h.$ptr || (h.$ptr = new AC(function() {
                  return this.$target[0];
                }, function($v) {
                  this.$target[0] = $v;
                }, h)));
              }
            }
          case 9:
            g++;
            $s = 2;
            continue;
          case 3:
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: T.ptr.prototype.OptionMatchingDisplayText
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    T.prototype.OptionMatchingDisplayText = function(a) {
      return this.$val.OptionMatchingDisplayText(a);
    };
    T.ptr.prototype.OptionMatchingValue = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = AC.nil;
            d = $clone(b, T).Options();
            e = 0;
          case 1:
            if (!(e < d.$length)) {
              $s = 2;
              continue;
            }
            f = [f];
            g = e;
            f[0] = (h = $clone(b, T).Options(), ((g < 0 || g >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + g]));
            i = f[0].Value();
            if (C.HasPrefix(a, "~")) {
              $s = 3;
              continue;
            }
            if (C.HasPrefix(i, "=")) {
              $s = 4;
              continue;
            }
            if (i === a) {
              $s = 5;
              continue;
            }
            if (C.Contains(i, a)) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 3:
            k = D.Compile($substring(a, 1));
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            j = k;
            l = j[0];
            m = j[1];
            if (!($interfaceIsEqual(m, $ifaceNil))) {
              $s = 2;
              continue;
            }
            n = l.Match((new AD($stringToBytes(i))));
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            if (n) {
              $s = 9;
              continue;
            }
            $s = 10;
            continue;
          case 9:
            c = (f.$ptr || (f.$ptr = new AC(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, f)));
            $s = 2;
            continue;
          case 10:
            $s = 7;
            continue;
          case 4:
            if (C.EqualFold(i, $substring(a, 1))) {
              c = (f.$ptr || (f.$ptr = new AC(function() {
                return this.$target[0];
              }, function($v) {
                this.$target[0] = $v;
              }, f)));
              $s = 2;
              continue;
            }
            $s = 7;
            continue;
          case 5:
            c = (f.$ptr || (f.$ptr = new AC(function() {
              return this.$target[0];
            }, function($v) {
              this.$target[0] = $v;
            }, f)));
            $s = 2;
            continue;
            $s = 7;
            continue;
          case 6:
            if (c === AC.nil) {
              c = (f.$ptr || (f.$ptr = new AC(function() {
                return this.$target[0];
              }, function($v) {
                this.$target[0] = $v;
              }, f)));
              e++;
              $s = 1;
              continue;
            }
            o = c.Value();
            if (i.length < o.length) {
              c = (f.$ptr || (f.$ptr = new AC(function() {
                return this.$target[0];
              }, function($v) {
                this.$target[0] = $v;
              }, f)));
            }
          case 7:
            e++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: T.ptr.prototype.OptionMatchingValue
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    T.prototype.OptionMatchingValue = function(a) {
      return this.$val.OptionMatchingValue(a);
    };
    T.ptr.prototype.IsFakeField = function() {
      var a;
      a = this;
      if (a.FakeTested === false) {
        return false;
      }
      return !a.FakeVisible;
    };
    T.prototype.IsFakeField = function() {
      return this.$val.IsFakeField();
    };
    T.ptr.prototype.String = function() {
      var a;
      a = this;
      return a.OPID + "=> <" + a.HTMLID + "/" + a.HTMLName + ">";
    };
    T.prototype.String = function() {
      return this.$val.String();
    };
    U.prototype.AvoidFilling = function() {
      var a, b, c, d, e;
      a = this;
      b = new AA(["usairways", "rapidrewards"]);
      c = b;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = ((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]);
        if (C.Contains(a.DisplayValue(), e)) {
          return true;
        }
        d++;
      }
      return false;
    };
    $ptrType(U).prototype.AvoidFilling = function() {
      return this.$get().AvoidFilling();
    };
    U.prototype.DisplayValue = function() {
      var a;
      a = this;
      return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]);
    };
    $ptrType(U).prototype.DisplayValue = function() {
      return this.$get().DisplayValue();
    };
    U.prototype.Value = function() {
      var a;
      a = this;
      return (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]);
    };
    $ptrType(U).prototype.Value = function() {
      return this.$get().Value();
    };
    H.methods = [{
      prop: "IsConcealed",
      name: "IsConcealed",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }];
    I.methods = [{
      prop: "RequireHTTPSDuringFill",
      name: "RequireHTTPSDuringFill",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "AllowedDomains",
      name: "AllowedDomains",
      pkg: "",
      typ: $funcType([], [AA], false)
    }, {
      prop: "AllowsURLs",
      name: "AllowsURLs",
      pkg: "",
      typ: $funcType([AA], [$Bool], false)
    }];
    J.methods = [{
      prop: "AllDesignations",
      name: "AllDesignations",
      pkg: "",
      typ: $funcType([], [Z], false)
    }, {
      prop: "RestrictedDesignations",
      name: "RestrictedDesignations",
      pkg: "",
      typ: $funcType([], [Z], false)
    }, {
      prop: "AllDesignationsMask",
      name: "AllDesignationsMask",
      pkg: "",
      typ: $funcType([], [E], false)
    }, {
      prop: "ValueForDesignation",
      name: "ValueForDesignation",
      pkg: "",
      typ: $funcType([F, $Int], [$String], false)
    }];
    K.methods = [{
      prop: "HasFillableType",
      name: "HasFillableType",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "FillableTypes",
      name: "FillableTypes",
      pkg: "",
      typ: $funcType([], [G], false)
    }, {
      prop: "IsEmpty",
      name: "IsEmpty",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsWebFormOPType",
      name: "IsWebFormOPType",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }];
    L.methods = [{
      prop: "WithoutRestrictedFields",
      name: "WithoutRestrictedFields",
      pkg: "",
      typ: $funcType([], [AE], false)
    }];
    N.methods = [{
      prop: "OPID",
      name: "OPID",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "HtmlID",
      name: "HtmlID",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "HtmlName",
      name: "HtmlName",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "IsBlank",
      name: "IsBlank",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsPotentialUsername",
      name: "IsPotentialUsername",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsPassword",
      name: "IsPassword",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsCheckbox",
      name: "IsCheckbox",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsFillable",
      name: "IsFillable",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "DeserializeOPID",
      name: "DeserializeOPID",
      pkg: "",
      typ: $funcType([], [$String, $String], false)
    }, {
      prop: "AddToFillObject",
      name: "AddToFillObject",
      pkg: "",
      typ: $funcType([$Bool], [$Bool], false)
    }];
    T.methods = [{
      prop: "BestLabelAttributeValue",
      name: "BestLabelAttributeValue",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "IsPotentialUsernameField",
      name: "IsPotentialUsernameField",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsPotentialTOTPField",
      name: "IsPotentialTOTPField",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsPassword",
      name: "IsPassword",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsRadioButton",
      name: "IsRadioButton",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsCheckbox",
      name: "IsCheckbox",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsSelect",
      name: "IsSelect",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsHidden",
      name: "IsHidden",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsVisible",
      name: "IsVisible",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsViewable",
      name: "IsViewable",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsPostFakeTestViewable",
      name: "IsPostFakeTestViewable",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsPostFakeTestVisible",
      name: "IsPostFakeTestVisible",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsAriaDisabledOrHidden",
      name: "IsAriaDisabledOrHidden",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsFocusable",
      name: "IsFocusable",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "InSameForm",
      name: "InSameForm",
      pkg: "",
      typ: $funcType([AF], [$Bool], false)
    }, {
      prop: "IsSaveableType",
      name: "IsSaveableType",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "IsFillable",
      name: "IsFillable",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "Matches",
      name: "Matches",
      pkg: "",
      typ: $funcType([N], [$Bool], false)
    }, {
      prop: "Maxlength",
      name: "Maxlength",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Options",
      name: "Options",
      pkg: "",
      typ: $funcType([], [AB], false)
    }, {
      prop: "OptionMatchingDisplayText",
      name: "OptionMatchingDisplayText",
      pkg: "",
      typ: $funcType([$String], [AC], false)
    }, {
      prop: "OptionMatchingValue",
      name: "OptionMatchingValue",
      pkg: "",
      typ: $funcType([$String], [AC], false)
    }, {
      prop: "IsFakeField",
      name: "IsFakeField",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "String",
      name: "String",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    U.methods = [{
      prop: "AvoidFilling",
      name: "AvoidFilling",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }, {
      prop: "DisplayValue",
      name: "DisplayValue",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "Value",
      name: "Value",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    G.init($String, $Int);
    I.init($String);
    J.init(K);
    K.init("", [{
      prop: "Designation",
      name: "Designation",
      embedded: false,
      exported: true,
      typ: F,
      tag: ""
    }, {
      prop: "OPType",
      name: "OPType",
      embedded: false,
      exported: true,
      typ: H,
      tag: "json:\"type\""
    }, {
      prop: "Value",
      name: "Value",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Label",
      name: "Label",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "HTMLID",
      name: "HTMLID",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "HTMLName",
      name: "HTMLName",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Checked",
      name: "Checked",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: ""
    }, {
      prop: "Restricted",
      name: "Restricted",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: ""
    }]);
    L.init("", [{
      prop: "URLs",
      name: "URLs",
      embedded: true,
      exported: true,
      typ: I,
      tag: ""
    }, {
      prop: "FillableFields",
      name: "FillableFields",
      embedded: true,
      exported: true,
      typ: J,
      tag: "json:\"fields\""
    }]);
    N.init("", [{
      prop: "ID",
      name: "ID",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"id,omitempty\""
    }, {
      prop: "Name",
      name: "Name",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"name,omitempty\""
    }, {
      prop: "Value",
      name: "Value",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"value\""
    }, {
      prop: "Type",
      name: "Type",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"type\""
    }, {
      prop: "Designation",
      name: "Designation",
      embedded: false,
      exported: true,
      typ: F,
      tag: "json:\"designation,omitempty\""
    }]);
    T.init("", [{
      prop: "Active",
      name: "Active",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: "json:\"active\""
    }, {
      prop: "AriaDisable",
      name: "AriaDisable",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: "json:\"aria-disabled\""
    }, {
      prop: "AriaHasPopup",
      name: "AriaHasPopup",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: "json:\"aria-haspopup\""
    }, {
      prop: "AriaHidden",
      name: "AriaHidden",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: "json:\"aria-hidden\""
    }, {
      prop: "AutoCompleteType",
      name: "AutoCompleteType",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"autoCompleteType\""
    }, {
      prop: "DataStripe",
      name: "DataStripe",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"data-stripe\""
    }, {
      prop: "DataBrainTreeName",
      name: "DataBrainTreeName",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"data-braintree-name\""
    }, {
      prop: "Disabled",
      name: "Disabled",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: ""
    }, {
      prop: "FakeTested",
      name: "FakeTested",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: "json:\"fakeTested\""
    }, {
      prop: "FakeViewable",
      name: "FakeViewable",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: "json:\"postFakeTestViewable\""
    }, {
      prop: "FakeVisible",
      name: "FakeVisible",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: "json:\"postFakeTestVisible\""
    }, {
      prop: "FakeType",
      name: "FakeType",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"postFakeTestType\""
    }, {
      prop: "FormOPID",
      name: "FormOPID",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"form\""
    }, {
      prop: "HTMLID",
      name: "HTMLID",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "HTMLName",
      name: "HTMLName",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "HTMLClass",
      name: "HTMLClass",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Index",
      name: "Index",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: ""
    }, {
      prop: "LabelAria",
      name: "LabelAria",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"label-aria\""
    }, {
      prop: "LabelData",
      name: "LabelData",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"label-data\""
    }, {
      prop: "LabelLeft",
      name: "LabelLeft",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"label-left\""
    }, {
      prop: "LabelRight",
      name: "LabelRight",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"label-right\""
    }, {
      prop: "LabelTag",
      name: "LabelTag",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"label-tag\""
    }, {
      prop: "MinLength",
      name: "MinLength",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: ""
    }, {
      prop: "MaxLength",
      name: "MaxLength",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: ""
    }, {
      prop: "OnepasswordFieldType",
      name: "OnepasswordFieldType",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "OPID",
      name: "OPID",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Placeholder",
      name: "Placeholder",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "ReadOnly",
      name: "ReadOnly",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: "json:\"readonly\""
    }, {
      prop: "SelectInfo",
      name: "SelectInfo",
      embedded: false,
      exported: true,
      typ: AG,
      tag: ""
    }, {
      prop: "Tabindex",
      name: "Tabindex",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Title",
      name: "Title",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Type",
      name: "Type",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "UserEdited",
      name: "UserEdited",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: "json:\"userEdited\""
    }, {
      prop: "Value",
      name: "Value",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Viewable",
      name: "Viewable",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: ""
    }, {
      prop: "Visible",
      name: "Visible",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: ""
    }, {
      prop: "NextFieldType",
      name: "NextFieldType",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "PrevFieldType",
      name: "PrevFieldType",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "FormDesignation",
      name: "FormDesignation",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }]);
    U.init($String);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = B.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $pkg.DesignationMaskMap = $makeMap(F.keyFor, [{
              k: "",
              v: new E(0, 0)
            }, {
              k: "username",
              v: new E(0, 1)
            }, {
              k: "password",
              v: new E(0, 2)
            }, {
              k: "totp",
              v: new E(0, 4)
            }, {
              k: "new-password",
              v: new E(0, 8)
            }, {
              k: "new-username",
              v: new E(0, 16)
            }, {
              k: "city",
              v: new E(0, 32)
            }, {
              k: "company",
              v: new E(0, 64)
            }, {
              k: "country",
              v: new E(0, 128)
            }, {
              k: "email",
              v: new E(0, 256)
            }, {
              k: "email2",
              v: new E(0, 512)
            }, {
              k: "name",
              v: new E(0, 1024)
            }, {
              k: "phone",
              v: new E(0, 2048)
            }, {
              k: "zip",
              v: new E(0, 4096)
            }, {
              k: "sex",
              v: new E(0, 8192)
            }, {
              k: "state",
              v: new E(0, 16384)
            }, {
              k: "street",
              v: new E(0, 32768)
            }, {
              k: "cvv",
              v: new E(0, 65536)
            }, {
              k: "expiry",
              v: new E(0, 131072)
            }, {
              k: "type",
              v: new E(0, 262144)
            }, {
              k: "ccnum",
              v: new E(0, 524288)
            }, {
              k: "cardholder",
              v: new E(0, 1048576)
            }, {
              k: "firstname",
              v: new E(0, 2097152)
            }, {
              k: "lastname",
              v: new E(0, 4194304)
            }, {
              k: "initial",
              v: new E(0, 8388608)
            }, {
              k: "avoid",
              v: new E(0, 16777216)
            }]);
            $pkg.FillableTypesMap = $makeMap(H.keyFor, [{
              k: "string",
              v: $makeMap($String.keyFor, [{
                k: "text",
                v: 25
              }, {
                k: "email",
                v: 15
              }, {
                k: "url",
                v: 10
              }, {
                k: "tel",
                v: 5
              }])
            }, {
              k: "email",
              v: $makeMap($String.keyFor, [{
                k: "text",
                v: 15
              }, {
                k: "email",
                v: 25
              }, {
                k: "url",
                v: 10
              }])
            }, {
              k: "concealed",
              v: $makeMap($String.keyFor, [{
                k: "password",
                v: 25
              }])
            }, {
              k: "totp",
              v: $makeMap($String.keyFor, [{
                k: "text",
                v: 25
              }, {
                k: "password",
                v: 5
              }, {
                k: "tel",
                v: 15
              }, {
                k: "number",
                v: 10
              }])
            }, {
              k: "url",
              v: $makeMap($String.keyFor, [{
                k: "text",
                v: 25
              }, {
                k: "url",
                v: 50
              }])
            }, {
              k: "phone",
              v: $makeMap($String.keyFor, [{
                k: "tel",
                v: 50
              }, {
                k: "text",
                v: 20
              }])
            }, {
              k: "address",
              v: $makeMap($String.keyFor, [{
                k: "text",
                v: 25
              }, {
                k: "select-one",
                v: 25
              }, {
                k: "number",
                v: 10
              }, {
                k: "tel",
                v: 10
              }])
            }, {
              k: "password",
              v: $makeMap($String.keyFor, [{
                k: "password",
                v: 25
              }])
            }, {
              k: "checkbox",
              v: $makeMap($String.keyFor, [{
                k: "checkbox",
                v: 25
              }])
            }, {
              k: "radio",
              v: $makeMap($String.keyFor, [{
                k: "radio",
                v: 25
              }])
            }, {
              k: "select-one",
              v: $makeMap($String.keyFor, [{
                k: "select-one",
                v: 25
              }])
            }, {
              k: "text",
              v: $makeMap($String.keyFor, [{
                k: "text",
                v: 25
              }, {
                k: "email",
                v: 15
              }, {
                k: "url",
                v: 10
              }, {
                k: "tel",
                v: 5
              }])
            }]);
            $pkg.SaveableFieldsByHTMLType = $makeMap($String.keyFor, [{
              k: "select-one",
              v: "S"
            }, {
              k: "text",
              v: "T"
            }, {
              k: "email",
              v: "E"
            }, {
              k: "url",
              v: "U"
            }, {
              k: "number",
              v: "N"
            }, {
              k: "password",
              v: "P"
            }, {
              k: "checkbox",
              v: "C"
            }, {
              k: "radio",
              v: "R"
            }, {
              k: "submit",
              v: "I"
            }, {
              k: "button",
              v: "B"
            }, {
              k: "textarea",
              v: "A"
            }, {
              k: "range",
              v: "RNG"
            }, {
              k: "tel",
              v: "TEL"
            }]);
            O = $makeMap($String.keyFor, [{
              k: "S",
              v: true
            }, {
              k: "T",
              v: true
            }, {
              k: "E",
              v: true
            }, {
              k: "U",
              v: true
            }, {
              k: "N",
              v: true
            }, {
              k: "P",
              v: true
            }, {
              k: "C",
              v: true
            }, {
              k: "R",
              v: true
            }, {
              k: "A",
              v: true
            }, {
              k: "RNG",
              v: true
            }, {
              k: "TEL",
              v: true
            }]);
            $pkg.StateCodeMapping = $makeMap($String.keyFor, [{
              k: "AL",
              v: "Alabama"
            }, {
              k: "AK",
              v: "Alaska"
            }, {
              k: "AB",
              v: "Alberta"
            }, {
              k: "AS",
              v: "American Samoa"
            }, {
              k: "AZ",
              v: "Arizona"
            }, {
              k: "AR",
              v: "Arkansas"
            }, {
              k: "AA",
              v: "Armed Forces Americas"
            }, {
              k: "AE",
              v: "Armed Forces Europe"
            }, {
              k: "AP",
              v: "Armed Forces Pacific"
            }, {
              k: "BC",
              v: "British Columbia"
            }, {
              k: "CA",
              v: "California"
            }, {
              k: "CO",
              v: "Colorado"
            }, {
              k: "CT",
              v: "Connecticut"
            }, {
              k: "DE",
              v: "Delaware"
            }, {
              k: "DC",
              v: "District of Columbia"
            }, {
              k: "FL",
              v: "Florida"
            }, {
              k: "GA",
              v: "Georgia"
            }, {
              k: "GU",
              v: "Guam"
            }, {
              k: "HI",
              v: "Hawaii"
            }, {
              k: "ID",
              v: "Idaho"
            }, {
              k: "IL",
              v: "Illinois"
            }, {
              k: "IN",
              v: "Indiana"
            }, {
              k: "IA",
              v: "Iowa"
            }, {
              k: "KS",
              v: "Kansas"
            }, {
              k: "KY",
              v: "Kentucky"
            }, {
              k: "LA",
              v: "Louisiana"
            }, {
              k: "ME",
              v: "Maine"
            }, {
              k: "MB",
              v: "Manitoba"
            }, {
              k: "MD",
              v: "Maryland"
            }, {
              k: "MA",
              v: "Massachusetts"
            }, {
              k: "MI",
              v: "Michigan"
            }, {
              k: "MN",
              v: "Minnesota"
            }, {
              k: "MS",
              v: "Mississippi"
            }, {
              k: "MO",
              v: "Missouri"
            }, {
              k: "MT",
              v: "Montana"
            }, {
              k: "NE",
              v: "Nebraska"
            }, {
              k: "NV",
              v: "Nevada"
            }, {
              k: "NB",
              v: "New Brunswick"
            }, {
              k: "NH",
              v: "New Hampshire"
            }, {
              k: "NJ",
              v: "New Jersey"
            }, {
              k: "NM",
              v: "New Mexico"
            }, {
              k: "NY",
              v: "New York"
            }, {
              k: "NL",
              v: "Newfoundland and Labrador"
            }, {
              k: "NC",
              v: "North Carolina"
            }, {
              k: "ND",
              v: "North Dakota"
            }, {
              k: "MP",
              v: "Northern Mariana Islands"
            }, {
              k: "NT",
              v: "Northwest Territories"
            }, {
              k: "NS",
              v: "Nova Scotia"
            }, {
              k: "NU",
              v: "Nunavut"
            }, {
              k: "OH",
              v: "Ohio"
            }, {
              k: "OK",
              v: "Oklahoma"
            }, {
              k: "ON",
              v: "Ontario"
            }, {
              k: "OR",
              v: "Oregon"
            }, {
              k: "PW",
              v: "Palau"
            }, {
              k: "PA",
              v: "Pennsylvania"
            }, {
              k: "PE",
              v: "Prince Edward Island"
            }, {
              k: "PR",
              v: "Puerto Rico"
            }, {
              k: "QC",
              v: "Quebec"
            }, {
              k: "RI",
              v: "Rhode Island"
            }, {
              k: "SK",
              v: "Saskatchewan"
            }, {
              k: "SC",
              v: "South Carolina"
            }, {
              k: "SD",
              v: "South Dakota"
            }, {
              k: "TN",
              v: "Tennessee"
            }, {
              k: "TX",
              v: "Texas"
            }, {
              k: "UT",
              v: "Utah"
            }, {
              k: "VT",
              v: "Vermont"
            }, {
              k: "VI",
              v: "Virgin Islands"
            }, {
              k: "VA",
              v: "Virginia"
            }, {
              k: "WA",
              v: "Washington"
            }, {
              k: "WV",
              v: "West Virginia"
            }, {
              k: "WI",
              v: "Wisconsin"
            }, {
              k: "WY",
              v: "Wyoming"
            }, {
              k: "YT",
              v: "Yukon"
            }, {
              k: "ABD",
              v: "Aberdeenshire"
            }, {
              k: "AGY",
              v: "Anglesey"
            }, {
              k: "ALD",
              v: "Alderney"
            }, {
              k: "ANS",
              v: "Angus"
            }, {
              k: "ANT",
              v: "County Antrim"
            }, {
              k: "ARL",
              v: "Argyllshire"
            }, {
              k: "ARM",
              v: "County Armagh"
            }, {
              k: "AVN",
              v: "Avon"
            }, {
              k: "AYR",
              v: "Ayrshire"
            }, {
              k: "BAN",
              v: "Banffshire"
            }, {
              k: "BDF",
              v: "Bedfordshire"
            }, {
              k: "BEW",
              v: "Berwickshire"
            }, {
              k: "BKM",
              v: "Buckinghamshire"
            }, {
              k: "BOR",
              v: "Borders"
            }, {
              k: "BRE",
              v: "Breconshire"
            }, {
              k: "BRK",
              v: "Berkshire"
            }, {
              k: "BUT",
              v: "Bute"
            }, {
              k: "CAE",
              v: "Caernarvonshire"
            }, {
              k: "CAI",
              v: "Caithness"
            }, {
              k: "CAM",
              v: "Cambridgeshire"
            }, {
              k: "CAR",
              v: "County Carlow"
            }, {
              k: "CAV",
              v: "County Cavan"
            }, {
              k: "CEN",
              v: "Central"
            }, {
              k: "CGN",
              v: "Cardiganshire"
            }, {
              k: "CHS",
              v: "Cheshire"
            }, {
              k: "CLA",
              v: "County Clare"
            }, {
              k: "CLK",
              v: "Clackmannanshire"
            }, {
              k: "CLV",
              v: "Cleveland"
            }, {
              k: "CMA",
              v: "Cumbria"
            }, {
              k: "CMN",
              v: "Carmarthenshire"
            }, {
              k: "CON",
              v: "Cornwall"
            }, {
              k: "COR",
              v: "County Cork"
            }, {
              k: "CUL",
              v: "Cumberland"
            }, {
              k: "CWD",
              v: "Clwyd"
            }, {
              k: "DBY",
              v: "Derbyshire"
            }, {
              k: "DEN",
              v: "Denbighshire"
            }, {
              k: "DEV",
              v: "Devon"
            }, {
              k: "DFD",
              v: "Dyfed"
            }, {
              k: "DFS",
              v: "Dumfries-shire"
            }, {
              k: "DGY",
              v: "Dumfries and Galloway"
            }, {
              k: "DNB",
              v: "Dunbartonshire"
            }, {
              k: "DON",
              v: "County Donegal"
            }, {
              k: "DOR",
              v: "Dorset"
            }, {
              k: "DOW",
              v: "County Down"
            }, {
              k: "DUB",
              v: "County Dublin"
            }, {
              k: "DUR",
              v: "County Durham"
            }, {
              k: "ELN",
              v: "East Lothian"
            }, {
              k: "ERY",
              v: "East Riding of Yorkshire"
            }, {
              k: "ESS",
              v: "Essex"
            }, {
              k: "FER",
              v: "County Fermanagh"
            }, {
              k: "FIF",
              v: "Fife"
            }, {
              k: "FLN",
              v: "Flintshire"
            }, {
              k: "GAL",
              v: "County Galway"
            }, {
              k: "GLA",
              v: "Glamorgan"
            }, {
              k: "GLS",
              v: "Gloucestershire"
            }, {
              k: "GMP",
              v: "Grampian"
            }, {
              k: "GNT",
              v: "Gwent"
            }, {
              k: "GSY",
              v: "Guernsey"
            }, {
              k: "GTM",
              v: "Greater Manchester"
            }, {
              k: "GWN",
              v: "Gwynedd"
            }, {
              k: "HAM",
              v: "Hampshire"
            }, {
              k: "HEF",
              v: "Herefordshire"
            }, {
              k: "HLD",
              v: "Highland"
            }, {
              k: "HRT",
              v: "Hertfordshire"
            }, {
              k: "HUM",
              v: "Humberside"
            }, {
              k: "HUN",
              v: "Huntingdonshire"
            }, {
              k: "HWR",
              v: "Hereford and Worcester"
            }, {
              k: "INV",
              v: "Inverness-shire"
            }, {
              k: "IOW",
              v: "Isle of Wight"
            }, {
              k: "JSY",
              v: "Jersey"
            }, {
              k: "KCD",
              v: "Kincardineshire"
            }, {
              k: "KEN",
              v: "Kent"
            }, {
              k: "KER",
              v: "County Kerry"
            }, {
              k: "KID",
              v: "County Kildare"
            }, {
              k: "KIK",
              v: "County Kilkenny"
            }, {
              k: "KKD",
              v: "Kirkcudbrightshire"
            }, {
              k: "KRS",
              v: "Kinross-shire"
            }, {
              k: "LAN",
              v: "Lancashire"
            }, {
              k: "LDY",
              v: "County Londonderry"
            }, {
              k: "LEI",
              v: "Leicestershire"
            }, {
              k: "LET",
              v: "County Leitrim"
            }, {
              k: "LEX",
              v: "County Laois"
            }, {
              k: "LIM",
              v: "County Limerick"
            }, {
              k: "LIN",
              v: "Lincolnshire"
            }, {
              k: "LKS",
              v: "Lanarkshire"
            }, {
              k: "LOG",
              v: "County Longford"
            }, {
              k: "LOU",
              v: "County Louth"
            }, {
              k: "LTN",
              v: "Lothian"
            }, {
              k: "MAY",
              v: "County Mayo"
            }, {
              k: "MEA",
              v: "County Meath"
            }, {
              k: "MER",
              v: "Merionethshire"
            }, {
              k: "MGM",
              v: "Mid Glamorgan"
            }, {
              k: "MGY",
              v: "Montgomeryshire"
            }, {
              k: "MLN",
              v: "Midlothian"
            }, {
              k: "MOG",
              v: "County Monaghan"
            }, {
              k: "MON",
              v: "Monmouthshire"
            }, {
              k: "MOR",
              v: "Morayshire"
            }, {
              k: "MSY",
              v: "Merseyside"
            }, {
              k: "NAI",
              v: "Nairn"
            }, {
              k: "NBL",
              v: "Northumberland"
            }, {
              k: "NFK",
              v: "Norfolk"
            }, {
              k: "NRY",
              v: "North Riding of Yorkshire"
            }, {
              k: "NTH",
              v: "Northamptonshire"
            }, {
              k: "NTT",
              v: "Nottinghamshire"
            }, {
              k: "NYK",
              v: "North Yorkshire"
            }, {
              k: "OFF",
              v: "County Offaly"
            }, {
              k: "OKI",
              v: "Orkney"
            }, {
              k: "OXF",
              v: "Oxfordshire"
            }, {
              k: "PEE",
              v: "Peebles-shire"
            }, {
              k: "PEM",
              v: "Pembrokeshire"
            }, {
              k: "PER",
              v: "Perth"
            }, {
              k: "POW",
              v: "Powys"
            }, {
              k: "RAD",
              v: "Radnorshire"
            }, {
              k: "RFW",
              v: "Renfrewshire"
            }, {
              k: "ROC",
              v: "Ross and Cromarty"
            }, {
              k: "ROS",
              v: "County Roscommon"
            }, {
              k: "ROX",
              v: "Roxburghshire"
            }, {
              k: "RUT",
              v: "Rutland"
            }, {
              k: "SAL",
              v: "Shropshire"
            }, {
              k: "SEL",
              v: "Selkirkshire"
            }, {
              k: "SFK",
              v: "Suffolk"
            }, {
              k: "SGM",
              v: "South Glamorgan"
            }, {
              k: "SHI",
              v: "Shetland"
            }, {
              k: "SLI",
              v: "County Sligo"
            }, {
              k: "SOM",
              v: "Somerset"
            }, {
              k: "SRK",
              v: "Sark"
            }, {
              k: "SRY",
              v: "Surrey"
            }, {
              k: "SSX",
              v: "Sussex"
            }, {
              k: "STD",
              v: "Strathclyde"
            }, {
              k: "STI",
              v: "Stirlingshire"
            }, {
              k: "STS",
              v: "Staffordshire"
            }, {
              k: "SUT",
              v: "Sutherland"
            }, {
              k: "SXE",
              v: "East Sussex"
            }, {
              k: "SXW",
              v: "West Sussex"
            }, {
              k: "SYK",
              v: "South Yorkshire"
            }, {
              k: "TAY",
              v: "Tayside"
            }, {
              k: "TIP",
              v: "County Tipperary"
            }, {
              k: "TWR",
              v: "Tyne and Wear"
            }, {
              k: "TYR",
              v: "County Tyrone"
            }, {
              k: "WAR",
              v: "Warwickshire"
            }, {
              k: "WAT",
              v: "County Waterford"
            }, {
              k: "WEM",
              v: "County Westmeath"
            }, {
              k: "WES",
              v: "Westmorland"
            }, {
              k: "WEX",
              v: "County Wexford"
            }, {
              k: "WGM",
              v: "West Glamorgan"
            }, {
              k: "WIC",
              v: "County Wicklow"
            }, {
              k: "WIG",
              v: "Wigtownshire"
            }, {
              k: "WIL",
              v: "Wiltshire"
            }, {
              k: "WIS",
              v: "Western Isles"
            }, {
              k: "WLN",
              v: "West Lothian"
            }, {
              k: "WMD",
              v: "West Midlands"
            }, {
              k: "WOR",
              v: "Worcestershire"
            }, {
              k: "WRY",
              v: "West Riding of Yorkshire"
            }, {
              k: "WYK",
              v: "West Yorkshire"
            }, {
              k: "YKS",
              v: "Yorkshire"
            }]);
            $pkg.CountryCodeMapping = $makeMap($String.keyFor, [{
              k: "ca",
              v: "Canada"
            }, {
              k: "us",
              v: "United States"
            }, {
              k: "uk",
              v: "United Kingdom"
            }, {
              k: "gb",
              v: "Great Britain"
            }, {
              k: "de",
              v: "Germany"
            }, {
              k: "au",
              v: "Australia"
            }, {
              k: "nl",
              v: "Netherlands"
            }, {
              k: "it",
              v: "Italy"
            }, {
              k: "fr",
              v: "France"
            }, {
              k: "mx",
              v: "Mexico"
            }, {
              k: "cn",
              v: "China"
            }, {
              k: "ch",
              v: "Switzerland"
            }, {
              k: "es",
              v: "Spain"
            }, {
              k: "jp",
              v: "Japan"
            }, {
              k: "at",
              v: "Austria"
            }, {
              k: "be",
              v: "Belgium"
            }, {
              k: "ad",
              v: "Andorra"
            }, {
              k: "ae",
              v: "United Arab Emirates"
            }, {
              k: "af",
              v: "Afghanistan"
            }, {
              k: "ag",
              v: "Antigua and Barbuda"
            }, {
              k: "ai",
              v: "Anguilla"
            }, {
              k: "al",
              v: "Albania"
            }, {
              k: "am",
              v: "Armenia"
            }, {
              k: "an",
              v: "Netherlands Antilles"
            }, {
              k: "ao",
              v: "Angola"
            }, {
              k: "aq",
              v: "Antarctica"
            }, {
              k: "ar",
              v: "Argentina"
            }, {
              k: "as",
              v: "American Samoa"
            }, {
              k: "aw",
              v: "Aruba"
            }, {
              k: "az",
              v: "Azerbaidjan"
            }, {
              k: "ba",
              v: "Bosnia-Herzegovina"
            }, {
              k: "bb",
              v: "Barbados"
            }, {
              k: "bd",
              v: "Bangladesh"
            }, {
              k: "bf",
              v: "Burkina Faso"
            }, {
              k: "bg",
              v: "Bulgaria"
            }, {
              k: "bh",
              v: "Bahrain"
            }, {
              k: "bi",
              v: "Burundi"
            }, {
              k: "bj",
              v: "Benin"
            }, {
              k: "bm",
              v: "Bermuda"
            }, {
              k: "bn",
              v: "Brunei Darussalam"
            }, {
              k: "bo",
              v: "Bolivia"
            }, {
              k: "br",
              v: "Brazil"
            }, {
              k: "bs",
              v: "Bahamas"
            }, {
              k: "bt",
              v: "Bhutan"
            }, {
              k: "bv",
              v: "Bouvet Island"
            }, {
              k: "bw",
              v: "Botswana"
            }, {
              k: "by",
              v: "Belarus"
            }, {
              k: "bz",
              v: "Belize"
            }, {
              k: "cc",
              v: "Cocos (Keeling) Islands"
            }, {
              k: "cf",
              v: "Central African Republic"
            }, {
              k: "cd",
              v: "The Democratic Republic of Congo"
            }, {
              k: "cg",
              v: "Congo"
            }, {
              k: "ci",
              v: "Ivory Coast"
            }, {
              k: "ck",
              v: "Cook Islands"
            }, {
              k: "cl",
              v: "Chile"
            }, {
              k: "cm",
              v: "Cameroon"
            }, {
              k: "co",
              v: "Colombia"
            }, {
              k: "cr",
              v: "Costa Rica"
            }, {
              k: "cu",
              v: "Cuba"
            }, {
              k: "cv",
              v: "Cape Verde"
            }, {
              k: "cx",
              v: "Christmas Island"
            }, {
              k: "cy",
              v: "Cyprus"
            }, {
              k: "cz",
              v: "Czech Republic"
            }, {
              k: "dj",
              v: "Djibouti"
            }, {
              k: "dk",
              v: "Denmark"
            }, {
              k: "dm",
              v: "Dominica"
            }, {
              k: "do",
              v: "Dominican Republic"
            }, {
              k: "dz",
              v: "Algeria"
            }, {
              k: "ec",
              v: "Ecuador"
            }, {
              k: "ee",
              v: "Estonia"
            }, {
              k: "eg",
              v: "Egypt"
            }, {
              k: "eh",
              v: "Western Sahara"
            }, {
              k: "er",
              v: "Eritrea"
            }, {
              k: "et",
              v: "Ethiopia"
            }, {
              k: "fi",
              v: "Finland"
            }, {
              k: "fj",
              v: "Fiji"
            }, {
              k: "fk",
              v: "Falkland Islands"
            }, {
              k: "fm",
              v: "Micronesia"
            }, {
              k: "fo",
              v: "Faroe Islands"
            }, {
              k: "ga",
              v: "Gabon"
            }, {
              k: "gd",
              v: "Grenada"
            }, {
              k: "ge",
              v: "Georgia"
            }, {
              k: "gf",
              v: "French Guyana"
            }, {
              k: "gh",
              v: "Ghana"
            }, {
              k: "gi",
              v: "Gibraltar"
            }, {
              k: "gl",
              v: "Greenland"
            }, {
              k: "gm",
              v: "Gambia"
            }, {
              k: "gn",
              v: "Guinea"
            }, {
              k: "gp",
              v: "Guadeloupe (French)"
            }, {
              k: "gq",
              v: "Equatorial Guinea"
            }, {
              k: "gr",
              v: "Greece"
            }, {
              k: "gs",
              v: "S. Georgia & S. Sandwich Isls."
            }, {
              k: "gt",
              v: "Guatemala"
            }, {
              k: "gu",
              v: "Guam (USA)"
            }, {
              k: "gw",
              v: "Guinea Bissau"
            }, {
              k: "gy",
              v: "Guyana"
            }, {
              k: "hk",
              v: "Hong Kong"
            }, {
              k: "hm",
              v: "Heard and McDonald Islands"
            }, {
              k: "hn",
              v: "Honduras"
            }, {
              k: "hr",
              v: "Croatia"
            }, {
              k: "ht",
              v: "Haiti"
            }, {
              k: "hu",
              v: "Hungary"
            }, {
              k: "id",
              v: "Indonesia"
            }, {
              k: "ie",
              v: "Ireland"
            }, {
              k: "il",
              v: "Israel"
            }, {
              k: "in",
              v: "India"
            }, {
              k: "iq",
              v: "Iraq"
            }, {
              k: "ir",
              v: "Iran"
            }, {
              k: "is",
              v: "Iceland"
            }, {
              k: "jm",
              v: "Jamaica"
            }, {
              k: "jo",
              v: "Jordan"
            }, {
              k: "ke",
              v: "Kenya"
            }, {
              k: "kg",
              v: "Kyrgyz Republic (Kyrgyzstan)"
            }, {
              k: "kh",
              v: "Cambodia, Kingdom of"
            }, {
              k: "ki",
              v: "Kiribati"
            }, {
              k: "km",
              v: "Comoros"
            }, {
              k: "kn",
              v: "Saint Kitts & Nevis Anguilla"
            }, {
              k: "kp",
              v: "North Korea"
            }, {
              k: "kr",
              v: "South Korea"
            }, {
              k: "kw",
              v: "Kuwait"
            }, {
              k: "ky",
              v: "Cayman Islands"
            }, {
              k: "kz",
              v: "Kazakhstan"
            }, {
              k: "la",
              v: "Laos"
            }, {
              k: "lb",
              v: "Lebanon"
            }, {
              k: "lc",
              v: "Saint Lucia"
            }, {
              k: "li",
              v: "Liechtenstein"
            }, {
              k: "lk",
              v: "Sri Lanka"
            }, {
              k: "lr",
              v: "Liberia"
            }, {
              k: "ls",
              v: "Lesotho"
            }, {
              k: "lt",
              v: "Lithuania"
            }, {
              k: "lu",
              v: "Luxembourg"
            }, {
              k: "lv",
              v: "Latvia"
            }, {
              k: "ly",
              v: "Libya"
            }, {
              k: "ma",
              v: "Morocco"
            }, {
              k: "mc",
              v: "Monaco"
            }, {
              k: "md",
              v: "Moldavia"
            }, {
              k: "mg",
              v: "Madagascar"
            }, {
              k: "mh",
              v: "Marshall Islands"
            }, {
              k: "mk",
              v: "Macedonia"
            }, {
              k: "ml",
              v: "Mali"
            }, {
              k: "mm",
              v: "Myanmar"
            }, {
              k: "mn",
              v: "Mongolia"
            }, {
              k: "mo",
              v: "Macau"
            }, {
              k: "mq",
              v: "Martinique (French)"
            }, {
              k: "mr",
              v: "Mauritania"
            }, {
              k: "ms",
              v: "Montserrat"
            }, {
              k: "mt",
              v: "Malta"
            }, {
              k: "mu",
              v: "Mauritius"
            }, {
              k: "mv",
              v: "Maldives"
            }, {
              k: "mw",
              v: "Malawi"
            }, {
              k: "my",
              v: "Malaysia"
            }, {
              k: "mz",
              v: "Mozambique"
            }, {
              k: "na",
              v: "Namibia"
            }, {
              k: "nc",
              v: "New Caledonia (French)"
            }, {
              k: "ne",
              v: "Niger"
            }, {
              k: "nf",
              v: "Norfolk Island"
            }, {
              k: "ng",
              v: "Nigeria"
            }, {
              k: "ni",
              v: "Nicaragua"
            }, {
              k: "no",
              v: "Norway"
            }, {
              k: "np",
              v: "Nepal"
            }, {
              k: "nr",
              v: "Nauru"
            }, {
              k: "nt",
              v: "Neutral Zone"
            }, {
              k: "nu",
              v: "Niue"
            }, {
              k: "nz",
              v: "New Zealand"
            }, {
              k: "om",
              v: "Oman"
            }, {
              k: "pa",
              v: "Panama"
            }, {
              k: "pe",
              v: "Peru"
            }, {
              k: "pf",
              v: "Polynesia (French)"
            }, {
              k: "pg",
              v: "Papua New Guinea"
            }, {
              k: "ph",
              v: "Philippines"
            }, {
              k: "pk",
              v: "Pakistan"
            }, {
              k: "pl",
              v: "Poland"
            }, {
              k: "pm",
              v: "Saint Pierre and Miquelon"
            }, {
              k: "pn",
              v: "Pitcairn Island"
            }, {
              k: "pr",
              v: "Puerto Rico"
            }, {
              k: "pt",
              v: "Portugal"
            }, {
              k: "pw",
              v: "Palau"
            }, {
              k: "py",
              v: "Paraguay"
            }, {
              k: "qa",
              v: "Qatar"
            }, {
              k: "re",
              v: "Reunion (French)"
            }, {
              k: "ro",
              v: "Romania"
            }, {
              k: "rs",
              v: "Serbia"
            }, {
              k: "ru",
              v: "Russian Federation"
            }, {
              k: "rw",
              v: "Rwanda"
            }, {
              k: "sa",
              v: "Saudi Arabia"
            }, {
              k: "sb",
              v: "Solomon Islands"
            }, {
              k: "sc",
              v: "Seychelles"
            }, {
              k: "sd",
              v: "Sudan"
            }, {
              k: "se",
              v: "Sweden"
            }, {
              k: "sg",
              v: "Singapore"
            }, {
              k: "sh",
              v: "Saint Helena"
            }, {
              k: "si",
              v: "Slovenia"
            }, {
              k: "sj",
              v: "Svalbard and Jan Mayen Islands"
            }, {
              k: "sk",
              v: "Slovak Republic"
            }, {
              k: "sl",
              v: "Sierra Leone"
            }, {
              k: "sm",
              v: "San Marino"
            }, {
              k: "sn",
              v: "Senegal"
            }, {
              k: "so",
              v: "Somalia"
            }, {
              k: "sr",
              v: "Suriname"
            }, {
              k: "st",
              v: "Saint Tome (Sao Tome) and Principe"
            }, {
              k: "sv",
              v: "El Salvador"
            }, {
              k: "sy",
              v: "Syria"
            }, {
              k: "sz",
              v: "Swaziland"
            }, {
              k: "tc",
              v: "Turks and Caicos Islands"
            }, {
              k: "td",
              v: "Chad"
            }, {
              k: "tg",
              v: "Togo"
            }, {
              k: "th",
              v: "Thailand"
            }, {
              k: "tj",
              v: "Tadjikistan"
            }, {
              k: "tk",
              v: "Tokelau"
            }, {
              k: "tm",
              v: "Turkmenistan"
            }, {
              k: "tn",
              v: "Tunisia"
            }, {
              k: "to",
              v: "Tonga"
            }, {
              k: "tp",
              v: "East Timor"
            }, {
              k: "tr",
              v: "Turkey"
            }, {
              k: "tt",
              v: "Trinidad and Tobago"
            }, {
              k: "tv",
              v: "Tuvalu"
            }, {
              k: "tw",
              v: "Taiwan"
            }, {
              k: "tz",
              v: "Tanzania"
            }, {
              k: "ua",
              v: "Ukraine"
            }, {
              k: "ug",
              v: "Uganda"
            }, {
              k: "uy",
              v: "Uruguay"
            }, {
              k: "uz",
              v: "Uzbekistan"
            }, {
              k: "va",
              v: "Holy See (Vatican City State)"
            }, {
              k: "vc",
              v: "Saint Vincent & Grenadines"
            }, {
              k: "ve",
              v: "Venezuela"
            }, {
              k: "vg",
              v: "Virgin Islands (British)"
            }, {
              k: "vi",
              v: "Virgin Islands (USA)"
            }, {
              k: "vn",
              v: "Vietnam"
            }, {
              k: "vu",
              v: "Vanuatu"
            }, {
              k: "wf",
              v: "Wallis and Futuna Islands"
            }, {
              k: "ws",
              v: "Samoa"
            }, {
              k: "ye",
              v: "Yemen"
            }, {
              k: "yt",
              v: "Mayotte"
            }, {
              k: "yu",
              v: "Yugoslavia"
            }, {
              k: "za",
              v: "South Africa"
            }, {
              k: "zm",
              v: "Zambia"
            }, {
              k: "zr",
              v: "Zaire"
            }, {
              k: "zw",
              v: "Zimbabwe"
            }]);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["go.1password.io/xplatform/vendor/go.1password.io/brain/clues"] = (function() {
    var $pkg = {},
      $init, C, A, B, Y;
    C = $packages["go.1password.io/xplatform/vendor/go.1password.io/brain/model"];
    A = $packages["regexp"];
    B = $packages["strings"];
    Y = $sliceType($String);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = C.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $pkg.CleanStringReplacer = B.NewReplacer(new Y([" ", "", "[", "", "]", "", "{", "", "}", "", "(", "", ")", "", "~", "", "`", "", "!", "", "@", "", "$", "", "%", "", "^", "", "&", "", "*", "", "\xE2\x80\x93", "", "-", "", "_", "", "+", "", "=", "", ":", "", ";", "", "'", "", "|", "", ",", "", ".", "", "?", "", "<", "", ">", "", "/", "", "\\", ""]));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["go.1password.io/xplatform/vendor/go.1password.io/brain/ml"] = (function() {
    var $pkg = {},
      $init, A, C, B, D, E;
    A = $packages["encoding/json"];
    C = $packages["fmt"];
    B = $packages["math"];
    D = $packages["regexp"];
    E = $packages["strings"];
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["go.1password.io/xplatform/vendor/go.1password.io/brain/recipes"] = (function() {
    var $pkg = {},
      $init, B, A;
    B = $packages["go.1password.io/xplatform/vendor/go.1password.io/brain/model"];
    A = $packages["strings"];
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = B.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["crypto/subtle"] = (function() {
    var $pkg = {},
      $init;
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["hash"] = (function() {
    var $pkg = {},
      $init, A, B, E;
    A = $packages["io"];
    B = $pkg.Hash = $newType(8, $kindInterface, "hash.Hash", true, "hash", true, null);
    E = $sliceType($Uint8);
    B.init([{
      prop: "BlockSize",
      name: "BlockSize",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Reset",
      name: "Reset",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "Size",
      name: "Size",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Sum",
      name: "Sum",
      pkg: "",
      typ: $funcType([E], [E], false)
    }, {
      prop: "Write",
      name: "Write",
      pkg: "",
      typ: $funcType([E], [$Int, $error], false)
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["crypto/hmac"] = (function() {
    var $pkg = {},
      $init, A, B, C, F, G, D;
    A = $packages["crypto/subtle"];
    B = $packages["hash"];
    C = $pkg.hmac = $newType(0, $kindStruct, "hmac.hmac", true, "crypto/hmac", false, function(size_, blocksize_, opad_, ipad_, outer_, inner_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.size = 0;
        this.blocksize = 0;
        this.opad = F.nil;
        this.ipad = F.nil;
        this.outer = $ifaceNil;
        this.inner = $ifaceNil;
        return;
      }
      this.size = size_;
      this.blocksize = blocksize_;
      this.opad = opad_;
      this.ipad = ipad_;
      this.outer = outer_;
      this.inner = inner_;
    });
    F = $sliceType($Uint8);
    G = $ptrType(C);
    C.ptr.prototype.Sum = function(a) {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = a.$length;
            d = b.inner.Sum(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            a = d;
            $r = b.outer.Reset();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            e = b.outer.Write(b.opad);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            e;
            f = b.outer.Write($subslice(a, c));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            f;
            g = b.outer.Sum($subslice(a, 0, c));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return g;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: C.ptr.prototype.Sum
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    C.prototype.Sum = function(a) {
      return this.$val.Sum(a);
    };
    C.ptr.prototype.Write = function(a) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = 0;
            c = $ifaceNil;
            d = this;
            f = d.inner.Write(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            e = f;
            b = e[0];
            c = e[1];
            $s = -1;
            return [b, c];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: C.ptr.prototype.Write
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    C.prototype.Write = function(a) {
      return this.$val.Write(a);
    };
    C.ptr.prototype.Size = function() {
      var a;
      a = this;
      return a.size;
    };
    C.prototype.Size = function() {
      return this.$val.Size();
    };
    C.ptr.prototype.BlockSize = function() {
      var a;
      a = this;
      return a.blocksize;
    };
    C.prototype.BlockSize = function() {
      return this.$val.BlockSize();
    };
    C.ptr.prototype.Reset = function() {
      var a, b, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            $r = a.inner.Reset();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            b = a.inner.Write(a.ipad);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            b;
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: C.ptr.prototype.Reset
        };
      }
      $f.a = a;
      $f.b = b;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    C.prototype.Reset = function() {
      return this.$val.Reset();
    };
    D = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = new C.ptr(0, 0, F.nil, F.nil, $ifaceNil, $ifaceNil);
            d = a();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            c.outer = d;
            e = a();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            c.inner = e;
            f = c.inner.Size();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            c.size = f;
            g = c.inner.BlockSize();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            c.blocksize = g;
            c.ipad = $makeSlice(F, c.blocksize);
            c.opad = $makeSlice(F, c.blocksize);
            if (b.$length > c.blocksize) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 5:
            h = c.outer.Write(b);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            h;
            i = c.outer.Sum(F.nil);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            b = i;
          case 6:
            $copySlice(c.ipad, b);
            $copySlice(c.opad, b);
            j = c.ipad;
            k = 0;
            while (true) {
              if (!(k < j.$length)) {
                break;
              }
              l = k;
              (n = c.ipad, ((l < 0 || l >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + l] = (((m = c.ipad, ((l < 0 || l >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + l])) ^ (54)) << 24 >>> 24)));
              k++;
            }
            o = c.opad;
            p = 0;
            while (true) {
              if (!(p < o.$length)) {
                break;
              }
              q = p;
              (s = c.opad, ((q < 0 || q >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + q] = (((r = c.opad, ((q < 0 || q >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + q])) ^ (92)) << 24 >>> 24)));
              p++;
            }
            t = c.inner.Write(c.ipad);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            t;
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: D
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.New = D;
    G.methods = [{
      prop: "Sum",
      name: "Sum",
      pkg: "",
      typ: $funcType([F], [F], false)
    }, {
      prop: "Write",
      name: "Write",
      pkg: "",
      typ: $funcType([F], [$Int, $error], false)
    }, {
      prop: "Size",
      name: "Size",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "BlockSize",
      name: "BlockSize",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Reset",
      name: "Reset",
      pkg: "",
      typ: $funcType([], [], false)
    }];
    C.init("crypto/hmac", [{
      prop: "size",
      name: "size",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "blocksize",
      name: "blocksize",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "opad",
      name: "opad",
      embedded: false,
      exported: false,
      typ: F,
      tag: ""
    }, {
      prop: "ipad",
      name: "ipad",
      embedded: false,
      exported: false,
      typ: F,
      tag: ""
    }, {
      prop: "outer",
      name: "outer",
      embedded: false,
      exported: false,
      typ: B.Hash,
      tag: ""
    }, {
      prop: "inner",
      name: "inner",
      embedded: false,
      exported: false,
      typ: B.Hash,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["crypto"] = (function() {
    var $pkg = {},
      $init, A, B, C, D, N, O, P, E, F, G;
    A = $packages["hash"];
    B = $packages["io"];
    C = $packages["strconv"];
    D = $pkg.Hash = $newType(4, $kindUint, "crypto.Hash", true, "crypto", true, null);
    N = $sliceType($Uint8);
    O = $funcType([], [A.Hash], false);
    P = $sliceType(O);
    D.prototype.HashFunc = function() {
      var a;
      a = this.$val;
      return a;
    };
    $ptrType(D).prototype.HashFunc = function() {
      return new D(this.$get()).HashFunc();
    };
    D.prototype.Size = function() {
      var a;
      a = this.$val;
      if (a > 0 && a < 20) {
        return ((((a < 0 || a >= E.$length) ? ($throwRuntimeError("index out of range"), undefined) : E.$array[E.$offset + a]) >> 0));
      }
      $panic(new $String("crypto: Size of unknown hash function"));
    };
    $ptrType(D).prototype.Size = function() {
      return new D(this.$get()).Size();
    };
    D.prototype.New = function() {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this.$val;
            if (a > 0 && a < 20) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            b = ((a < 0 || a >= F.$length) ? ($throwRuntimeError("index out of range"), undefined) : F.$array[F.$offset + a]);
            if (!(b === $throwNilPointerError)) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            c = b();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return c;
          case 4:
          case 2:
            $panic(new $String("crypto: requested hash function #" + C.Itoa(((a >> 0))) + " is unavailable"));
            $s = -1;
            return $ifaceNil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: D.prototype.New
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $ptrType(D).prototype.New = function() {
      return new D(this.$get()).New();
    };
    D.prototype.Available = function() {
      var a;
      a = this.$val;
      return a < 20 && !(((a < 0 || a >= F.$length) ? ($throwRuntimeError("index out of range"), undefined) : F.$array[F.$offset + a]) === $throwNilPointerError);
    };
    $ptrType(D).prototype.Available = function() {
      return new D(this.$get()).Available();
    };
    G = function(a, b) {
      var a, b;
      if (a >= 20) {
        $panic(new $String("crypto: RegisterHash of unknown hash function"));
      }((a < 0 || a >= F.$length) ? ($throwRuntimeError("index out of range"), undefined) : F.$array[F.$offset + a] = b);
    };
    $pkg.RegisterHash = G;
    D.methods = [{
      prop: "HashFunc",
      name: "HashFunc",
      pkg: "",
      typ: $funcType([], [D], false)
    }, {
      prop: "Size",
      name: "Size",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "New",
      name: "New",
      pkg: "",
      typ: $funcType([], [A.Hash], false)
    }, {
      prop: "Available",
      name: "Available",
      pkg: "",
      typ: $funcType([], [$Bool], false)
    }];
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            E = new N([0, 16, 16, 20, 28, 32, 48, 64, 36, 20, 28, 32, 48, 64, 28, 32, 32, 32, 48, 64]);
            F = $makeSlice(P, 20);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["crypto/sha1"] = (function() {
    var $pkg = {},
      $init, A, B, C, E, P, Q, R, S, T, U, V, W, O, D, F, G, H, I, J, L, M, N;
    A = $packages["crypto"];
    B = $packages["errors"];
    C = $packages["hash"];
    E = $pkg.digest = $newType(0, $kindStruct, "sha1.digest", true, "crypto/sha1", false, function(h_, x_, nx_, len_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.h = S.zero();
        this.x = T.zero();
        this.nx = 0;
        this.len = new $Uint64(0, 0);
        return;
      }
      this.h = h_;
      this.x = x_;
      this.nx = nx_;
      this.len = len_;
    });
    P = $sliceType($Uint8);
    Q = $arrayType($Uint8, 8);
    R = $arrayType($Uint8, 4);
    S = $arrayType($Uint32, 5);
    T = $arrayType($Uint8, 64);
    U = $arrayType($Uint8, 20);
    V = $arrayType($Uint32, 16);
    W = $ptrType(E);
    D = function() {
      A.RegisterHash(3, J);
    };
    E.ptr.prototype.MarshalBinary = function() {
      var a, b;
      a = this;
      b = $makeSlice(P, 0, 96);
      b = $appendSlice(b, "sha\x01");
      b = G(b, a.h[0]);
      b = G(b, a.h[1]);
      b = G(b, a.h[2]);
      b = G(b, a.h[3]);
      b = G(b, a.h[4]);
      b = $appendSlice(b, $subslice(new P(a.x), 0, a.nx));
      b = $subslice(b, 0, ((b.$length + 64 >> 0) - (a.nx) >> 0));
      b = F(b, a.len);
      return [b, $ifaceNil];
    };
    E.prototype.MarshalBinary = function() {
      return this.$val.MarshalBinary();
    };
    E.ptr.prototype.UnmarshalBinary = function(a) {
      var a, b, c, d, e, f, g, h, i;
      b = this;
      if (a.$length < 4 || !(($bytesToString($subslice(a, 0, 4))) === "sha\x01")) {
        return B.New("crypto/sha1: invalid hash state identifier");
      }
      if (!((a.$length === 96))) {
        return B.New("crypto/sha1: invalid hash state size");
      }
      a = $subslice(a, 4);
      c = I(a);
      a = c[0];
      b.h[0] = c[1];
      d = I(a);
      a = d[0];
      b.h[1] = d[1];
      e = I(a);
      a = e[0];
      b.h[2] = e[1];
      f = I(a);
      a = f[0];
      b.h[3] = f[1];
      g = I(a);
      a = g[0];
      b.h[4] = g[1];
      a = $subslice(a, $copySlice(new P(b.x), a));
      h = H(a);
      a = h[0];
      b.len = h[1];
      b.nx = (i = ((b.len.$low >> 0)) % 64, i === i ? i : $throwRuntimeError("integer divide by zero"));
      return $ifaceNil;
    };
    E.prototype.UnmarshalBinary = function(a) {
      return this.$val.UnmarshalBinary(a);
    };
    F = function(a, b) {
      var a, b, c;
      c = Q.zero();
      L(new P(c), b);
      return $appendSlice(a, new P(c));
    };
    G = function(a, b) {
      var a, b, c;
      c = R.zero();
      M(new P(c), b);
      return $appendSlice(a, new P(c));
    };
    H = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p;
      $unused((7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]));
      p = (b = (c = (d = (e = (f = (g = (h = (new $Uint64(0, (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]))), i = $shiftLeft64((new $Uint64(0, (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6]))), 8), new $Uint64(h.$high | i.$high, (h.$low | i.$low) >>> 0)), j = $shiftLeft64((new $Uint64(0, (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5]))), 16), new $Uint64(g.$high | j.$high, (g.$low | j.$low) >>> 0)), k = $shiftLeft64((new $Uint64(0, (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4]))), 24), new $Uint64(f.$high | k.$high, (f.$low | k.$low) >>> 0)), l = $shiftLeft64((new $Uint64(0, (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]))), 32), new $Uint64(e.$high | l.$high, (e.$low | l.$low) >>> 0)), m = $shiftLeft64((new $Uint64(0, (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]))), 40), new $Uint64(d.$high | m.$high, (d.$low | m.$low) >>> 0)), n = $shiftLeft64((new $Uint64(0, (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]))), 48), new $Uint64(c.$high | n.$high, (c.$low | n.$low) >>> 0)), o = $shiftLeft64((new $Uint64(0, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]))), 56), new $Uint64(b.$high | o.$high, (b.$low | o.$low) >>> 0));
      return [$subslice(a, 8), p];
    };
    I = function(a) {
      var a, b;
      $unused((3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]));
      b = ((((((((3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]) >>> 0)) | ((((2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) >>> 0)) << 24 >>> 0)) >>> 0;
      return [$subslice(a, 4), b];
    };
    E.ptr.prototype.Reset = function() {
      var a;
      a = this;
      a.h[0] = 1732584193;
      a.h[1] = 4023233417;
      a.h[2] = 2562383102;
      a.h[3] = 271733878;
      a.h[4] = 3285377520;
      a.nx = 0;
      a.len = new $Uint64(0, 0);
    };
    E.prototype.Reset = function() {
      return this.$val.Reset();
    };
    J = function() {
      var a;
      a = new E.ptr(S.zero(), T.zero(), 0, new $Uint64(0, 0));
      a.Reset();
      return a;
    };
    $pkg.New = J;
    E.ptr.prototype.Size = function() {
      var a;
      a = this;
      return 20;
    };
    E.prototype.Size = function() {
      return this.$val.Size();
    };
    E.ptr.prototype.BlockSize = function() {
      var a;
      a = this;
      return 64;
    };
    E.prototype.BlockSize = function() {
      return this.$val.BlockSize();
    };
    E.ptr.prototype.Write = function(a) {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = 0;
            c = $ifaceNil;
            d = this;
            b = a.$length;
            d.len = (e = d.len, f = (new $Uint64(0, b)), new $Uint64(e.$high + f.$high, e.$low + f.$low));
            if (d.nx > 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            g = $copySlice($subslice(new P(d.x), d.nx), a);
            d.nx = d.nx + (g) >> 0;
            if (d.nx === 64) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            $r = O(d, new P(d.x));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d.nx = 0;
          case 4:
            a = $subslice(a, g);
          case 2:
            if (a.$length >= 64) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            h = (a.$length & ~63) >> 0;
            $r = O(d, $subslice(a, 0, h));
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            a = $subslice(a, h);
          case 7:
            if (a.$length > 0) {
              d.nx = $copySlice(new P(d.x), a);
            }
            $s = -1;
            return [b, c];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: E.ptr.prototype.Write
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    E.prototype.Write = function(a) {
      return this.$val.Write(a);
    };
    E.ptr.prototype.Sum = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = $clone(b, E);
            d = c.checkSum();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = $clone(d, U);
            $s = -1;
            return $appendSlice(a, new P(e));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: E.ptr.prototype.Sum
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    E.prototype.Sum = function(a) {
      return this.$val.Sum(a);
    };
    E.ptr.prototype.checkSum = function() {
      var a, b, c, d, e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.len;
            c = T.zero();
            c[0] = 128;
            if ((d = $div64(b, new $Uint64(0, 64), true), (d.$high < 0 || (d.$high === 0 && d.$low < 56)))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            f = a.Write($subslice(new P(c), 0, $flatten64((e = $div64(b, new $Uint64(0, 64), true), new $Uint64(0 - e.$high, 56 - e.$low)))));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            f;
            $s = 3;
            continue;
          case 2:
            h = a.Write($subslice(new P(c), 0, $flatten64((g = $div64(b, new $Uint64(0, 64), true), new $Uint64(0 - g.$high, 120 - g.$low)))));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            h;
          case 3:
            b = $shiftLeft64(b, (3));
            L(new P(c), b);
            i = a.Write($subslice(new P(c), 0, 8));
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            i;
            if (!((a.nx === 0))) {
              $panic(new $String("d.nx != 0"));
            }
            j = U.zero();
            M($subslice(new P(j), 0), a.h[0]);
            M($subslice(new P(j), 4), a.h[1]);
            M($subslice(new P(j), 8), a.h[2]);
            M($subslice(new P(j), 12), a.h[3]);
            M($subslice(new P(j), 16), a.h[4]);
            $s = -1;
            return j;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: E.ptr.prototype.checkSum
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    E.prototype.checkSum = function() {
      return this.$val.checkSum();
    };
    E.ptr.prototype.ConstantTimeSum = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = $clone(b, E);
            d = c.constSum();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = $clone(d, U);
            $s = -1;
            return $appendSlice(a, new P(e));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: E.ptr.prototype.ConstantTimeSum
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    E.prototype.ConstantTimeSum = function(a) {
      return this.$val.ConstantTimeSum(a);
    };
    E.ptr.prototype.constSum = function() {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        ai = $f.ai;
        aj = $f.aj;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = Q.zero();
            c = $shiftLeft64(a.len, 3);
            d = 0;
            while (true) {
              if (!(d < 8)) {
                break;
              }((d < 0 || d >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[d] = (($shiftRightUint64(c, ((56 - (8 * d >>> 0) >>> 0))).$low << 24 >>> 24)));
              d = d + (1) >>> 0;
            }
            e = ((a.nx << 24 >>> 24));
            f = e - 56 << 24 >>> 24;
            g = (((((f << 24 >> 24)) >> 7 << 24 >> 24) << 24 >>> 24));
            h = 128;
            i = 0;
            while (true) {
              if (!(i < 64)) {
                break;
              }
              j = ((((((i - e << 24 >>> 24) << 24 >> 24)) >> 7 << 24 >> 24) << 24 >>> 24));
              (l = a.x, ((i < 0 || i >= l.length) ? ($throwRuntimeError("index out of range"), undefined) : l[i] = ((((((~j << 24 >>> 24) & h) >>> 0)) | (((j & (k = a.x, ((i < 0 || i >= k.length) ? ($throwRuntimeError("index out of range"), undefined) : k[i]))) >>> 0))) >>> 0)));
              h = (h & (j)) >>> 0;
              if (i >= 56) {
                (o = a.x, ((i < 0 || i >= o.length) ? ($throwRuntimeError("index out of range"), undefined) : o[i] = (((m = a.x, ((i < 0 || i >= m.length) ? ($throwRuntimeError("index out of range"), undefined) : m[i])) | (((g & (n = i - 56 << 24 >>> 24, ((n < 0 || n >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[n]))) >>> 0))) >>> 0)));
              }
              i = i + (1) << 24 >>> 24;
            }
            $r = O(a, new P(a.x));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            p = U.zero();
            q = a.h;
            r = 0;
            while (true) {
              if (!(r < 5)) {
                break;
              }
              s = r;
              t = ((r < 0 || r >= q.length) ? ($throwRuntimeError("index out of range"), undefined) : q[r]);
              (u = $imul(s, 4), ((u < 0 || u >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[u] = ((g & (((t >>> 24 >>> 0) << 24 >>> 24))) >>> 0)));
              (v = ($imul(s, 4)) + 1 >> 0, ((v < 0 || v >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[v] = ((g & (((t >>> 16 >>> 0) << 24 >>> 24))) >>> 0)));
              (w = ($imul(s, 4)) + 2 >> 0, ((w < 0 || w >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[w] = ((g & (((t >>> 8 >>> 0) << 24 >>> 24))) >>> 0)));
              (x = ($imul(s, 4)) + 3 >> 0, ((x < 0 || x >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[x] = ((g & ((t << 24 >>> 24))) >>> 0)));
              r++;
            }
            y = 0;
            while (true) {
              if (!(y < 64)) {
                break;
              }
              if (y < 56) {
                (z = a.x, ((y < 0 || y >= z.length) ? ($throwRuntimeError("index out of range"), undefined) : z[y] = h));
                h = 0;
              } else {
                (ab = a.x, ((y < 0 || y >= ab.length) ? ($throwRuntimeError("index out of range"), undefined) : ab[y] = (aa = y - 56 << 24 >>> 24, ((aa < 0 || aa >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[aa]))));
              }
              y = y + (1) << 24 >>> 24;
            }
            $r = O(a, new P(a.x));
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            ac = a.h;
            ad = 0;
            while (true) {
              if (!(ad < 5)) {
                break;
              }
              ae = ad;
              af = ((ad < 0 || ad >= ac.length) ? ($throwRuntimeError("index out of range"), undefined) : ac[ad]);
              ag = $imul(ae, 4);
              ((ag < 0 || ag >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[ag] = ((((ag < 0 || ag >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[ag]) | ((((~g << 24 >>> 24) & (((af >>> 24 >>> 0) << 24 >>> 24))) >>> 0))) >>> 0));
              ah = ($imul(ae, 4)) + 1 >> 0;
              ((ah < 0 || ah >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[ah] = ((((ah < 0 || ah >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[ah]) | ((((~g << 24 >>> 24) & (((af >>> 16 >>> 0) << 24 >>> 24))) >>> 0))) >>> 0));
              ai = ($imul(ae, 4)) + 2 >> 0;
              ((ai < 0 || ai >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[ai] = ((((ai < 0 || ai >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[ai]) | ((((~g << 24 >>> 24) & (((af >>> 8 >>> 0) << 24 >>> 24))) >>> 0))) >>> 0));
              aj = ($imul(ae, 4)) + 3 >> 0;
              ((aj < 0 || aj >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[aj] = ((((aj < 0 || aj >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[aj]) | ((((~g << 24 >>> 24) & ((af << 24 >>> 24))) >>> 0))) >>> 0));
              ad++;
            }
            $s = -1;
            return p;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: E.ptr.prototype.constSum
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.ai = ai;
      $f.aj = aj;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    E.prototype.constSum = function() {
      return this.$val.constSum();
    };
    L = function(a, b) {
      var a, b;
      $unused((7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]));
      (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = (($shiftRightUint64(b, 56).$low << 24 >>> 24)));
      (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = (($shiftRightUint64(b, 48).$low << 24 >>> 24)));
      (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = (($shiftRightUint64(b, 40).$low << 24 >>> 24)));
      (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3] = (($shiftRightUint64(b, 32).$low << 24 >>> 24)));
      (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4] = (($shiftRightUint64(b, 24).$low << 24 >>> 24)));
      (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5] = (($shiftRightUint64(b, 16).$low << 24 >>> 24)));
      (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6] = (($shiftRightUint64(b, 8).$low << 24 >>> 24)));
      (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7] = ((b.$low << 24 >>> 24)));
    };
    M = function(a, b) {
      var a, b;
      $unused((3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]));
      (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = (((b >>> 24 >>> 0) << 24 >>> 24)));
      (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = (((b >>> 16 >>> 0) << 24 >>> 24)));
      (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = (((b >>> 8 >>> 0) << 24 >>> 24)));
      (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3] = ((b << 24 >>> 24)));
    };
    N = function(a, b) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, b, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, bq, br, bs, bt, bu, bv, bw, bx, by, bz, c, ca, cb, cc, cd, ce, cf, cg, ch, ci, cj, ck, cl, cm, cn, co, cp, cq, cr, cs, ct, cu, cv, cw, cx, cy, cz, d, da, db, dc, dd, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      c = V.zero();
      d = a.h[0];
      e = a.h[1];
      f = a.h[2];
      g = a.h[3];
      h = a.h[4];
      i = d;
      j = e;
      k = f;
      l = g;
      m = h;
      while (true) {
        if (!(b.$length >= 64)) {
          break;
        }
        n = 0;
        while (true) {
          if (!(n < 16)) {
            break;
          }
          o = $imul(n, 4);
          ((n < 0 || n >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[n] = (((((((((((o < 0 || o >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + o]) >>> 0)) << 24 >>> 0) | ((((p = o + 1 >> 0, ((p < 0 || p >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + p])) >>> 0)) << 16 >>> 0)) >>> 0) | ((((q = o + 2 >> 0, ((q < 0 || q >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + q])) >>> 0)) << 8 >>> 0)) >>> 0) | (((r = o + 3 >> 0, ((r < 0 || r >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + r])) >>> 0))) >>> 0));
          n = n + (1) >> 0;
        }
        s = i;
        t = j;
        u = k;
        v = l;
        w = m;
        x = s;
        y = t;
        z = u;
        aa = v;
        ab = w;
        ac = 0;
        while (true) {
          if (!(ac < 16)) {
            break;
          }
          ad = (((y & z) >>> 0) | ((((~y >>> 0)) & aa) >>> 0)) >>> 0;
          ae = ((x << 5 >>> 0) | (x >>> 27 >>> 0)) >>> 0;
          af = ((y << 30 >>> 0) | (y >>> 2 >>> 0)) >>> 0;
          ah = (((ae + ad >>> 0) + ab >>> 0) + (ag = ac & 15, ((ag < 0 || ag >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[ag])) >>> 0) + 1518500249 >>> 0;
          ai = ah;
          aj = x;
          ak = af;
          al = z;
          am = aa;
          x = ai;
          y = aj;
          z = ak;
          aa = al;
          ab = am;
          ac = ac + (1) >> 0;
        }
        while (true) {
          if (!(ac < 20)) {
            break;
          }
          ar = ((((((an = ((ac - 3 >> 0)) & 15, ((an < 0 || an >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[an])) ^ (ao = ((ac - 8 >> 0)) & 15, ((ao < 0 || ao >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[ao]))) >>> 0) ^ (ap = ((ac - 14 >> 0)) & 15, ((ap < 0 || ap >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[ap]))) >>> 0) ^ (aq = (ac) & 15, ((aq < 0 || aq >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[aq]))) >>> 0;
          (as = ac & 15, ((as < 0 || as >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[as] = (((ar << 1 >>> 0) | (ar >>> 31 >>> 0)) >>> 0)));
          at = (((y & z) >>> 0) | ((((~y >>> 0)) & aa) >>> 0)) >>> 0;
          au = ((x << 5 >>> 0) | (x >>> 27 >>> 0)) >>> 0;
          av = ((y << 30 >>> 0) | (y >>> 2 >>> 0)) >>> 0;
          ax = (((au + at >>> 0) + ab >>> 0) + (aw = ac & 15, ((aw < 0 || aw >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[aw])) >>> 0) + 1518500249 >>> 0;
          ay = ax;
          az = x;
          ba = av;
          bb = z;
          bc = aa;
          x = ay;
          y = az;
          z = ba;
          aa = bb;
          ab = bc;
          ac = ac + (1) >> 0;
        }
        while (true) {
          if (!(ac < 40)) {
            break;
          }
          bh = ((((((bd = ((ac - 3 >> 0)) & 15, ((bd < 0 || bd >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[bd])) ^ (be = ((ac - 8 >> 0)) & 15, ((be < 0 || be >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[be]))) >>> 0) ^ (bf = ((ac - 14 >> 0)) & 15, ((bf < 0 || bf >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[bf]))) >>> 0) ^ (bg = (ac) & 15, ((bg < 0 || bg >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[bg]))) >>> 0;
          (bi = ac & 15, ((bi < 0 || bi >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[bi] = (((bh << 1 >>> 0) | (bh >>> 31 >>> 0)) >>> 0)));
          bj = (((y ^ z) >>> 0) ^ aa) >>> 0;
          bk = ((x << 5 >>> 0) | (x >>> 27 >>> 0)) >>> 0;
          bl = ((y << 30 >>> 0) | (y >>> 2 >>> 0)) >>> 0;
          bn = (((bk + bj >>> 0) + ab >>> 0) + (bm = ac & 15, ((bm < 0 || bm >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[bm])) >>> 0) + 1859775393 >>> 0;
          bo = bn;
          bp = x;
          bq = bl;
          br = z;
          bs = aa;
          x = bo;
          y = bp;
          z = bq;
          aa = br;
          ab = bs;
          ac = ac + (1) >> 0;
        }
        while (true) {
          if (!(ac < 60)) {
            break;
          }
          bx = ((((((bt = ((ac - 3 >> 0)) & 15, ((bt < 0 || bt >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[bt])) ^ (bu = ((ac - 8 >> 0)) & 15, ((bu < 0 || bu >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[bu]))) >>> 0) ^ (bv = ((ac - 14 >> 0)) & 15, ((bv < 0 || bv >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[bv]))) >>> 0) ^ (bw = (ac) & 15, ((bw < 0 || bw >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[bw]))) >>> 0;
          (by = ac & 15, ((by < 0 || by >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[by] = (((bx << 1 >>> 0) | (bx >>> 31 >>> 0)) >>> 0)));
          bz = (((((((y | z) >>> 0)) & aa) >>> 0)) | (((y & z) >>> 0))) >>> 0;
          ca = ((x << 5 >>> 0) | (x >>> 27 >>> 0)) >>> 0;
          cb = ((y << 30 >>> 0) | (y >>> 2 >>> 0)) >>> 0;
          cd = (((ca + bz >>> 0) + ab >>> 0) + (cc = ac & 15, ((cc < 0 || cc >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[cc])) >>> 0) + 2400959708 >>> 0;
          ce = cd;
          cf = x;
          cg = cb;
          ch = z;
          ci = aa;
          x = ce;
          y = cf;
          z = cg;
          aa = ch;
          ab = ci;
          ac = ac + (1) >> 0;
        }
        while (true) {
          if (!(ac < 80)) {
            break;
          }
          cn = ((((((cj = ((ac - 3 >> 0)) & 15, ((cj < 0 || cj >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[cj])) ^ (ck = ((ac - 8 >> 0)) & 15, ((ck < 0 || ck >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[ck]))) >>> 0) ^ (cl = ((ac - 14 >> 0)) & 15, ((cl < 0 || cl >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[cl]))) >>> 0) ^ (cm = (ac) & 15, ((cm < 0 || cm >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[cm]))) >>> 0;
          (co = ac & 15, ((co < 0 || co >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[co] = (((cn << 1 >>> 0) | (cn >>> 31 >>> 0)) >>> 0)));
          cp = (((y ^ z) >>> 0) ^ aa) >>> 0;
          cq = ((x << 5 >>> 0) | (x >>> 27 >>> 0)) >>> 0;
          cr = ((y << 30 >>> 0) | (y >>> 2 >>> 0)) >>> 0;
          ct = (((cq + cp >>> 0) + ab >>> 0) + (cs = ac & 15, ((cs < 0 || cs >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[cs])) >>> 0) + 3395469782 >>> 0;
          cu = ct;
          cv = x;
          cw = cr;
          cx = z;
          cy = aa;
          x = cu;
          y = cv;
          z = cw;
          aa = cx;
          ab = cy;
          ac = ac + (1) >> 0;
        }
        i = i + (x) >>> 0;
        j = j + (y) >>> 0;
        k = k + (z) >>> 0;
        l = l + (aa) >>> 0;
        m = m + (ab) >>> 0;
        b = $subslice(b, 64);
      }
      cz = i;
      da = j;
      db = k;
      dc = l;
      dd = m;
      a.h[0] = cz;
      a.h[1] = da;
      a.h[2] = db;
      a.h[3] = dc;
      a.h[4] = dd;
    };
    W.methods = [{
      prop: "MarshalBinary",
      name: "MarshalBinary",
      pkg: "",
      typ: $funcType([], [P, $error], false)
    }, {
      prop: "UnmarshalBinary",
      name: "UnmarshalBinary",
      pkg: "",
      typ: $funcType([P], [$error], false)
    }, {
      prop: "Reset",
      name: "Reset",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "Size",
      name: "Size",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "BlockSize",
      name: "BlockSize",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Write",
      name: "Write",
      pkg: "",
      typ: $funcType([P], [$Int, $error], false)
    }, {
      prop: "Sum",
      name: "Sum",
      pkg: "",
      typ: $funcType([P], [P], false)
    }, {
      prop: "checkSum",
      name: "checkSum",
      pkg: "crypto/sha1",
      typ: $funcType([], [U], false)
    }, {
      prop: "ConstantTimeSum",
      name: "ConstantTimeSum",
      pkg: "",
      typ: $funcType([P], [P], false)
    }, {
      prop: "constSum",
      name: "constSum",
      pkg: "crypto/sha1",
      typ: $funcType([], [U], false)
    }];
    E.init("crypto/sha1", [{
      prop: "h",
      name: "h",
      embedded: false,
      exported: false,
      typ: S,
      tag: ""
    }, {
      prop: "x",
      name: "x",
      embedded: false,
      exported: false,
      typ: T,
      tag: ""
    }, {
      prop: "nx",
      name: "nx",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "len",
      name: "len",
      embedded: false,
      exported: false,
      typ: $Uint64,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            O = N;
            D();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["crypto/sha256"] = (function() {
    var $pkg = {},
      $init, A, B, C, E, S, T, U, V, W, X, Y, AA, AB, P, R, D, F, G, H, I, J, K, L, M, Q;
    A = $packages["crypto"];
    B = $packages["errors"];
    C = $packages["hash"];
    E = $pkg.digest = $newType(0, $kindStruct, "sha256.digest", true, "crypto/sha256", false, function(h_, x_, nx_, len_, is224_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.h = W.zero();
        this.x = X.zero();
        this.nx = 0;
        this.len = new $Uint64(0, 0);
        this.is224 = false;
        return;
      }
      this.h = h_;
      this.x = x_;
      this.nx = nx_;
      this.len = len_;
      this.is224 = is224_;
    });
    S = $sliceType($Uint32);
    T = $sliceType($Uint8);
    U = $arrayType($Uint8, 8);
    V = $arrayType($Uint8, 4);
    W = $arrayType($Uint32, 8);
    X = $arrayType($Uint8, 64);
    Y = $arrayType($Uint8, 32);
    AA = $arrayType($Uint32, 64);
    AB = $ptrType(E);
    D = function() {
      A.RegisterHash(4, M);
      A.RegisterHash(5, L);
    };
    E.ptr.prototype.MarshalBinary = function() {
      var a, b;
      a = this;
      b = $makeSlice(T, 0, 108);
      if (a.is224) {
        b = $appendSlice(b, "sha\x02");
      } else {
        b = $appendSlice(b, "sha\x03");
      }
      b = I(b, a.h[0]);
      b = I(b, a.h[1]);
      b = I(b, a.h[2]);
      b = I(b, a.h[3]);
      b = I(b, a.h[4]);
      b = I(b, a.h[5]);
      b = I(b, a.h[6]);
      b = I(b, a.h[7]);
      b = $appendSlice(b, $subslice(new T(a.x), 0, a.nx));
      b = $subslice(b, 0, ((b.$length + 64 >> 0) - (a.nx) >> 0));
      b = H(b, a.len);
      return [b, $ifaceNil];
    };
    E.prototype.MarshalBinary = function() {
      return this.$val.MarshalBinary();
    };
    E.ptr.prototype.UnmarshalBinary = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l;
      b = this;
      if (a.$length < 4 || (b.is224 && !(($bytesToString($subslice(a, 0, 4))) === "sha\x02")) || (!b.is224 && !(($bytesToString($subslice(a, 0, 4))) === "sha\x03"))) {
        return B.New("crypto/sha256: invalid hash state identifier");
      }
      if (!((a.$length === 108))) {
        return B.New("crypto/sha256: invalid hash state size");
      }
      a = $subslice(a, 4);
      c = K(a);
      a = c[0];
      b.h[0] = c[1];
      d = K(a);
      a = d[0];
      b.h[1] = d[1];
      e = K(a);
      a = e[0];
      b.h[2] = e[1];
      f = K(a);
      a = f[0];
      b.h[3] = f[1];
      g = K(a);
      a = g[0];
      b.h[4] = g[1];
      h = K(a);
      a = h[0];
      b.h[5] = h[1];
      i = K(a);
      a = i[0];
      b.h[6] = i[1];
      j = K(a);
      a = j[0];
      b.h[7] = j[1];
      a = $subslice(a, $copySlice(new T(b.x), a));
      k = J(a);
      a = k[0];
      b.len = k[1];
      b.nx = (l = ((b.len.$low >> 0)) % 64, l === l ? l : $throwRuntimeError("integer divide by zero"));
      return $ifaceNil;
    };
    E.prototype.UnmarshalBinary = function(a) {
      return this.$val.UnmarshalBinary(a);
    };
    F = function(a, b) {
      var a, b;
      $unused((3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]));
      (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = (((b >>> 24 >>> 0) << 24 >>> 24)));
      (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = (((b >>> 16 >>> 0) << 24 >>> 24)));
      (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = (((b >>> 8 >>> 0) << 24 >>> 24)));
      (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3] = ((b << 24 >>> 24)));
    };
    G = function(a, b) {
      var a, b;
      $unused((7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]));
      (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = (($shiftRightUint64(b, 56).$low << 24 >>> 24)));
      (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = (($shiftRightUint64(b, 48).$low << 24 >>> 24)));
      (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = (($shiftRightUint64(b, 40).$low << 24 >>> 24)));
      (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3] = (($shiftRightUint64(b, 32).$low << 24 >>> 24)));
      (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4] = (($shiftRightUint64(b, 24).$low << 24 >>> 24)));
      (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5] = (($shiftRightUint64(b, 16).$low << 24 >>> 24)));
      (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6] = (($shiftRightUint64(b, 8).$low << 24 >>> 24)));
      (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7] = ((b.$low << 24 >>> 24)));
    };
    H = function(a, b) {
      var a, b, c;
      c = U.zero();
      G(new T(c), b);
      return $appendSlice(a, new T(c));
    };
    I = function(a, b) {
      var a, b, c;
      c = V.zero();
      F(new T(c), b);
      return $appendSlice(a, new T(c));
    };
    J = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p;
      $unused((7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]));
      p = (b = (c = (d = (e = (f = (g = (h = (new $Uint64(0, (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]))), i = $shiftLeft64((new $Uint64(0, (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6]))), 8), new $Uint64(h.$high | i.$high, (h.$low | i.$low) >>> 0)), j = $shiftLeft64((new $Uint64(0, (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5]))), 16), new $Uint64(g.$high | j.$high, (g.$low | j.$low) >>> 0)), k = $shiftLeft64((new $Uint64(0, (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4]))), 24), new $Uint64(f.$high | k.$high, (f.$low | k.$low) >>> 0)), l = $shiftLeft64((new $Uint64(0, (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]))), 32), new $Uint64(e.$high | l.$high, (e.$low | l.$low) >>> 0)), m = $shiftLeft64((new $Uint64(0, (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]))), 40), new $Uint64(d.$high | m.$high, (d.$low | m.$low) >>> 0)), n = $shiftLeft64((new $Uint64(0, (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]))), 48), new $Uint64(c.$high | n.$high, (c.$low | n.$low) >>> 0)), o = $shiftLeft64((new $Uint64(0, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]))), 56), new $Uint64(b.$high | o.$high, (b.$low | o.$low) >>> 0));
      return [$subslice(a, 8), p];
    };
    K = function(a) {
      var a, b;
      $unused((3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]));
      b = ((((((((3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]) >>> 0)) | ((((2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) >>> 0)) << 24 >>> 0)) >>> 0;
      return [$subslice(a, 4), b];
    };
    E.ptr.prototype.Reset = function() {
      var a;
      a = this;
      if (!a.is224) {
        a.h[0] = 1779033703;
        a.h[1] = 3144134277;
        a.h[2] = 1013904242;
        a.h[3] = 2773480762;
        a.h[4] = 1359893119;
        a.h[5] = 2600822924;
        a.h[6] = 528734635;
        a.h[7] = 1541459225;
      } else {
        a.h[0] = 3238371032;
        a.h[1] = 914150663;
        a.h[2] = 812702999;
        a.h[3] = 4144912697;
        a.h[4] = 4290775857;
        a.h[5] = 1750603025;
        a.h[6] = 1694076839;
        a.h[7] = 3204075428;
      }
      a.nx = 0;
      a.len = new $Uint64(0, 0);
    };
    E.prototype.Reset = function() {
      return this.$val.Reset();
    };
    L = function() {
      var a;
      a = new E.ptr(W.zero(), X.zero(), 0, new $Uint64(0, 0), false);
      a.Reset();
      return a;
    };
    $pkg.New = L;
    M = function() {
      var a;
      a = new E.ptr(W.zero(), X.zero(), 0, new $Uint64(0, 0), false);
      a.is224 = true;
      a.Reset();
      return a;
    };
    $pkg.New224 = M;
    E.ptr.prototype.Size = function() {
      var a;
      a = this;
      if (!a.is224) {
        return 32;
      }
      return 28;
    };
    E.prototype.Size = function() {
      return this.$val.Size();
    };
    E.ptr.prototype.BlockSize = function() {
      var a;
      a = this;
      return 64;
    };
    E.prototype.BlockSize = function() {
      return this.$val.BlockSize();
    };
    E.ptr.prototype.Write = function(a) {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = 0;
            c = $ifaceNil;
            d = this;
            b = a.$length;
            d.len = (e = d.len, f = (new $Uint64(0, b)), new $Uint64(e.$high + f.$high, e.$low + f.$low));
            if (d.nx > 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            g = $copySlice($subslice(new T(d.x), d.nx), a);
            d.nx = d.nx + (g) >> 0;
            if (d.nx === 64) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            $r = R(d, new T(d.x));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d.nx = 0;
          case 4:
            a = $subslice(a, g);
          case 2:
            if (a.$length >= 64) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            h = (a.$length & ~63) >> 0;
            $r = R(d, $subslice(a, 0, h));
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            a = $subslice(a, h);
          case 7:
            if (a.$length > 0) {
              d.nx = $copySlice(new T(d.x), a);
            }
            $s = -1;
            return [b, c];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: E.ptr.prototype.Write
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    E.prototype.Write = function(a) {
      return this.$val.Write(a);
    };
    E.ptr.prototype.Sum = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = $clone(b, E);
            d = c.checkSum();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = $clone(d, Y);
            if (c.is224) {
              $s = -1;
              return $appendSlice(a, $subslice(new T(e), 0, 28));
            }
            $s = -1;
            return $appendSlice(a, new T(e));
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: E.ptr.prototype.Sum
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    E.prototype.Sum = function(a) {
      return this.$val.Sum(a);
    };
    E.ptr.prototype.checkSum = function() {
      var a, b, c, d, e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.len;
            c = X.zero();
            c[0] = 128;
            if ((d = $div64(b, new $Uint64(0, 64), true), (d.$high < 0 || (d.$high === 0 && d.$low < 56)))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            f = a.Write($subslice(new T(c), 0, $flatten64((e = $div64(b, new $Uint64(0, 64), true), new $Uint64(0 - e.$high, 56 - e.$low)))));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            f;
            $s = 3;
            continue;
          case 2:
            h = a.Write($subslice(new T(c), 0, $flatten64((g = $div64(b, new $Uint64(0, 64), true), new $Uint64(0 - g.$high, 120 - g.$low)))));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            h;
          case 3:
            b = $shiftLeft64(b, (3));
            G(new T(c), b);
            i = a.Write($subslice(new T(c), 0, 8));
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            i;
            if (!((a.nx === 0))) {
              $panic(new $String("d.nx != 0"));
            }
            j = Y.zero();
            F($subslice(new T(j), 0), a.h[0]);
            F($subslice(new T(j), 4), a.h[1]);
            F($subslice(new T(j), 8), a.h[2]);
            F($subslice(new T(j), 12), a.h[3]);
            F($subslice(new T(j), 16), a.h[4]);
            F($subslice(new T(j), 20), a.h[5]);
            F($subslice(new T(j), 24), a.h[6]);
            if (!a.is224) {
              F($subslice(new T(j), 28), a.h[7]);
            }
            $s = -1;
            return j;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: E.ptr.prototype.checkSum
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    E.prototype.checkSum = function() {
      return this.$val.checkSum();
    };
    Q = function(a, b) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, b, ba, bb, bc, bd, be, bf, bg, bh, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      c = AA.zero();
      d = a.h[0];
      e = a.h[1];
      f = a.h[2];
      g = a.h[3];
      h = a.h[4];
      i = a.h[5];
      j = a.h[6];
      k = a.h[7];
      l = d;
      m = e;
      n = f;
      o = g;
      p = h;
      q = i;
      r = j;
      s = k;
      while (true) {
        if (!(b.$length >= 64)) {
          break;
        }
        t = 0;
        while (true) {
          if (!(t < 16)) {
            break;
          }
          u = $imul(t, 4);
          ((t < 0 || t >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[t] = (((((((((((u < 0 || u >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + u]) >>> 0)) << 24 >>> 0) | ((((v = u + 1 >> 0, ((v < 0 || v >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + v])) >>> 0)) << 16 >>> 0)) >>> 0) | ((((w = u + 2 >> 0, ((w < 0 || w >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + w])) >>> 0)) << 8 >>> 0)) >>> 0) | (((x = u + 3 >> 0, ((x < 0 || x >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x])) >>> 0))) >>> 0));
          t = t + (1) >> 0;
        }
        y = 16;
        while (true) {
          if (!(y < 64)) {
            break;
          }
          aa = (z = y - 2 >> 0, ((z < 0 || z >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[z]));
          ab = (((((((aa >>> 17 >>> 0) | (aa << 15 >>> 0)) >>> 0)) ^ ((((aa >>> 19 >>> 0) | (aa << 13 >>> 0)) >>> 0))) >>> 0) ^ ((aa >>> 10 >>> 0))) >>> 0;
          ad = (ac = y - 15 >> 0, ((ac < 0 || ac >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[ac]));
          ae = (((((((ad >>> 7 >>> 0) | (ad << 25 >>> 0)) >>> 0)) ^ ((((ad >>> 18 >>> 0) | (ad << 14 >>> 0)) >>> 0))) >>> 0) ^ ((ad >>> 3 >>> 0))) >>> 0;
          ((y < 0 || y >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[y] = (((ab + (af = y - 7 >> 0, ((af < 0 || af >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[af])) >>> 0) + ae >>> 0) + (ag = y - 16 >> 0, ((ag < 0 || ag >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[ag])) >>> 0));
          y = y + (1) >> 0;
        }
        ah = l;
        ai = m;
        aj = n;
        ak = o;
        al = p;
        am = q;
        an = r;
        ao = s;
        ap = ah;
        aq = ai;
        ar = aj;
        as = ak;
        at = al;
        au = am;
        av = an;
        aw = ao;
        ax = 0;
        while (true) {
          if (!(ax < 64)) {
            break;
          }
          ay = (((aw + (((((((((at >>> 6 >>> 0) | (at << 26 >>> 0)) >>> 0)) ^ ((((at >>> 11 >>> 0) | (at << 21 >>> 0)) >>> 0))) >>> 0) ^ ((((at >>> 25 >>> 0) | (at << 7 >>> 0)) >>> 0))) >>> 0)) >>> 0) + ((((((at & au) >>> 0)) ^ ((((~at >>> 0) & av) >>> 0))) >>> 0)) >>> 0) + ((ax < 0 || ax >= P.$length) ? ($throwRuntimeError("index out of range"), undefined) : P.$array[P.$offset + ax]) >>> 0) + ((ax < 0 || ax >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[ax]) >>> 0;
          az = (((((((((ap >>> 2 >>> 0) | (ap << 30 >>> 0)) >>> 0)) ^ ((((ap >>> 13 >>> 0) | (ap << 19 >>> 0)) >>> 0))) >>> 0) ^ ((((ap >>> 22 >>> 0) | (ap << 10 >>> 0)) >>> 0))) >>> 0)) + ((((((((ap & aq) >>> 0)) ^ (((ap & ar) >>> 0))) >>> 0) ^ (((aq & ar) >>> 0))) >>> 0)) >>> 0;
          aw = av;
          av = au;
          au = at;
          at = as + ay >>> 0;
          as = ar;
          ar = aq;
          aq = ap;
          ap = ay + az >>> 0;
          ax = ax + (1) >> 0;
        }
        l = l + (ap) >>> 0;
        m = m + (aq) >>> 0;
        n = n + (ar) >>> 0;
        o = o + (as) >>> 0;
        p = p + (at) >>> 0;
        q = q + (au) >>> 0;
        r = r + (av) >>> 0;
        s = s + (aw) >>> 0;
        b = $subslice(b, 64);
      }
      ba = l;
      bb = m;
      bc = n;
      bd = o;
      be = p;
      bf = q;
      bg = r;
      bh = s;
      a.h[0] = ba;
      a.h[1] = bb;
      a.h[2] = bc;
      a.h[3] = bd;
      a.h[4] = be;
      a.h[5] = bf;
      a.h[6] = bg;
      a.h[7] = bh;
    };
    AB.methods = [{
      prop: "MarshalBinary",
      name: "MarshalBinary",
      pkg: "",
      typ: $funcType([], [T, $error], false)
    }, {
      prop: "UnmarshalBinary",
      name: "UnmarshalBinary",
      pkg: "",
      typ: $funcType([T], [$error], false)
    }, {
      prop: "Reset",
      name: "Reset",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "Size",
      name: "Size",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "BlockSize",
      name: "BlockSize",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Write",
      name: "Write",
      pkg: "",
      typ: $funcType([T], [$Int, $error], false)
    }, {
      prop: "Sum",
      name: "Sum",
      pkg: "",
      typ: $funcType([T], [T], false)
    }, {
      prop: "checkSum",
      name: "checkSum",
      pkg: "crypto/sha256",
      typ: $funcType([], [Y], false)
    }];
    E.init("crypto/sha256", [{
      prop: "h",
      name: "h",
      embedded: false,
      exported: false,
      typ: W,
      tag: ""
    }, {
      prop: "x",
      name: "x",
      embedded: false,
      exported: false,
      typ: X,
      tag: ""
    }, {
      prop: "nx",
      name: "nx",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "len",
      name: "len",
      embedded: false,
      exported: false,
      typ: $Uint64,
      tag: ""
    }, {
      prop: "is224",
      name: "is224",
      embedded: false,
      exported: false,
      typ: $Bool,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            P = new S([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
            R = Q;
            D();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["crypto/sha512"] = (function() {
    var $pkg = {},
      $init, A, B, C, E, T, U, V, W, X, Y, AC, AD, Q, S, D, F, G, H, I, J, K, L, R;
    A = $packages["crypto"];
    B = $packages["errors"];
    C = $packages["hash"];
    E = $pkg.digest = $newType(0, $kindStruct, "sha512.digest", true, "crypto/sha512", false, function(h_, x_, nx_, len_, function$4_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.h = W.zero();
        this.x = X.zero();
        this.nx = 0;
        this.len = new $Uint64(0, 0);
        this.function$4 = 0;
        return;
      }
      this.h = h_;
      this.x = x_;
      this.nx = nx_;
      this.len = len_;
      this.function$4 = function$4_;
    });
    T = $sliceType($Uint64);
    U = $sliceType($Uint8);
    V = $arrayType($Uint8, 8);
    W = $arrayType($Uint64, 8);
    X = $arrayType($Uint8, 128);
    Y = $arrayType($Uint8, 64);
    AC = $arrayType($Uint64, 80);
    AD = $ptrType(E);
    D = function() {
      A.RegisterHash(6, L);
      A.RegisterHash(7, I);
      A.RegisterHash(14, J);
      A.RegisterHash(15, K);
    };
    E.ptr.prototype.Reset = function() {
      var a, b;
      a = this;
      b = a.function$4;
      if (b === (6)) {
        a.h[0] = new $Uint64(3418070365, 3238371032);
        a.h[1] = new $Uint64(1654270250, 914150663);
        a.h[2] = new $Uint64(2438529370, 812702999);
        a.h[3] = new $Uint64(355462360, 4144912697);
        a.h[4] = new $Uint64(1731405415, 4290775857);
        a.h[5] = new $Uint64(2394180231, 1750603025);
        a.h[6] = new $Uint64(3675008525, 1694076839);
        a.h[7] = new $Uint64(1203062813, 3204075428);
      } else if (b === (14)) {
        a.h[0] = new $Uint64(2352822216, 424955298);
        a.h[1] = new $Uint64(1944164710, 2312950998);
        a.h[2] = new $Uint64(502970286, 855612546);
        a.h[3] = new $Uint64(1738396948, 1479516111);
        a.h[4] = new $Uint64(258812777, 2077511080);
        a.h[5] = new $Uint64(2011393907, 79989058);
        a.h[6] = new $Uint64(1067287976, 1780299464);
        a.h[7] = new $Uint64(286451373, 2446758561);
      } else if (b === (15)) {
        a.h[0] = new $Uint64(573645204, 4230739756);
        a.h[1] = new $Uint64(2673172387, 3360449730);
        a.h[2] = new $Uint64(596883563, 1867755857);
        a.h[3] = new $Uint64(2520282905, 1497426621);
        a.h[4] = new $Uint64(2519219938, 2827943907);
        a.h[5] = new $Uint64(3193839141, 1401305490);
        a.h[6] = new $Uint64(721525244, 746961066);
        a.h[7] = new $Uint64(246885852, 2177182882);
      } else {
        a.h[0] = new $Uint64(1779033703, 4089235720);
        a.h[1] = new $Uint64(3144134277, 2227873595);
        a.h[2] = new $Uint64(1013904242, 4271175723);
        a.h[3] = new $Uint64(2773480762, 1595750129);
        a.h[4] = new $Uint64(1359893119, 2917565137);
        a.h[5] = new $Uint64(2600822924, 725511199);
        a.h[6] = new $Uint64(528734635, 4215389547);
        a.h[7] = new $Uint64(1541459225, 327033209);
      }
      a.nx = 0;
      a.len = new $Uint64(0, 0);
    };
    E.prototype.Reset = function() {
      return this.$val.Reset();
    };
    E.ptr.prototype.MarshalBinary = function() {
      var a, b, c;
      a = this;
      b = $makeSlice(U, 0, 204);
      c = a.function$4;
      if (c === (6)) {
        b = $appendSlice(b, "sha\x04");
      } else if (c === (14)) {
        b = $appendSlice(b, "sha\x05");
      } else if (c === (15)) {
        b = $appendSlice(b, "sha\x06");
      } else if (c === (7)) {
        b = $appendSlice(b, "sha\x07");
      } else {
        return [U.nil, B.New("crypto/sha512: invalid hash function")];
      }
      b = G(b, a.h[0]);
      b = G(b, a.h[1]);
      b = G(b, a.h[2]);
      b = G(b, a.h[3]);
      b = G(b, a.h[4]);
      b = G(b, a.h[5]);
      b = G(b, a.h[6]);
      b = G(b, a.h[7]);
      b = $appendSlice(b, $subslice(new U(a.x), 0, a.nx));
      b = $subslice(b, 0, ((b.$length + 128 >> 0) - (a.nx) >> 0));
      b = G(b, a.len);
      return [b, $ifaceNil];
    };
    E.prototype.MarshalBinary = function() {
      return this.$val.MarshalBinary();
    };
    E.ptr.prototype.UnmarshalBinary = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l;
      b = this;
      if (a.$length < 4) {
        return B.New("crypto/sha512: invalid hash state identifier");
      }
      if ((b.function$4 === 6) && ($bytesToString($subslice(a, 0, 4))) === "sha\x04") {} else if ((b.function$4 === 14) && ($bytesToString($subslice(a, 0, 4))) === "sha\x05") {} else if ((b.function$4 === 15) && ($bytesToString($subslice(a, 0, 4))) === "sha\x06") {} else if ((b.function$4 === 7) && ($bytesToString($subslice(a, 0, 4))) === "sha\x07") {} else {
        return B.New("crypto/sha512: invalid hash state identifier");
      }
      if (!((a.$length === 204))) {
        return B.New("crypto/sha512: invalid hash state size");
      }
      a = $subslice(a, 4);
      c = H(a);
      a = c[0];
      b.h[0] = c[1];
      d = H(a);
      a = d[0];
      b.h[1] = d[1];
      e = H(a);
      a = e[0];
      b.h[2] = e[1];
      f = H(a);
      a = f[0];
      b.h[3] = f[1];
      g = H(a);
      a = g[0];
      b.h[4] = g[1];
      h = H(a);
      a = h[0];
      b.h[5] = h[1];
      i = H(a);
      a = i[0];
      b.h[6] = i[1];
      j = H(a);
      a = j[0];
      b.h[7] = j[1];
      a = $subslice(a, $copySlice(new U(b.x), a));
      k = H(a);
      a = k[0];
      b.len = k[1];
      b.nx = (l = ((b.len.$low >> 0)) % 128, l === l ? l : $throwRuntimeError("integer divide by zero"));
      return $ifaceNil;
    };
    E.prototype.UnmarshalBinary = function(a) {
      return this.$val.UnmarshalBinary(a);
    };
    F = function(a, b) {
      var a, b;
      $unused((7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]));
      (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = (($shiftRightUint64(b, 56).$low << 24 >>> 24)));
      (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = (($shiftRightUint64(b, 48).$low << 24 >>> 24)));
      (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = (($shiftRightUint64(b, 40).$low << 24 >>> 24)));
      (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3] = (($shiftRightUint64(b, 32).$low << 24 >>> 24)));
      (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4] = (($shiftRightUint64(b, 24).$low << 24 >>> 24)));
      (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5] = (($shiftRightUint64(b, 16).$low << 24 >>> 24)));
      (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6] = (($shiftRightUint64(b, 8).$low << 24 >>> 24)));
      (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7] = ((b.$low << 24 >>> 24)));
    };
    G = function(a, b) {
      var a, b, c;
      c = V.zero();
      F(new U(c), b);
      return $appendSlice(a, new U(c));
    };
    H = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p;
      $unused((7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]));
      p = (b = (c = (d = (e = (f = (g = (h = (new $Uint64(0, (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]))), i = $shiftLeft64((new $Uint64(0, (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6]))), 8), new $Uint64(h.$high | i.$high, (h.$low | i.$low) >>> 0)), j = $shiftLeft64((new $Uint64(0, (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5]))), 16), new $Uint64(g.$high | j.$high, (g.$low | j.$low) >>> 0)), k = $shiftLeft64((new $Uint64(0, (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4]))), 24), new $Uint64(f.$high | k.$high, (f.$low | k.$low) >>> 0)), l = $shiftLeft64((new $Uint64(0, (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]))), 32), new $Uint64(e.$high | l.$high, (e.$low | l.$low) >>> 0)), m = $shiftLeft64((new $Uint64(0, (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]))), 40), new $Uint64(d.$high | m.$high, (d.$low | m.$low) >>> 0)), n = $shiftLeft64((new $Uint64(0, (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]))), 48), new $Uint64(c.$high | n.$high, (c.$low | n.$low) >>> 0)), o = $shiftLeft64((new $Uint64(0, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]))), 56), new $Uint64(b.$high | o.$high, (b.$low | o.$low) >>> 0));
      return [$subslice(a, 8), p];
    };
    I = function() {
      var a;
      a = new E.ptr(W.zero(), X.zero(), 0, new $Uint64(0, 0), 7);
      a.Reset();
      return a;
    };
    $pkg.New = I;
    J = function() {
      var a;
      a = new E.ptr(W.zero(), X.zero(), 0, new $Uint64(0, 0), 14);
      a.Reset();
      return a;
    };
    $pkg.New512_224 = J;
    K = function() {
      var a;
      a = new E.ptr(W.zero(), X.zero(), 0, new $Uint64(0, 0), 15);
      a.Reset();
      return a;
    };
    $pkg.New512_256 = K;
    L = function() {
      var a;
      a = new E.ptr(W.zero(), X.zero(), 0, new $Uint64(0, 0), 6);
      a.Reset();
      return a;
    };
    $pkg.New384 = L;
    E.ptr.prototype.Size = function() {
      var a, b;
      a = this;
      b = a.function$4;
      if (b === (14)) {
        return 28;
      } else if (b === (15)) {
        return 32;
      } else if (b === (6)) {
        return 48;
      } else {
        return 64;
      }
    };
    E.prototype.Size = function() {
      return this.$val.Size();
    };
    E.ptr.prototype.BlockSize = function() {
      var a;
      a = this;
      return 128;
    };
    E.prototype.BlockSize = function() {
      return this.$val.BlockSize();
    };
    E.ptr.prototype.Write = function(a) {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = 0;
            c = $ifaceNil;
            d = this;
            b = a.$length;
            d.len = (e = d.len, f = (new $Uint64(0, b)), new $Uint64(e.$high + f.$high, e.$low + f.$low));
            if (d.nx > 0) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            g = $copySlice($subslice(new U(d.x), d.nx), a);
            d.nx = d.nx + (g) >> 0;
            if (d.nx === 128) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            $r = S(d, new U(d.x));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            d.nx = 0;
          case 4:
            a = $subslice(a, g);
          case 2:
            if (a.$length >= 128) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            h = (a.$length & ~127) >> 0;
            $r = S(d, $subslice(a, 0, h));
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            a = $subslice(a, h);
          case 7:
            if (a.$length > 0) {
              d.nx = $copySlice(new U(d.x), a);
            }
            $s = -1;
            return [b, c];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: E.ptr.prototype.Write
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    E.prototype.Write = function(a) {
      return this.$val.Write(a);
    };
    E.ptr.prototype.Sum = function(a) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = new E.ptr(W.zero(), X.zero(), 0, new $Uint64(0, 0), 0);
            E.copy(c, b);
            d = c.checkSum();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = $clone(d, Y);
            f = c.function$4;
            if (f === (6)) {
              $s = -1;
              return $appendSlice(a, $subslice(new U(e), 0, 48));
            } else if (f === (14)) {
              $s = -1;
              return $appendSlice(a, $subslice(new U(e), 0, 28));
            } else if (f === (15)) {
              $s = -1;
              return $appendSlice(a, $subslice(new U(e), 0, 32));
            } else {
              $s = -1;
              return $appendSlice(a, new U(e));
            }
            $s = -1;
            return U.nil;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: E.ptr.prototype.Sum
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    E.prototype.Sum = function(a) {
      return this.$val.Sum(a);
    };
    E.ptr.prototype.checkSum = function() {
      var a, b, c, d, e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            a = this;
            b = a.len;
            c = X.zero();
            c[0] = 128;
            if ((d = $div64(b, new $Uint64(0, 128), true), (d.$high < 0 || (d.$high === 0 && d.$low < 112)))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            f = a.Write($subslice(new U(c), 0, $flatten64((e = $div64(b, new $Uint64(0, 128), true), new $Uint64(0 - e.$high, 112 - e.$low)))));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            f;
            $s = 3;
            continue;
          case 2:
            h = a.Write($subslice(new U(c), 0, $flatten64((g = $div64(b, new $Uint64(0, 128), true), new $Uint64(0 - g.$high, 240 - g.$low)))));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            h;
          case 3:
            b = $shiftLeft64(b, (3));
            F($subslice(new U(c), 0), new $Uint64(0, 0));
            F($subslice(new U(c), 8), b);
            i = a.Write($subslice(new U(c), 0, 16));
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            i;
            if (!((a.nx === 0))) {
              $panic(new $String("d.nx != 0"));
            }
            j = Y.zero();
            F($subslice(new U(j), 0), a.h[0]);
            F($subslice(new U(j), 8), a.h[1]);
            F($subslice(new U(j), 16), a.h[2]);
            F($subslice(new U(j), 24), a.h[3]);
            F($subslice(new U(j), 32), a.h[4]);
            F($subslice(new U(j), 40), a.h[5]);
            if (!((a.function$4 === 6))) {
              F($subslice(new U(j), 48), a.h[6]);
              F($subslice(new U(j), 56), a.h[7]);
            }
            $s = -1;
            return j;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: E.ptr.prototype.checkSum
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    E.prototype.checkSum = function() {
      return this.$val.checkSum();
    };
    R = function(a, b) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, b, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, bq, br, bs, bt, bu, bv, bw, bx, by, bz, c, ca, cb, cc, cd, ce, cf, cg, ch, ci, cj, ck, cl, cm, cn, co, cp, cq, cr, cs, ct, cu, cv, cw, cx, cy, cz, d, da, db, dc, dd, de, df, dg, dh, di, dj, dk, dl, dm, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, dz, e, ea, eb, ec, ed, ee, ef, eg, eh, ei, ej, ek, el, em, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      c = AC.zero();
      d = a.h[0];
      e = a.h[1];
      f = a.h[2];
      g = a.h[3];
      h = a.h[4];
      i = a.h[5];
      j = a.h[6];
      k = a.h[7];
      l = d;
      m = e;
      n = f;
      o = g;
      p = h;
      q = i;
      r = j;
      s = k;
      while (true) {
        if (!(b.$length >= 128)) {
          break;
        }
        t = 0;
        while (true) {
          if (!(t < 16)) {
            break;
          }
          u = $imul(t, 8);
          ((t < 0 || t >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[t] = (v = (w = (x = (y = (z = (aa = (ab = $shiftLeft64((new $Uint64(0, ((u < 0 || u >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + u]))), 56), ac = $shiftLeft64((new $Uint64(0, (ad = u + 1 >> 0, ((ad < 0 || ad >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + ad])))), 48), new $Uint64(ab.$high | ac.$high, (ab.$low | ac.$low) >>> 0)), ae = $shiftLeft64((new $Uint64(0, (af = u + 2 >> 0, ((af < 0 || af >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + af])))), 40), new $Uint64(aa.$high | ae.$high, (aa.$low | ae.$low) >>> 0)), ag = $shiftLeft64((new $Uint64(0, (ah = u + 3 >> 0, ((ah < 0 || ah >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + ah])))), 32), new $Uint64(z.$high | ag.$high, (z.$low | ag.$low) >>> 0)), ai = $shiftLeft64((new $Uint64(0, (aj = u + 4 >> 0, ((aj < 0 || aj >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + aj])))), 24), new $Uint64(y.$high | ai.$high, (y.$low | ai.$low) >>> 0)), ak = $shiftLeft64((new $Uint64(0, (al = u + 5 >> 0, ((al < 0 || al >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + al])))), 16), new $Uint64(x.$high | ak.$high, (x.$low | ak.$low) >>> 0)), am = $shiftLeft64((new $Uint64(0, (an = u + 6 >> 0, ((an < 0 || an >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + an])))), 8), new $Uint64(w.$high | am.$high, (w.$low | am.$low) >>> 0)), ao = (new $Uint64(0, (ap = u + 7 >> 0, ((ap < 0 || ap >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + ap])))), new $Uint64(v.$high | ao.$high, (v.$low | ao.$low) >>> 0)));
          t = t + (1) >> 0;
        }
        aq = 16;
        while (true) {
          if (!(aq < 80)) {
            break;
          }
          as = (ar = aq - 2 >> 0, ((ar < 0 || ar >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[ar]));
          bb = (at = (au = (av = $shiftRightUint64(as, 19), aw = $shiftLeft64(as, 45), new $Uint64(av.$high | aw.$high, (av.$low | aw.$low) >>> 0)), ax = (ay = $shiftRightUint64(as, 61), az = $shiftLeft64(as, 3), new $Uint64(ay.$high | az.$high, (ay.$low | az.$low) >>> 0)), new $Uint64(au.$high ^ ax.$high, (au.$low ^ ax.$low) >>> 0)), ba = $shiftRightUint64(as, 6), new $Uint64(at.$high ^ ba.$high, (at.$low ^ ba.$low) >>> 0));
          bd = (bc = aq - 15 >> 0, ((bc < 0 || bc >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[bc]));
          bm = (be = (bf = (bg = $shiftRightUint64(bd, 1), bh = $shiftLeft64(bd, 63), new $Uint64(bg.$high | bh.$high, (bg.$low | bh.$low) >>> 0)), bi = (bj = $shiftRightUint64(bd, 8), bk = $shiftLeft64(bd, 56), new $Uint64(bj.$high | bk.$high, (bj.$low | bk.$low) >>> 0)), new $Uint64(bf.$high ^ bi.$high, (bf.$low ^ bi.$low) >>> 0)), bl = $shiftRightUint64(bd, 7), new $Uint64(be.$high ^ bl.$high, (be.$low ^ bl.$low) >>> 0));
          ((aq < 0 || aq >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[aq] = (bn = (bo = (bp = (bq = aq - 7 >> 0, ((bq < 0 || bq >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[bq])), new $Uint64(bb.$high + bp.$high, bb.$low + bp.$low)), new $Uint64(bo.$high + bm.$high, bo.$low + bm.$low)), br = (bs = aq - 16 >> 0, ((bs < 0 || bs >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[bs])), new $Uint64(bn.$high + br.$high, bn.$low + br.$low)));
          aq = aq + (1) >> 0;
        }
        bt = l;
        bu = m;
        bv = n;
        bw = o;
        bx = p;
        by = q;
        bz = r;
        ca = s;
        cb = bt;
        cc = bu;
        cd = bv;
        ce = bw;
        cf = bx;
        cg = by;
        ch = bz;
        ci = ca;
        cj = 0;
        while (true) {
          if (!(cj < 80)) {
            break;
          }
          de = (ck = (cl = (cm = (cn = (co = (cp = (cq = $shiftRightUint64(cf, 14), cr = $shiftLeft64(cf, 50), new $Uint64(cq.$high | cr.$high, (cq.$low | cr.$low) >>> 0)), cs = (ct = $shiftRightUint64(cf, 18), cu = $shiftLeft64(cf, 46), new $Uint64(ct.$high | cu.$high, (ct.$low | cu.$low) >>> 0)), new $Uint64(cp.$high ^ cs.$high, (cp.$low ^ cs.$low) >>> 0)), cv = (cw = $shiftRightUint64(cf, 41), cx = $shiftLeft64(cf, 23), new $Uint64(cw.$high | cx.$high, (cw.$low | cx.$low) >>> 0)), new $Uint64(co.$high ^ cv.$high, (co.$low ^ cv.$low) >>> 0)), new $Uint64(ci.$high + cn.$high, ci.$low + cn.$low)), cy = (cz = new $Uint64(cf.$high & cg.$high, (cf.$low & cg.$low) >>> 0), da = (db = new $Uint64(~cf.$high, ~cf.$low >>> 0), new $Uint64(db.$high & ch.$high, (db.$low & ch.$low) >>> 0)), new $Uint64(cz.$high ^ da.$high, (cz.$low ^ da.$low) >>> 0)), new $Uint64(cm.$high + cy.$high, cm.$low + cy.$low)), dc = ((cj < 0 || cj >= Q.$length) ? ($throwRuntimeError("index out of range"), undefined) : Q.$array[Q.$offset + cj]), new $Uint64(cl.$high + dc.$high, cl.$low + dc.$low)), dd = ((cj < 0 || cj >= c.length) ? ($throwRuntimeError("index out of range"), undefined) : c[cj]), new $Uint64(ck.$high + dd.$high, ck.$low + dd.$low));
          dw = (df = (dg = (dh = (di = $shiftRightUint64(cb, 28), dj = $shiftLeft64(cb, 36), new $Uint64(di.$high | dj.$high, (di.$low | dj.$low) >>> 0)), dk = (dl = $shiftRightUint64(cb, 34), dm = $shiftLeft64(cb, 30), new $Uint64(dl.$high | dm.$high, (dl.$low | dm.$low) >>> 0)), new $Uint64(dh.$high ^ dk.$high, (dh.$low ^ dk.$low) >>> 0)), dn = (dp = $shiftRightUint64(cb, 39), dq = $shiftLeft64(cb, 25), new $Uint64(dp.$high | dq.$high, (dp.$low | dq.$low) >>> 0)), new $Uint64(dg.$high ^ dn.$high, (dg.$low ^ dn.$low) >>> 0)), dr = (ds = (dt = new $Uint64(cb.$high & cc.$high, (cb.$low & cc.$low) >>> 0), du = new $Uint64(cb.$high & cd.$high, (cb.$low & cd.$low) >>> 0), new $Uint64(dt.$high ^ du.$high, (dt.$low ^ du.$low) >>> 0)), dv = new $Uint64(cc.$high & cd.$high, (cc.$low & cd.$low) >>> 0), new $Uint64(ds.$high ^ dv.$high, (ds.$low ^ dv.$low) >>> 0)), new $Uint64(df.$high + dr.$high, df.$low + dr.$low));
          ci = ch;
          ch = cg;
          cg = cf;
          cf = new $Uint64(ce.$high + de.$high, ce.$low + de.$low);
          ce = cd;
          cd = cc;
          cc = cb;
          cb = new $Uint64(de.$high + dw.$high, de.$low + dw.$low);
          cj = cj + (1) >> 0;
        }
        l = (dx = cb, new $Uint64(l.$high + dx.$high, l.$low + dx.$low));
        m = (dy = cc, new $Uint64(m.$high + dy.$high, m.$low + dy.$low));
        n = (dz = cd, new $Uint64(n.$high + dz.$high, n.$low + dz.$low));
        o = (ea = ce, new $Uint64(o.$high + ea.$high, o.$low + ea.$low));
        p = (eb = cf, new $Uint64(p.$high + eb.$high, p.$low + eb.$low));
        q = (ec = cg, new $Uint64(q.$high + ec.$high, q.$low + ec.$low));
        r = (ed = ch, new $Uint64(r.$high + ed.$high, r.$low + ed.$low));
        s = (ee = ci, new $Uint64(s.$high + ee.$high, s.$low + ee.$low));
        b = $subslice(b, 128);
      }
      ef = l;
      eg = m;
      eh = n;
      ei = o;
      ej = p;
      ek = q;
      el = r;
      em = s;
      a.h[0] = ef;
      a.h[1] = eg;
      a.h[2] = eh;
      a.h[3] = ei;
      a.h[4] = ej;
      a.h[5] = ek;
      a.h[6] = el;
      a.h[7] = em;
    };
    AD.methods = [{
      prop: "Reset",
      name: "Reset",
      pkg: "",
      typ: $funcType([], [], false)
    }, {
      prop: "MarshalBinary",
      name: "MarshalBinary",
      pkg: "",
      typ: $funcType([], [U, $error], false)
    }, {
      prop: "UnmarshalBinary",
      name: "UnmarshalBinary",
      pkg: "",
      typ: $funcType([U], [$error], false)
    }, {
      prop: "Size",
      name: "Size",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "BlockSize",
      name: "BlockSize",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "Write",
      name: "Write",
      pkg: "",
      typ: $funcType([U], [$Int, $error], false)
    }, {
      prop: "Sum",
      name: "Sum",
      pkg: "",
      typ: $funcType([U], [U], false)
    }, {
      prop: "checkSum",
      name: "checkSum",
      pkg: "crypto/sha512",
      typ: $funcType([], [Y], false)
    }];
    E.init("crypto/sha512", [{
      prop: "h",
      name: "h",
      embedded: false,
      exported: false,
      typ: W,
      tag: ""
    }, {
      prop: "x",
      name: "x",
      embedded: false,
      exported: false,
      typ: X,
      tag: ""
    }, {
      prop: "nx",
      name: "nx",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "len",
      name: "len",
      embedded: false,
      exported: false,
      typ: $Uint64,
      tag: ""
    }, {
      prop: "function$4",
      name: "function",
      embedded: false,
      exported: false,
      typ: A.Hash,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            Q = new T([new $Uint64(1116352408, 3609767458), new $Uint64(1899447441, 602891725), new $Uint64(3049323471, 3964484399), new $Uint64(3921009573, 2173295548), new $Uint64(961987163, 4081628472), new $Uint64(1508970993, 3053834265), new $Uint64(2453635748, 2937671579), new $Uint64(2870763221, 3664609560), new $Uint64(3624381080, 2734883394), new $Uint64(310598401, 1164996542), new $Uint64(607225278, 1323610764), new $Uint64(1426881987, 3590304994), new $Uint64(1925078388, 4068182383), new $Uint64(2162078206, 991336113), new $Uint64(2614888103, 633803317), new $Uint64(3248222580, 3479774868), new $Uint64(3835390401, 2666613458), new $Uint64(4022224774, 944711139), new $Uint64(264347078, 2341262773), new $Uint64(604807628, 2007800933), new $Uint64(770255983, 1495990901), new $Uint64(1249150122, 1856431235), new $Uint64(1555081692, 3175218132), new $Uint64(1996064986, 2198950837), new $Uint64(2554220882, 3999719339), new $Uint64(2821834349, 766784016), new $Uint64(2952996808, 2566594879), new $Uint64(3210313671, 3203337956), new $Uint64(3336571891, 1034457026), new $Uint64(3584528711, 2466948901), new $Uint64(113926993, 3758326383), new $Uint64(338241895, 168717936), new $Uint64(666307205, 1188179964), new $Uint64(773529912, 1546045734), new $Uint64(1294757372, 1522805485), new $Uint64(1396182291, 2643833823), new $Uint64(1695183700, 2343527390), new $Uint64(1986661051, 1014477480), new $Uint64(2177026350, 1206759142), new $Uint64(2456956037, 344077627), new $Uint64(2730485921, 1290863460), new $Uint64(2820302411, 3158454273), new $Uint64(3259730800, 3505952657), new $Uint64(3345764771, 106217008), new $Uint64(3516065817, 3606008344), new $Uint64(3600352804, 1432725776), new $Uint64(4094571909, 1467031594), new $Uint64(275423344, 851169720), new $Uint64(430227734, 3100823752), new $Uint64(506948616, 1363258195), new $Uint64(659060556, 3750685593), new $Uint64(883997877, 3785050280), new $Uint64(958139571, 3318307427), new $Uint64(1322822218, 3812723403), new $Uint64(1537002063, 2003034995), new $Uint64(1747873779, 3602036899), new $Uint64(1955562222, 1575990012), new $Uint64(2024104815, 1125592928), new $Uint64(2227730452, 2716904306), new $Uint64(2361852424, 442776044), new $Uint64(2428436474, 593698344), new $Uint64(2756734187, 3733110249), new $Uint64(3204031479, 2999351573), new $Uint64(3329325298, 3815920427), new $Uint64(3391569614, 3928383900), new $Uint64(3515267271, 566280711), new $Uint64(3940187606, 3454069534), new $Uint64(4118630271, 4000239992), new $Uint64(116418474, 1914138554), new $Uint64(174292421, 2731055270), new $Uint64(289380356, 3203993006), new $Uint64(460393269, 320620315), new $Uint64(685471733, 587496836), new $Uint64(852142971, 1086792851), new $Uint64(1017036298, 365543100), new $Uint64(1126000580, 2618297676), new $Uint64(1288033470, 3409855158), new $Uint64(1501505948, 4234509866), new $Uint64(1607167915, 987167468), new $Uint64(1816402316, 1246189591)]);
            S = R;
            D();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["encoding/base32"] = (function() {
    var $pkg = {},
      $init, A, B, C, D, E, J, O, P, Q, R, S, G, F;
    A = $packages["bytes"];
    B = $packages["io"];
    C = $packages["strconv"];
    D = $packages["strings"];
    E = $pkg.Encoding = $newType(0, $kindStruct, "base32.Encoding", true, "encoding/base32", true, function(encode_, decodeMap_, padChar_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.encode = O.zero();
        this.decodeMap = P.zero();
        this.padChar = 0;
        return;
      }
      this.encode = encode_;
      this.decodeMap = decodeMap_;
      this.padChar = padChar_;
    });
    J = $pkg.CorruptInputError = $newType(8, $kindInt64, "base32.CorruptInputError", true, "encoding/base32", true, null);
    O = $arrayType($Uint8, 32);
    P = $arrayType($Uint8, 256);
    Q = $sliceType($Uint8);
    R = $arrayType($Uint8, 8);
    S = $ptrType(E);
    F = function(a) {
      var a, b, c, d, e, f, g;
      if (!((a.length === 32))) {
        $panic(new $String("encoding alphabet is not 32-bytes long"));
      }
      b = new E.ptr(O.zero(), P.zero(), 0);
      $copyString(new Q(b.encode), a);
      b.padChar = 61;
      c = 0;
      while (true) {
        if (!(c < 256)) {
          break;
        }(d = b.decodeMap, ((c < 0 || c >= d.length) ? ($throwRuntimeError("index out of range"), undefined) : d[c] = 255));
        c = c + (1) >> 0;
      }
      e = 0;
      while (true) {
        if (!(e < a.length)) {
          break;
        }(f = b.decodeMap, g = a.charCodeAt(e), ((g < 0 || g >= f.length) ? ($throwRuntimeError("index out of range"), undefined) : f[g] = ((e << 24 >>> 24))));
        e = e + (1) >> 0;
      }
      return b;
    };
    $pkg.NewEncoding = F;
    E.ptr.prototype.WithPadding = function(a) {
      var a, b, c, d;
      b = this;
      if ((a === 13) || (a === 10) || a > 255) {
        $panic(new $String("invalid padding"));
      }
      c = 0;
      while (true) {
        if (!(c < 32)) {
          break;
        }
        if ((((d = b.encode, ((c < 0 || c >= d.length) ? ($throwRuntimeError("index out of range"), undefined) : d[c])) >> 0)) === a) {
          $panic(new $String("padding contained in alphabet"));
        }
        c = c + (1) >> 0;
      }
      b.padChar = a;
      return b;
    };
    E.prototype.WithPadding = function(a) {
      return this.$val.WithPadding(a);
    };
    E.ptr.prototype.Encode = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y;
      c = this;
      while (true) {
        if (!(b.$length > 0)) {
          break;
        }
        d = R.zero();
        e = b.$length;
        if (e === (4)) {
          d[6] = ((d[6] | ((((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) << 3 << 24 >>> 24)) & 31) >>> 0))) >>> 0);
          d[5] = (((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 2 << 24 >>> 24)) & 31) >>> 0);
          d[4] = ((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 7 << 24 >>> 24);
          d[4] = ((d[4] | ((((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) << 1 << 24 >>> 24)) & 31) >>> 0))) >>> 0);
          d[3] = (((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 4 << 24 >>> 24)) & 31) >>> 0);
          d[3] = ((d[3] | ((((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) << 4 << 24 >>> 24)) & 31) >>> 0))) >>> 0);
          d[2] = (((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 1 << 24 >>> 24)) & 31) >>> 0);
          d[1] = (((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 6 << 24 >>> 24)) & 31) >>> 0);
          d[1] = ((d[1] | ((((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 2 << 24 >>> 24)) & 31) >>> 0))) >>> 0);
          d[0] = ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 3 << 24 >>> 24);
        } else if (e === (3)) {
          d[4] = ((d[4] | ((((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) << 1 << 24 >>> 24)) & 31) >>> 0))) >>> 0);
          d[3] = (((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 4 << 24 >>> 24)) & 31) >>> 0);
          d[3] = ((d[3] | ((((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) << 4 << 24 >>> 24)) & 31) >>> 0))) >>> 0);
          d[2] = (((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 1 << 24 >>> 24)) & 31) >>> 0);
          d[1] = (((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 6 << 24 >>> 24)) & 31) >>> 0);
          d[1] = ((d[1] | ((((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 2 << 24 >>> 24)) & 31) >>> 0))) >>> 0);
          d[0] = ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 3 << 24 >>> 24);
        } else if (e === (2)) {
          d[3] = ((d[3] | ((((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) << 4 << 24 >>> 24)) & 31) >>> 0))) >>> 0);
          d[2] = (((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 1 << 24 >>> 24)) & 31) >>> 0);
          d[1] = (((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 6 << 24 >>> 24)) & 31) >>> 0);
          d[1] = ((d[1] | ((((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 2 << 24 >>> 24)) & 31) >>> 0))) >>> 0);
          d[0] = ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 3 << 24 >>> 24);
        } else if (e === (1)) {
          d[1] = ((d[1] | ((((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 2 << 24 >>> 24)) & 31) >>> 0))) >>> 0);
          d[0] = ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 3 << 24 >>> 24);
        } else {
          d[7] = (((4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]) & 31) >>> 0);
          d[6] = ((4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]) >>> 5 << 24 >>> 24);
          d[6] = ((d[6] | ((((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) << 3 << 24 >>> 24)) & 31) >>> 0))) >>> 0);
          d[5] = (((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 2 << 24 >>> 24)) & 31) >>> 0);
          d[4] = ((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 7 << 24 >>> 24);
          d[4] = ((d[4] | ((((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) << 1 << 24 >>> 24)) & 31) >>> 0))) >>> 0);
          d[3] = (((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 4 << 24 >>> 24)) & 31) >>> 0);
          d[3] = ((d[3] | ((((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) << 4 << 24 >>> 24)) & 31) >>> 0))) >>> 0);
          d[2] = (((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 1 << 24 >>> 24)) & 31) >>> 0);
          d[1] = (((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 6 << 24 >>> 24)) & 31) >>> 0);
          d[1] = ((d[1] | ((((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 2 << 24 >>> 24)) & 31) >>> 0))) >>> 0);
          d[0] = ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 3 << 24 >>> 24);
        }
        f = a.$length;
        if (f >= 8) {
          (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = (g = c.encode, h = (d[0] & 31) >>> 0, ((h < 0 || h >= g.length) ? ($throwRuntimeError("index out of range"), undefined) : g[h])));
          (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = (i = c.encode, j = (d[1] & 31) >>> 0, ((j < 0 || j >= i.length) ? ($throwRuntimeError("index out of range"), undefined) : i[j])));
          (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = (k = c.encode, l = (d[2] & 31) >>> 0, ((l < 0 || l >= k.length) ? ($throwRuntimeError("index out of range"), undefined) : k[l])));
          (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3] = (m = c.encode, n = (d[3] & 31) >>> 0, ((n < 0 || n >= m.length) ? ($throwRuntimeError("index out of range"), undefined) : m[n])));
          (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4] = (o = c.encode, p = (d[4] & 31) >>> 0, ((p < 0 || p >= o.length) ? ($throwRuntimeError("index out of range"), undefined) : o[p])));
          (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5] = (q = c.encode, r = (d[5] & 31) >>> 0, ((r < 0 || r >= q.length) ? ($throwRuntimeError("index out of range"), undefined) : q[r])));
          (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6] = (s = c.encode, t = (d[6] & 31) >>> 0, ((t < 0 || t >= s.length) ? ($throwRuntimeError("index out of range"), undefined) : s[t])));
          (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7] = (u = c.encode, v = (d[7] & 31) >>> 0, ((v < 0 || v >= u.length) ? ($throwRuntimeError("index out of range"), undefined) : u[v])));
        } else {
          w = 0;
          while (true) {
            if (!(w < f)) {
              break;
            }((w < 0 || w >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + w] = (x = c.encode, y = (((w < 0 || w >= d.length) ? ($throwRuntimeError("index out of range"), undefined) : d[w]) & 31) >>> 0, ((y < 0 || y >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[y])));
            w = w + (1) >> 0;
          }
        }
        if (b.$length < 5) {
          if (c.padChar === -1) {
            break;
          }(7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7] = ((c.padChar << 24 >>> 24)));
          if (b.$length < 4) {
            (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6] = ((c.padChar << 24 >>> 24)));
            (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5] = ((c.padChar << 24 >>> 24)));
            if (b.$length < 3) {
              (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4] = ((c.padChar << 24 >>> 24)));
              if (b.$length < 2) {
                (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3] = ((c.padChar << 24 >>> 24)));
                (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = ((c.padChar << 24 >>> 24)));
              }
            }
          }
          break;
        }
        b = $subslice(b, 5);
        a = $subslice(a, 8);
      }
    };
    E.prototype.Encode = function(a, b) {
      return this.$val.Encode(a, b);
    };
    E.ptr.prototype.EncodeToString = function(a) {
      var a, b, c;
      b = this;
      c = $makeSlice(Q, b.EncodedLen(a.$length));
      b.Encode(c, a);
      return ($bytesToString(c));
    };
    E.prototype.EncodeToString = function(a) {
      return this.$val.EncodeToString(a);
    };
    E.ptr.prototype.EncodedLen = function(a) {
      var a, b, c, d;
      b = this;
      if (b.padChar === -1) {
        return (c = ((($imul(a, 8)) + 4 >> 0)) / 5, (c === c && c !== 1 / 0 && c !== -1 / 0) ? c >> 0 : $throwRuntimeError("integer divide by zero"));
      }
      return $imul((d = ((a + 4 >> 0)) / 5, (d === d && d !== 1 / 0 && d !== -1 / 0) ? d >> 0 : $throwRuntimeError("integer divide by zero")), 8);
    };
    E.prototype.EncodedLen = function(a) {
      return this.$val.EncodedLen(a);
    };
    J.prototype.Error = function() {
      var a;
      a = this;
      return "illegal base32 data at input byte " + C.FormatInt((new $Int64(a.$high, a.$low)), 10);
    };
    $ptrType(J).prototype.Error = function() {
      return this.$get().Error();
    };
    E.ptr.prototype.decode = function(a, b) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      c = 0;
      d = false;
      e = $ifaceNil;
      f = this;
      g = b.$length;
      while (true) {
        if (!(b.$length > 0 && !d)) {
          break;
        }
        h = R.zero();
        i = 8;
        j = 0;
        while (true) {
          if (!(j < 8)) {
            break;
          }
          if ((b.$length === 0) && !((f.padChar === -1))) {
            k = c;
            l = false;
            m = (new J(0, ((g - b.$length >> 0) - j >> 0)));
            c = k;
            d = l;
            e = m;
            return [c, d, e];
          }
          if ((b.$length === 0) && (f.padChar === -1)) {
            n = j;
            o = true;
            i = n;
            d = o;
            break;
          }
          p = (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]);
          b = $subslice(b, 1);
          if ((p === ((f.padChar << 24 >>> 24))) && j >= 2 && b.$length < 8) {
            if ((b.$length + j >> 0) < 7) {
              q = c;
              r = false;
              s = (new J(0, g));
              c = q;
              d = r;
              e = s;
              return [c, d, e];
            }
            t = 0;
            while (true) {
              if (!(t < (7 - j >> 0))) {
                break;
              }
              if (b.$length > t && !((((t < 0 || t >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + t]) === ((f.padChar << 24 >>> 24))))) {
                u = c;
                v = false;
                w = (new J(0, (((g - b.$length >> 0) + t >> 0) - 1 >> 0)));
                c = u;
                d = v;
                e = w;
                return [c, d, e];
              }
              t = t + (1) >> 0;
            }
            x = j;
            y = true;
            i = x;
            d = y;
            if ((i === 1) || (i === 3) || (i === 6)) {
              z = c;
              aa = false;
              ab = (new J(0, ((g - b.$length >> 0) - 1 >> 0)));
              c = z;
              d = aa;
              e = ab;
              return [c, d, e];
            }
            break;
          }((j < 0 || j >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[j] = (ac = f.decodeMap, ((p < 0 || p >= ac.length) ? ($throwRuntimeError("index out of range"), undefined) : ac[p])));
          if (((j < 0 || j >= h.length) ? ($throwRuntimeError("index out of range"), undefined) : h[j]) === 255) {
            ad = c;
            ae = false;
            af = (new J(0, ((g - b.$length >> 0) - 1 >> 0)));
            c = ad;
            d = ae;
            e = af;
            return [c, d, e];
          }
          j = j + (1) >> 0;
        }
        ag = i;
        if (ag === (8)) {
          (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4] = (((h[6] << 5 << 24 >>> 24) | h[7]) >>> 0));
          (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3] = (((((h[4] << 7 << 24 >>> 24) | (h[5] << 2 << 24 >>> 24)) >>> 0) | (h[6] >>> 3 << 24 >>> 24)) >>> 0));
          (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = (((h[3] << 4 << 24 >>> 24) | (h[4] >>> 1 << 24 >>> 24)) >>> 0));
          (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = (((((h[1] << 6 << 24 >>> 24) | (h[2] << 1 << 24 >>> 24)) >>> 0) | (h[3] >>> 4 << 24 >>> 24)) >>> 0));
          (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = (((h[0] << 3 << 24 >>> 24) | (h[1] >>> 2 << 24 >>> 24)) >>> 0));
        } else if (ag === (7)) {
          (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3] = (((((h[4] << 7 << 24 >>> 24) | (h[5] << 2 << 24 >>> 24)) >>> 0) | (h[6] >>> 3 << 24 >>> 24)) >>> 0));
          (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = (((h[3] << 4 << 24 >>> 24) | (h[4] >>> 1 << 24 >>> 24)) >>> 0));
          (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = (((((h[1] << 6 << 24 >>> 24) | (h[2] << 1 << 24 >>> 24)) >>> 0) | (h[3] >>> 4 << 24 >>> 24)) >>> 0));
          (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = (((h[0] << 3 << 24 >>> 24) | (h[1] >>> 2 << 24 >>> 24)) >>> 0));
        } else if (ag === (5)) {
          (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2] = (((h[3] << 4 << 24 >>> 24) | (h[4] >>> 1 << 24 >>> 24)) >>> 0));
          (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = (((((h[1] << 6 << 24 >>> 24) | (h[2] << 1 << 24 >>> 24)) >>> 0) | (h[3] >>> 4 << 24 >>> 24)) >>> 0));
          (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = (((h[0] << 3 << 24 >>> 24) | (h[1] >>> 2 << 24 >>> 24)) >>> 0));
        } else if (ag === (4)) {
          (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1] = (((((h[1] << 6 << 24 >>> 24) | (h[2] << 1 << 24 >>> 24)) >>> 0) | (h[3] >>> 4 << 24 >>> 24)) >>> 0));
          (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = (((h[0] << 3 << 24 >>> 24) | (h[1] >>> 2 << 24 >>> 24)) >>> 0));
        } else if (ag === (2)) {
          (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = (((h[0] << 3 << 24 >>> 24) | (h[1] >>> 2 << 24 >>> 24)) >>> 0));
        }
        if (!d) {
          a = $subslice(a, 5);
        }
        ah = i;
        if (ah === (2)) {
          c = c + (1) >> 0;
        } else if (ah === (4)) {
          c = c + (2) >> 0;
        } else if (ah === (5)) {
          c = c + (3) >> 0;
        } else if (ah === (7)) {
          c = c + (4) >> 0;
        } else if (ah === (8)) {
          c = c + (5) >> 0;
        }
      }
      ai = c;
      aj = d;
      ak = $ifaceNil;
      c = ai;
      d = aj;
      e = ak;
      return [c, d, e];
    };
    E.prototype.decode = function(a, b) {
      return this.$val.decode(a, b);
    };
    E.ptr.prototype.Decode = function(a, b) {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = 0;
            d = $ifaceNil;
            e = this;
            f = A.Map(G, b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            b = f;
            g = e.decode(a, b);
            c = g[0];
            d = g[2];
            $s = -1;
            return [c, d];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: E.ptr.prototype.Decode
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    E.prototype.Decode = function(a, b) {
      return this.$val.Decode(a, b);
    };
    E.ptr.prototype.DecodeString = function(a) {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = D.Map(G, a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            a = c;
            d = $makeSlice(Q, b.DecodedLen(a.length));
            e = b.decode(d, (new Q($stringToBytes(a))));
            f = e[0];
            g = e[2];
            $s = -1;
            return [$subslice(d, 0, f), g];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: E.ptr.prototype.DecodeString
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    E.prototype.DecodeString = function(a) {
      return this.$val.DecodeString(a);
    };
    E.ptr.prototype.DecodedLen = function(a) {
      var a, b, c, d;
      b = this;
      if (b.padChar === -1) {
        return (c = ($imul(a, 5)) / 8, (c === c && c !== 1 / 0 && c !== -1 / 0) ? c >> 0 : $throwRuntimeError("integer divide by zero"));
      }
      return $imul((d = a / 8, (d === d && d !== 1 / 0 && d !== -1 / 0) ? d >> 0 : $throwRuntimeError("integer divide by zero")), 5);
    };
    E.prototype.DecodedLen = function(a) {
      return this.$val.DecodedLen(a);
    };
    E.methods = [{
      prop: "WithPadding",
      name: "WithPadding",
      pkg: "",
      typ: $funcType([$Int32], [S], false)
    }];
    S.methods = [{
      prop: "Encode",
      name: "Encode",
      pkg: "",
      typ: $funcType([Q, Q], [], false)
    }, {
      prop: "EncodeToString",
      name: "EncodeToString",
      pkg: "",
      typ: $funcType([Q], [$String], false)
    }, {
      prop: "EncodedLen",
      name: "EncodedLen",
      pkg: "",
      typ: $funcType([$Int], [$Int], false)
    }, {
      prop: "decode",
      name: "decode",
      pkg: "encoding/base32",
      typ: $funcType([Q, Q], [$Int, $Bool, $error], false)
    }, {
      prop: "Decode",
      name: "Decode",
      pkg: "",
      typ: $funcType([Q, Q], [$Int, $error], false)
    }, {
      prop: "DecodeString",
      name: "DecodeString",
      pkg: "",
      typ: $funcType([$String], [Q, $error], false)
    }, {
      prop: "DecodedLen",
      name: "DecodedLen",
      pkg: "",
      typ: $funcType([$Int], [$Int], false)
    }];
    J.methods = [{
      prop: "Error",
      name: "Error",
      pkg: "",
      typ: $funcType([], [$String], false)
    }];
    E.init("encoding/base32", [{
      prop: "encode",
      name: "encode",
      embedded: false,
      exported: false,
      typ: O,
      tag: ""
    }, {
      prop: "decodeMap",
      name: "decodeMap",
      embedded: false,
      exported: false,
      typ: P,
      tag: ""
    }, {
      prop: "padChar",
      name: "padChar",
      embedded: false,
      exported: false,
      typ: $Int32,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $pkg.StdEncoding = F("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567");
            $pkg.HexEncoding = F("0123456789ABCDEFGHIJKLMNOPQRSTUV");
            G = (function(a) {
              var a;
              if ((a === 13) || (a === 10)) {
                return -1;
              }
              return a;
            });
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["go.1password.io/xplatform/vendor/go.1password.io/xplatform-security/totp"] = (function() {
    var $pkg = {},
      $init, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Z, AA, AB, P, Q, R, S, T, U, V, W, X, Y;
    A = $packages["crypto/hmac"];
    B = $packages["crypto/sha1"];
    C = $packages["crypto/sha256"];
    D = $packages["crypto/sha512"];
    E = $packages["encoding/base32"];
    F = $packages["encoding/binary"];
    G = $packages["errors"];
    H = $packages["fmt"];
    I = $packages["hash"];
    J = $packages["math"];
    K = $packages["net/url"];
    L = $packages["strconv"];
    M = $packages["strings"];
    N = $pkg.totpAlgorithm = $newType(4, $kindFunc, "totp.totpAlgorithm", true, "go.1password.io/xplatform/vendor/go.1password.io/xplatform-security/totp", false, null);
    O = $pkg.Generator = $newType(0, $kindStruct, "totp.Generator", true, "go.1password.io/xplatform/vendor/go.1password.io/xplatform-security/totp", true, function(alg_, digits_, period_, secret_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.alg = $throwNilPointerError;
        this.digits = 0;
        this.period = 0;
        this.secret = "";
        return;
      }
      this.alg = alg_;
      this.digits = digits_;
      this.period = period_;
      this.secret = secret_;
    });
    Z = $ptrType(O);
    AA = $sliceType($Uint8);
    AB = $sliceType($emptyInterface);
    Q = function(a) {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = K.ParseRequestURI(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            b = c;
            d = b[1];
            if ($interfaceIsEqual(d, $ifaceNil)) {
              $s = 2;
              continue;
            }
            if (!($interfaceIsEqual(d, $ifaceNil))) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 2:
            e = a;
            f = R(e);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return f;
          case 3:
          case 4:
            g = M.Replace(a, " ", "", -1);
            h = S(g, B.New, 6, 30);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return h;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Q
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.NewGenerator = Q;
    R = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = K.Parse(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            b = c;
            d = b[0];
            e = b[1];
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              $s = -1;
              return [Z.nil, e];
            }
            f = K.ParseQuery(d.RawQuery);
            g = f[0];
            h = f[1];
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              $s = -1;
              return [Z.nil, h];
            }
            i = new K.Values(g).Get("secret");
            if (i === "") {
              $s = -1;
              return [Z.nil, G.New("No secret was set in the URL parameters")];
            }
            j = i;
            k = U(new K.Values(g).Get("algorithm"));
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = k;
            m = V(new K.Values(g).Get("digits"));
            n = W(new K.Values(g).Get("period"));
            o = S(j, l, m, n);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return o;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: R
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.NewGeneratorFromURL = R;
    S = function(a, b, c, d) {
      var a, b, c, d, e, f, g, h, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = X(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            e = f;
            g = e[1];
            if (!($interfaceIsEqual(g, $ifaceNil))) {
              $s = -1;
              return [Z.nil, g];
            }
            h = new O.ptr(b, c, d, a);
            $s = -1;
            return [h, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: S
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.NewGeneratorFromSecret = S;
    O.ptr.prototype.Generate = function(a) {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            d = X(b.secret);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            c = d;
            e = c[0];
            f = c[1];
            if (!($interfaceIsEqual(f, $ifaceNil))) {
              $s = -1;
              return ["", f];
            }
            g = T(e, b.alg, b.digits, b.period, a);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [g, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.Generate
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.Generate = function(a) {
      return this.$val.Generate(a);
    };
    O.ptr.prototype.Validate = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            e = X(c.secret);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            d = e;
            f = d[0];
            g = d[1];
            if (!($interfaceIsEqual(g, $ifaceNil))) {
              $s = -1;
              return false;
            }
            h = T(f, c.alg, c.digits, c.period, b);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            i = h;
            if (i === a) {
              $s = -1;
              return true;
            }
            k = T(f, c.alg, c.digits, c.period, (j = (new $Int64(0, c.period)), new $Int64(b.$high - j.$high, b.$low - j.$low)));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = k;
            if (l === a) {
              $s = -1;
              return true;
            }
            n = T(f, c.alg, c.digits, c.period, (m = (new $Int64(0, c.period)), new $Int64(b.$high + m.$high, b.$low + m.$low)));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            o = n;
            if (o === a) {
              $s = -1;
              return true;
            }
            $s = -1;
            return false;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.Validate
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.Validate = function(a, b) {
      return this.$val.Validate(a, b);
    };
    O.ptr.prototype.GetPeriod = function() {
      var a;
      a = this;
      return ((a.period >> 0));
    };
    O.prototype.GetPeriod = function() {
      return this.$val.GetPeriod();
    };
    T = function(a, b, c, d, e) {
      var a, aa, ab, ac, ad, ae, af, ag, ah, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        ae = $f.ae;
        af = $f.af;
        ag = $f.ag;
        ah = $f.ah;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = (new $Int64(0, d));
            g = (new $Uint64(0, J.Floor(($flatten64($div64(e, f, false))))));
            h = A.New(b, a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            i = h;
            j = $makeSlice(AA, 8);
            $clone(F.BigEndian, F.bigEndian).PutUint64(j, g);
            k = i.Write(j);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            k;
            l = i.Sum(AA.nil);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            m = l;
            o = ((n = m.$length - 1 >> 0, ((n < 0 || n >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + n])) & 15) >>> 0;
            ac = (p = (q = (r = $shiftLeft64(((s = (new $Int64(0, ((o < 0 || o >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + o]))), new $Int64(s.$high & 0, (s.$low & 127) >>> 0))), 24), t = $shiftLeft64(((u = (new $Int64(0, (v = o + 1 << 24 >>> 24, ((v < 0 || v >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + v])))), new $Int64(u.$high & 0, (u.$low & 255) >>> 0))), 16), new $Int64(r.$high | t.$high, (r.$low | t.$low) >>> 0)), w = $shiftLeft64(((x = (new $Int64(0, (y = o + 2 << 24 >>> 24, ((y < 0 || y >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + y])))), new $Int64(x.$high & 0, (x.$low & 255) >>> 0))), 8), new $Int64(q.$high | w.$high, (q.$low | w.$low) >>> 0)), z = (aa = (new $Int64(0, (ab = o + 3 << 24 >>> 24, ((ab < 0 || ab >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + ab])))), new $Int64(aa.$high & 0, (aa.$low & 255) >>> 0)), new $Int64(p.$high | z.$high, (p.$low | z.$low) >>> 0));
            ae = (((ad = $div64(ac, (new $Int64(0, J.Pow10(((c >> 0))))), true), ad.$low + ((ad.$high >> 31) * 4294967296)) >> 0));
            af = H.Sprintf("%%0%dd", new AB([new $Uint(c)]));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              af = af.$blk();
            }
            if (af && af.$blk !== undefined) {
              break s;
            }
            ag = af;
            ah = H.Sprintf(ag, new AB([new $Int(ae)]));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              ah = ah.$blk();
            }
            if (ah && ah.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return ah;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: T
        };
      }
      $f.a = a;
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.ae = ae;
      $f.af = af;
      $f.ag = ag;
      $f.ah = ah;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    U = function(a) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = $throwNilPointerError;
            d = M.ToLower(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            c = (e = P[$String.keyFor(d)], e !== undefined ? [e.v, true] : [$throwNilPointerError, false]);
            b = c[0];
            f = c[1];
            if (f) {
              b = b;
              $s = -1;
              return b;
            }
            b = B.New;
            $s = -1;
            return b;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: U
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    V = function(a) {
      var a, b, c, d, e;
      b = 0;
      c = L.ParseUint(a, 0, 8);
      d = c[0];
      e = c[1];
      if ($interfaceIsEqual(e, $ifaceNil)) {
        b = ((d.$low >>> 0));
        return b;
      }
      b = 6;
      return b;
    };
    W = function(a) {
      var a, b, c, d, e;
      b = 0;
      c = L.ParseUint(a, 0, 8);
      d = c[0];
      e = c[1];
      if ($interfaceIsEqual(e, $ifaceNil)) {
        b = ((d.$low >>> 0));
        return b;
      }
      b = 30;
      return b;
    };
    X = function(a) {
      var a, b, c, d, e, f, g, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = AA.nil;
            c = $ifaceNil;
            d = M.TrimSpace(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = M.ToUpper(d);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            a = e;
            g = Y(a);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
            b = f[0];
            c = f[1];
            $s = -1;
            return [b, c];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: X
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    Y = function(a) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = (b = a.length % 8, b === b ? b : $throwRuntimeError("integer divide by zero"));
            if (!((c === 0))) {
              a = a + (M.Repeat("=", 8 - c >> 0));
            }
            d = E.StdEncoding.DecodeString(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Y
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    Z.methods = [{
      prop: "Generate",
      name: "Generate",
      pkg: "",
      typ: $funcType([$Int64], [$String, $error], false)
    }, {
      prop: "Validate",
      name: "Validate",
      pkg: "",
      typ: $funcType([$String, $Int64], [$Bool], false)
    }, {
      prop: "GetPeriod",
      name: "GetPeriod",
      pkg: "",
      typ: $funcType([], [$Int32], false)
    }];
    N.init([], [I.Hash], false);
    O.init("go.1password.io/xplatform/vendor/go.1password.io/xplatform-security/totp", [{
      prop: "alg",
      name: "alg",
      embedded: false,
      exported: false,
      typ: N,
      tag: ""
    }, {
      prop: "digits",
      name: "digits",
      embedded: false,
      exported: false,
      typ: $Uint,
      tag: ""
    }, {
      prop: "period",
      name: "period",
      embedded: false,
      exported: false,
      typ: $Uint,
      tag: ""
    }, {
      prop: "secret",
      name: "secret",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = F.$init();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = G.$init();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = H.$init();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = I.$init();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = J.$init();
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = K.$init();
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = L.$init();
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = M.$init();
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            P = $makeMap($String.keyFor, [{
              k: "sha256",
              v: C.New
            }, {
              k: "sha512",
              v: D.New
            }, {
              k: "sha1",
              v: B.New
            }]);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["go.1password.io/xplatform/vendor/go.1password.io/brain/transform"] = (function() {
    var $pkg = {},
      $init, B, F, C, D, A, E, G, I, K, M, N, O, T, U, V, W, X, Y, AA, AC, AE, AF, AK, AL, AM, AN, AO, AP, AQ, AR, AS, H, J, L, P, Q, AB, AD, a, b, R, Z, AH, AI, AJ;
    B = $packages["go.1password.io/xplatform/vendor/go.1password.io/brain/model"];
    F = $packages["go.1password.io/xplatform/vendor/go.1password.io/xplatform-security/totp"];
    C = $packages["regexp"];
    D = $packages["strconv"];
    A = $packages["strings"];
    E = $packages["time"];
    G = $pkg.CCNumTransformer = $newType(0, $kindStruct, "transform.CCNumTransformer", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/transform", true, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    I = $pkg.CCTypeTransformer = $newType(0, $kindStruct, "transform.CCTypeTransformer", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/transform", true, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    K = $pkg.CountryTransformer = $newType(0, $kindStruct, "transform.CountryTransformer", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/transform", true, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    M = $pkg.MonthTransformer = $newType(0, $kindStruct, "transform.MonthTransformer", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/transform", true, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    N = $pkg.YearTransformer = $newType(0, $kindStruct, "transform.YearTransformer", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/transform", true, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    O = $pkg.MonthYearTextTransformer = $newType(0, $kindStruct, "transform.MonthYearTextTransformer", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/transform", true, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    T = $pkg.NameTransformer = $newType(0, $kindStruct, "transform.NameTransformer", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/transform", true, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    U = $pkg.FirstNameTransformer = $newType(0, $kindStruct, "transform.FirstNameTransformer", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/transform", true, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    V = $pkg.LastNameTransformer = $newType(0, $kindStruct, "transform.LastNameTransformer", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/transform", true, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    W = $pkg.PhoneAreaCodeTransformer = $newType(0, $kindStruct, "transform.PhoneAreaCodeTransformer", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/transform", true, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    X = $pkg.PhonePrefixTransformer = $newType(0, $kindStruct, "transform.PhonePrefixTransformer", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/transform", true, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    Y = $pkg.PhoneSuffixTransformer = $newType(0, $kindStruct, "transform.PhoneSuffixTransformer", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/transform", true, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    AA = $pkg.SexTransformer = $newType(0, $kindStruct, "transform.SexTransformer", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/transform", true, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    AC = $pkg.StateTransformer = $newType(0, $kindStruct, "transform.StateTransformer", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/transform", true, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    AE = $pkg.TOTPTransformer = $newType(0, $kindStruct, "transform.TOTPTransformer", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/transform", true, function() {
      this.$val = this;
      if (arguments.length === 0) {
        return;
      }
    });
    AF = $pkg.Fillable = $newType(0, $kindStruct, "transform.Fillable", true, "go.1password.io/xplatform/vendor/go.1password.io/brain/transform", true, function(Field_, Value_, Designation_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Field = new B.PageField.ptr(false, false, false, false, "", "", "", false, false, false, false, "", "", "", "", "", 0, "", "", "", "", "", 0, 0, "", "", "", false, false, "", "", "", false, "", false, false, "", "", "");
        this.Value = "";
        this.Designation = "";
        return;
      }
      this.Field = Field_;
      this.Value = Value_;
      this.Designation = Designation_;
    });
    AK = $sliceType($String);
    AL = $sliceType(AF);
    AM = $ptrType(B.SelectOption);
    AN = $sliceType($Int32);
    AO = $sliceType(B.PageField);
    AP = $ptrType(K);
    AQ = $ptrType(M);
    AR = $ptrType(N);
    AS = $ptrType(AC);
    G.ptr.prototype.Transform = function(c, d) {
      var c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = c.FillableFields.ValueForDesignation("ccnum", 0);
            if (g.length === 0) {
              $s = -1;
              return e;
            }
            h = H.Replace(g);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            i = AJ(h, d, "ccnum");
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            e = i;
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: G.ptr.prototype.Transform
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    G.prototype.Transform = function(c, d) {
      return this.$val.Transform(c, d);
    };
    I.ptr.prototype.Transform = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = c.FillableFields.ValueForDesignation("type", 0);
            if (g.length === 0) {
              $s = -1;
              return e;
            }
            h = d;
            i = 0;
          case 1:
            if (!(i < h.$length)) {
              $s = 2;
              continue;
            }
            j = $clone(((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i]), B.PageField);
            k = AM.nil;
            l = (m = J[$String.keyFor(g)], m !== undefined ? [m.v, true] : [AK.nil, false]);
            n = l[0];
            o = l[1];
            if (o) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            p = n;
            q = 0;
          case 6:
            if (!(q < p.$length)) {
              $s = 7;
              continue;
            }
            r = ((q < 0 || q >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + q]);
            s = $clone(j, B.PageField).OptionMatchingDisplayText(r);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            k = s;
            if (!(k === AM.nil)) {
              $s = 7;
              continue;
            }
            q++;
            $s = 6;
            continue;
          case 7:
            $s = 5;
            continue;
          case 4:
            t = $clone(j, B.PageField).OptionMatchingDisplayText(g);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            k = t;
          case 5:
            if (k === AM.nil) {
              $s = 10;
              continue;
            }
            $s = 11;
            continue;
          case 10:
            u = (v = J[$String.keyFor(g)], v !== undefined ? v.v : AK.nil);
            w = 0;
          case 12:
            if (!(w < u.$length)) {
              $s = 13;
              continue;
            }
            x = ((w < 0 || w >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + w]);
            y = $clone(j, B.PageField).OptionMatchingValue(x);
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              y = y.$blk();
            }
            if (y && y.$blk !== undefined) {
              break s;
            }
            k = y;
            if (!(k === AM.nil)) {
              $s = 13;
              continue;
            }
            w++;
            $s = 12;
            continue;
          case 13:
          case 11:
            if (k === AM.nil || k.Value() === "") {
              i++;
              $s = 1;
              continue;
            }
            e = $append(e, AI(k.Value(), $clone(j, B.PageField), "type"));
            i++;
            $s = 1;
            continue;
          case 2:
            e = e;
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: I.ptr.prototype.Transform
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    I.prototype.Transform = function(c, d) {
      return this.$val.Transform(c, d);
    };
    K.ptr.prototype.Transform = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = c.FillableFields.ValueForDesignation("country", 0);
            if (g.length === 0) {
              $s = -1;
              return e;
            }
            h = d;
            i = 0;
          case 1:
            if (!(i < h.$length)) {
              $s = 2;
              continue;
            }
            j = $clone(((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i]), B.PageField);
            k = $clone(j, B.PageField).IsSelect();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            if (k) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            l = f.transformSelect(g, d);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            e = l;
            $s = -1;
            return e;
          case 4:
            i++;
            $s = 1;
            continue;
          case 2:
            e = f.transformText(g, d);
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: K.ptr.prototype.Transform
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    K.prototype.Transform = function(c, d) {
      return this.$val.Transform(c, d);
    };
    K.ptr.prototype.transformSelect = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = d;
            h = 0;
          case 1:
            if (!(h < g.$length)) {
              $s = 2;
              continue;
            }
            i = $clone(((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h]), B.PageField);
            j = AM.nil;
            k = (l = L[$String.keyFor(c)], l !== undefined ? [l.v, true] : [AK.nil, false]);
            m = k[0];
            n = k[1];
            if (n) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            o = m;
            p = 0;
          case 5:
            if (!(p < o.$length)) {
              $s = 6;
              continue;
            }
            q = ((p < 0 || p >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + p]);
            r = $clone(i, B.PageField).OptionMatchingDisplayText(q);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              r = r.$blk();
            }
            if (r && r.$blk !== undefined) {
              break s;
            }
            j = r;
            if (!(j === AM.nil)) {
              $s = 6;
              continue;
            }
            p++;
            $s = 5;
            continue;
          case 6:
          case 4:
            if (j === AM.nil) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            s = (t = L[$String.keyFor(c)], t !== undefined ? [t.v, true] : [AK.nil, false]);
            u = s[0];
            v = s[1];
            if (v) {
              $s = 10;
              continue;
            }
            $s = 11;
            continue;
          case 10:
            w = u;
            x = 0;
          case 12:
            if (!(x < w.$length)) {
              $s = 13;
              continue;
            }
            y = ((x < 0 || x >= w.$length) ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + x]);
            z = $clone(i, B.PageField).OptionMatchingValue(y);
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            j = z;
            if (!(j === AM.nil)) {
              $s = 13;
              continue;
            }
            x++;
            $s = 12;
            continue;
          case 13:
          case 11:
          case 9:
            if (j === AM.nil || j.Value() === "") {
              h++;
              $s = 1;
              continue;
            }
            e = $append(e, AI(j.Value(), $clone(i, B.PageField), "country"));
            h++;
            $s = 1;
            continue;
          case 2:
            e = e;
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: K.ptr.prototype.transformSelect
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    K.prototype.transformSelect = function(c, d) {
      return this.$val.transformSelect(c, d);
    };
    K.ptr.prototype.transformText = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m;
      e = AL.nil;
      f = this;
      g = d;
      h = 0;
      while (true) {
        if (!(h < g.$length)) {
          break;
        }
        i = $clone(((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h]), B.PageField);
        if ($clone(i, B.PageField).Maxlength() < 3) {
          h++;
          continue;
        }
        j = (k = B.CountryCodeMapping[$String.keyFor(c)], k !== undefined ? [k.v, true] : ["", false]);
        l = j[0];
        m = j[1];
        if (m) {
          e = $append(e, AI(l, $clone(i, B.PageField), "country"));
        }
        h++;
      }
      e = e;
      return e;
    };
    K.prototype.transformText = function(c, d) {
      return this.$val.transformText(c, d);
    };
    M.ptr.prototype.Transform = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = c.FillableFields.ValueForDesignation("expiry", 0);
            if (g.length < 6) {
              $s = -1;
              return e;
            }
            h = $substring(g, 4);
            i = D.ParseInt(h, 10, 0);
            j = i[0];
            k = i[1];
            if (!($interfaceIsEqual(k, $ifaceNil)) || (j.$high < 0 || (j.$high === 0 && j.$low < 1)) || (j.$high > 0 || (j.$high === 0 && j.$low > 12))) {
              $s = -1;
              return e;
            }
            l = d;
            m = 0;
          case 1:
            if (!(m < l.$length)) {
              $s = 2;
              continue;
            }
            n = $clone(((m < 0 || m >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + m]), B.PageField);
            o = $clone(n, B.PageField).IsSelect();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            if (o) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            p = f.transformSelect(h, j, d);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            e = p;
            $s = -1;
            return e;
          case 4:
            m++;
            $s = 1;
            continue;
          case 2:
            q = f.transformText(h, d);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            e = q;
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.Transform
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.Transform = function(c, d) {
      return this.$val.Transform(c, d);
    };
    N.ptr.prototype.Transform = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = c.FillableFields.ValueForDesignation("expiry", 0);
            if (g.length < 6) {
              $s = -1;
              return e;
            }
            h = $substring(g, 0, 4);
            i = d;
            j = 0;
          case 1:
            if (!(j < i.$length)) {
              $s = 2;
              continue;
            }
            k = $clone(((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j]), B.PageField);
            l = $clone(k, B.PageField).IsSelect();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            if (l) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            m = f.transformSelect(h, d);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            e = m;
            $s = -1;
            return e;
          case 4:
            j++;
            $s = 1;
            continue;
          case 2:
            n = f.transformText(h, d);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            e = n;
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: N.ptr.prototype.Transform
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    N.prototype.Transform = function(c, d) {
      return this.$val.Transform(c, d);
    };
    O.ptr.prototype.Transform = function(c, d) {
      var aa, ab, ac, ad, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        aa = $f.aa;
        ab = $f.ab;
        ac = $f.ac;
        ad = $f.ad;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        w = $f.w;
        x = $f.x;
        y = $f.y;
        z = $f.z;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = c.FillableFields.ValueForDesignation("expiry", 0);
            if (g.length < 6) {
              $s = -1;
              return e;
            }
            h = $substring(g, 2, 4);
            i = $substring(g, 0, 4);
            j = $substring(g, 4);
            k = h;
            l = i;
            m = j;
            n = A.NewReplacer(new AK(["MM", m, "mm", m, "__/", m + "/"]));
            o = d;
            p = 0;
          case 1:
            if (!(p < o.$length)) {
              $s = 2;
              continue;
            }
            q = $clone(((p < 0 || p >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + p]), B.PageField);
            r = A.ToUpper(q.Placeholder);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              r = r.$blk();
            }
            if (r && r.$blk !== undefined) {
              break s;
            }
            s = A.ToUpper($clone(q, B.PageField).BestLabelAttributeValue());
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            t = A.ToUpper(q.Value);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              t = t.$blk();
            }
            if (t && t.$blk !== undefined) {
              break s;
            }
            u = new AK([r, s, t]);
            v = "";
            w = u;
            x = 0;
          case 6:
            if (!(x < w.$length)) {
              $s = 7;
              continue;
            }
            y = ((x < 0 || x >= w.$length) ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + x]);
            if (y === "") {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            x++;
            $s = 6;
            continue;
          case 9:
            z = n.Replace(y);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              z = z.$blk();
            }
            if (z && z.$blk !== undefined) {
              break s;
            }
            aa = z;
            ab = R(aa, l, k);
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              ab = ab.$blk();
            }
            if (ab && ab.$blk !== undefined) {
              break s;
            }
            aa = ab;
            if (!(aa === y)) {
              $s = 12;
              continue;
            }
            $s = 13;
            continue;
          case 12:
            ac = P.FindStringSubmatch(aa);
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              ac = ac.$blk();
            }
            if (ac && ac.$blk !== undefined) {
              break s;
            }
            ad = ac;
            if (ad.$length < 2) {
              v = aa;
            } else {
              v = (1 >= ad.$length ? ($throwRuntimeError("index out of range"), undefined) : ad.$array[ad.$offset + 1]);
            }
          case 13:
            x++;
            $s = 6;
            continue;
          case 7:
            if (v === "") {
              v = m + k;
            }
            e = $append(e, AI(v, $clone(q, B.PageField), "expiry"));
            p++;
            $s = 1;
            continue;
          case 2:
            e = e;
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O.ptr.prototype.Transform
        };
      }
      $f.aa = aa;
      $f.ab = ab;
      $f.ac = ac;
      $f.ad = ad;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.w = w;
      $f.x = x;
      $f.y = y;
      $f.z = z;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    O.prototype.Transform = function(c, d) {
      return this.$val.Transform(c, d);
    };
    M.ptr.prototype.transformSelect = function(c, d, e) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            f = AL.nil;
            g = this;
            h = e;
            i = 0;
          case 1:
            if (!(i < h.$length)) {
              $s = 2;
              continue;
            }
            j = $clone(((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i]), B.PageField);
            k = $clone(j, B.PageField).OptionMatchingDisplayText(c);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = k;
            if (l === AM.nil) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            m = new E.Month((((d.$low + ((d.$high >> 31) * 4294967296)) >> 0))).String();
            n = $clone(j, B.PageField).OptionMatchingDisplayText(m);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            l = n;
          case 5:
            if (l === AM.nil && (d.$high < 0 || (d.$high === 0 && d.$low < 10))) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            o = $clone(j, B.PageField).OptionMatchingValue($substring(c, 1));
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            l = o;
          case 8:
            if (l === AM.nil) {
              $s = 10;
              continue;
            }
            $s = 11;
            continue;
          case 10:
            p = $clone(j, B.PageField).OptionMatchingValue(c);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              p = p.$blk();
            }
            if (p && p.$blk !== undefined) {
              break s;
            }
            l = p;
          case 11:
            if (l === AM.nil || l.Value() === "") {
              i++;
              $s = 1;
              continue;
            }
            f = $append(f, AI(l.Value(), $clone(j, B.PageField), "expiry"));
            i++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.transformSelect
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.transformSelect = function(c, d, e) {
      return this.$val.transformSelect(c, d, e);
    };
    M.ptr.prototype.transformText = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = A.NewReplacer(new AK(["MM", c, "mm", c, "__", c]));
            h = d;
            i = 0;
          case 1:
            if (!(i < h.$length)) {
              $s = 2;
              continue;
            }
            j = $clone(((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i]), B.PageField);
            k = A.ToUpper(j.Placeholder);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = A.ToUpper($clone(j, B.PageField).BestLabelAttributeValue());
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            m = A.ToUpper(j.Value);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            n = new AK([k, l, m]);
            o = "";
            p = n;
            q = 0;
          case 6:
            if (!(q < p.$length)) {
              $s = 7;
              continue;
            }
            r = ((q < 0 || q >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + q]);
            if (r === "" || r.length > 2) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            q++;
            $s = 6;
            continue;
          case 9:
            s = g.Replace(r);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            t = s;
            if (!(t === r)) {
              o = t;
              $s = 7;
              continue;
            }
            q++;
            $s = 6;
            continue;
          case 7:
            if (o === "") {
              o = c;
            }
            e = $append(e, AI(o, $clone(j, B.PageField), "expiry"));
            i++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M.ptr.prototype.transformText
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    M.prototype.transformText = function(c, d) {
      return this.$val.transformText(c, d);
    };
    N.ptr.prototype.transformSelect = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = $substring(c, 2);
            h = d;
            i = 0;
          case 1:
            if (!(i < h.$length)) {
              $s = 2;
              continue;
            }
            j = $clone(((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i]), B.PageField);
            k = $clone(j, B.PageField).OptionMatchingDisplayText(c);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = k;
            if (l === AM.nil) {
              $s = 4;
              continue;
            }
            $s = 5;
            continue;
          case 4:
            m = $clone(j, B.PageField).OptionMatchingValue(c);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            l = m;
          case 5:
            if (l === AM.nil) {
              $s = 7;
              continue;
            }
            $s = 8;
            continue;
          case 7:
            n = $clone(j, B.PageField).OptionMatchingDisplayText(g);
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            l = n;
            if (l === AM.nil) {
              $s = 10;
              continue;
            }
            $s = 11;
            continue;
          case 10:
            o = $clone(j, B.PageField).OptionMatchingValue(g);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              o = o.$blk();
            }
            if (o && o.$blk !== undefined) {
              break s;
            }
            l = o;
          case 11:
          case 8:
            if (l === AM.nil || l.Value() === "") {
              i++;
              $s = 1;
              continue;
            }
            e = $append(e, AI(l.Value(), $clone(j, B.PageField), "expiry"));
            i++;
            $s = 1;
            continue;
          case 2:
            e = e;
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: N.ptr.prototype.transformSelect
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    N.prototype.transformSelect = function(c, d) {
      return this.$val.transformSelect(c, d);
    };
    N.ptr.prototype.transformText = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = $substring(c, 2);
            h = d;
            i = 0;
          case 1:
            if (!(i < h.$length)) {
              $s = 2;
              continue;
            }
            j = $clone(((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i]), B.PageField);
            k = A.ToUpper(j.Placeholder);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = A.ToUpper($clone(j, B.PageField).BestLabelAttributeValue());
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            m = A.ToUpper(j.Value);
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            n = new AK([k, l, m]);
            o = "";
            p = n;
            q = 0;
          case 6:
            if (!(q < p.$length)) {
              $s = 7;
              continue;
            }
            r = ((q < 0 || q >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + q]);
            if (r === "" || r.length > 4) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            q++;
            $s = 6;
            continue;
          case 9:
            s = R(r, c, g);
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              s = s.$blk();
            }
            if (s && s.$blk !== undefined) {
              break s;
            }
            t = s;
            if (!(t === r)) {
              o = t;
              $s = 7;
              continue;
            }
            q++;
            $s = 6;
            continue;
          case 7:
            if (o === "") {
              if (j.MaxLength > 0 && j.MaxLength < 3) {
                o = g;
              } else {
                o = c;
              }
            }
            e = $append(e, AI(o, $clone(j, B.PageField), "expiry"));
            i++;
            $s = 1;
            continue;
          case 2:
            e = e;
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: N.ptr.prototype.transformText
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    N.prototype.transformText = function(c, d) {
      return this.$val.transformText(c, d);
    };
    R = function(c, d, e) {
      var c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = [d];
            e = [e];
            f = Q.ReplaceAllStringFunc(c, (function(d, e) {
              return function(f) {
                var f, g;
                g = (new AN($stringToRunes(f))).$length;
                if (g === (2)) {
                  return e[0];
                } else if (g === (4)) {
                  return d[0];
                } else {
                  return f;
                }
              };
            })(d, e));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return f;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: R
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    T.ptr.prototype.Transform = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p;
      e = AL.nil;
      f = this;
      g = c.FillableFields.ValueForDesignation("name", 0);
      if (!(g === "")) {
        h = d;
        i = 0;
        while (true) {
          if (!(i < h.$length)) {
            break;
          }
          j = $clone(((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i]), B.PageField);
          e = $append(e, AI(g, $clone(j, B.PageField), "name"));
          i++;
        }
        e = e;
        return e;
      }
      k = c.FillableFields.ValueForDesignation("firstname", 0);
      l = c.FillableFields.ValueForDesignation("lastname", 0);
      m = "";
      if (k.length > 0 && l.length > 0) {
        m = k + " " + l;
      } else if (k.length > 0) {
        m = k;
      } else if (l.length > 0) {}
      if (!((m.length === 0))) {
        n = d;
        o = 0;
        while (true) {
          if (!(o < n.$length)) {
            break;
          }
          p = $clone(((o < 0 || o >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + o]), B.PageField);
          e = $append(e, AI(m, $clone(p, B.PageField), "name"));
          o++;
        }
      }
      e = e;
      return e;
    };
    T.prototype.Transform = function(c, d) {
      return this.$val.Transform(c, d);
    };
    U.ptr.prototype.Transform = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = c.FillableFields.ValueForDesignation("cardholder", 0);
            if (g === "") {
              $s = -1;
              return e;
            }
            h = d;
            i = 0;
          case 1:
            if (!(i < h.$length)) {
              $s = 2;
              continue;
            }
            j = $clone(((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i]), B.PageField);
            k = A.Fields(g);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = k;
            m = A.Join($subslice(l, 0, (l.$length - 1 >> 0)), " ");
            e = $append(e, AI(m, $clone(j, B.PageField), "cardholder"));
            i++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: U.ptr.prototype.Transform
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    U.prototype.Transform = function(c, d) {
      return this.$val.Transform(c, d);
    };
    V.ptr.prototype.Transform = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = c.FillableFields.ValueForDesignation("cardholder", 0);
            if (g === "") {
              $s = -1;
              return e;
            }
            h = d;
            i = 0;
          case 1:
            if (!(i < h.$length)) {
              $s = 2;
              continue;
            }
            j = $clone(((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i]), B.PageField);
            k = A.Fields(g);
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            l = k;
            n = (m = l.$length - 1 >> 0, ((m < 0 || m >= l.$length) ? ($throwRuntimeError("index out of range"), undefined) : l.$array[l.$offset + m]));
            e = $append(e, AI(n, $clone(j, B.PageField), "cardholder"));
            i++;
            $s = 1;
            continue;
          case 2:
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: V.ptr.prototype.Transform
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    V.prototype.Transform = function(c, d) {
      return this.$val.Transform(c, d);
    };
    W.ptr.prototype.Transform = function(c, d) {
      var c, d, e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = Z($clone(c, B.FillObject));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = g;
            if (h.length < 6) {
              $s = -1;
              return e;
            }
            i = d;
            j = 0;
            while (true) {
              if (!(j < i.$length)) {
                break;
              }
              k = $clone(((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j]), B.PageField);
              e = $append(e, AI($substring(h, 0, 3), $clone(k, B.PageField), "phone"));
              j++;
            }
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: W.ptr.prototype.Transform
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    W.prototype.Transform = function(c, d) {
      return this.$val.Transform(c, d);
    };
    X.ptr.prototype.Transform = function(c, d) {
      var c, d, e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = Z($clone(c, B.FillObject));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = g;
            if (h.length < 6) {
              $s = -1;
              return e;
            }
            i = d;
            j = 0;
            while (true) {
              if (!(j < i.$length)) {
                break;
              }
              k = $clone(((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j]), B.PageField);
              e = $append(e, AI($substring(h, 3, 6), $clone(k, B.PageField), "phone"));
              j++;
            }
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: X.ptr.prototype.Transform
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    X.prototype.Transform = function(c, d) {
      return this.$val.Transform(c, d);
    };
    Y.ptr.prototype.Transform = function(c, d) {
      var c, d, e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = Z($clone(c, B.FillObject));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            h = g;
            if (h.length < 6) {
              $s = -1;
              return e;
            }
            i = d;
            j = 0;
            while (true) {
              if (!(j < i.$length)) {
                break;
              }
              k = $clone(((j < 0 || j >= i.$length) ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + j]), B.PageField);
              e = $append(e, AI($substring(h, 6), $clone(k, B.PageField), "phone"));
              j++;
            }
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Y.ptr.prototype.Transform
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    Y.prototype.Transform = function(c, d) {
      return this.$val.Transform(c, d);
    };
    Z = function(c) {
      var c, d, e, f, g, h, i, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            d = "";
            e = c.FillableFields.ValueForDesignation("phone", 0);
            if (e === "") {
              $s = -1;
              return d;
            }
            f = C.MustCompile("[0-9]+");
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            g = f;
            h = g.FindAllString(e, -1);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              h = h.$blk();
            }
            if (h && h.$blk !== undefined) {
              break s;
            }
            i = A.Join(h, "");
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            d = i;
            if (d.length > 10) {
              d = $substring(d, (d.length - 10 >> 0));
            }
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Z
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AA.ptr.prototype.Transform = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = c.FillableFields.ValueForDesignation("sex", 0);
            if (g === "") {
              $s = -1;
              return e;
            }
            h = d;
            i = 0;
          case 1:
            if (!(i < h.$length)) {
              $s = 2;
              continue;
            }
            j = $clone(((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i]), B.PageField);
            k = $clone(j, B.PageField).IsSelect();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            if (k) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            l = $clone(f, AA).transformSelect(g, d);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            e = l;
            $s = -1;
            return e;
          case 4:
            i++;
            $s = 1;
            continue;
          case 2:
            e = $clone(f, AA).transformText(g, d);
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AA.ptr.prototype.Transform
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AA.prototype.Transform = function(c, d) {
      return this.$val.Transform(c, d);
    };
    AA.ptr.prototype.transformSelect = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = d;
            h = 0;
          case 1:
            if (!(h < g.$length)) {
              $s = 2;
              continue;
            }
            i = $clone(((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h]), B.PageField);
            j = AM.nil;
            k = (l = AB[$String.keyFor(c)], l !== undefined ? [l.v, true] : [AK.nil, false]);
            m = k[0];
            n = k[1];
            if (!n) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            h++;
            $s = 1;
            continue;
          case 4:
            o = m;
            p = 0;
          case 5:
            if (!(p < o.$length)) {
              $s = 6;
              continue;
            }
            q = ((p < 0 || p >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + p]);
            r = $clone(i, B.PageField).OptionMatchingDisplayText(q);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              r = r.$blk();
            }
            if (r && r.$blk !== undefined) {
              break s;
            }
            j = r;
            if (!(j === AM.nil)) {
              $s = 6;
              continue;
            }
            p++;
            $s = 5;
            continue;
          case 6:
            if (j === AM.nil) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            s = m;
            t = 0;
          case 10:
            if (!(t < s.$length)) {
              $s = 11;
              continue;
            }
            u = ((t < 0 || t >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + t]);
            v = $clone(i, B.PageField).OptionMatchingValue(u);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            j = v;
            if (!(j === AM.nil)) {
              $s = 11;
              continue;
            }
            t++;
            $s = 10;
            continue;
          case 11:
          case 9:
            if (j === AM.nil || j.Value() === "") {
              h++;
              $s = 1;
              continue;
            }
            e = $append(e, AI(j.Value(), $clone(i, B.PageField), "state"));
            h++;
            $s = 1;
            continue;
          case 2:
            e = e;
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AA.ptr.prototype.transformSelect
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AA.prototype.transformSelect = function(c, d) {
      return this.$val.transformSelect(c, d);
    };
    AA.ptr.prototype.transformText = function(c, d) {
      var c, d, e, f, g, h, i;
      e = AL.nil;
      f = this;
      g = d;
      h = 0;
      while (true) {
        if (!(h < g.$length)) {
          break;
        }
        i = $clone(((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h]), B.PageField);
        e = $append(e, AI(c, $clone(i, B.PageField), "sex"));
        h++;
      }
      e = e;
      return e;
    };
    AA.prototype.transformText = function(c, d) {
      return this.$val.transformText(c, d);
    };
    AC.ptr.prototype.Transform = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = c.FillableFields.ValueForDesignation("state", 0);
            if (g === "") {
              $s = -1;
              return e;
            }
            h = d;
            i = 0;
          case 1:
            if (!(i < h.$length)) {
              $s = 2;
              continue;
            }
            j = $clone(((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i]), B.PageField);
            k = $clone(j, B.PageField).IsSelect();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            if (k) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            l = f.transformSelect(g, d);
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            e = l;
            $s = -1;
            return e;
          case 4:
            i++;
            $s = 1;
            continue;
          case 2:
            e = f.transformText(g, d);
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AC.ptr.prototype.Transform
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AC.prototype.Transform = function(c, d) {
      return this.$val.Transform(c, d);
    };
    AC.ptr.prototype.transformSelect = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        s = $f.s;
        t = $f.t;
        u = $f.u;
        v = $f.v;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = d;
            h = 0;
          case 1:
            if (!(h < g.$length)) {
              $s = 2;
              continue;
            }
            i = $clone(((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h]), B.PageField);
            j = AM.nil;
            k = (l = AD[$String.keyFor(c)], l !== undefined ? [l.v, true] : [AK.nil, false]);
            m = k[0];
            n = k[1];
            if (!n) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            h++;
            $s = 1;
            continue;
          case 4:
            o = m;
            p = 0;
          case 5:
            if (!(p < o.$length)) {
              $s = 6;
              continue;
            }
            q = ((p < 0 || p >= o.$length) ? ($throwRuntimeError("index out of range"), undefined) : o.$array[o.$offset + p]);
            r = $clone(i, B.PageField).OptionMatchingDisplayText(q);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              r = r.$blk();
            }
            if (r && r.$blk !== undefined) {
              break s;
            }
            j = r;
            if (!(j === AM.nil)) {
              $s = 6;
              continue;
            }
            p++;
            $s = 5;
            continue;
          case 6:
            if (j === AM.nil) {
              $s = 8;
              continue;
            }
            $s = 9;
            continue;
          case 8:
            s = m;
            t = 0;
          case 10:
            if (!(t < s.$length)) {
              $s = 11;
              continue;
            }
            u = ((t < 0 || t >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + t]);
            v = $clone(i, B.PageField).OptionMatchingValue(u);
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              v = v.$blk();
            }
            if (v && v.$blk !== undefined) {
              break s;
            }
            j = v;
            if (!(j === AM.nil)) {
              $s = 11;
              continue;
            }
            t++;
            $s = 10;
            continue;
          case 11:
          case 9:
            if (j === AM.nil || j.Value() === "") {
              h++;
              $s = 1;
              continue;
            }
            e = $append(e, AI(j.Value(), $clone(i, B.PageField), "state"));
            h++;
            $s = 1;
            continue;
          case 2:
            e = e;
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AC.ptr.prototype.transformSelect
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.s = s;
      $f.t = t;
      $f.u = u;
      $f.v = v;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AC.prototype.transformSelect = function(c, d) {
      return this.$val.transformSelect(c, d);
    };
    AC.ptr.prototype.transformText = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m;
      e = AL.nil;
      f = this;
      g = d;
      h = 0;
      while (true) {
        if (!(h < g.$length)) {
          break;
        }
        i = $clone(((h < 0 || h >= g.$length) ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + h]), B.PageField);
        if ($clone(i, B.PageField).Maxlength() < 4) {
          e = $append(e, AI(c, $clone(i, B.PageField), "state"));
        } else {
          j = (k = B.StateCodeMapping[$String.keyFor(c)], k !== undefined ? [k.v, true] : ["", false]);
          l = j[0];
          m = j[1];
          if (m) {
            e = $append(e, AI(l, $clone(i, B.PageField), "state"));
          }
        }
        h++;
      }
      e = e;
      return e;
    };
    AC.prototype.transformText = function(c, d) {
      return this.$val.transformText(c, d);
    };
    AE.ptr.prototype.Transform = function(c, d) {
      var c, d, e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = AL.nil;
            f = this;
            g = c.FillableFields.ValueForDesignation("totp", 0);
            if (g === "") {
              $s = -1;
              return e;
            }
            i = F.NewGenerator(g);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            j = h[0];
            k = h[1];
            if (!($interfaceIsEqual(k, $ifaceNil))) {
              $s = -1;
              return e;
            }
            m = j.Generate($clone(E.Now(), E.Time).Unix());
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              m = m.$blk();
            }
            if (m && m.$blk !== undefined) {
              break s;
            }
            l = m;
            n = l[0];
            k = l[1];
            if (!($interfaceIsEqual(k, $ifaceNil))) {
              $s = -1;
              return e;
            }
            e = AJ(n, d, "totp");
            $s = -1;
            return e;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: AE.ptr.prototype.Transform
        };
      }
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    AE.prototype.Transform = function(c, d) {
      return this.$val.Transform(c, d);
    };
    AH = function() {
      var aa, ab, ac, ad, ae, af, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;
      c = "cardholder_first";
      ($pkg.TransformerMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(c)] = {
        k: c,
        v: (d = new U.ptr(), new d.constructor.elem(d))
      };
      e = "cardholder_last";
      ($pkg.TransformerMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(e)] = {
        k: e,
        v: (f = new V.ptr(), new f.constructor.elem(f))
      };
      g = "name";
      ($pkg.TransformerMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(g)] = {
        k: g,
        v: (h = new T.ptr(), new h.constructor.elem(h))
      };
      i = "expiry_mm";
      ($pkg.TransformerMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(i)] = {
        k: i,
        v: (j = new M.ptr(), new j.constructor.elem(j))
      };
      k = "expiry_yy";
      ($pkg.TransformerMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(k)] = {
        k: k,
        v: (l = new N.ptr(), new l.constructor.elem(l))
      };
      m = "expiry_mmyy";
      ($pkg.TransformerMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(m)] = {
        k: m,
        v: (n = new O.ptr(), new n.constructor.elem(n))
      };
      o = "state";
      ($pkg.TransformerMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(o)] = {
        k: o,
        v: (p = new AC.ptr(), new p.constructor.elem(p))
      };
      q = "country";
      ($pkg.TransformerMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(q)] = {
        k: q,
        v: (r = new K.ptr(), new r.constructor.elem(r))
      };
      s = "phone_areacode";
      ($pkg.TransformerMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(s)] = {
        k: s,
        v: (t = new W.ptr(), new t.constructor.elem(t))
      };
      u = "phone_prefix";
      ($pkg.TransformerMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(u)] = {
        k: u,
        v: (v = new X.ptr(), new v.constructor.elem(v))
      };
      w = "phone_suffix";
      ($pkg.TransformerMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(w)] = {
        k: w,
        v: (x = new Y.ptr(), new x.constructor.elem(x))
      };
      y = "ccnum";
      ($pkg.TransformerMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(y)] = {
        k: y,
        v: (z = new G.ptr(), new z.constructor.elem(z))
      };
      aa = "type";
      ($pkg.TransformerMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(aa)] = {
        k: aa,
        v: (ab = new I.ptr(), new ab.constructor.elem(ab))
      };
      ac = "totp";
      ($pkg.TransformerMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(ac)] = {
        k: ac,
        v: (ad = new AE.ptr(), new ad.constructor.elem(ad))
      };
      ae = "sex";
      ($pkg.TransformerMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(ae)] = {
        k: ae,
        v: (af = new AA.ptr(), new af.constructor.elem(af))
      };
    };
    AI = function(c, d, e) {
      var c, d, e;
      return new AF.ptr($clone(d, B.PageField), c, e);
    };
    AJ = function(c, d, e) {
      var c, d, e, f, g, h, i, j, k;
      f = AL.nil;
      if (d.$length === 1) {
        f = new AL([$clone(AI(c, $clone((0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0]), B.PageField), e), AF)]);
        return f;
      }
      g = 0;
      h = d;
      i = 0;
      while (true) {
        if (!(i < h.$length)) {
          break;
        }
        j = $clone(((i < 0 || i >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + i]), B.PageField);
        k = "";
        if ((j.MaxLength === 0) || g >= c.length) {
          k = c;
        } else if (((g + j.MaxLength >> 0)) > c.length) {
          k = $substring(c, g);
        } else {
          k = $substring(c, g, (g + j.MaxLength >> 0));
        }
        f = $append(f, new AF.ptr($clone(j, B.PageField), k, e));
        g = g + (j.MaxLength) >> 0;
        i++;
      }
      return f;
    };
    G.methods = [{
      prop: "Transform",
      name: "Transform",
      pkg: "",
      typ: $funcType([B.FillObject, AO], [AL], false)
    }];
    I.methods = [{
      prop: "Transform",
      name: "Transform",
      pkg: "",
      typ: $funcType([B.FillObject, AO], [AL], false)
    }];
    K.methods = [{
      prop: "Transform",
      name: "Transform",
      pkg: "",
      typ: $funcType([B.FillObject, AO], [AL], false)
    }];
    AP.methods = [{
      prop: "transformSelect",
      name: "transformSelect",
      pkg: "go.1password.io/xplatform/vendor/go.1password.io/brain/transform",
      typ: $funcType([$String, AO], [AL], false)
    }, {
      prop: "transformText",
      name: "transformText",
      pkg: "go.1password.io/xplatform/vendor/go.1password.io/brain/transform",
      typ: $funcType([$String, AO], [AL], false)
    }];
    M.methods = [{
      prop: "Transform",
      name: "Transform",
      pkg: "",
      typ: $funcType([B.FillObject, AO], [AL], false)
    }];
    AQ.methods = [{
      prop: "transformSelect",
      name: "transformSelect",
      pkg: "go.1password.io/xplatform/vendor/go.1password.io/brain/transform",
      typ: $funcType([$String, $Int64, AO], [AL], false)
    }, {
      prop: "transformText",
      name: "transformText",
      pkg: "go.1password.io/xplatform/vendor/go.1password.io/brain/transform",
      typ: $funcType([$String, AO], [AL], false)
    }];
    N.methods = [{
      prop: "Transform",
      name: "Transform",
      pkg: "",
      typ: $funcType([B.FillObject, AO], [AL], false)
    }];
    AR.methods = [{
      prop: "transformSelect",
      name: "transformSelect",
      pkg: "go.1password.io/xplatform/vendor/go.1password.io/brain/transform",
      typ: $funcType([$String, AO], [AL], false)
    }, {
      prop: "transformText",
      name: "transformText",
      pkg: "go.1password.io/xplatform/vendor/go.1password.io/brain/transform",
      typ: $funcType([$String, AO], [AL], false)
    }];
    O.methods = [{
      prop: "Transform",
      name: "Transform",
      pkg: "",
      typ: $funcType([B.FillObject, AO], [AL], false)
    }];
    T.methods = [{
      prop: "Transform",
      name: "Transform",
      pkg: "",
      typ: $funcType([B.FillObject, AO], [AL], false)
    }];
    U.methods = [{
      prop: "Transform",
      name: "Transform",
      pkg: "",
      typ: $funcType([B.FillObject, AO], [AL], false)
    }];
    V.methods = [{
      prop: "Transform",
      name: "Transform",
      pkg: "",
      typ: $funcType([B.FillObject, AO], [AL], false)
    }];
    W.methods = [{
      prop: "Transform",
      name: "Transform",
      pkg: "",
      typ: $funcType([B.FillObject, AO], [AL], false)
    }];
    X.methods = [{
      prop: "Transform",
      name: "Transform",
      pkg: "",
      typ: $funcType([B.FillObject, AO], [AL], false)
    }];
    Y.methods = [{
      prop: "Transform",
      name: "Transform",
      pkg: "",
      typ: $funcType([B.FillObject, AO], [AL], false)
    }];
    AA.methods = [{
      prop: "Transform",
      name: "Transform",
      pkg: "",
      typ: $funcType([B.FillObject, AO], [AL], false)
    }, {
      prop: "transformSelect",
      name: "transformSelect",
      pkg: "go.1password.io/xplatform/vendor/go.1password.io/brain/transform",
      typ: $funcType([$String, AO], [AL], false)
    }, {
      prop: "transformText",
      name: "transformText",
      pkg: "go.1password.io/xplatform/vendor/go.1password.io/brain/transform",
      typ: $funcType([$String, AO], [AL], false)
    }];
    AC.methods = [{
      prop: "Transform",
      name: "Transform",
      pkg: "",
      typ: $funcType([B.FillObject, AO], [AL], false)
    }];
    AS.methods = [{
      prop: "transformSelect",
      name: "transformSelect",
      pkg: "go.1password.io/xplatform/vendor/go.1password.io/brain/transform",
      typ: $funcType([$String, AO], [AL], false)
    }, {
      prop: "transformText",
      name: "transformText",
      pkg: "go.1password.io/xplatform/vendor/go.1password.io/brain/transform",
      typ: $funcType([$String, AO], [AL], false)
    }];
    AE.methods = [{
      prop: "Transform",
      name: "Transform",
      pkg: "",
      typ: $funcType([B.FillObject, AO], [AL], false)
    }];
    G.init("", []);
    I.init("", []);
    K.init("", []);
    M.init("", []);
    N.init("", []);
    O.init("", []);
    T.init("", []);
    U.init("", []);
    V.init("", []);
    W.init("", []);
    X.init("", []);
    Y.init("", []);
    AA.init("", []);
    AC.init("", []);
    AE.init("", []);
    AF.init("", [{
      prop: "Field",
      name: "Field",
      embedded: false,
      exported: true,
      typ: B.PageField,
      tag: ""
    }, {
      prop: "Value",
      name: "Value",
      embedded: false,
      exported: true,
      typ: $String,
      tag: ""
    }, {
      prop: "Designation",
      name: "Designation",
      embedded: false,
      exported: true,
      typ: B.Designation,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = B.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = F.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            H = A.NewReplacer(new AK([" ", "", "_", "", "-", ""]));
            J = $makeMap($String.keyFor, [{
              k: "mc",
              v: new AK(["master", "euro", "mc"])
            }, {
              k: "amex",
              v: new AK(["amex", "american", "express"])
            }, {
              k: "discover",
              v: new AK(["disc"])
            }, {
              k: "carteblanche",
              v: new AK(["blanche"])
            }, {
              k: "visaelectron",
              v: new AK(["electron"])
            }]);
            L = $makeMap($String.keyFor, [{
              k: "ca",
              v: new AK(["canada", "=ca", "=can", "\xD0\xBA\xD0\xB0\xD0\xBD\xD0\xB0\xD0\xB4\xD0\xB0", "kanada"])
            }, {
              k: "us",
              v: new AK(["unitedstates", "unitedstatesus", "unitedstatesofamerica", "=us", "=usa", "\xD1\x81\xD1\x88\xD0\xB0", "vereinigtestaaten", "~estados[^a-zA-Z]?unidos"])
            }, {
              k: "uk",
              v: new AK(["unitedkingdom", "=uk", "britain", "=gb", "\xD0\xB2\xD0\xB5\xD0\xBB\xD0\xB8\xD0\xBA\xD0\xBE\xD0\xB1\xD1\x80\xD0\xB8\xD1\x82\xD0\xB0\xD0\xBD\xD0\xB8\xD1\x8F"])
            }, {
              k: "gb",
              v: new AK(["britain", "=gb", "\xD0\xB2\xD0\xB5\xD0\xBB\xD0\xB8\xD0\xBA\xD0\xBE\xD0\xB1\xD1\x80\xD0\xB8\xD1\x82\xD0\xB0\xD0\xBD\xD0\xB8\xD1\x8F", "unitedkingdom", "=uk"])
            }, {
              k: "de",
              v: new AK(["germany", "deutschland"])
            }, {
              k: "au",
              v: new AK(["australia"])
            }, {
              k: "nl",
              v: new AK(["netherlands", "holland"])
            }, {
              k: "it",
              v: new AK(["italy"])
            }, {
              k: "fr",
              v: new AK(["france"])
            }, {
              k: "mx",
              v: new AK(["mexico"])
            }, {
              k: "cn",
              v: new AK(["china"])
            }, {
              k: "ch",
              v: new AK(["switzerland"])
            }, {
              k: "es",
              v: new AK(["spain"])
            }, {
              k: "jp",
              v: new AK(["japan"])
            }, {
              k: "at",
              v: new AK(["austria"])
            }, {
              k: "be",
              v: new AK(["belgium"])
            }, {
              k: "ad",
              v: new AK(["andorra"])
            }, {
              k: "ae",
              v: new AK(["unitedarabemirates", "uae"])
            }, {
              k: "af",
              v: new AK(["afghanistan"])
            }, {
              k: "ag",
              v: new AK(["antiguaandbarbuda"])
            }, {
              k: "ai",
              v: new AK(["anguilla"])
            }, {
              k: "al",
              v: new AK(["albania"])
            }, {
              k: "am",
              v: new AK(["armenia"])
            }, {
              k: "an",
              v: new AK(["netherlandsantilles"])
            }, {
              k: "ao",
              v: new AK(["angola"])
            }, {
              k: "aq",
              v: new AK(["antarctica"])
            }, {
              k: "ar",
              v: new AK(["argentina"])
            }, {
              k: "as",
              v: new AK(["americansamoa"])
            }, {
              k: "aw",
              v: new AK(["aruba"])
            }, {
              k: "az",
              v: new AK(["azerbaidjan"])
            }, {
              k: "ba",
              v: new AK(["bosniaherzegovina"])
            }, {
              k: "bb",
              v: new AK(["barbados"])
            }, {
              k: "bd",
              v: new AK(["bangladesh"])
            }, {
              k: "bf",
              v: new AK(["burkinafaso"])
            }, {
              k: "bg",
              v: new AK(["bulgaria"])
            }, {
              k: "bh",
              v: new AK(["bahrain"])
            }, {
              k: "bi",
              v: new AK(["burundi"])
            }, {
              k: "bj",
              v: new AK(["benin"])
            }, {
              k: "bm",
              v: new AK(["bermuda"])
            }, {
              k: "bn",
              v: new AK(["bruneidarussalam"])
            }, {
              k: "bo",
              v: new AK(["bolivia"])
            }, {
              k: "br",
              v: new AK(["brazil"])
            }, {
              k: "bs",
              v: new AK(["bahamas"])
            }, {
              k: "bt",
              v: new AK(["bhutan"])
            }, {
              k: "bv",
              v: new AK(["bouvetisland"])
            }, {
              k: "bw",
              v: new AK(["botswana"])
            }, {
              k: "by",
              v: new AK(["belarus"])
            }, {
              k: "bz",
              v: new AK(["belize"])
            }, {
              k: "cc",
              v: new AK(["~cocos.*islands"])
            }, {
              k: "cf",
              v: new AK(["centralafricanrepublic"])
            }, {
              k: "cd",
              v: new AK(["~congo.*republic"])
            }, {
              k: "cg",
              v: new AK(["=congo"])
            }, {
              k: "ci",
              v: new AK(["ivorycoast"])
            }, {
              k: "ck",
              v: new AK(["cookislands"])
            }, {
              k: "cl",
              v: new AK(["chile"])
            }, {
              k: "cm",
              v: new AK(["cameroon"])
            }, {
              k: "co",
              v: new AK(["colombia"])
            }, {
              k: "cr",
              v: new AK(["costarica"])
            }, {
              k: "cu",
              v: new AK(["cuba"])
            }, {
              k: "cv",
              v: new AK(["capeverde"])
            }, {
              k: "cx",
              v: new AK(["christmasisland"])
            }, {
              k: "cy",
              v: new AK(["cyprus"])
            }, {
              k: "cz",
              v: new AK(["czech"])
            }, {
              k: "dj",
              v: new AK(["djibouti"])
            }, {
              k: "dk",
              v: new AK(["denmark"])
            }, {
              k: "dm",
              v: new AK(["dominica"])
            }, {
              k: "do",
              v: new AK(["dominicanrepublic"])
            }, {
              k: "dz",
              v: new AK(["algeria"])
            }, {
              k: "ec",
              v: new AK(["ecuador"])
            }, {
              k: "ee",
              v: new AK(["estonia"])
            }, {
              k: "eg",
              v: new AK(["egypt"])
            }, {
              k: "eh",
              v: new AK(["westernsahara"])
            }, {
              k: "er",
              v: new AK(["eritrea"])
            }, {
              k: "et",
              v: new AK(["ethiopia"])
            }, {
              k: "fi",
              v: new AK(["finland"])
            }, {
              k: "fj",
              v: new AK(["fiji"])
            }, {
              k: "fk",
              v: new AK(["falklandislands"])
            }, {
              k: "fm",
              v: new AK(["micronesia"])
            }, {
              k: "fo",
              v: new AK(["faroeislands"])
            }, {
              k: "ga",
              v: new AK(["gabon"])
            }, {
              k: "gd",
              v: new AK(["grenada"])
            }, {
              k: "ge",
              v: new AK(["georgia"])
            }, {
              k: "gf",
              v: new AK(["frenchguyana"])
            }, {
              k: "gh",
              v: new AK(["ghana"])
            }, {
              k: "gi",
              v: new AK(["gibraltar"])
            }, {
              k: "gl",
              v: new AK(["greenland"])
            }, {
              k: "gm",
              v: new AK(["gambia"])
            }, {
              k: "gn",
              v: new AK(["guinea"])
            }, {
              k: "gp",
              v: new AK(["guadeloupe"])
            }, {
              k: "gq",
              v: new AK(["equatorialguinea"])
            }, {
              k: "gr",
              v: new AK(["greece"])
            }, {
              k: "gs",
              v: new AK(["~georgia.*sandwich"])
            }, {
              k: "gt",
              v: new AK(["guatemala"])
            }, {
              k: "gu",
              v: new AK(["guam"])
            }, {
              k: "gw",
              v: new AK(["guineabissau"])
            }, {
              k: "gy",
              v: new AK(["guyana"])
            }, {
              k: "hk",
              v: new AK(["hongkong"])
            }, {
              k: "hm",
              v: new AK(["~heard.*mcdonald"])
            }, {
              k: "hn",
              v: new AK(["honduras"])
            }, {
              k: "hr",
              v: new AK(["croatia"])
            }, {
              k: "ht",
              v: new AK(["haiti"])
            }, {
              k: "hu",
              v: new AK(["hungary"])
            }, {
              k: "id",
              v: new AK(["indonesia"])
            }, {
              k: "ie",
              v: new AK(["ireland"])
            }, {
              k: "il",
              v: new AK(["israel"])
            }, {
              k: "in",
              v: new AK(["india"])
            }, {
              k: "iq",
              v: new AK(["iraq"])
            }, {
              k: "ir",
              v: new AK(["iran"])
            }, {
              k: "is",
              v: new AK(["iceland"])
            }, {
              k: "jm",
              v: new AK(["jamaica"])
            }, {
              k: "jo",
              v: new AK(["jordan"])
            }, {
              k: "ke",
              v: new AK(["kenya"])
            }, {
              k: "kg",
              v: new AK(["kyrgyz"])
            }, {
              k: "kh",
              v: new AK(["cambodia"])
            }, {
              k: "ki",
              v: new AK(["kiribati"])
            }, {
              k: "km",
              v: new AK(["comoros"])
            }, {
              k: "kn",
              v: new AK(["saintkitts"])
            }, {
              k: "kp",
              v: new AK(["northkorea"])
            }, {
              k: "kr",
              v: new AK(["southkorea"])
            }, {
              k: "kw",
              v: new AK(["kuwait"])
            }, {
              k: "ky",
              v: new AK(["cayman"])
            }, {
              k: "kz",
              v: new AK(["kazakhstan"])
            }, {
              k: "la",
              v: new AK(["laos"])
            }, {
              k: "lb",
              v: new AK(["lebanon"])
            }, {
              k: "lc",
              v: new AK(["saintlucia"])
            }, {
              k: "li",
              v: new AK(["liechtenstein"])
            }, {
              k: "lk",
              v: new AK(["srilanka"])
            }, {
              k: "lr",
              v: new AK(["liberia"])
            }, {
              k: "ls",
              v: new AK(["lesotho"])
            }, {
              k: "lt",
              v: new AK(["lithuania"])
            }, {
              k: "lu",
              v: new AK(["luxembourg"])
            }, {
              k: "lv",
              v: new AK(["latvia"])
            }, {
              k: "ly",
              v: new AK(["libya"])
            }, {
              k: "ma",
              v: new AK(["morocco"])
            }, {
              k: "mc",
              v: new AK(["monaco"])
            }, {
              k: "md",
              v: new AK(["moldavia"])
            }, {
              k: "mg",
              v: new AK(["madagascar"])
            }, {
              k: "mh",
              v: new AK(["marshall"])
            }, {
              k: "mk",
              v: new AK(["macedonia"])
            }, {
              k: "ml",
              v: new AK(["mali"])
            }, {
              k: "mm",
              v: new AK(["myanmar"])
            }, {
              k: "mn",
              v: new AK(["mongolia"])
            }, {
              k: "mo",
              v: new AK(["macau"])
            }, {
              k: "mq",
              v: new AK(["martinique"])
            }, {
              k: "mr",
              v: new AK(["mauritania"])
            }, {
              k: "ms",
              v: new AK(["montserrat"])
            }, {
              k: "mt",
              v: new AK(["malta"])
            }, {
              k: "mu",
              v: new AK(["mauritius"])
            }, {
              k: "mv",
              v: new AK(["maldives"])
            }, {
              k: "mw",
              v: new AK(["malawi"])
            }, {
              k: "my",
              v: new AK(["malaysia"])
            }, {
              k: "mz",
              v: new AK(["mozambique"])
            }, {
              k: "na",
              v: new AK(["namibia"])
            }, {
              k: "nc",
              v: new AK(["newcaledonia"])
            }, {
              k: "ne",
              v: new AK(["niger"])
            }, {
              k: "nf",
              v: new AK(["norfolk"])
            }, {
              k: "ng",
              v: new AK(["nigeria"])
            }, {
              k: "ni",
              v: new AK(["nicaragua"])
            }, {
              k: "no",
              v: new AK(["norway"])
            }, {
              k: "np",
              v: new AK(["nepal"])
            }, {
              k: "nr",
              v: new AK(["nauru"])
            }, {
              k: "nt",
              v: new AK(["neutralzone"])
            }, {
              k: "nu",
              v: new AK(["niue"])
            }, {
              k: "nz",
              v: new AK(["newzealand"])
            }, {
              k: "om",
              v: new AK(["oman"])
            }, {
              k: "pa",
              v: new AK(["panama"])
            }, {
              k: "pe",
              v: new AK(["peru"])
            }, {
              k: "pf",
              v: new AK(["polynesia"])
            }, {
              k: "pg",
              v: new AK(["papuanewguinea"])
            }, {
              k: "ph",
              v: new AK(["philippines"])
            }, {
              k: "pk",
              v: new AK(["pakistan"])
            }, {
              k: "pl",
              v: new AK(["poland"])
            }, {
              k: "pm",
              v: new AK(["~pierre.*miquelon"])
            }, {
              k: "pn",
              v: new AK(["pitcairn"])
            }, {
              k: "pr",
              v: new AK(["puertorico"])
            }, {
              k: "pt",
              v: new AK(["portugal"])
            }, {
              k: "pw",
              v: new AK(["palau"])
            }, {
              k: "py",
              v: new AK(["paraguay"])
            }, {
              k: "qa",
              v: new AK(["qatar"])
            }, {
              k: "re",
              v: new AK(["reunion"])
            }, {
              k: "ro",
              v: new AK(["romania"])
            }, {
              k: "ru",
              v: new AK(["russia"])
            }, {
              k: "rw",
              v: new AK(["rwanda"])
            }, {
              k: "sa",
              v: new AK(["saudiarabia"])
            }, {
              k: "sb",
              v: new AK(["solomon"])
            }, {
              k: "sc",
              v: new AK(["seychelles"])
            }, {
              k: "sd",
              v: new AK(["sudan"])
            }, {
              k: "se",
              v: new AK(["sweden"])
            }, {
              k: "sg",
              v: new AK(["singapore"])
            }, {
              k: "sh",
              v: new AK(["helena"])
            }, {
              k: "rs",
              v: new AK(["serbia"])
            }, {
              k: "si",
              v: new AK(["slovenia"])
            }, {
              k: "sj",
              v: new AK(["svalbard"])
            }, {
              k: "sk",
              v: new AK(["slovak"])
            }, {
              k: "sl",
              v: new AK(["sierraleone"])
            }, {
              k: "sm",
              v: new AK(["sanmarino"])
            }, {
              k: "sn",
              v: new AK(["senegal"])
            }, {
              k: "so",
              v: new AK(["somalia"])
            }, {
              k: "sr",
              v: new AK(["suriname"])
            }, {
              k: "st",
              v: new AK(["~tome.*principe"])
            }, {
              k: "sv",
              v: new AK(["salvador"])
            }, {
              k: "sy",
              v: new AK(["syria"])
            }, {
              k: "sz",
              v: new AK(["swaziland"])
            }, {
              k: "tc",
              v: new AK(["~turks.*caicos"])
            }, {
              k: "td",
              v: new AK(["chad"])
            }, {
              k: "tg",
              v: new AK(["togo"])
            }, {
              k: "th",
              v: new AK(["thailand"])
            }, {
              k: "tj",
              v: new AK(["tadjikistan"])
            }, {
              k: "tk",
              v: new AK(["tokelau"])
            }, {
              k: "tm",
              v: new AK(["turkmenistan"])
            }, {
              k: "tn",
              v: new AK(["tunisia"])
            }, {
              k: "to",
              v: new AK(["tonga"])
            }, {
              k: "tp",
              v: new AK(["easttimor"])
            }, {
              k: "tr",
              v: new AK(["turkey"])
            }, {
              k: "tt",
              v: new AK(["~trinidad.*tobago"])
            }, {
              k: "tv",
              v: new AK(["tuvalu"])
            }, {
              k: "tw",
              v: new AK(["taiwan"])
            }, {
              k: "tz",
              v: new AK(["tanzania"])
            }, {
              k: "ua",
              v: new AK(["ukraine"])
            }, {
              k: "ug",
              v: new AK(["uganda"])
            }, {
              k: "uy",
              v: new AK(["uruguay"])
            }, {
              k: "uz",
              v: new AK(["uzbekistan"])
            }, {
              k: "va",
              v: new AK(["vatican"])
            }, {
              k: "vc",
              v: new AK(["~vincent.*grenadines"])
            }, {
              k: "ve",
              v: new AK(["venezuela"])
            }, {
              k: "vg",
              v: new AK(["~virgin.*british"])
            }, {
              k: "vi",
              v: new AK(["~virgin.*us"])
            }, {
              k: "vn",
              v: new AK(["vietnam"])
            }, {
              k: "vu",
              v: new AK(["vanuatu"])
            }, {
              k: "wf",
              v: new AK(["~wallis.*futuna islands"])
            }, {
              k: "ws",
              v: new AK(["samoa"])
            }, {
              k: "ye",
              v: new AK(["yemen"])
            }, {
              k: "yt",
              v: new AK(["mayotte"])
            }, {
              k: "yu",
              v: new AK(["yugoslavia"])
            }, {
              k: "za",
              v: new AK(["southafrica"])
            }, {
              k: "zm",
              v: new AK(["zambia"])
            }, {
              k: "zr",
              v: new AK(["zaire"])
            }, {
              k: "zw",
              v: new AK(["zimbabwe"])
            }]);
            a = C.MustCompile("\\D*(\\d{1,2}\\D*(\\d{4}|\\d{2}))\\D*");
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              a = a.$blk();
            }
            if (a && a.$blk !== undefined) {
              break s;
            }
            P = a;
            b = C.MustCompile("(?i)(yy|aa|jj|\xC3\xA5\xC3\xA5|__){1,2}");
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            Q = b;
            AB = $makeMap($String.keyFor, [{
              k: "female",
              v: new AK(["=f", "female"])
            }, {
              k: "male",
              v: new AK(["=m", "male"])
            }]);
            AD = $makeMap($String.keyFor, [{
              k: "AL",
              v: new AK(["=al", "alabama"])
            }, {
              k: "AK",
              v: new AK(["=ak", "alaska"])
            }, {
              k: "AB",
              v: new AK(["=ab", "alberta"])
            }, {
              k: "AS",
              v: new AK(["=as", "american samoa"])
            }, {
              k: "AZ",
              v: new AK(["=az", "arizona"])
            }, {
              k: "AR",
              v: new AK(["=ar", "arkansas"])
            }, {
              k: "AA",
              v: new AK(["=aa", "armed forces americas"])
            }, {
              k: "AE",
              v: new AK(["=ae", "armed forces europe"])
            }, {
              k: "AP",
              v: new AK(["=ap", "armed forces pacific"])
            }, {
              k: "BC",
              v: new AK(["=bc", "british columbia"])
            }, {
              k: "CA",
              v: new AK(["=ca", "california"])
            }, {
              k: "CO",
              v: new AK(["=co", "colorado"])
            }, {
              k: "CT",
              v: new AK(["=ct", "connecticut"])
            }, {
              k: "DE",
              v: new AK(["=de", "delaware"])
            }, {
              k: "DC",
              v: new AK(["=dc", "district.*columbia"])
            }, {
              k: "FL",
              v: new AK(["=fl", "florida"])
            }, {
              k: "GA",
              v: new AK(["=ga", "georgia"])
            }, {
              k: "GU",
              v: new AK(["=gu", "guam"])
            }, {
              k: "HI",
              v: new AK(["=hi", "hawaii"])
            }, {
              k: "ID",
              v: new AK(["=id", "idaho"])
            }, {
              k: "IL",
              v: new AK(["=il", "illinois"])
            }, {
              k: "IN",
              v: new AK(["=in", "indiana"])
            }, {
              k: "IA",
              v: new AK(["=ia", "iowa"])
            }, {
              k: "KS",
              v: new AK(["=ks", "=kansas"])
            }, {
              k: "KY",
              v: new AK(["=ky", "kentucky"])
            }, {
              k: "LA",
              v: new AK(["=la", "louisiana"])
            }, {
              k: "ME",
              v: new AK(["=me", "maine"])
            }, {
              k: "MB",
              v: new AK(["=mb", "manitoba"])
            }, {
              k: "MD",
              v: new AK(["=md", "maryland"])
            }, {
              k: "MA",
              v: new AK(["=ma", "massachusetts"])
            }, {
              k: "MI",
              v: new AK(["=mi", "michigan"])
            }, {
              k: "MN",
              v: new AK(["=mn", "minnesota"])
            }, {
              k: "MS",
              v: new AK(["=ms", "mississippi"])
            }, {
              k: "MO",
              v: new AK(["=mo", "missouri"])
            }, {
              k: "MT",
              v: new AK(["=mt", "montana"])
            }, {
              k: "NE",
              v: new AK(["=ne", "nebraska"])
            }, {
              k: "NV",
              v: new AK(["=nv", "nevada"])
            }, {
              k: "NB",
              v: new AK(["=nb", "new brunswick"])
            }, {
              k: "NH",
              v: new AK(["=nh", "new hampshire"])
            }, {
              k: "NJ",
              v: new AK(["=nj", "new jersey"])
            }, {
              k: "NM",
              v: new AK(["=nm", "new mexico"])
            }, {
              k: "NY",
              v: new AK(["=ny", "~n.*york"])
            }, {
              k: "NL",
              v: new AK(["=nl", "~newfoundland.*labrador"])
            }, {
              k: "NC",
              v: new AK(["=nc", "~n.*carolina"])
            }, {
              k: "ND",
              v: new AK(["=nd", "~n.*dakota"])
            }, {
              k: "MP",
              v: new AK(["=mp", "~n.*mariana"])
            }, {
              k: "NT",
              v: new AK(["=nt", "=nwt", "~north.*territories"])
            }, {
              k: "NS",
              v: new AK(["=ns", "~nova.*cotia"])
            }, {
              k: "NU",
              v: new AK(["=nu", "nunavut"])
            }, {
              k: "OH",
              v: new AK(["=oh", "ohio"])
            }, {
              k: "OK",
              v: new AK(["=ok", "oklahoma"])
            }, {
              k: "ON",
              v: new AK(["=on", "=ont", "ontario"])
            }, {
              k: "OR",
              v: new AK(["=or", "oregon"])
            }, {
              k: "PW",
              v: new AK(["=pw", "palau"])
            }, {
              k: "PA",
              v: new AK(["=pa", "pennsylvania"])
            }, {
              k: "PE",
              v: new AK(["=pe", "=pei", "=p.e.i", "prince edward"])
            }, {
              k: "PR",
              v: new AK(["=pr", "puerto rico"])
            }, {
              k: "QC",
              v: new AK(["=qc", "quebec"])
            }, {
              k: "RI",
              v: new AK(["=ri", "rhode island"])
            }, {
              k: "SK",
              v: new AK(["=sk", "saskatchewan"])
            }, {
              k: "SC",
              v: new AK(["=sc", "~s.*carolina"])
            }, {
              k: "SD",
              v: new AK(["=sd", "~s.*dakota"])
            }, {
              k: "TN",
              v: new AK(["=tn", "tennessee"])
            }, {
              k: "TX",
              v: new AK(["=tx", "texas"])
            }, {
              k: "UT",
              v: new AK(["=ut", "utah"])
            }, {
              k: "VT",
              v: new AK(["=vt", "vermont"])
            }, {
              k: "VI",
              v: new AK(["=vi", "virgin islands"])
            }, {
              k: "VA",
              v: new AK(["=va", "virginia"])
            }, {
              k: "WA",
              v: new AK(["=wa", "washington"])
            }, {
              k: "WV",
              v: new AK(["=wv", "~w.*virginia"])
            }, {
              k: "WI",
              v: new AK(["=wi", "wisconsin"])
            }, {
              k: "WY",
              v: new AK(["=wy", "wyoming"])
            }, {
              k: "YT",
              v: new AK(["=yt", "yukon"])
            }, {
              k: "ABD",
              v: new AK(["=abd", "aberdeen", "aberdeenshire"])
            }, {
              k: "AGY",
              v: new AK(["=agy", "anglesey"])
            }, {
              k: "ALD",
              v: new AK(["=ald", "alderney"])
            }, {
              k: "ANS",
              v: new AK(["=ans", "angus"])
            }, {
              k: "ANT",
              v: new AK(["=ant", "~co.*antrim"])
            }, {
              k: "ARL",
              v: new AK(["=arl", "~argyl{1,2}shire"])
            }, {
              k: "ARM",
              v: new AK(["=arm", "~co.*armagh"])
            }, {
              k: "AVN",
              v: new AK(["=avn", "=avon"])
            }, {
              k: "AYR",
              v: new AK(["=ayr", "ayrshire"])
            }, {
              k: "BAN",
              v: new AK(["=ban", "~banf{1,2}(shire)?"])
            }, {
              k: "BDF",
              v: new AK(["=bdf", "~bedford(shire)?"])
            }, {
              k: "BEW",
              v: new AK(["=bew", "~berwick(shire)?"])
            }, {
              k: "BKM",
              v: new AK(["=bkm", "~buckingham(shire)?"])
            }, {
              k: "BOR",
              v: new AK(["=bor", "borders"])
            }, {
              k: "BRE",
              v: new AK(["=bre", "~brecon(shire)?"])
            }, {
              k: "BRK",
              v: new AK(["=brk", "~berk(shire)?"])
            }, {
              k: "BUT",
              v: new AK(["=but", "=bute"])
            }, {
              k: "CAE",
              v: new AK(["=cae", "`caernarvon(shire)?"])
            }, {
              k: "CAI",
              v: new AK(["=cai", "caithness"])
            }, {
              k: "CAM",
              v: new AK(["=cam", "~cambridge(shire)?"])
            }, {
              k: "CAR",
              v: new AK(["=car", "co.*carlow"])
            }, {
              k: "CAV",
              v: new AK(["=cav", "~co.*cavan"])
            }, {
              k: "CEN",
              v: new AK(["=cen", "central"])
            }, {
              k: "CGN",
              v: new AK(["=cgn", "~cardigan(shire)?"])
            }, {
              k: "CHS",
              v: new AK(["=chs", "cheshire"])
            }, {
              k: "CLA",
              v: new AK(["=cla", "~co.*clare"])
            }, {
              k: "CLK",
              v: new AK(["=clk", "~clackmannan(shire)?"])
            }, {
              k: "CLV",
              v: new AK(["=clv", "cleveland"])
            }, {
              k: "CMA",
              v: new AK(["=cma", "cumbria"])
            }, {
              k: "CMN",
              v: new AK(["=cmn", "~carmarthen(shire)?"])
            }, {
              k: "CON",
              v: new AK(["=con", "cornwall"])
            }, {
              k: "COR",
              v: new AK(["=cor", "~co.*cork"])
            }, {
              k: "CUL",
              v: new AK(["=cul", "cumberland"])
            }, {
              k: "CWD",
              v: new AK(["=cwd", "clwyd"])
            }, {
              k: "DBY",
              v: new AK(["=dby", "~derby(shire)?"])
            }, {
              k: "DEN",
              v: new AK(["=den", "~denbigh(shire)?"])
            }, {
              k: "DEV",
              v: new AK(["=dev", "devon"])
            }, {
              k: "DFD",
              v: new AK(["=dfd", "dyfed"])
            }, {
              k: "DFS",
              v: new AK(["=dfs", "~dumfries(-?shire)?"])
            }, {
              k: "DGY",
              v: new AK(["=dgy", "~dumfries.*galloway"])
            }, {
              k: "DNB",
              v: new AK(["=dnb", "~dunbarton(shire)?"])
            }, {
              k: "DON",
              v: new AK(["=don", "~co.*donegal"])
            }, {
              k: "DOR",
              v: new AK(["=dor", "dorset"])
            }, {
              k: "DOW",
              v: new AK(["=dow", "~co.*down"])
            }, {
              k: "DUB",
              v: new AK(["=dub", "~co.*dublin"])
            }, {
              k: "DUR",
              v: new AK(["=dur", "~co.*durham"])
            }, {
              k: "ELN",
              v: new AK(["=eln", "~e.*lothian"])
            }, {
              k: "ERY",
              v: new AK(["=ery", "~e.*riding.*yorkshire"])
            }, {
              k: "ESS",
              v: new AK(["=ess", "essex"])
            }, {
              k: "FER",
              v: new AK(["=fer", "~co.*fermanagh"])
            }, {
              k: "FIF",
              v: new AK(["=fif", "fife"])
            }, {
              k: "FLN",
              v: new AK(["=fln", "flintshire"])
            }, {
              k: "GAL",
              v: new AK(["=gal", "~co.*galway"])
            }, {
              k: "GLA",
              v: new AK(["=gla", "glamorgan"])
            }, {
              k: "GLS",
              v: new AK(["=gls", "gloucestershire"])
            }, {
              k: "GMP",
              v: new AK(["=gmp", "grampian"])
            }, {
              k: "GNT",
              v: new AK(["=gnt", "gwent"])
            }, {
              k: "GSY",
              v: new AK(["=gsy", "guernse"])
            }, {
              k: "GTM",
              v: new AK(["=gtm", "greater manchester"])
            }, {
              k: "GWN",
              v: new AK(["=gwn", "gwynedd"])
            }, {
              k: "HAM",
              v: new AK(["=ham", "hampshire"])
            }, {
              k: "HEF",
              v: new AK(["=hef", "herefordshire"])
            }, {
              k: "HLD",
              v: new AK(["=hld", "highland"])
            }, {
              k: "HRT",
              v: new AK(["=hrt", "hertfordshire"])
            }, {
              k: "HUM",
              v: new AK(["=hum", "humberside"])
            }, {
              k: "HUN",
              v: new AK(["=hun", "huntingdonshire"])
            }, {
              k: "HWR",
              v: new AK(["=hwr", "hereford and worcester"])
            }, {
              k: "INV",
              v: new AK(["=inv", "inverness-shire"])
            }, {
              k: "IOW",
              v: new AK(["=iow", "~isle.*wight"])
            }, {
              k: "JSY",
              v: new AK(["=jsy", "jersey"])
            }, {
              k: "KCD",
              v: new AK(["=kcd", "kincardineshire"])
            }, {
              k: "KEN",
              v: new AK(["=ken", "kent"])
            }, {
              k: "KER",
              v: new AK(["=ker", "~co.*kerry"])
            }, {
              k: "KID",
              v: new AK(["=kid", "~co.*kildare"])
            }, {
              k: "KIK",
              v: new AK(["=kik", "~co.*kilkenny"])
            }, {
              k: "KKD",
              v: new AK(["=kkd", "kirkcudbrightshire"])
            }, {
              k: "KRS",
              v: new AK(["=krs", "kinross-shire"])
            }, {
              k: "LAN",
              v: new AK(["=lan", "lancashire"])
            }, {
              k: "LDY",
              v: new AK(["=ldy", "~co.*londonderry"])
            }, {
              k: "LEI",
              v: new AK(["=lei", "leicestershire"])
            }, {
              k: "LET",
              v: new AK(["=let", "~co.*leitrim"])
            }, {
              k: "LEX",
              v: new AK(["=lex", "~co.*laois"])
            }, {
              k: "LIM",
              v: new AK(["=lim", "~co.*limerick"])
            }, {
              k: "LIN",
              v: new AK(["=lin", "lincolnshire"])
            }, {
              k: "LKS",
              v: new AK(["=lks", "lanarkshire"])
            }, {
              k: "LOG",
              v: new AK(["=log", "~co.*longford"])
            }, {
              k: "LOU",
              v: new AK(["=lou", "~co.*louth"])
            }, {
              k: "LTN",
              v: new AK(["=ltn", "lothian"])
            }, {
              k: "MAY",
              v: new AK(["=may", "~co.*mayo"])
            }, {
              k: "MEA",
              v: new AK(["=mea", "~co.*meath"])
            }, {
              k: "MER",
              v: new AK(["=mer", "merionethshire"])
            }, {
              k: "MGM",
              v: new AK(["=mgm", "mid glamorgan"])
            }, {
              k: "MGY",
              v: new AK(["=mgy", "montgomeryshire"])
            }, {
              k: "MLN",
              v: new AK(["=mln", "midlothian"])
            }, {
              k: "MOG",
              v: new AK(["=mog", "~co.*monaghan"])
            }, {
              k: "MON",
              v: new AK(["=mon", "monmouthshire"])
            }, {
              k: "MOR",
              v: new AK(["=mor", "morayshire"])
            }, {
              k: "MSY",
              v: new AK(["=msy", "merseyside"])
            }, {
              k: "NAI",
              v: new AK(["=nai", "nairn"])
            }, {
              k: "NBL",
              v: new AK(["=nbl", "northumberland"])
            }, {
              k: "NFK",
              v: new AK(["=nfk", "norfolk"])
            }, {
              k: "NRY",
              v: new AK(["=nry", "~n.*riding.*yorkshire"])
            }, {
              k: "NTH",
              v: new AK(["=nth", "northamptonshire"])
            }, {
              k: "NTT",
              v: new AK(["=ntt", "nottinghamshire"])
            }, {
              k: "NYK",
              v: new AK(["=nyk", "~n.*yorkshire"])
            }, {
              k: "OFF",
              v: new AK(["=off", "~co.*offaly"])
            }, {
              k: "OKI",
              v: new AK(["=oki", "orkney"])
            }, {
              k: "OXF",
              v: new AK(["=oxf", "oxfordshire"])
            }, {
              k: "PEE",
              v: new AK(["=pee", "peebles-shire"])
            }, {
              k: "PEM",
              v: new AK(["=pem", "pembrokeshire"])
            }, {
              k: "PER",
              v: new AK(["=per", "perth"])
            }, {
              k: "POW",
              v: new AK(["=pow", "powys"])
            }, {
              k: "RAD",
              v: new AK(["=rad", "radnorshire"])
            }, {
              k: "RFW",
              v: new AK(["=rfw", "renfrewshire"])
            }, {
              k: "ROC",
              v: new AK(["=roc", "ross and cromarty"])
            }, {
              k: "ROS",
              v: new AK(["=ros", "~co.*roscommon"])
            }, {
              k: "ROX",
              v: new AK(["=rox", "roxburghshire"])
            }, {
              k: "RUT",
              v: new AK(["=rut", "rutland"])
            }, {
              k: "SAL",
              v: new AK(["=sal", "shropshire"])
            }, {
              k: "SEL",
              v: new AK(["=sel", "selkirkshire"])
            }, {
              k: "SFK",
              v: new AK(["=sfk", "suffolk"])
            }, {
              k: "SGM",
              v: new AK(["=sgm", "south glamorgan"])
            }, {
              k: "SHI",
              v: new AK(["=shi", "shetland"])
            }, {
              k: "SLI",
              v: new AK(["=sli", "~co.*sligo"])
            }, {
              k: "SOM",
              v: new AK(["=som", "somerset"])
            }, {
              k: "SRK",
              v: new AK(["=srk", "sark"])
            }, {
              k: "SRY",
              v: new AK(["=sry", "surrey"])
            }, {
              k: "SSX",
              v: new AK(["=ssx", "sussex"])
            }, {
              k: "STD",
              v: new AK(["=std", "strathclyde"])
            }, {
              k: "STI",
              v: new AK(["=sti", "stirlingshire"])
            }, {
              k: "STS",
              v: new AK(["=sts", "staffordshire"])
            }, {
              k: "SUT",
              v: new AK(["=sut", "sutherland"])
            }, {
              k: "SXE",
              v: new AK(["=sxe", "~e.*sussex"])
            }, {
              k: "SXW",
              v: new AK(["=sxw", "~w.*sussex"])
            }, {
              k: "SYK",
              v: new AK(["=syk", "south yorkshire"])
            }, {
              k: "TAY",
              v: new AK(["=tay", "tayside"])
            }, {
              k: "TIP",
              v: new AK(["=tip", "~co.*tipperary"])
            }, {
              k: "TWR",
              v: new AK(["=twr", "tyne and wear"])
            }, {
              k: "TYR",
              v: new AK(["=tyr", "~co.*tyrone"])
            }, {
              k: "WAR",
              v: new AK(["=war", "warwickshire"])
            }, {
              k: "WAT",
              v: new AK(["=wat", "~co.*waterford"])
            }, {
              k: "WEM",
              v: new AK(["=wem", "~co.*westmeath"])
            }, {
              k: "WES",
              v: new AK(["=wes", "westmorland"])
            }, {
              k: "WEX",
              v: new AK(["=wex", "~co.*wexford"])
            }, {
              k: "WGM",
              v: new AK(["=wgm", "~w.*glamorgan"])
            }, {
              k: "WIC",
              v: new AK(["=wic", "~co.*wicklow"])
            }, {
              k: "WIG",
              v: new AK(["=wig", "wigtownshire"])
            }, {
              k: "WIL",
              v: new AK(["=wil", "wiltshire"])
            }, {
              k: "WIS",
              v: new AK(["=wis", "~w.*isles"])
            }, {
              k: "WLN",
              v: new AK(["=wln", "~w.*lothian"])
            }, {
              k: "WMD",
              v: new AK(["=wmd", "~w.*midlands"])
            }, {
              k: "WOR",
              v: new AK(["=wor", "worcestershire"])
            }, {
              k: "WRY",
              v: new AK(["=wry", "~w.*riding.*yorkshire"])
            }, {
              k: "WYK",
              v: new AK(["=wyk", "~w.*yorkshire"])
            }, {
              k: "YKS",
              v: new AK(["=yks", "yorkshire"])
            }]);
            $pkg.TransformerMap = $makeMap($String.keyFor, []);
            AH();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["log"] = (function() {
    var $pkg = {},
      $init, A, E, B, C, D, F, G, Z, AA, AB, AC, AD, I, H, J;
    A = $packages["fmt"];
    E = $packages["github.com/gopherjs/gopherjs/nosync"];
    B = $packages["io"];
    C = $packages["os"];
    D = $packages["runtime"];
    F = $packages["time"];
    G = $pkg.Logger = $newType(0, $kindStruct, "log.Logger", true, "log", true, function(mu_, prefix_, flag_, out_, buf_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.mu = new E.Mutex.ptr(false);
        this.prefix = "";
        this.flag = 0;
        this.out = $ifaceNil;
        this.buf = Z.nil;
        return;
      }
      this.mu = mu_;
      this.prefix = prefix_;
      this.flag = flag_;
      this.out = out_;
      this.buf = buf_;
    });
    Z = $sliceType($Uint8);
    AA = $arrayType($Uint8, 20);
    AB = $ptrType(Z);
    AC = $sliceType($emptyInterface);
    AD = $ptrType(G);
    H = function(a, b, c) {
      var a, b, c;
      return new G.ptr(new E.Mutex.ptr(false), b, c, a, Z.nil);
    };
    $pkg.New = H;
    G.ptr.prototype.SetOutput = function(a) {
      var a, b, $deferred;
      var $err = null;
      try {
        $deferred = [];
        $deferred.index = $curGoroutine.deferStack.length;
        $curGoroutine.deferStack.push($deferred);
        b = this;
        b.mu.Lock();
        $deferred.push([$methodVal(b.mu, "Unlock"), []]);
        b.out = a;
      } catch (err) {
        $err = err;
      } finally {
        $callDeferred($deferred, $err);
      }
    };
    G.prototype.SetOutput = function(a) {
      return this.$val.SetOutput(a);
    };
    J = function(a, b, c) {
      var a, b, c, d, e, f, g;
      d = AA.zero();
      e = 19;
      while (true) {
        if (!(b >= 10 || c > 1)) {
          break;
        }
        c = c - (1) >> 0;
        g = (f = b / 10, (f === f && f !== 1 / 0 && f !== -1 / 0) ? f >> 0 : $throwRuntimeError("integer divide by zero"));
        ((e < 0 || e >= d.length) ? ($throwRuntimeError("index out of range"), undefined) : d[e] = ((((48 + b >> 0) - ($imul(g, 10)) >> 0) << 24 >>> 24)));
        e = e - (1) >> 0;
        b = g;
      }((e < 0 || e >= d.length) ? ($throwRuntimeError("index out of range"), undefined) : d[e] = (((48 + b >> 0) << 24 >>> 24)));
      a.$set($appendSlice(a.$get(), $subslice(new Z(d), e)));
    };
    G.ptr.prototype.formatHeader = function(a, b, c, d) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            e = this;
            a.$set($appendSlice(a.$get(), e.prefix));
            if (!(((e.flag & 7) === 0))) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            if (!(((e.flag & 32) === 0))) {
              F.Time.copy(b, $clone(b, F.Time).UTC());
            }
            if (!(((e.flag & 1) === 0))) {
              $s = 3;
              continue;
            }
            $s = 4;
            continue;
          case 3:
            g = $clone(b, F.Time).Date();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
            h = f[0];
            i = f[1];
            j = f[2];
            J(a, h, 4);
            a.$set($append(a.$get(), 47));
            J(a, ((i >> 0)), 2);
            a.$set($append(a.$get(), 47));
            J(a, j, 2);
            a.$set($append(a.$get(), 32));
          case 4:
            if (!(((e.flag & 6) === 0))) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            l = $clone(b, F.Time).Clock();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            k = l;
            m = k[0];
            n = k[1];
            o = k[2];
            J(a, m, 2);
            a.$set($append(a.$get(), 58));
            J(a, n, 2);
            a.$set($append(a.$get(), 58));
            J(a, o, 2);
            if (!(((e.flag & 4) === 0))) {
              a.$set($append(a.$get(), 46));
              J(a, (p = $clone(b, F.Time).Nanosecond() / 1000, (p === p && p !== 1 / 0 && p !== -1 / 0) ? p >> 0 : $throwRuntimeError("integer divide by zero")), 6);
            }
            a.$set($append(a.$get(), 32));
          case 7:
          case 2:
            if (!(((e.flag & 24) === 0))) {
              if (!(((e.flag & 16) === 0))) {
                q = c;
                r = c.length - 1 >> 0;
                while (true) {
                  if (!(r > 0)) {
                    break;
                  }
                  if (c.charCodeAt(r) === 47) {
                    q = $substring(c, (r + 1 >> 0));
                    break;
                  }
                  r = r - (1) >> 0;
                }
                c = q;
              }
              a.$set($appendSlice(a.$get(), c));
              a.$set($append(a.$get(), 58));
              J(a, d, -1);
              a.$set($appendSlice(a.$get(), ": "));
            }
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: G.ptr.prototype.formatHeader
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    G.prototype.formatHeader = function(a, b, c, d) {
      return this.$val.formatHeader(a, b, c, d);
    };
    G.ptr.prototype.Output = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, k, $s, $deferred, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $deferred = $f.$deferred;
        $r = $f.$r;
      }
      var $err = null;
      try {
        s: while (true) {
          switch ($s) {
            case 0:
              $deferred = [];
              $deferred.index = $curGoroutine.deferStack.length;
              $curGoroutine.deferStack.push($deferred);
              c = this;
              d = $clone(F.Now(), F.Time);
              e = "";
              f = 0;
              c.mu.Lock();
              $deferred.push([$methodVal(c.mu, "Unlock"), []]);
              if (!(((c.flag & 24) === 0))) {
                c.mu.Unlock();
                g = false;
                h = D.Caller(a);
                e = h[1];
                f = h[2];
                g = h[3];
                if (!g) {
                  e = "???";
                  f = 0;
                }
                c.mu.Lock();
              }
              c.buf = $subslice(c.buf, 0, 0);
              $r = c.formatHeader((c.$ptr_buf || (c.$ptr_buf = new AB(function() {
                return this.$target.buf;
              }, function($v) {
                this.$target.buf = $v;
              }, c))), $clone(d, F.Time), e, f);
              $s = 1;
            case 1:
              if ($c) {
                $c = false;
                $r = $r.$blk();
              }
              if ($r && $r.$blk !== undefined) {
                break s;
              }
              c.buf = $appendSlice(c.buf, b);
              if ((b.length === 0) || !((b.charCodeAt((b.length - 1 >> 0)) === 10))) {
                c.buf = $append(c.buf, 10);
              }
              j = c.out.Write(c.buf);
              $s = 2;
            case 2:
              if ($c) {
                $c = false;
                j = j.$blk();
              }
              if (j && j.$blk !== undefined) {
                break s;
              }
              i = j;
              k = i[1];
              $s = -1;
              return k;
          }
          return;
        }
      }
      catch (err) {
        $err = err;
        $s = -1;
        return $ifaceNil;
      } finally {
        $callDeferred($deferred, $err);
        if ($curGoroutine.asleep) {
          if ($f === undefined) {
            $f = {
              $blk: G.ptr.prototype.Output
            };
          }
          $f.a = a;
          $f.b = b;
          $f.c = c;
          $f.d = d;
          $f.e = e;
          $f.f = f;
          $f.g = g;
          $f.h = h;
          $f.i = i;
          $f.j = j;
          $f.k = k;
          $f.$s = $s;
          $f.$deferred = $deferred;
          $f.$r = $r;
          return $f;
        }
      }
    };
    G.prototype.Output = function(a, b) {
      return this.$val.Output(a, b);
    };
    G.ptr.prototype.Printf = function(a, b) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = A.Sprintf(a, b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            f = c.Output(2, e);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            f;
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: G.ptr.prototype.Printf
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    G.prototype.Printf = function(a, b) {
      return this.$val.Printf(a, b);
    };
    G.ptr.prototype.Print = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = A.Sprint(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
            e = b.Output(2, d);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            e;
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: G.ptr.prototype.Print
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    G.prototype.Print = function(a) {
      return this.$val.Print(a);
    };
    G.ptr.prototype.Println = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = A.Sprintln(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
            e = b.Output(2, d);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            e;
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: G.ptr.prototype.Println
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    G.prototype.Println = function(a) {
      return this.$val.Println(a);
    };
    G.ptr.prototype.Fatal = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = A.Sprint(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
            e = b.Output(2, d);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            e;
            C.Exit(1);
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: G.ptr.prototype.Fatal
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    G.prototype.Fatal = function(a) {
      return this.$val.Fatal(a);
    };
    G.ptr.prototype.Fatalf = function(a, b) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = A.Sprintf(a, b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            f = c.Output(2, e);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            f;
            C.Exit(1);
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: G.ptr.prototype.Fatalf
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    G.prototype.Fatalf = function(a, b) {
      return this.$val.Fatalf(a, b);
    };
    G.ptr.prototype.Fatalln = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = A.Sprintln(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
            e = b.Output(2, d);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            e;
            C.Exit(1);
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: G.ptr.prototype.Fatalln
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    G.prototype.Fatalln = function(a) {
      return this.$val.Fatalln(a);
    };
    G.ptr.prototype.Panic = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = A.Sprint(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
            e = b.Output(2, d);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            e;
            $panic(new $String(d));
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: G.ptr.prototype.Panic
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    G.prototype.Panic = function(a) {
      return this.$val.Panic(a);
    };
    G.ptr.prototype.Panicf = function(a, b) {
      var a, b, c, d, e, f, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = this;
            d = A.Sprintf(a, b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            e = d;
            f = c.Output(2, e);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            f;
            $panic(new $String(e));
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: G.ptr.prototype.Panicf
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    G.prototype.Panicf = function(a, b) {
      return this.$val.Panicf(a, b);
    };
    G.ptr.prototype.Panicln = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = this;
            c = A.Sprintln(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
            e = b.Output(2, d);
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            e;
            $panic(new $String(d));
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: G.ptr.prototype.Panicln
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    G.prototype.Panicln = function(a) {
      return this.$val.Panicln(a);
    };
    G.ptr.prototype.Flags = function() {
      var a, $deferred;
      var $err = null;
      try {
        $deferred = [];
        $deferred.index = $curGoroutine.deferStack.length;
        $curGoroutine.deferStack.push($deferred);
        a = this;
        a.mu.Lock();
        $deferred.push([$methodVal(a.mu, "Unlock"), []]);
        return a.flag;
      } catch (err) {
        $err = err;
        return 0;
      } finally {
        $callDeferred($deferred, $err);
      }
    };
    G.prototype.Flags = function() {
      return this.$val.Flags();
    };
    G.ptr.prototype.SetFlags = function(a) {
      var a, b, $deferred;
      var $err = null;
      try {
        $deferred = [];
        $deferred.index = $curGoroutine.deferStack.length;
        $curGoroutine.deferStack.push($deferred);
        b = this;
        b.mu.Lock();
        $deferred.push([$methodVal(b.mu, "Unlock"), []]);
        b.flag = a;
      } catch (err) {
        $err = err;
      } finally {
        $callDeferred($deferred, $err);
      }
    };
    G.prototype.SetFlags = function(a) {
      return this.$val.SetFlags(a);
    };
    G.ptr.prototype.Prefix = function() {
      var a, $deferred;
      var $err = null;
      try {
        $deferred = [];
        $deferred.index = $curGoroutine.deferStack.length;
        $curGoroutine.deferStack.push($deferred);
        a = this;
        a.mu.Lock();
        $deferred.push([$methodVal(a.mu, "Unlock"), []]);
        return a.prefix;
      } catch (err) {
        $err = err;
        return "";
      } finally {
        $callDeferred($deferred, $err);
      }
    };
    G.prototype.Prefix = function() {
      return this.$val.Prefix();
    };
    G.ptr.prototype.SetPrefix = function(a) {
      var a, b, $deferred;
      var $err = null;
      try {
        $deferred = [];
        $deferred.index = $curGoroutine.deferStack.length;
        $curGoroutine.deferStack.push($deferred);
        b = this;
        b.mu.Lock();
        $deferred.push([$methodVal(b.mu, "Unlock"), []]);
        b.prefix = a;
      } catch (err) {
        $err = err;
      } finally {
        $callDeferred($deferred, $err);
      }
    };
    G.prototype.SetPrefix = function(a) {
      return this.$val.SetPrefix(a);
    };
    AD.methods = [{
      prop: "SetOutput",
      name: "SetOutput",
      pkg: "",
      typ: $funcType([B.Writer], [], false)
    }, {
      prop: "formatHeader",
      name: "formatHeader",
      pkg: "log",
      typ: $funcType([AB, F.Time, $String, $Int], [], false)
    }, {
      prop: "Output",
      name: "Output",
      pkg: "",
      typ: $funcType([$Int, $String], [$error], false)
    }, {
      prop: "Printf",
      name: "Printf",
      pkg: "",
      typ: $funcType([$String, AC], [], true)
    }, {
      prop: "Print",
      name: "Print",
      pkg: "",
      typ: $funcType([AC], [], true)
    }, {
      prop: "Println",
      name: "Println",
      pkg: "",
      typ: $funcType([AC], [], true)
    }, {
      prop: "Fatal",
      name: "Fatal",
      pkg: "",
      typ: $funcType([AC], [], true)
    }, {
      prop: "Fatalf",
      name: "Fatalf",
      pkg: "",
      typ: $funcType([$String, AC], [], true)
    }, {
      prop: "Fatalln",
      name: "Fatalln",
      pkg: "",
      typ: $funcType([AC], [], true)
    }, {
      prop: "Panic",
      name: "Panic",
      pkg: "",
      typ: $funcType([AC], [], true)
    }, {
      prop: "Panicf",
      name: "Panicf",
      pkg: "",
      typ: $funcType([$String, AC], [], true)
    }, {
      prop: "Panicln",
      name: "Panicln",
      pkg: "",
      typ: $funcType([AC], [], true)
    }, {
      prop: "Flags",
      name: "Flags",
      pkg: "",
      typ: $funcType([], [$Int], false)
    }, {
      prop: "SetFlags",
      name: "SetFlags",
      pkg: "",
      typ: $funcType([$Int], [], false)
    }, {
      prop: "Prefix",
      name: "Prefix",
      pkg: "",
      typ: $funcType([], [$String], false)
    }, {
      prop: "SetPrefix",
      name: "SetPrefix",
      pkg: "",
      typ: $funcType([$String], [], false)
    }];
    G.init("log", [{
      prop: "mu",
      name: "mu",
      embedded: false,
      exported: false,
      typ: E.Mutex,
      tag: ""
    }, {
      prop: "prefix",
      name: "prefix",
      embedded: false,
      exported: false,
      typ: $String,
      tag: ""
    }, {
      prop: "flag",
      name: "flag",
      embedded: false,
      exported: false,
      typ: $Int,
      tag: ""
    }, {
      prop: "out",
      name: "out",
      embedded: false,
      exported: false,
      typ: B.Writer,
      tag: ""
    }, {
      prop: "buf",
      name: "buf",
      embedded: false,
      exported: false,
      typ: Z,
      tag: ""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = F.$init();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            I = H(C.Stderr, "", 3);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["go.1password.io/xplatform/vendor/go.1password.io/brain/brain"] = (function() {
    var $pkg = {},
      $init, N, L, A, B, C, F, G, D, I, J, H, M, K, E, BR, BS, a, b, V;
    N = $packages["encoding/json"];
    L = $packages["fmt"];
    A = $packages["go.1password.io/xplatform/vendor/go.1password.io/brain/clues"];
    B = $packages["go.1password.io/xplatform/vendor/go.1password.io/brain/ml"];
    C = $packages["go.1password.io/xplatform/vendor/go.1password.io/brain/model"];
    F = $packages["go.1password.io/xplatform/vendor/go.1password.io/brain/recipes"];
    G = $packages["go.1password.io/xplatform/vendor/go.1password.io/brain/transform"];
    D = $packages["log"];
    I = $packages["net/url"];
    J = $packages["regexp"];
    H = $packages["sort"];
    M = $packages["strconv"];
    K = $packages["strings"];
    E = $packages["time"];
    V = function() {
      $pkg.Now = (function() {
        return E.Now();
      });
    };
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = N.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = L.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = F.$init();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = G.$init();
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = I.$init();
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = J.$init();
            $s = 10;
          case 10:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = H.$init();
            $s = 11;
          case 11:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = M.$init();
            $s = 12;
          case 12:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = K.$init();
            $s = 13;
          case 13:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 14;
          case 14:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $pkg.Now = $throwNilPointerError;
            a = J.MustCompile("[.,\\/#!$%\\^&\\*;:{}=\\-_`~()?!0-9]");
            $s = 15;
          case 15:
            if ($c) {
              $c = false;
              a = a.$blk();
            }
            if (a && a.$blk !== undefined) {
              break s;
            }
            BR = a;
            b = J.MustCompile("([a-z])([A-Z])");
            $s = 16;
          case 16:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            BS = b;
            V();
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["go.1password.io/xplatform/api/spg"] = (function() {
    var $pkg = {},
      $init, B, A, E, F, C, D, G, H, K, W, X, Y, Z, AA, AB, AD, AE, AF, J, L, M, O, Q, R, S, T, U, V;
    B = $packages["encoding/json"];
    A = $packages["fmt"];
    E = $packages["go.1password.io/xplatform/api/errors"];
    F = $packages["go.1password.io/xplatform/api/response"];
    C = $packages["go.1password.io/xplatform/vendor/github.com/agilebits/spg"];
    D = $packages["go.1password.io/xplatform/vendor/go.1password.io/brain/brain"];
    G = $pkg.GeneratedPasswordToken = $newType(0, $kindStruct, "spg.GeneratedPasswordToken", true, "go.1password.io/xplatform/api/spg", true, function(Value_, Type_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Value = "";
        this.Type = 0;
        return;
      }
      this.Value = Value_;
      this.Type = Type_;
    });
    H = $pkg.GeneratedPassword = $newType(0, $kindStruct, "spg.GeneratedPassword", true, "go.1password.io/xplatform/api/spg", true, function(Value_, Entropy_, Strength_, Type_, Tokens_, TokenIndices_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.Value = "";
        this.Entropy = 0;
        this.Strength = 0;
        this.Type = "";
        this.Tokens = AA.nil;
        this.TokenIndices = C.Indices.nil;
        return;
      }
      this.Value = Value_;
      this.Entropy = Entropy_;
      this.Strength = Strength_;
      this.Type = Type_;
      this.Tokens = Tokens_;
      this.TokenIndices = TokenIndices_;
    });
    K = $pkg.GenPassOpts = $newType(0, $kindStruct, "spg.GenPassOpts", true, "go.1password.io/xplatform/api/spg", true, function(PasswordType_, Length_, RequireSymbols_, RequireDigits_, SeparatorType_, Capitalize_) {
      this.$val = this;
      if (arguments.length === 0) {
        this.PasswordType = "";
        this.Length = 0;
        this.RequireSymbols = false;
        this.RequireDigits = false;
        this.SeparatorType = "";
        this.Capitalize = false;
        return;
      }
      this.PasswordType = PasswordType_;
      this.Length = Length_;
      this.RequireSymbols = RequireSymbols_;
      this.RequireDigits = RequireDigits_;
      this.SeparatorType = SeparatorType_;
      this.Capitalize = Capitalize_;
    });
    W = $ptrType(C.WordList);
    X = $sliceType($Uint8);
    Y = $sliceType(F.ResponseOption);
    Z = $ptrType(H);
    AA = $sliceType(G);
    AB = $sliceType(C.Token);
    AD = $sliceType($emptyInterface);
    AE = $sliceType($String);
    AF = $sliceType($Int);
    L = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = [b];
            b[0] = new K.ptr("", 0, false, false, "", false);
            c = B.Unmarshal((new X($stringToBytes(a))), b[0]);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            d = c;
            if (!($interfaceIsEqual(d, $ifaceNil))) {
              $s = 2;
              continue;
            }
            $s = 3;
            continue;
          case 2:
            e = F.NewResponse($ifaceNil, new Y([F.WithError(d, -1)]));
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return e;
          case 3:
            g = M($clone(b[0], K));
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
            h = f[0];
            i = f[1];
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              $s = 6;
              continue;
            }
            $s = 7;
            continue;
          case 6:
            j = F.NewResponse($ifaceNil, new Y([F.WithError(i, -100)]));
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              j = j.$blk();
            }
            if (j && j.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return j;
          case 7:
            k = F.NewResponse(h, new Y([]));
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              k = k.$blk();
            }
            if (k && k.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return k;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: L
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.GeneratePasswordFromJSON = L;
    M = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        o = $f.o;
        p = $f.p;
        q = $f.q;
        r = $f.r;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = Q($clone(a, K));
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            b = c;
            d = b[0];
            e = b[1];
            if (!($interfaceIsEqual(e, $ifaceNil))) {
              $s = -1;
              return [Z.nil, e];
            }
            g = d.Generate();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            f = g;
            h = f[0];
            i = f[1];
            j = $clone(h, C.Password).String();
            k = $clone(h, C.Password).Tokens();
            l = h.Entropy;
            m = j;
            n = k;
            o = l;
            q = n.MakeIndices();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              q = q.$blk();
            }
            if (q && q.$blk !== undefined) {
              break s;
            }
            p = q;
            r = p[0];
            if (!($interfaceIsEqual(i, $ifaceNil))) {
              $s = -1;
              return [Z.nil, i];
            }
            $s = -1;
            return [new H.ptr(m, (o), S(o), a.PasswordType, V($subslice(new AB(n.$array), n.$offset, n.$offset + n.$length)), r), $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: M
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.o = o;
      $f.p = p;
      $f.q = q;
      $f.r = r;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.GeneratePassword = M;
    O = function(a, b) {
      var a, b, c, d, e, f, g, h, i, j, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = $ifaceNil;
            d = (e = J[$String.keyFor(a)], e !== undefined ? [e.v, true] : [W.nil, false]);
            f = d[1];
            if (!f) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            g = A.Errorf("%s is not a valid wordlist generator", new AD([new $String(a)]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              g = g.$blk();
            }
            if (g && g.$blk !== undefined) {
              break s;
            }
            c = g;
            $s = -1;
            return c;
          case 2:
            i = C.NewWordList(b);
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              i = i.$blk();
            }
            if (i && i.$blk !== undefined) {
              break s;
            }
            h = i;
            j = a;
            (J || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(j)] = {
              k: j,
              v: h[0]
            };
            c = h[1];
            if (!($interfaceIsEqual(c, $ifaceNil))) {
              c = c;
              $s = -1;
              return c;
            }
            c = $ifaceNil;
            $s = -1;
            return c;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: O
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.UseWordList = O;
    Q = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        f = $f.f;
        g = $f.g;
        h = $f.h;
        i = $f.i;
        j = $f.j;
        k = $f.k;
        l = $f.l;
        m = $f.m;
        n = $f.n;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = a.PasswordType;
            if (b === ("pin")) {
              $s = 2;
              continue;
            }
            if (b === ("characters")) {
              $s = 3;
              continue;
            }
            if (b === ("words")) {
              $s = 4;
              continue;
            }
            if (b === ("syllables")) {
              $s = 5;
              continue;
            }
            $s = 6;
            continue;
          case 2:
            c = new C.CharRecipe.ptr(0, 0, 0, 0, "", AE.nil, "", $ifaceNil, C.reqSets.nil);
            c.Length = a.Length;
            c.Allow = 4;
            $s = -1;
            return [c, $ifaceNil];
          case 3:
            d = new C.CharRecipe.ptr(0, 0, 0, 0, "", AE.nil, "", $ifaceNil, C.reqSets.nil);
            d.Length = a.Length;
            d.Allow = 3;
            d.Exclude = 16;
            if (a.RequireSymbols) {
              d.Require = (d.Require | (8)) >>> 0;
            }
            if (a.RequireDigits) {
              d.Require = (d.Require | (4)) >>> 0;
            }
            $s = -1;
            return [d, $ifaceNil];
          case 4:
            f = R(a.PasswordType);
            $s = 7;
          case 7:
            if ($c) {
              $c = false;
              f = f.$blk();
            }
            if (f && f.$blk !== undefined) {
              break s;
            }
            e = f;
            g = e[0];
            h = e[1];
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              $s = -1;
              return [$ifaceNil, h];
            }
            i = C.NewWLRecipe(a.Length, g);
            j = T(a.SeparatorType);
            i.SeparatorChar = j[0];
            i.SeparatorFunc = j[1];
            if (a.Capitalize) {
              i.Capitalize = "first";
            } else {
              i.Capitalize = "none";
            }
            $s = -1;
            return [i, $ifaceNil];
          case 5:
            l = R(a.PasswordType);
            $s = 8;
          case 8:
            if ($c) {
              $c = false;
              l = l.$blk();
            }
            if (l && l.$blk !== undefined) {
              break s;
            }
            k = l;
            g = k[0];
            h = k[1];
            if (!($interfaceIsEqual(h, $ifaceNil))) {
              $s = -1;
              return [$ifaceNil, h];
            }
            i = C.NewWLRecipe(a.Length, g);
            m = T(a.SeparatorType);
            i.SeparatorChar = m[0];
            i.SeparatorFunc = m[1];
            if (a.Capitalize) {
              i.Capitalize = "first";
            } else {
              i.Capitalize = "none";
            }
            $s = -1;
            return [i, $ifaceNil];
          case 6:
          case 1:
            n = A.Errorf("'%s' is not a type of generator", new AD([new $String(a.PasswordType)]));
            $s = 9;
          case 9:
            if ($c) {
              $c = false;
              n = n.$blk();
            }
            if (n && n.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [$ifaceNil, n];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: Q
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.f = f;
      $f.g = g;
      $f.h = h;
      $f.i = i;
      $f.j = j;
      $f.k = k;
      $f.l = l;
      $f.m = m;
      $f.n = n;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    R = function(a) {
      var a, b, c, d, e, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        e = $f.e;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = W.nil;
            if (a === "words") {
              b = (c = J[$String.keyFor("words")], c !== undefined ? c.v : W.nil);
            } else {
              b = (d = J[$String.keyFor("syllables")], d !== undefined ? d.v : W.nil);
            }
            if (b === W.nil) {
              $s = 1;
              continue;
            }
            $s = 2;
            continue;
          case 1:
            e = A.Errorf("Word list was not initialized", new AD([]));
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              e = e.$blk();
            }
            if (e && e.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return [W.nil, e];
          case 2:
            $s = -1;
            return [b, $ifaceNil];
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: R
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.e = e;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    S = function(a) {
      var a, b;
      b = (a) / 75;
      return U(100, new AF([((100 * b >> 0))]));
    };
    T = function(a) {
      var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p;
      b = "";
      c = $throwNilPointerError;
      d = a;
      if (d === ("digits")) {
        e = "";
        f = C.SFDigits1;
        b = e;
        c = f;
      } else if (d === ("spaces")) {
        g = " ";
        h = $throwNilPointerError;
        b = g;
        c = h;
      } else if (d === ("hyphens")) {
        i = "-";
        j = $throwNilPointerError;
        b = i;
        c = j;
      } else if (d === ("underscores")) {
        k = "_";
        l = $throwNilPointerError;
        b = k;
        c = l;
      } else if (d === ("periods")) {
        m = ".";
        n = $throwNilPointerError;
        b = m;
        c = n;
      } else if (d === ("none")) {
        o = "";
        p = $throwNilPointerError;
        b = o;
        c = p;
      }
      return [b, c];
    };
    U = function(a, b) {
      var a, b, c, d, e, f;
      c = a;
      d = b;
      e = 0;
      while (true) {
        if (!(e < d.$length)) {
          break;
        }
        f = ((e < 0 || e >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + e]);
        if (f < c) {
          c = f;
        }
        e++;
      }
      return c;
    };
    V = function(a) {
      var a, b, c, d, e, f;
      b = $makeSlice(AA, a.$length);
      c = a;
      d = 0;
      while (true) {
        if (!(d < c.$length)) {
          break;
        }
        e = d;
        f = $clone(((d < 0 || d >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + d]), C.Token);
        G.copy(((e < 0 || e >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + e]), new G.ptr($clone(f, C.Token).Value(), (($clone(f, C.Token).Type() >> 0))));
        d++;
      }
      return b;
    };
    G.init("", [{
      prop: "Value",
      name: "Value",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"value\""
    }, {
      prop: "Type",
      name: "Type",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: "json:\"type\""
    }]);
    H.init("", [{
      prop: "Value",
      name: "Value",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"value\""
    }, {
      prop: "Entropy",
      name: "Entropy",
      embedded: false,
      exported: true,
      typ: $Float32,
      tag: "json:\"pbe\""
    }, {
      prop: "Strength",
      name: "Strength",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: "json:\"ps\""
    }, {
      prop: "Type",
      name: "Type",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"type\""
    }, {
      prop: "Tokens",
      name: "Tokens",
      embedded: false,
      exported: true,
      typ: AA,
      tag: "json:\"tokens\""
    }, {
      prop: "TokenIndices",
      name: "TokenIndices",
      embedded: false,
      exported: true,
      typ: C.Indices,
      tag: "json:\"tokenIndices\""
    }]);
    K.init("", [{
      prop: "PasswordType",
      name: "PasswordType",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"passwordType\""
    }, {
      prop: "Length",
      name: "Length",
      embedded: false,
      exported: true,
      typ: $Int,
      tag: "json:\"length\""
    }, {
      prop: "RequireSymbols",
      name: "RequireSymbols",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: "json:\"requireSymbols\""
    }, {
      prop: "RequireDigits",
      name: "RequireDigits",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: "json:\"requireDigits\""
    }, {
      prop: "SeparatorType",
      name: "SeparatorType",
      embedded: false,
      exported: true,
      typ: $String,
      tag: "json:\"separatorType\""
    }, {
      prop: "Capitalize",
      name: "Capitalize",
      embedded: false,
      exported: true,
      typ: $Bool,
      tag: "json:\"capitalize\""
    }]);
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = B.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = A.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = E.$init();
            $s = 3;
          case 3:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = F.$init();
            $s = 4;
          case 4:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = C.$init();
            $s = 5;
          case 5:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = D.$init();
            $s = 6;
          case 6:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            J = $makeMap($String.keyFor, [{
              k: "words",
              v: W.nil
            }, {
              k: "syllables",
              v: W.nil
            }]);
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $packages["main"] = (function() {
    var $pkg = {},
      $init, A, B, F, G, H, C, D, E;
    A = $packages["github.com/gopherjs/gopherjs/js"];
    B = $packages["go.1password.io/xplatform/api/spg"];
    F = $sliceType($String);
    G = $funcType([$String, F], [], false);
    H = $funcType([$String], [$String], false);
    C = function(a) {
      var a, b, c, d, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        d = $f.d;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            b = B.GeneratePasswordFromJSON(a);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              b = b.$blk();
            }
            if (b && b.$blk !== undefined) {
              break s;
            }
            c = b;
            d = c.ToJSON();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              d = d.$blk();
            }
            if (d && d.$blk !== undefined) {
              break s;
            }
            $s = -1;
            return d;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: C
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.d = d;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    D = function(a, b) {
      var a, b, c, $s, $r;
      $s = 0;
      var $f, $c = false;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        a = $f.a;
        b = $f.b;
        c = $f.c;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            c = B.UseWordList(a, b);
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              c = c.$blk();
            }
            if (c && c.$blk !== undefined) {
              break s;
            }
            c;
            $s = -1;
            return;
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: D
        };
      }
      $f.a = a;
      $f.b = b;
      $f.c = c;
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    E = function() {
      var a, b;
      a = $global.spgReady;
      b = new($global.Object)();
      b.iw = $externalize(D, G);
      b.spg = $externalize(C, H);
      if (!(a === null)) {
        $global.spgReady(b);
      }
    };
    $init = function() {
      $pkg.$init = function() {};
      var $f, $c = false,
        $s = 0,
        $r;
      if (this !== undefined && this.$blk !== undefined) {
        $f = this;
        $c = true;
        $s = $f.$s;
        $r = $f.$r;
      }
      s: while (true) {
        switch ($s) {
          case 0:
            $r = A.$init();
            $s = 1;
          case 1:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            $r = B.$init();
            $s = 2;
          case 2:
            if ($c) {
              $c = false;
              $r = $r.$blk();
            }
            if ($r && $r.$blk !== undefined) {
              break s;
            }
            if ($pkg === $mainPkg) {
              E();
              $mainFinished = true;
            }
        }
        return;
      }
      if ($f === undefined) {
        $f = {
          $blk: $init
        };
      }
      $f.$s = $s;
      $f.$r = $r;
      return $f;
    };
    $pkg.$init = $init;
    return $pkg;
  })();
  $synthesizeMethods();
  var $mainPkg = $packages["main"];
  $packages["runtime"].$init();
  $go($mainPkg.$init, []);
  $flushConsole();
}).call(this);
